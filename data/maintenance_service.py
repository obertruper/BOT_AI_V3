#!/usr/bin/env python3
"""
–°–µ—Ä–≤–∏—Å –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
"""

import asyncio
from datetime import datetime, timedelta, timezone
from typing import Dict, List, Optional, Set
import asyncpg

from core.logger import setup_logger
from core.config.config_manager import ConfigManager
from core.exceptions import DataLoadError
from data.data_loader import DataLoader

logger = setup_logger("data_maintenance")


class DataMaintenanceService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
    """
    
    def __init__(self, config_manager: ConfigManager):
        self.config_manager = config_manager
        self.data_loader = DataLoader(config_manager)
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ config/system.yaml
        self.config = config_manager.get_config().get('data_maintenance', {})
        self.enabled = self.config.get('enabled', True)
        self.update_interval = self.config.get('update_interval_minutes', 5) * 60
        self.max_data_age = self.config.get('max_data_age_minutes', 60)
        self.parallel_symbols = self.config.get('parallel_load_symbols', 5)
        self.initial_load_days = self.config.get('initial_load_days', 90)
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        self.quality_config = self.config.get('quality_checks', {})
        self.check_gaps = self.quality_config.get('check_gaps', True)
        self.check_anomalies = self.quality_config.get('check_anomalies', True)
        self.min_completeness = self.quality_config.get('min_completeness', 0.95)
        
        # ML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        ml_config = config_manager.get_ml_config()
        self.symbols = ml_config.get('symbols', [])
        self.timeframe = '15m'  # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è ML
        self.exchange = 'bybit'
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self._running = False
        self._update_task = None
        self._last_check = {}
        self._data_quality_scores = {}
        
        logger.info(f"üìä DataMaintenanceService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è {len(self.symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        if not self.enabled:
            logger.warning("‚ö†Ô∏è DataMaintenanceService –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return
        
        await self.data_loader.initialize()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        await self._initial_data_check()
        
        logger.info("‚úÖ DataMaintenanceService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        if not self.enabled or self._running:
            return
        
        self._running = True
        self._update_task = asyncio.create_task(self._update_loop())
        logger.info("üöÄ DataMaintenanceService –∑–∞–ø—É—â–µ–Ω")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        self._running = False
        
        if self._update_task:
            self._update_task.cancel()
            try:
                await self._update_task
            except asyncio.CancelledError:
                pass
        
        logger.info("üõë DataMaintenanceService –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _initial_data_check(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ...")
        
        missing_symbols = []
        outdated_symbols = []
        
        for symbol in self.symbols:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
                data_info = await self._check_symbol_data(symbol)
                
                if data_info['status'] == 'missing':
                    missing_symbols.append(symbol)
                elif data_info['status'] == 'outdated':
                    outdated_symbols.append(symbol)
                elif data_info['status'] == 'incomplete':
                    logger.warning(
                        f"‚ö†Ô∏è {symbol}: –¥–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ "
                        f"(completeness: {data_info['completeness']:.1%})"
                    )
                
            except Exception as e:
                logger.error(f"‚ùå {symbol}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if missing_symbols:
            logger.warning(f"üî¥ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(missing_symbols)} —Å–∏–º–≤–æ–ª–æ–≤: {missing_symbols[:5]}...")
            logger.info("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å: python scripts/load_3months_data.py")
        
        if outdated_symbols:
            logger.warning(f"üü° –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(outdated_symbols)} —Å–∏–º–≤–æ–ª–æ–≤: {outdated_symbols[:5]}...")
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ
            await self._update_symbols(outdated_symbols)
        
        if not missing_symbols and not outdated_symbols:
            logger.info("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    
    async def _update_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        while self._running:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                await self._update_all_symbols()
                
                # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                await asyncio.sleep(self.update_interval)
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def _update_all_symbols(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        logger.debug("üîÑ –ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
        
        symbols_to_update = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        for symbol in self.symbols:
            if await self._needs_update(symbol):
                symbols_to_update.append(symbol)
        
        if symbols_to_update:
            logger.info(f"üì• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(symbols_to_update)} —Å–∏–º–≤–æ–ª–æ–≤...")
            await self._update_symbols(symbols_to_update)
        else:
            logger.debug("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã")
    
    async def _needs_update(self, symbol: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            last_check = self._last_check.get(symbol, datetime.min)
            if datetime.now() - last_check < timedelta(minutes=1):
                return False  # –ü—Ä–æ–≤–µ—Ä—è–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ
            
            self._last_check[symbol] = datetime.now()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω—ã—Ö
            data_info = await self._check_symbol_data(symbol)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if data_info['status'] in ['missing', 'outdated']:
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
            if data_info['completeness'] < self.min_completeness:
                logger.warning(
                    f"‚ö†Ô∏è {symbol}: –Ω–∏–∑–∫–∞—è –ø–æ–ª–Ω–æ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö "
                    f"({data_info['completeness']:.1%})"
                )
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå {symbol}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return True  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ª—É—á—à–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–∏—Ç—å
    
    async def _check_symbol_data(self, symbol: str) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        result = {
            'symbol': symbol,
            'status': 'ok',
            'last_timestamp': None,
            'age_minutes': 0,
            'completeness': 1.0,
            'gaps': 0
        }
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
            df = await self.data_loader.load_ohlcv(
                symbol=symbol,
                exchange=self.exchange,
                interval=self.timeframe,
                limit=100,
                save_to_db=False
            )
            
            if df is None or df.empty:
                result['status'] = 'missing'
                return result
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
            last_timestamp = df.index[-1]
            result['last_timestamp'] = last_timestamp
            
            now = datetime.now(timezone.utc)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ timestamp —É–∂–µ –∏–º–µ–µ—Ç timezone –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if hasattr(last_timestamp, 'tz') and last_timestamp.tz is not None:
                # –£–∂–µ timezone-aware, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if last_timestamp.tz != timezone.utc:
                    last_timestamp = last_timestamp.tz_convert('UTC')
            else:
                # Timestamp naive, –¥–æ–±–∞–≤–ª—è–µ–º UTC timezone
                if hasattr(last_timestamp, 'tz_localize'):
                    last_timestamp = last_timestamp.tz_localize('UTC')
            
            age = now - last_timestamp
            result['age_minutes'] = age.total_seconds() / 60
            
            if result['age_minutes'] > self.max_data_age:
                result['status'] = 'outdated'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö
            if self.check_gaps:
                expected_candles = len(df)
                actual_candles = len(df.dropna())
                result['completeness'] = actual_candles / expected_candles if expected_candles > 0 else 0
                
                if result['completeness'] < self.min_completeness:
                    result['status'] = 'incomplete'
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞
            self._data_quality_scores[symbol] = result['completeness']
            
        except Exception as e:
            logger.error(f"‚ùå {symbol}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            result['status'] = 'error'
            result['error'] = str(e)
        
        return result
    
    async def _update_symbols(self, symbols: List[str]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤"""
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        for i in range(0, len(symbols), self.parallel_symbols):
            batch = symbols[i:i + self.parallel_symbols]
            
            tasks = []
            for symbol in batch:
                task = self._update_single_symbol(symbol)
                tasks.append(task)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–∞—Ç—á–∞
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            successful = sum(1 for r in results if not isinstance(r, Exception))
            if successful < len(batch):
                logger.warning(
                    f"‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ {successful}/{len(batch)} —Å–∏–º–≤–æ–ª–æ–≤ –≤ –±–∞—Ç—á–µ"
                )
    
    async def _update_single_symbol(self, symbol: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
            result = await self.data_loader.update_latest_data(
                symbols=[symbol],
                interval_minutes=15,  # 15m
                exchange=self.exchange
            )
            
            updated_count = result.get(symbol, 0)
            if updated_count > 0:
                logger.info(f"‚úÖ {symbol}: –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} —Å–≤–µ—á–µ–π")
            else:
                logger.debug(f"‚ÑπÔ∏è {symbol}: –Ω–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            
            return updated_count
            
        except Exception as e:
            logger.error(f"‚ùå {symbol}: –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            raise
    
    def get_data_quality_score(self, symbol: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        return self._data_quality_scores.get(symbol, 0.0)
    
    async def check_data_continuity(self, symbol: str) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏
            df = await self.data_loader.load_ohlcv(
                symbol=symbol,
                exchange=self.exchange,
                interval=self.timeframe,
                limit=96  # 24 —á–∞—Å–∞ –¥–ª—è 15m –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            )
            
            if df is None or df.empty:
                return {'continuous': False, 'gaps': [], 'error': 'No data'}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏
            time_diff = df.index.to_series().diff()
            expected_interval = timedelta(minutes=15)
            
            gaps = []
            for i, diff in enumerate(time_diff[1:], 1):
                if diff > expected_interval * 1.5:
                    gaps.append({
                        'start': df.index[i-1],
                        'end': df.index[i],
                        'missing_candles': int(diff.total_seconds() / 900) - 1
                    })
            
            return {
                'continuous': len(gaps) == 0,
                'gaps': gaps,
                'total_missing': sum(g['missing_candles'] for g in gaps)
            }
            
        except Exception as e:
            logger.error(f"‚ùå {symbol}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏: {e}")
            return {'continuous': False, 'gaps': [], 'error': str(e)}
    
    async def force_update(self, symbols: Optional[List[str]] = None):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        symbols = symbols or self.symbols
        logger.info(f"üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤...")
        
        await self._update_symbols(symbols)
        
        logger.info("‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")