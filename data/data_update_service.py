"""
–°–ª—É–∂–±–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

from typing import List, Dict, Optional, Set
import asyncio
from datetime import datetime, timedelta
from dataclasses import dataclass
import logging
from decimal import Decimal

from database.connections.postgres import AsyncPGPool
from core.config.config_manager import ConfigManager

logger = logging.getLogger(__name__)


@dataclass
class DataGap:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–ø—É—Å–∫–µ –≤ –¥–∞–Ω–Ω—ã—Ö"""
    symbol: str
    exchange: str
    interval_minutes: int
    start_time: datetime
    end_time: datetime
    expected_candles: int


@dataclass
class DataStatus:
    """–°—Ç–∞—Ç—É—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
    symbol: str
    exchange: str
    interval_minutes: int
    latest_timestamp: Optional[datetime]
    candles_count: int
    is_sufficient_for_ml: bool  # –ú–∏–Ω–∏–º—É–º 96 —Å–≤–µ—á–µ–π
    gaps: List[DataGap]


class DataUpdateService:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, config_manager: ConfigManager):
        self.config_manager = config_manager
        self.config = config_manager.get_config()
        self.exchanges: Dict[str, any] = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        data_config = self.config.get('data_management', {})
        self.update_interval = data_config.get('update_interval', 60)  # –°–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
        self.min_candles_for_ml = data_config.get('min_candles_for_ml', 96)  # –ú–∏–Ω–∏–º—É–º –¥–ª—è ML
        self.max_gap_hours = data_config.get('max_gap_hours', 2)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫ –≤ —á–∞—Å–∞—Ö
        self.auto_update = data_config.get('auto_update', True)  # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ
        
        # –ö—ç—à —Å—Ç–∞—Ç—É—Å–æ–≤
        self.data_status_cache: Dict[str, DataStatus] = {}
        self.cache_ttl = 300  # 5 –º–∏–Ω—É—Ç
        self.last_cache_update = datetime.min
        
        # –ö–æ–Ω—Ç—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        self.is_running = False
        self.update_task: Optional[asyncio.Task] = None
        
        logger.info("DataUpdateService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    async def start(self) -> None:
        """–ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        if self.is_running:
            logger.warning("DataUpdateService —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        if not self.auto_update:
            logger.info("DataUpdateService –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (auto_update=false)")
            return
            
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ DataUpdateService (–∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ %.1f –º–∏–Ω—É—Ç)...", self.update_interval / 60)
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∏—Ä–∂–∞–º
            await self._initialize_exchanges()
            
            # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            await self._initial_data_check()
            
            # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.is_running = True
            self.update_task = asyncio.create_task(self._update_loop())
            
            logger.info("DataUpdateService —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ DataUpdateService: {e}")
            raise
            
    async def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª—É–∂–±—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        if not self.is_running:
            return
            
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ DataUpdateService...")
        
        self.is_running = False
        
        if self.update_task:
            self.update_task.cancel()
            try:
                await self.update_task
            except asyncio.CancelledError:
                pass
                
        # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∏—Ä–∂–∞–º
        for exchange in self.exchanges.values():
            try:
                await exchange.close()
            except:
                pass
                
        logger.info("DataUpdateService –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    async def get_data_status(self, force_refresh: bool = False) -> Dict[str, DataStatus]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
        if (
            not force_refresh and 
            self.data_status_cache and
            (datetime.now() - self.last_cache_update).total_seconds() < self.cache_ttl
        ):
            return self.data_status_cache
            
        logger.debug("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        symbols = await self._get_active_symbols()
        
        # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        status_map = {}
        
        for symbol_config in symbols:
            symbol = symbol_config['symbol']
            exchange = symbol_config['exchange']
            interval_minutes = symbol_config['interval_minutes']
            
            status = await self._analyze_symbol_data(
                symbol, 
                exchange, 
                interval_minutes
            )
            
            key = f"{exchange}_{symbol}_{interval_minutes}"
            status_map[key] = status
            
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
        self.data_status_cache = status_map
        self.last_cache_update = datetime.now()
        
        return status_map
        
    async def _initialize_exchanges(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∏—Ä–∂–∞–º"""
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∏—Ä–∂
        active_exchanges = await self._get_active_exchanges()
        
        for exchange_name in active_exchanges:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º ExchangeFactory –∏–∑ —Å–∏—Å—Ç–µ–º—ã
                from exchanges.factory import ExchangeFactory
                import os
                factory = ExchangeFactory()
                
                # –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
                api_key = os.getenv(f"{exchange_name.upper()}_API_KEY")
                api_secret = os.getenv(f"{exchange_name.upper()}_API_SECRET")
                
                if not api_key or not api_secret:
                    logger.warning(f"API –∫–ª—é—á–∏ –¥–ª—è {exchange_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    continue
                    
                exchange = factory.create_client(
                    exchange_type=exchange_name,
                    api_key=api_key,
                    api_secret=api_secret,
                    sandbox=False
                )
                
                self.exchanges[exchange_name] = exchange
                logger.info(f"–ë–∏—Ä–∂–∞ {exchange_name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∏—Ä–∂–∏ {exchange_name}: {e}")
                
    async def _initial_data_check(self) -> None:
        """–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–ø—É—Å–∫–æ–≤"""
        
        logger.info("–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–∞–Ω–Ω—ã—Ö
        data_statuses = await self.get_data_status(force_refresh=True)
        
        # –ü–æ–∏—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–ø—É—Å–∫–æ–≤
        critical_gaps = []
        
        for status in data_statuses.values():
            # –°–∏–º–≤–æ–ª—ã –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ML
            if not status.is_sufficient_for_ml:
                gap = DataGap(
                    symbol=status.symbol,
                    exchange=status.exchange,
                    interval_minutes=status.interval_minutes,
                    start_time=datetime.now() - timedelta(
                        minutes=self.min_candles_for_ml * status.interval_minutes
                    ),
                    end_time=datetime.now(),
                    expected_candles=self.min_candles_for_ml
                )
                critical_gaps.append(gap)
                
            # –ë–æ–ª—å—à–∏–µ –ø—Ä–æ–ø—É—Å–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö
            for gap in status.gaps:
                if gap.expected_candles > (self.max_gap_hours * 60 // gap.interval_minutes):
                    critical_gaps.append(gap)
                    
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–ø—É—Å–∫–æ–≤
        if critical_gaps:
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(critical_gaps)} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–ø—É—Å–∫–æ–≤, –∑–∞–ø–æ–ª–Ω—è–µ–º...")
            
            for gap in critical_gaps:
                try:
                    await self._fill_data_gap(gap)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞ –¥–ª—è {gap.symbol}: {e}")
        else:
            logger.info("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–ø—É—Å–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
    async def _update_loop(self) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        
        while self.is_running:
            try:
                await self._update_recent_data()
                await asyncio.sleep(self.update_interval)
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                await asyncio.sleep(30)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                
    async def _update_recent_data(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        
        logger.debug("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        symbols = await self._get_active_symbols()
        
        update_tasks = []
        
        for symbol_config in symbols:
            task = asyncio.create_task(
                self._update_symbol_data(
                    symbol_config['symbol'],
                    symbol_config['exchange'], 
                    symbol_config['interval_minutes']
                )
            )
            update_tasks.append(task)
            
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if update_tasks:
            results = await asyncio.gather(*update_tasks, return_exceptions=True)
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
            for i, result in enumerate(results):
                if isinstance(result, Exception):
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {symbols[i]['symbol']}: {result}")
            
    async def _update_symbol_data(
        self,
        symbol: str,
        exchange_name: str,
        interval_minutes: int
    ) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        
        try:
            exchange = self.exchanges.get(exchange_name)
            if not exchange:
                logger.warning(f"–ë–∏—Ä–∂–∞ {exchange_name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return
                
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            latest_time = await self._get_latest_data_time(
                symbol, 
                exchange_name, 
                interval_minutes
            )
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if latest_time:
                start_time = latest_time + timedelta(minutes=interval_minutes)
            else:
                # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö - –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 96 —Å–≤–µ—á–µ–π
                start_time = datetime.now() - timedelta(
                    minutes=self.min_candles_for_ml * interval_minutes
                )
                
            end_time = datetime.now()
            
            if start_time >= end_time:
                return  # –ù–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                
            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ –±–∏—Ä–∂–∏
            candles = await exchange.get_candles(
                symbol=symbol,
                interval_minutes=interval_minutes,
                start_time=start_time,
                end_time=end_time,
                limit=1000
            )
            
            if candles:
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                await self._save_candles(candles, exchange_name)
                
                logger.debug(
                    f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ {symbol}: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(candles)} —Å–≤–µ—á–µ–π "
                    f"({start_time.strftime('%Y-%m-%d %H:%M')} - {end_time.strftime('%Y-%m-%d %H:%M')})"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {symbol} –Ω–∞ {exchange_name}: {e}")
            
    async def _analyze_symbol_data(
        self,
        symbol: str,
        exchange: str,
        interval_minutes: int
    ) -> DataStatus:
        """–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        
        try:
            # –ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö
            query = """
            SELECT 
                COUNT(*) as candles_count,
                MAX(datetime) as latest_timestamp,
                MIN(datetime) as earliest_timestamp
            FROM raw_market_data 
            WHERE symbol = $1 
                AND exchange = $2 
                AND interval_minutes = $3
            """
            
            pool = await AsyncPGPool.get_pool()
            result = await pool.fetchrow(
                query,
                symbol,
                exchange, 
                interval_minutes
            )
            
            if not result or not result['candles_count']:
                # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º–≤–æ–ª–∞
                return DataStatus(
                    symbol=symbol,
                    exchange=exchange,
                    interval_minutes=interval_minutes,
                    latest_timestamp=None,
                    candles_count=0,
                    is_sufficient_for_ml=False,
                    gaps=[]
                )
                
            candles_count = result['candles_count'] or 0
            latest_timestamp = result['latest_timestamp']
            
            # –ü–æ–∏—Å–∫ –ø—Ä–æ–ø—É—Å–∫–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
            gaps = []
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
            if latest_timestamp:
                time_since_last = (datetime.now(latest_timestamp.tzinfo) - latest_timestamp).total_seconds() / 60
                expected_missing = int(time_since_last // interval_minutes)
                
                if expected_missing > 1:  # –ü—Ä–æ–ø—É—â–µ–Ω–æ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å–≤–µ—á–∏
                    gaps.append(DataGap(
                        symbol=symbol,
                        exchange=exchange,
                        interval_minutes=interval_minutes,
                        start_time=latest_timestamp,
                        end_time=datetime.now(),
                        expected_candles=expected_missing
                    ))
            
            return DataStatus(
                symbol=symbol,
                exchange=exchange,
                interval_minutes=interval_minutes,
                latest_timestamp=latest_timestamp,
                candles_count=candles_count,
                is_sufficient_for_ml=candles_count >= self.min_candles_for_ml,
                gaps=gaps
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            return DataStatus(
                symbol=symbol,
                exchange=exchange,
                interval_minutes=interval_minutes,
                latest_timestamp=None,
                candles_count=0,
                is_sufficient_for_ml=False,
                gaps=[]
            )
        
    async def _fill_data_gap(self, gap: DataGap) -> None:
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö"""
        
        logger.info(
            f"–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞ –¥–ª—è {gap.symbol}: "
            f"{gap.start_time.strftime('%Y-%m-%d %H:%M')} - {gap.end_time.strftime('%Y-%m-%d %H:%M')} "
            f"(~{gap.expected_candles} —Å–≤–µ—á–µ–π)"
        )
        
        exchange = self.exchanges.get(gap.exchange)
        if not exchange:
            logger.error(f"–ë–∏—Ä–∂–∞ {gap.exchange} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
            
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞
            candles = await exchange.get_candles(
                symbol=gap.symbol,
                interval_minutes=gap.interval_minutes,
                start_time=gap.start_time,
                end_time=gap.end_time,
                limit=min(gap.expected_candles, 1000)
            )
            
            if candles:
                await self._save_candles(candles, gap.exchange)
                logger.info(f"–ü—Ä–æ–ø—É—Å–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(candles)} —Å–≤–µ—á–µ–π –¥–ª—è {gap.symbol}")
            else:
                logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞ {gap.symbol}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞ –¥–ª—è {gap.symbol}: {e}")
            
    async def _save_candles(self, candles: List, exchange_name: str) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        
        pool = await AsyncPGPool.get_pool()
        for candle in candles:
            try:
                await pool.execute("""
                    INSERT INTO raw_market_data 
                    (symbol, timestamp, datetime, open, high, low, close, volume, 
                     interval_minutes, exchange, turnover)
                    VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
                    ON CONFLICT (symbol, timestamp, interval_minutes, exchange) DO UPDATE
                    SET open = EXCLUDED.open,
                        high = EXCLUDED.high,
                        low = EXCLUDED.low,
                        close = EXCLUDED.close,
                        volume = EXCLUDED.volume,
                        turnover = EXCLUDED.turnover,
                        updated_at = NOW()
                """, 
                candle.symbol, 
                int(candle.timestamp.timestamp()),
                candle.timestamp,
                Decimal(str(candle.open_price)),
                Decimal(str(candle.high_price)),
                Decimal(str(candle.low_price)),
                Decimal(str(candle.close_price)),
                Decimal(str(candle.volume)),
                candle.interval_minutes,
                exchange_name,
                Decimal(str(getattr(candle, 'turnover', 0)))
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤–µ—á–∏: {e}")
                
    async def _get_active_symbols(self) -> List[Dict[str, any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        symbols = []
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–ø–∞—Ä—ã
        trading_pairs = self.config.get('trading_pairs', [
            'BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'ADAUSDT', 'SOLUSDT',
            'XRPUSDT', 'DOGEUSDT', 'DOTUSDT', 'LINKUSDT'
        ])
        
        # –î–ª—è ML –∏—Å–ø–æ–ª—å–∑—É–µ–º 15-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏
        for symbol in trading_pairs:
            symbols.append({
                'symbol': symbol,
                'exchange': 'bybit',
                'interval_minutes': 15
            })
                
        return symbols
        
    async def _get_active_exchanges(self) -> Set[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∏—Ä–∂"""
        # –ü–æ–∫–∞ —Ç–æ–ª—å–∫–æ Bybit
        return {'bybit'}
        
    async def _get_latest_data_time(
        self,
        symbol: str,
        exchange: str,
        interval_minutes: int
    ) -> Optional[datetime]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        
        pool = await AsyncPGPool.get_pool()
        result = await pool.fetchval("""
            SELECT MAX(datetime) 
            FROM raw_market_data 
            WHERE symbol = $1 
                AND exchange = $2 
                AND interval_minutes = $3
        """, symbol, exchange, interval_minutes)
        
        return result