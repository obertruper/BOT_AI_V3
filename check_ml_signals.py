#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ML —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤
"""

import asyncio
from datetime import datetime

from dotenv import load_dotenv

load_dotenv()


async def check_ml_signals():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ ML —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –ë–î"""
    print("=" * 60)
    print("üîç –ü–†–û–í–ï–†–ö–ê ML –°–ò–ì–ù–ê–õ–û–í –ò –û–†–î–ï–†–û–í")
    print(f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)

    try:
        from sqlalchemy import desc, func, select

        from database.connections import get_async_db
        from database.models.base_models import Order, Trade
        from database.models.signal import Signal

        async with get_async_db() as db:
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
            print("\nüìä –°–ò–ì–ù–ê–õ–´:")

            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            signal_count = await db.scalar(select(func.count(Signal.id)))
            print(f"–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –ë–î: {signal_count or 0}")

            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–∏–≥–Ω–∞–ª–æ–≤
            result = await db.execute(
                select(Signal).order_by(desc(Signal.created_at)).limit(10)
            )
            recent_signals = result.scalars().all()

            if recent_signals:
                print("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã:")
                for sig in recent_signals[:5]:
                    strength_str = f"{sig.strength:.2f}" if sig.strength else "N/A"
                    confidence_str = (
                        f"{sig.confidence:.0f}%" if sig.confidence else "N/A"
                    )
                    print(
                        f"  {sig.created_at.strftime('%H:%M:%S')} | "
                        f"{sig.symbol} | {sig.signal_type.value} | "
                        f"–°–∏–ª–∞: {strength_str} | "
                        f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence_str}"
                    )
            else:
                print("‚ùå –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –ë–î")

            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤
            print("\nüìã –û–†–î–ï–†–ê:")

            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            order_count = await db.scalar(select(func.count(Order.id)))
            print(f"–í—Å–µ–≥–æ –æ—Ä–¥–µ—Ä–æ–≤ –≤ –ë–î: {order_count or 0}")

            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
            result = await db.execute(
                select(Order).order_by(desc(Order.created_at)).limit(10)
            )
            recent_orders = result.scalars().all()

            if recent_orders:
                print("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞:")
                for order in recent_orders[:5]:
                    print(
                        f"  {order.created_at.strftime('%H:%M:%S')} | "
                        f"{order.symbol} | {order.side.value} | "
                        f"{order.quantity} @ {order.price or 'MARKET'} | "
                        f"–°—Ç–∞—Ç—É—Å: {order.status.value}"
                    )
            else:
                print("‚ùå –ù–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤ –≤ –ë–î")

            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–¥–µ–ª–æ–∫
            print("\nüí∞ –°–î–ï–õ–ö–ò:")

            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            trade_count = await db.scalar(select(func.count(Trade.id)))
            print(f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫ –≤ –ë–î: {trade_count or 0}")

            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏
            result = await db.execute(
                select(Trade).order_by(desc(Trade.created_at)).limit(5)
            )
            recent_trades = result.scalars().all()

            if recent_trades:
                print("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏:")
                for trade in recent_trades:
                    pnl_str = (
                        f"+${trade.pnl:.2f}"
                        if trade.pnl > 0
                        else f"-${abs(trade.pnl):.2f}"
                        if trade.pnl
                        else "N/A"
                    )
                    print(
                        f"  {trade.created_at.strftime('%H:%M:%S')} | "
                        f"{trade.symbol} | {trade.side.value} | "
                        f"{trade.quantity} @ {trade.price} | "
                        f"PnL: {pnl_str}"
                    )
            else:
                print("‚ùå –ù–µ—Ç —Å–¥–µ–ª–æ–∫ –≤ –ë–î")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()


async def test_ml_signal_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ ML —Å–∏–≥–Ω–∞–ª–∞"""
    print("\n" + "=" * 60)
    print("üß™ –¢–ï–°–¢ –ì–ï–ù–ï–†–ê–¶–ò–ò ML –°–ò–ì–ù–ê–õ–ê")
    print("=" * 60)

    try:
        from core.config.config_manager import ConfigManager
        from ml.ml_manager import MLManager
        from ml.ml_signal_processor import MLSignalProcessor

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        print("\nüîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        config_manager = ConfigManager()
        config = config_manager.get_config()

        ml_manager = MLManager(config)
        await ml_manager.initialize()
        print("‚úÖ ML Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        ml_signal_processor = MLSignalProcessor(
            ml_manager=ml_manager, config=config, config_manager=config_manager
        )
        await ml_signal_processor.initialize()
        print("‚úÖ ML Signal Processor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
        print("\nüéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è BTCUSDT...")
        signal = await ml_signal_processor.process_realtime_signal(
            symbol="BTCUSDT", exchange="bybit"
        )

        if signal:
            print("‚úÖ –°–∏–≥–Ω–∞–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
            print(f"   –¢–∏–ø: {signal.signal_type.value}")
            print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.1f}%")
            print(f"   –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {signal.strategy_name}")
            if signal.entry_price:
                print(f"   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${signal.entry_price:.2f}")
            if signal.stop_loss:
                print(f"   Stop Loss: ${signal.stop_loss:.2f}")
            if signal.take_profit:
                print(f"   Take Profit: ${signal.take_profit:.2f}")
        else:
            print("‚ö†Ô∏è –°–∏–≥–Ω–∞–ª –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –ë–î
    await check_ml_signals()

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    print("\n" + "-" * 60)
    response = input("\n–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π ML —Å–∏–≥–Ω–∞–ª? (y/N): ")
    if response.lower() == "y":
        await test_ml_signal_generation()

    print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


if __name__ == "__main__":
    asyncio.run(main())
