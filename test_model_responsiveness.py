#!/usr/bin/env python3
"""
–¢–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –ª–∏ –º–æ–¥–µ–ª—å –Ω–∞ —Ä–∞–∑–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
"""

import asyncio

import numpy as np

from core.logger import setup_logger
from ml.ml_manager import MLManager

logger = setup_logger("model_responsiveness_test")


async def test_model_responsiveness():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–æ–¥–µ–ª—å –¥–∞–µ—Ç –†–ê–ó–ù–´–ï –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –†–ê–ó–ù–´–• –≤—Ö–æ–¥–æ–≤
    """

    logger.info("=" * 60)
    logger.info("üî¨ –¢–ï–°–¢ –û–¢–ó–´–í–ß–ò–í–û–°–¢–ò –ú–û–î–ï–õ–ò")
    logger.info("=" * 60)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    config = {"ml": {"model": {"device": "cpu"}, "model_directory": "models/saved"}}

    ml_manager = MLManager(config)
    await ml_manager.initialize()

    # –¢–µ—Å—Ç 1: –í—Å–µ –Ω—É–ª–∏
    logger.info("\nüìä –¢–µ—Å—Ç 1: –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ = –ù–£–õ–ò")
    features_zeros = np.zeros((96, 240))
    pred_zeros = await ml_manager.predict(features_zeros)
    signal_zeros = pred_zeros.get("signal_type")
    conf_zeros = pred_zeros.get("confidence", 0)
    raw_zeros = pred_zeros.get("predictions", {}).get("returns_15m", 0)
    logger.info(
        f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {signal_zeros}, confidence: {conf_zeros:.3f}, return_15m: {raw_zeros:.6f}"
    )

    # –¢–µ—Å—Ç 2: –í—Å–µ –µ–¥–∏–Ω–∏—Ü—ã
    logger.info("\nüìä –¢–µ—Å—Ç 2: –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ = –ï–î–ò–ù–ò–¶–´")
    features_ones = np.ones((96, 240))
    pred_ones = await ml_manager.predict(features_ones)
    signal_ones = pred_ones.get("signal_type")
    conf_ones = pred_ones.get("confidence", 0)
    raw_ones = pred_ones.get("predictions", {}).get("returns_15m", 0)
    logger.info(
        f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {signal_ones}, confidence: {conf_ones:.3f}, return_15m: {raw_ones:.6f}"
    )

    # –¢–µ—Å—Ç 3: –°–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (seed=42)
    logger.info("\nüìä –¢–µ—Å—Ç 3: –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ = RANDOM (seed=42)")
    np.random.seed(42)
    features_random1 = np.random.randn(96, 240)
    pred_random1 = await ml_manager.predict(features_random1)
    signal_random1 = pred_random1.get("signal_type")
    conf_random1 = pred_random1.get("confidence", 0)
    raw_random1 = pred_random1.get("predictions", {}).get("returns_15m", 0)
    logger.info(
        f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {signal_random1}, confidence: {conf_random1:.3f}, return_15m: {raw_random1:.6f}"
    )

    # –¢–µ—Å—Ç 4: –î—Ä—É–≥–∏–µ —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (seed=123)
    logger.info("\nüìä –¢–µ—Å—Ç 4: –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ = RANDOM (seed=123)")
    np.random.seed(123)
    features_random2 = np.random.randn(96, 240)
    pred_random2 = await ml_manager.predict(features_random2)
    signal_random2 = pred_random2.get("signal_type")
    conf_random2 = pred_random2.get("confidence", 0)
    raw_random2 = pred_random2.get("predictions", {}).get("returns_15m", 0)
    logger.info(
        f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {signal_random2}, confidence: {conf_random2:.3f}, return_15m: {raw_random2:.6f}"
    )

    # –¢–µ—Å—Ç 5: –°–∏–ª—å–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
    logger.info("\nüìä –¢–µ—Å—Ç 5: –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ = –í–û–°–•–û–î–Ø–©–ò–ô –¢–†–ï–ù–î")
    features_up = np.random.randn(96, 240) * 0.1
    trend_up = np.linspace(0, 2, 96).reshape(-1, 1)
    features_up[:, :50] += trend_up  # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥ –≤ –ø–µ—Ä–≤—ã–µ 50 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    pred_up = await ml_manager.predict(features_up)
    signal_up = pred_up.get("signal_type")
    conf_up = pred_up.get("confidence", 0)
    raw_up = pred_up.get("predictions", {}).get("returns_15m", 0)
    logger.info(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {signal_up}, confidence: {conf_up:.3f}, return_15m: {raw_up:.6f}")

    # –¢–µ—Å—Ç 6: –°–∏–ª—å–Ω—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
    logger.info("\nüìä –¢–µ—Å—Ç 6: –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ = –ù–ò–°–•–û–î–Ø–©–ò–ô –¢–†–ï–ù–î")
    features_down = np.random.randn(96, 240) * 0.1
    trend_down = np.linspace(0, -2, 96).reshape(-1, 1)
    features_down[:, :50] += trend_down  # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥ –≤ –ø–µ—Ä–≤—ã–µ 50 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    pred_down = await ml_manager.predict(features_down)
    signal_down = pred_down.get("signal_type")
    conf_down = pred_down.get("confidence", 0)
    raw_down = pred_down.get("predictions", {}).get("returns_15m", 0)
    logger.info(
        f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {signal_down}, confidence: {conf_down:.3f}, return_15m: {raw_down:.6f}"
    )

    # –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
    logger.info("\n" + "=" * 60)
    logger.info("üìä –ê–ù–ê–õ–ò–ó –û–¢–ó–´–í–ß–ò–í–û–°–¢–ò")
    logger.info("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    all_signals = [
        signal_zeros,
        signal_ones,
        signal_random1,
        signal_random2,
        signal_up,
        signal_down,
    ]
    all_confidences = [
        conf_zeros,
        conf_ones,
        conf_random1,
        conf_random2,
        conf_up,
        conf_down,
    ]
    all_returns = [raw_zeros, raw_ones, raw_random1, raw_random2, raw_up, raw_down]

    unique_signals = len(set(all_signals))
    unique_confidences = len(set(all_confidences))
    confidence_variance = np.var(all_confidences)
    returns_variance = np.var(all_returns)

    logger.info(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤: {unique_signals} –∏–∑ 6")
    logger.info(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π confidence: {unique_confidences} –∏–∑ 6")
    logger.info(f"–í–∞—Ä–∏–∞—Ü–∏—è confidence: {confidence_variance:.6f}")
    logger.info(f"–í–∞—Ä–∏–∞—Ü–∏—è returns: {returns_variance:.9f}")

    # –û—Ü–µ–Ω–∫–∞
    if unique_signals == 1 and confidence_variance < 0.001:
        logger.critical("‚ùå –ú–û–î–ï–õ–¨ –ù–ï –†–ê–ë–û–¢–ê–ï–¢! –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è!")
        logger.critical("   –ü—Ä–æ–±–ª–µ–º–∞ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–æ–π –≤–µ—Å–æ–≤")
    elif unique_signals <= 2:
        logger.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª—å —Å–ª–∞–±–æ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        logger.warning("   –í–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—É—á–µ–Ω–∏–µ–º –∏–ª–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π")
    else:
        logger.info("‚úÖ –ú–æ–¥–µ–ª—å —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Ä–∞–∑–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É
        if signal_up == "LONG" and signal_down == "SHORT":
            logger.info("‚úÖ –õ–æ–≥–∏–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ (—Ç—Ä–µ–Ω–¥ –≤–≤–µ—Ä—Ö ‚Üí LONG, —Ç—Ä–µ–Ω–¥ –≤–Ω–∏–∑ ‚Üí SHORT)")
        elif signal_up == "SHORT" and signal_down == "LONG":
            logger.warning("‚ö†Ô∏è –õ–æ–≥–∏–∫–∞ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ (—Ç—Ä–µ–Ω–¥ –≤–≤–µ—Ä—Ö ‚Üí SHORT, —Ç—Ä–µ–Ω–¥ –≤–Ω–∏–∑ ‚Üí LONG)")
        else:
            logger.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ —Ä–∞–∑–ª–∏—á–∞–µ—Ç —Ç—Ä–µ–Ω–¥—ã")

    logger.info("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")


if __name__ == "__main__":
    asyncio.run(test_model_responsiveness())
