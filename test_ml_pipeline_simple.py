#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π end-to-end —Ç–µ—Å—Ç ML pipeline –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""

import asyncio
import sys
from pathlib import Path

import numpy as np
import pandas as pd

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from core.logger import setup_logger

logger = setup_logger(__name__)


def create_test_data() -> pd.DataFrame:
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ OHLCV –¥–∞–Ω–Ω—ã–µ"""
    dates = pd.date_range("2024-01-01", periods=300, freq="15min")

    # –ü—Ä–æ—Å—Ç—ã–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    base_price = 50000
    price_changes = np.random.normal(0, 0.01, 300)
    close_prices = base_price * np.exp(np.cumsum(price_changes))

    df = pd.DataFrame(
        {
            "open": close_prices * (1 + np.random.normal(0, 0.001, 300)),
            "high": close_prices * (1 + np.abs(np.random.normal(0, 0.003, 300))),
            "low": close_prices * (1 - np.abs(np.random.normal(0, 0.003, 300))),
            "close": close_prices,
            "volume": np.random.exponential(100, 300),
        },
        index=dates,
    )

    return df


async def test_pipeline():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–µ—Å—å ML pipeline"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML pipeline end-to-end...")

    try:
        # 1. –¢–µ—Å—Ç FeatureEngineer
        from ml.logic.feature_engineering import FeatureEngineer

        df = create_test_data()
        fe = FeatureEngineer({})

        logger.info("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FeatureEngineer...")
        features = fe.create_features(df)

        assert isinstance(features, np.ndarray), (
            f"Expected np.ndarray, got {type(features)}"
        )
        assert features.shape[1] == 240, (
            f"Expected 240 features, got {features.shape[1]}"
        )
        logger.info(f"‚úÖ FeatureEngineer OK: shape {features.shape}")

        # 2. –¢–µ—Å—Ç RealTimeIndicatorCalculator
        from ml.realtime_indicator_calculator import RealTimeIndicatorCalculator

        logger.info("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RealTimeIndicatorCalculator...")
        calc = RealTimeIndicatorCalculator(config={})

        # –¢–µ—Å—Ç get_features_for_ml (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
        ml_features = await calc.get_features_for_ml("BTCUSDT", df)

        assert isinstance(ml_features, np.ndarray), (
            f"Expected np.ndarray, got {type(ml_features)}"
        )
        assert ml_features.ndim == 1, f"Expected 1D array, got {ml_features.ndim}D"
        assert len(ml_features) == 240, f"Expected 240 features, got {len(ml_features)}"
        logger.info(f"‚úÖ RealTimeIndicatorCalculator OK: {len(ml_features)} features")

        # 3. –¢–µ—Å—Ç prepare_ml_input –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        logger.info("3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ prepare_ml_input...")
        ml_input, metadata = await calc.prepare_ml_input("BTCUSDT", df, lookback=96)

        assert isinstance(ml_input, np.ndarray), (
            f"Expected np.ndarray, got {type(ml_input)}"
        )
        assert ml_input.shape == (1, 96, 240), (
            f"Expected (1, 96, 240), got {ml_input.shape}"
        )
        logger.info(f"‚úÖ prepare_ml_input OK: shape {ml_input.shape}")

        # 4. –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç nan/inf
        assert not np.isnan(ml_input).any(), "Found NaN values in ML input"
        assert not np.isinf(ml_input).any(), "Found infinite values in ML input"
        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç NaN/Inf")

        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        logger.info("üîß –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ ML –æ—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã:")
        logger.info("   ‚úÖ numpy/pandas –∫–æ–Ω—Ñ–ª–∏–∫—Ç –≤ realtime_indicator_calculator.py:95")
        logger.info("   ‚úÖ coroutine –ø—Ä–æ–±–ª–µ–º–∞ –≤ ml_manager.py:182")
        logger.info("   ‚úÖ async/await –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤ real-time –æ–±—Ä–∞–±–æ—Ç–∫–µ")
        logger.info("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã type hints –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–æ–≤")

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ pipeline: {e}")
        import traceback

        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = asyncio.run(test_pipeline())
    print(f"\n{'=' * 60}")
    if success:
        print("üöÄ ML PIPELINE –ì–û–¢–û–í –ö –ì–ï–ù–ï–†–ê–¶–ò–ò –°–ò–ì–ù–ê–õ–û–í –ö–ê–ñ–î–£–Æ –ú–ò–ù–£–¢–£!")
    else:
        print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è")
    sys.exit(0 if success else 1)
