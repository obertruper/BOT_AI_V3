#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è TestingAgent

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python test_testing_agent.py --action=ports          # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Ä—Ç—ã
    python test_testing_agent.py --action=logs           # –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤
    python test_testing_agent.py --action=diagnosis      # –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    python test_testing_agent.py --action=monitor        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã
"""

import argparse
import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent
sys.path.append(str(project_root))

from agents.testing_agent import TestingAgent


async def test_ports_fix(agent: TestingAgent):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø–æ—Ä—Ç–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø–æ—Ä—Ç–æ–≤...")
    await agent.fix_port_conflicts()
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


async def test_logs_analysis(agent: TestingAgent):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤...")

    # –ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –ª–æ–≥–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏
    test_logs = """
2025-08-04 12:00:00 INFO - Starting system...
2025-08-04 12:00:01 ERROR - ModuleNotFoundError: No module named 'passlib'
2025-08-04 12:00:02 INFO - Retrying connection...
2025-08-04 12:00:03 ERROR - Address already in use on port 8080
2025-08-04 12:00:04 CRITICAL - Database connection failed
2025-08-04 12:00:05 WARNING - ML model not found
"""

    errors = await agent.analyze_errors(test_logs)

    if errors:
        print(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(errors)} –æ—à–∏–±–æ–∫:")
        for error in errors:
            print(f"   - {error['type']}: {error['line']}")
    else:
        print("‚ÑπÔ∏è –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")


async def test_full_diagnosis(agent: TestingAgent):
    """–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    print("üîç –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã...")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
    await test_ports_fix(agent)

    # –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    log_files = [
        agent.logs_dir / "system.log",
        agent.logs_dir / "core.log",
        agent.logs_dir / "api.log",
        agent.logs_dir / "errors.log",
    ]

    found_errors = False
    for log_file in log_files:
        if log_file.exists():
            try:
                with open(log_file, "r", encoding="utf-8") as f:
                    content = f.read()
                    if content:
                        errors = await agent.analyze_errors(content)
                        if errors:
                            print(f"‚ùå –í {log_file.name} –Ω–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(errors)}")
                            for error in errors[-3:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3
                                print(f"   - {error['type']}: {error['line'][:80]}...")
                            found_errors = True
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {log_file}: {e}")

    if not found_errors:
        print("‚úÖ –í –ª–æ–≥–∞—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    # –û—Ç—á–µ—Ç
    report = agent.get_error_report()
    print("\nüìä –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç:")
    print(f"   –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {report['total_errors']}")
    print(f"   –¢–∏–ø—ã –æ—à–∏–±–æ–∫: {report['error_types']}")


async def test_system_monitoring(agent: TestingAgent):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã (10 —Å–µ–∫—É–Ω–¥)...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    try:
        await asyncio.wait_for(agent.start_system_monitoring("core"), timeout=10.0)
    except asyncio.TimeoutError:
        print("‚è∞ –¢–∞–π–º-–∞—É—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞)")
        await agent.stop_monitoring()
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TestingAgent")
    parser.add_argument(
        "--action",
        choices=["ports", "logs", "diagnosis", "monitor"],
        default="diagnosis",
        help="–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
    )

    args = parser.parse_args()

    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç
    agent = TestingAgent()

    # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    try:
        if args.action == "ports":
            await test_ports_fix(agent)
        elif args.action == "logs":
            await test_logs_analysis(agent)
        elif args.action == "diagnosis":
            await test_full_diagnosis(agent)
        elif args.action == "monitor":
            await test_system_monitoring(agent)

        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã TestingAgent –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
    finally:
        await agent.stop_monitoring()


if __name__ == "__main__":
    asyncio.run(main())
