#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –≤–µ—Å–æ–≤ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã–º–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏
"""

import json
from pathlib import Path

import torch


def analyze_model_weights():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–µ—Å–æ–≤ –º–æ–¥–µ–ª–∏."""

    print("üîç –ê–ù–ê–õ–ò–ó –í–ï–°–û–í –ú–û–î–ï–õ–ò best_model_20250728_215703.pth\n")

    # –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
    model_path = Path(
        "/mnt/SSD/PYCHARMPRODJECT/BOT_AI_V3/models/saved/best_model_20250728_215703.pth"
    )

    if not model_path.exists():
        print(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º checkpoint
    checkpoint = torch.load(model_path, map_location="cpu")

    print("1Ô∏è‚É£ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ checkpoint:")
    for key in checkpoint.keys():
        if key == "model_state_dict":
            print(f"   - {key}: {len(checkpoint[key])} —Å–ª–æ–µ–≤")
        elif key == "history":
            print(f"   - {key}: {type(checkpoint[key])}")
        else:
            print(
                f"   - {key}: {checkpoint[key] if not isinstance(checkpoint[key], dict) else type(checkpoint[key])}"
            )

    # –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è
    if "history" in checkpoint:
        history = checkpoint["history"]
        print("\n2Ô∏è‚É£ –ò—Å—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è:")
        if isinstance(history, dict):
            for metric, values in history.items():
                if isinstance(values, list) and len(values) > 0:
                    print(f"   - {metric}: –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ = {values[-1]:.6f}")

    # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if "config" in checkpoint:
        config = checkpoint["config"]
        print("\n3Ô∏è‚É£ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è:")
        print(json.dumps(config, indent=2))

    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–µ—Å–æ–≤ –º–æ–¥–µ–ª–∏
    state_dict = checkpoint["model_state_dict"]

    print("\n4Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ direction_head (–∫–ª—é—á–µ–≤–∞—è –ø—Ä–æ–±–ª–µ–º–∞):")

    # –ò—â–µ–º —Å–ª–æ–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å direction
    direction_layers = {}
    for name, tensor in state_dict.items():
        if "direction" in name.lower():
            direction_layers[name] = tensor

    if direction_layers:
        for name, weights in direction_layers.items():
            print(f"\n   üìå {name}:")
            print(f"      Shape: {weights.shape}")
            print(f"      Mean: {weights.mean().item():.6f}")
            print(f"      Std: {weights.std().item():.6f}")
            print(f"      Min: {weights.min().item():.6f}")
            print(f"      Max: {weights.max().item():.6f}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã–µ –≤–µ—Å–∞
            if weights.std().item() < 0.001:
                print("      ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í–µ—Å–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã–µ!")

            # –î–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ª–æ—è direction head
            if "bias" in name and weights.shape[0] in [3, 4, 12]:
                print(f"      Bias values: {weights.cpu().numpy()}")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ—â–µ–Ω–∏—è –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –∫–ª–∞—Å—Å—É
                if weights.shape[0] == 3:  # 3 –∫–ª–∞—Å—Å–∞
                    softmax_probs = torch.softmax(weights, dim=0)
                    print(f"      Softmax probs: {softmax_probs.cpu().numpy()}")
                    dominant_class = torch.argmax(softmax_probs).item()
                    print(
                        f"      üéØ –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π –∫–ª–∞—Å—Å: {dominant_class} (0=LONG, 1=SHORT, 2=FLAT)"
                    )

    print("\n5Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö —Å–ª–æ–µ–≤ –º–æ–¥–µ–ª–∏:")

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ head —Å–ª–æ–∏
    heads = [
        "future_returns_head",
        "direction_head",
        "long_levels_head",
        "short_levels_head",
        "risk_metrics_head",
        "confidence_head",
    ]

    for head_name in heads:
        print(f"\n   üî∏ {head_name}:")
        head_layers = [
            (name, tensor) for name, tensor in state_dict.items() if head_name in name
        ]

        if head_layers:
            for name, tensor in head_layers[-2:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–ª–æ—è
                if "weight" in name:
                    print(
                        f"      {name}: shape={tensor.shape}, std={tensor.std().item():.6f}"
                    )
                elif "bias" in name:
                    print(f"      {name}: values={tensor.cpu().numpy()}")

    print("\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º:")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ temperature scaling
    if "temperature" in state_dict:
        temp = state_dict["temperature"]
        print(f"   - Temperature: {temp.item():.6f}")
        if temp.item() < 0.1 or temp.item() > 10:
            print("     ‚ö†Ô∏è Temperature –≤–Ω–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞!")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ RevIN –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    revin_params = [
        (name, tensor) for name, tensor in state_dict.items() if "revin" in name.lower()
    ]
    if revin_params:
        print("\n   - RevIN –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        for name, tensor in revin_params:
            print(
                f"     {name}: mean={tensor.mean().item():.6f}, std={tensor.std().item():.6f}"
            )

    print("\n7Ô∏è‚É£ –î–ò–ê–ì–ù–û–ó –ü–†–û–ë–õ–ï–ú–´:")
    print("\n   ‚ùå –ú–æ–¥–µ–ª—å –≤—Å–µ–≥–¥–∞ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç [2.0, 2.0, 2.0, x] –ø–æ—Ç–æ–º—É —á—Ç–æ:")
    print("   1. Direction head –æ–±—É—á–µ–Ω –Ω–∞ –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("   2. –í—Å–µ –æ–±—É—á–∞—é—â–∏–µ –ø—Ä–∏–º–µ—Ä—ã –∏–º–µ–ª–∏ –∫–ª–∞—Å—Å 2 (FLAT)")
    print("   3. –í–µ—Å–∞ —Å–º–µ—â–µ–Ω—ã –∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—é –æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞")
    print("   4. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –≤ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö")

    print("\n8Ô∏è‚É£ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("   1. –ü–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ü–µ–ª–µ–≤—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏")
    print("   2. –û–±–µ—Å–ø–µ—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤ (LONG/SHORT/FLAT)")
    print("   3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å weighted loss –¥–ª—è —Ä–µ–¥–∫–∏—Ö –∫–ª–∞—Å—Å–æ–≤")
    print("   4. –ü—Ä–∏–º–µ–Ω–∏—Ç—å data augmentation –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è")


if __name__ == "__main__":
    analyze_model_weights()
