#!/usr/bin/env python3
"""–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏"""

import asyncio
import os
import sys
from pathlib import Path

sys.path.append(str(Path(__file__).parent))

from dotenv import load_dotenv

from core.logger import setup_logger
from exchanges.bybit.client import BybitClient

logger = setup_logger("test_orders")


async def test_order_creation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤"""
    load_dotenv()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    client = BybitClient(
        api_key=os.getenv("BYBIT_API_KEY"),
        api_secret=os.getenv("BYBIT_API_SECRET"),
        sandbox=False,
    )

    try:
        await client.connect()
        logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Bybit")

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
        balance = await client.get_balance("USDT")
        balance_amount = float(balance.total) if hasattr(balance, "total") else 167.0
        logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance_amount} USDT")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
        instrument = await client.get_instrument_info("ETHUSDT")
        logger.info(
            f"üìä ETHUSDT: min={instrument.min_order_qty}, step={instrument.qty_step}"
        )

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        ticker = await client.get_ticker("ETHUSDT")
        current_price = float(ticker.last_price)
        logger.info(f"üíπ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price}")

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (1% –æ—Ç –±–∞–ª–∞–Ω—Å–∞)
        position_size_usd = balance_amount * 0.01
        quantity = position_size_usd / current_price

        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ qty_step
        qty_step = float(instrument.qty_step)
        quantity = round(quantity / qty_step) * qty_step

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        min_qty = float(instrument.min_order_qty)
        if quantity < min_qty:
            quantity = min_qty

        logger.info(
            f"üìè –†–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞: {quantity} ETH (${quantity * current_price:.2f})"
        )

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä
        logger.info("üìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä BUY...")

        logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞: symbol=ETHUSDT, side=Buy, quantity={quantity}")

        # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª—å–∑—É—è OrderRequest
        from exchanges.base.order_types import OrderRequest, OrderSide, OrderType

        order_request = OrderRequest(
            symbol="ETHUSDT",
            side=OrderSide.BUY,
            order_type=OrderType.MARKET,
            quantity=quantity,
            price=None,  # Market order
            leverage=1,
        )

        result = await client.place_order(order_request)

        if result:
            if hasattr(result, "order_id"):
                logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! ID: {result.order_id}")
                logger.info(f"–°—Ç–∞—Ç—É—Å: {result.status}")
            else:
                logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback

        logger.error(traceback.format_exc())

    finally:
        await client.disconnect()
        logger.info("üîå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç Bybit")


if __name__ == "__main__":
    asyncio.run(test_order_creation())
