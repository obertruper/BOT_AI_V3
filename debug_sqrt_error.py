#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –æ—à–∏–±–∫–∏ sqrt
"""

import asyncio
import traceback

import numpy as np
import pandas as pd


async def test_sqrt_error():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏ sqrt"""

    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏ sqrt...")

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
    dates = pd.date_range(start="2024-01-01", periods=500, freq="15min")

    # –¢–µ—Å—Ç–æ–≤—ã–µ OHLCV –¥–∞–Ω–Ω—ã–µ
    np.random.seed(42)
    close_prices = 50000 + np.cumsum(np.random.randn(500) * 100)

    df = pd.DataFrame(
        {
            "datetime": dates,
            "open": close_prices * (1 + np.random.randn(500) * 0.001),
            "high": close_prices * (1 + np.abs(np.random.randn(500)) * 0.002),
            "low": close_prices * (1 - np.abs(np.random.randn(500)) * 0.002),
            "close": close_prices,
            "volume": np.random.rand(500) * 1000000,
            "symbol": "BTCUSDT",
        }
    )

    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π DataFrame: {df.shape}")

    # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å sqrt
    print("\nüß™ –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–µ numpy sqrt –æ–ø–µ—Ä–∞—Ü–∏–∏")
    try:
        returns = df["close"].pct_change()
        vol_test = returns.rolling(20).std() * np.sqrt(20)
        print(f"‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ—à–µ–ª: {type(vol_test)}, NaN count: {vol_test.isna().sum()}")
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç 1 FAILED: {e}")
        traceback.print_exc()

    # –¢–µ—Å—Ç 2: –û–ø–µ—Ä–∞—Ü–∏–∏ —Å NaN –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    print("\nüß™ –¢–µ—Å—Ç 2: –û–ø–µ—Ä–∞—Ü–∏–∏ —Å NaN")
    try:
        df_with_nan = df.copy()
        df_with_nan.loc[10:15, "close"] = np.nan
        returns_nan = df_with_nan["close"].pct_change()
        vol_test_nan = returns_nan.rolling(20).std() * np.sqrt(20)
        print(f"‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ—à–µ–ª: NaN count: {vol_test_nan.isna().sum()}")
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç 2 FAILED: {e}")
        traceback.print_exc()

    # –¢–µ—Å—Ç 3: Rolling apply —Å lambda
    print("\nüß™ –¢–µ—Å—Ç 3: Rolling apply —Å lambda –∏ sqrt")
    try:
        returns = df["close"].pct_change()
        garch_vol = returns.rolling(20).apply(
            lambda x: np.sqrt(0.94 * x.var() + 0.06 * x.iloc[-1] ** 2) if len(x) > 0 else 0
        )
        print(f"‚úÖ –¢–µ—Å—Ç 3 –ø—Ä–æ—à–µ–ª: {type(garch_vol)}, NaN count: {garch_vol.isna().sum()}")
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç 3 FAILED: {e}")
        traceback.print_exc()

    # –¢–µ—Å—Ç 4: –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø—É—Å—Ç—ã–º–∏ —Å–µ—Ä–∏—è–º–∏
    print("\nüß™ –¢–µ—Å—Ç 4: –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø—É—Å—Ç—ã–º–∏ —Å–µ—Ä–∏—è–º–∏")
    try:
        empty_series = pd.Series([], dtype=float)
        empty_vol = empty_series.rolling(20).std() * np.sqrt(20)
        print(f"‚úÖ –¢–µ—Å—Ç 4 –ø—Ä–æ—à–µ–ª: {type(empty_vol)}, length: {len(empty_vol)}")
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç 4 FAILED: {e}")
        traceback.print_exc()

    # –¢–µ—Å—Ç 5: –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
    print("\nüß™ –¢–µ—Å—Ç 5: –ü—Ä–æ–±–ª–µ–º—ã —Å —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö")
    try:
        # –°–æ–∑–¥–∞–µ–º Series —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
        mixed_series = pd.Series([1.0, 2.0, "3.0", 4.0])
        numeric_series = pd.to_numeric(mixed_series, errors="coerce")
        vol_mixed = numeric_series.rolling(2).std() * np.sqrt(2)
        print(f"‚úÖ –¢–µ—Å—Ç 5 –ø—Ä–æ—à–µ–ª: {type(vol_mixed)}, NaN count: {vol_mixed.isna().sum()}")
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç 5 FAILED: {e}")
        traceback.print_exc()

    # –¢–µ—Å—Ç 6: –ü–æ–ø—Ä–æ–±—É–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç–æ—á–Ω—É—é –æ—à–∏–±–∫—É
    print("\nüß™ –¢–µ—Å—Ç 6: –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ—à–∏–±–∫—É 'loop of ufunc'")
    try:
        # –°–æ–∑–¥–∞–µ–º —É—Å–ª–æ–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –æ—à–∏–±–∫–µ
        test_val = 4.0  # float

        # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å
        result1 = np.sqrt(test_val)
        print(f"np.sqrt(float): {result1}")

        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –¥–∞—Ç—å –æ—à–∏–±–∫—É
        test_array = np.array([test_val])

        # –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ –≤ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ ufunc –∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ç–∏–ø—É
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é —Å ufunc

        def bad_sqrt_func(x):
            # –ï—Å–ª–∏ x —ç—Ç–æ float, –∏ –º—ã –ø—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å x.sqrt()
            try:
                return x.sqrt()  # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –¥–∞—Ç—å –æ—à–∏–±–∫—É –¥–ª—è float
            except AttributeError as e:
                print(f"AttributeError: {e}")
                return np.sqrt(x)

        result6 = bad_sqrt_func(test_val)
        print(f"‚úÖ –¢–µ—Å—Ç 6 –ø—Ä–æ—à–µ–ª: {result6}")

    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç 6 FAILED: {e}")
        traceback.print_exc()

    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


if __name__ == "__main__":
    asyncio.run(test_sqrt_error())
