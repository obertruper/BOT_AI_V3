#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–ª–∞–Ω—Å–∞ LONG/SHORT —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import asyncio
import sys
from datetime import datetime, timedelta

from sqlalchemy import and_, func, select

from core.logger import setup_logger
from database.connections import get_async_db
from database.models.base_models import SignalType
from database.models.signal import Signal

logger = setup_logger("signal_balance_monitor")


async def monitor_signal_balance():
    """
    –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –±–∞–ª–∞–Ω—Å —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    """
    logger.info("=" * 60)
    logger.info("üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –ë–ê–õ–ê–ù–°–ê –°–ò–ì–ù–ê–õ–û–í")
    logger.info("=" * 60)

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    time_window = datetime.utcnow() - timedelta(hours=1)

    async with get_async_db() as db:
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤
        total_query = select(func.count(Signal.id)).where(
            Signal.created_at >= time_window
        )
        total_result = await db.execute(total_query)
        total_signals = total_result.scalar()

        if total_signals == 0:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å")
            return

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ LONG —Å–∏–≥–Ω–∞–ª–æ–≤
        long_query = select(func.count(Signal.id)).where(
            and_(
                Signal.created_at >= time_window, Signal.signal_type == SignalType.LONG
            )
        )
        long_result = await db.execute(long_query)
        long_signals = long_result.scalar()

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ SHORT —Å–∏–≥–Ω–∞–ª–æ–≤
        short_query = select(func.count(Signal.id)).where(
            and_(
                Signal.created_at >= time_window, Signal.signal_type == SignalType.SHORT
            )
        )
        short_result = await db.execute(short_query)
        short_signals = short_result.scalar()

        # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        long_pct = (long_signals / total_signals) * 100
        short_pct = (short_signals / total_signals) * 100

        # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        logger.info("üìà –°–∏–≥–Ω–∞–ª—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å:")
        logger.info(f"   –í—Å–µ–≥–æ:  {total_signals}")
        logger.info(f"   LONG:   {long_signals} ({long_pct:.1f}%)")
        logger.info(f"   SHORT:  {short_signals} ({short_pct:.1f}%)")

        # –ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–∞
        logger.info("")
        if long_pct == 100:
            logger.critical("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –î–ò–°–ë–ê–õ–ê–ù–°: 100% LONG —Å–∏–≥–Ω–∞–ª–æ–≤!")
            logger.critical("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ù–ï–ú–ï–î–õ–ï–ù–ù–û –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é!")
        elif short_pct == 100:
            logger.critical("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –î–ò–°–ë–ê–õ–ê–ù–°: 100% SHORT —Å–∏–≥–Ω–∞–ª–æ–≤!")
            logger.critical("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ù–ï–ú–ï–î–õ–ï–ù–ù–û –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é!")
        elif long_pct > 80:
            logger.warning("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –î–∏—Å–±–∞–ª–∞–Ω—Å –≤ —Å—Ç–æ—Ä–æ–Ω—É LONG")
            logger.warning(f"   {long_pct:.1f}% LONG vs {short_pct:.1f}% SHORT")
        elif short_pct > 80:
            logger.warning("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –î–∏—Å–±–∞–ª–∞–Ω—Å –≤ —Å—Ç–æ—Ä–æ–Ω—É SHORT")
            logger.warning(f"   {short_pct:.1f}% SHORT vs {long_pct:.1f}% LONG")
        elif 30 <= long_pct <= 70 and 30 <= short_pct <= 70:
            logger.info("‚úÖ –û–¢–õ–ò–ß–ù–û: –°–∏–≥–Ω–∞–ª—ã —Ö–æ—Ä–æ—à–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã")
            logger.info("   –ò–¥–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã")
        else:
            logger.info("‚úÖ –ù–û–†–ú–ê–õ–¨–ù–û: –ë–∞–ª–∞–Ω—Å —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã")

        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        logger.info("")
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º:")

        symbols_query = (
            select(
                Signal.symbol, Signal.signal_type, func.count(Signal.id).label("count")
            )
            .where(Signal.created_at >= time_window)
            .group_by(Signal.symbol, Signal.signal_type)
        )

        symbols_result = await db.execute(symbols_query)
        symbols_data = symbols_result.all()

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        symbol_stats = {}
        for row in symbols_data:
            symbol = row.symbol
            signal_type = row.signal_type
            count = row.count

            if symbol not in symbol_stats:
                symbol_stats[symbol] = {"LONG": 0, "SHORT": 0}

            if signal_type == SignalType.LONG:
                symbol_stats[symbol]["LONG"] = count
            elif signal_type == SignalType.SHORT:
                symbol_stats[symbol]["SHORT"] = count

        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        for symbol, stats in sorted(symbol_stats.items()):
            total = stats["LONG"] + stats["SHORT"]
            if total > 0:
                long_pct = (stats["LONG"] / total) * 100
                short_pct = (stats["SHORT"] / total) * 100

                # –≠–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞
                if long_pct > 70:
                    emoji = "üìà"  # –°–∏–ª—å–Ω—ã–π LONG bias
                elif short_pct > 70:
                    emoji = "üìâ"  # –°–∏–ª—å–Ω—ã–π SHORT bias
                else:
                    emoji = "‚öñÔ∏è"  # –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ

                logger.info(
                    f"   {emoji} {symbol:10s}: "
                    f"L:{stats['LONG']:3d} ({long_pct:5.1f}%) / "
                    f"S:{stats['SHORT']:3d} ({short_pct:5.1f}%)"
                )

        # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ confidence –∏ strength
        avg_query = (
            select(
                Signal.signal_type,
                func.avg(Signal.confidence).label("avg_confidence"),
                func.avg(Signal.strength).label("avg_strength"),
            )
            .where(Signal.created_at >= time_window)
            .group_by(Signal.signal_type)
        )

        avg_result = await db.execute(avg_query)
        avg_data = avg_result.all()

        logger.info("")
        logger.info("üìä –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:")
        for row in avg_data:
            signal_type = "LONG" if row.signal_type == SignalType.LONG else "SHORT"
            logger.info(
                f"   {signal_type}: "
                f"Confidence: {row.avg_confidence:.3f}, "
                f"Strength: {row.avg_strength:.3f}"
            )


async def continuous_monitoring(interval_seconds=60):
    """
    –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º

    Args:
        interval_seconds: –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    """
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval_seconds}—Å)")
    logger.info("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")

    try:
        while True:
            await monitor_signal_balance()
            logger.info(f"\n‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {interval_seconds} —Å–µ–∫—É–Ω–¥...\n")
            await asyncio.sleep(interval_seconds)
    except KeyboardInterrupt:
        logger.info("\n‚úã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1 and sys.argv[1] == "--continuous":
        # –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        interval = int(sys.argv[2]) if len(sys.argv) > 2 else 60
        asyncio.run(continuous_monitoring(interval))
    else:
        # –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        asyncio.run(monitor_signal_balance())
