#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import asyncio
import os
from datetime import datetime

from dotenv import load_dotenv

load_dotenv()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ["PGPORT"] = "5555"
os.environ["PGUSER"] = "obertruper"
os.environ["PGDATABASE"] = "bot_trading_v3"


async def monitor_trading():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    from database.connections.postgres import AsyncPGPool

    print("\nüîç –ú–û–ù–ò–¢–û–†–ò–ù–ì –¢–û–†–ì–û–í–õ–ò - REAL TIME")
    print("=" * 60)
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")

    try:
        pool = await AsyncPGPool.get_pool()

        while True:
            # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω
            print("\033[2J\033[H")  # Clear screen and move cursor to top

            print(
                f"üîç –ú–û–ù–ò–¢–û–†–ò–ù–ì –¢–û–†–ì–û–í–õ–ò - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            )
            print("=" * 60)

            # 1. –ë–∞–ª–∞–Ω—Å
            balance = await pool.fetchrow(
                """
                SELECT balance, reserved, updated_at
                FROM account_balances
                WHERE currency = 'USDT'
                ORDER BY updated_at DESC
                LIMIT 1
            """
            )

            if balance:
                print("\nüí∞ –ë–ê–õ–ê–ù–°:")
                print(
                    f"   USDT: ${balance['balance']:.2f} (–∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ: ${balance['reserved']:.2f})"
                )
                print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–æ: {balance['updated_at'].strftime('%H:%M:%S')}")

            # 2. –ü–æ—Å–ª–µ–¥–Ω–∏–µ ML —Å–∏–≥–Ω–∞–ª—ã
            print("\nü§ñ ML –°–ò–ì–ù–ê–õ–´ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç):")

            signals = await pool.fetch(
                """
                SELECT
                    symbol,
                    signal_type,
                    strength,
                    confidence,
                    created_at
                FROM signals
                WHERE created_at > NOW() - INTERVAL '5 minutes'
                    AND strategy_name LIKE '%ML%'
                ORDER BY created_at DESC
                LIMIT 5
            """
            )

            if signals:
                for signal in signals:
                    emoji = (
                        "üü¢"
                        if signal["signal_type"] == "LONG"
                        else "üî¥"
                        if signal["signal_type"] == "SHORT"
                        else "‚ö™"
                    )
                    print(
                        f"   {emoji} {signal['symbol']} - {signal['signal_type']} "
                        f"(—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal['confidence']:.0%}, —Å–∏–ª–∞: {signal['strength']:.4f}) "
                        f"–≤ {signal['created_at'].strftime('%H:%M:%S')}"
                    )
            else:
                print("   ‚ùå –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤")

            # 3. –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
            print("\nüí± –ü–û–°–õ–ï–î–ù–ò–ï –û–†–î–ï–†–ê:")

            orders = await pool.fetch(
                """
                SELECT
                    symbol,
                    side,
                    order_type,
                    price,
                    quantity,
                    status,
                    created_at
                FROM orders
                WHERE created_at > NOW() - INTERVAL '1 hour'
                ORDER BY created_at DESC
                LIMIT 5
            """
            )

            if orders:
                for order in orders:
                    status_emoji = (
                        "‚úÖ"
                        if order["status"] == "FILLED"
                        else "‚è≥"
                        if order["status"] in ["NEW", "OPEN"]
                        else "‚ùå"
                    )
                    order_type = "üí≤" if order["order_type"] == "MARKET" else "üìä"
                    price_info = (
                        f" @ ${order['price']}"
                        if order["order_type"] == "LIMIT"
                        else ""
                    )
                    print(
                        f"   {status_emoji} {order_type} {order['symbol']} {order['side']} "
                        f"{order['quantity']}{price_info} - {order['status']} "
                        f"–≤ {order['created_at'].strftime('%H:%M:%S')}"
                    )
            else:
                print("   ‚ùå –ù–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å")

            # 4. –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            print("\nüìà –û–¢–ö–†–´–¢–´–ï –ü–û–ó–ò–¶–ò–ò:")

            positions = await pool.fetch(
                """
                SELECT
                    symbol,
                    side,
                    quantity,
                    entry_price,
                    current_price,
                    unrealized_pnl
                FROM positions
                WHERE status = 'open'
            """
            )

            if positions:
                total_pnl = 0
                for pos in positions:
                    pnl_emoji = "üü¢" if pos["unrealized_pnl"] > 0 else "üî¥"
                    total_pnl += pos["unrealized_pnl"]
                    print(
                        f"   {pos['symbol']} {pos['side']}: {pos['quantity']} @ ${pos['entry_price']} "
                        f"‚Üí ${pos['current_price']} {pnl_emoji} PnL: ${pos['unrealized_pnl']:.2f}"
                    )
                print(f"   üìä –û–±—â–∏–π PnL: ${total_pnl:.2f}")
            else:
                print("   ‚ùå –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")

            # 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = await pool.fetchrow(
                """
                SELECT
                    COUNT(*) FILTER (WHERE created_at > NOW() - INTERVAL '1 hour') as orders_hour,
                    COUNT(*) FILTER (WHERE created_at > NOW() - INTERVAL '24 hours') as orders_day,
                    COUNT(*) FILTER (WHERE status = 'FILLED' AND created_at > NOW() - INTERVAL '24 hours') as filled_day
                FROM orders
            """
            )

            ml_stats = await pool.fetchrow(
                """
                SELECT
                    COUNT(*) as signals_hour,
                    COUNT(*) FILTER (WHERE signal_type = 'LONG') as long_signals,
                    COUNT(*) FILTER (WHERE signal_type = 'SHORT') as short_signals
                FROM signals
                WHERE created_at > NOW() - INTERVAL '1 hour'
                    AND strategy_name LIKE '%ML%'
            """
            )

            print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"   –û—Ä–¥–µ—Ä–æ–≤ –∑–∞ —á–∞—Å: {stats['orders_hour']}")
            print(
                f"   –û—Ä–¥–µ—Ä–æ–≤ –∑–∞ 24—á: {stats['orders_day']} (–∏—Å–ø–æ–ª–Ω–µ–Ω–æ: {stats['filled_day']})"
            )
            print(
                f"   ML —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ —á–∞—Å: {ml_stats['signals_hour']} "
                f"(LONG: {ml_stats['long_signals']}, SHORT: {ml_stats['short_signals']})"
            )

            print("\n" + "=" * 60)
            print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥...")

            await asyncio.sleep(5)

    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()
    finally:
        await AsyncPGPool.close_pool()


if __name__ == "__main__":
    asyncio.run(monitor_trading())
