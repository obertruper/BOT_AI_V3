#!/usr/bin/env python3
"""Test script to verify cache_ttl fix"""

import asyncio
import sys
from datetime import UTC, datetime

# Add project to path
sys.path.insert(0, ".")


async def test_cache_fix():
    """Test that cache_ttl error is fixed"""

    try:
        # Import after adding to path
        from ml.realtime_indicator_calculator import RealTimeIndicatorCalculator

        print("‚úÖ –ò–º–ø–æ—Ä—Ç RealTimeIndicatorCalculator —É—Å–ø–µ—à–µ–Ω")

        # Create instance with int cache_ttl
        calc = RealTimeIndicatorCalculator(cache_ttl=300)
        print(
            f"‚úÖ –°–æ–∑–¥–∞–Ω –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å cache_ttl={calc.cache_ttl} (—Ç–∏–ø: {type(calc.cache_ttl).__name__})"
        )

        # Test cache with different timestamp types
        cache_key = "test_symbol_15m"

        # Test 1: Normal datetime timestamp (should work)
        calc.cache[cache_key] = ({"test": "data"}, datetime.now(UTC))
        result = calc._get_from_cache(cache_key)
        if result:
            print("‚úÖ –¢–µ—Å—Ç 1: –ù–æ—Ä–º–∞–ª—å–Ω—ã–π datetime timestamp - —Ä–∞–±–æ—Ç–∞–µ—Ç")

        # Test 2: Int timestamp (should be converted)
        calc.cache[cache_key] = ({"test": "data2"}, int(datetime.now().timestamp()))
        result = calc._get_from_cache(cache_key)
        if result:
            print("‚úÖ –¢–µ—Å—Ç 2: Int timestamp –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")

        # Test 3: Float timestamp in milliseconds
        calc.cache[cache_key] = ({"test": "data3"}, datetime.now().timestamp() * 1000)
        result = calc._get_from_cache(cache_key)
        if result:
            print("‚úÖ –¢–µ—Å—Ç 3: Float milliseconds timestamp –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")

        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True

    except AttributeError as e:
        if "total_seconds" in str(e):
            print(f"‚ùå –û–®–ò–ë–ö–ê total_seconds –í–°–ï –ï–©–ï –ï–°–¢–¨: {e}")
            return False
        else:
            print(f"‚ùå –î—Ä—É–≥–∞—è AttributeError: {e}")
            raise
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = asyncio.run(test_cache_fix())
    sys.exit(0 if success else 1)
