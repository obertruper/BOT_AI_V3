#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π Bybit
"""

import asyncio
import os

from dotenv import load_dotenv
from pybit.unified_trading import HTTP

load_dotenv()


async def test_bybit_keys():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–ª—é—á–µ–π Bybit"""

    api_key = os.getenv("BYBIT_API_KEY")
    api_secret = os.getenv("BYBIT_API_SECRET")

    print(f"üîë API Key: {api_key[:10]}...")
    print(f"üîí Secret: {api_secret[:10]}...")

    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é (—Ç–µ—Å—Ç–Ω–µ—Ç = False –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏)
        session = HTTP(testnet=False, api_key=api_key, api_secret=api_secret)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞
        result = session.get_wallet_balance(accountType="UNIFIED", coin="USDT")

        if result["retCode"] == 0:
            print("‚úÖ API –∫–ª—é—á–∏ –≤–∞–ª–∏–¥–Ω—ã!")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
            balance_info = result["result"]["list"][0]
            if balance_info["coin"]:
                for coin_data in balance_info["coin"]:
                    if coin_data["coin"] == "USDT":
                        print(f"üí∞ –ë–∞–ª–∞–Ω—Å USDT: {coin_data['walletBalance']}")
                        print(f"   –î–æ—Å—Ç—É–ø–Ω–æ: {coin_data['availableToWithdraw']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {result['retMsg']}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        print("\n‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("1. –ù–µ–≤–µ—Ä–Ω—ã–µ API –∫–ª—é—á–∏")
        print("2. IP –∞–¥—Ä–µ—Å –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ")
        print("3. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ –ø—Ä–∞–≤–∞ API –∫–ª—é—á–∞")
        print("4. –ö–ª—é—á–∏ –¥–ª—è testnet, –∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è mainnet")


if __name__ == "__main__":
    asyncio.run(test_bybit_keys())
