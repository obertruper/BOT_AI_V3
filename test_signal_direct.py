#!/usr/bin/env python3
"""
–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –ø–æ—Ç–æ–∫–∞ —Å–∏–≥–Ω–∞–ª -> –æ—Ä–¥–µ—Ä –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import os
import sys
from datetime import datetime

from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

load_dotenv()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ["PGPORT"] = "5555"
os.environ["PGUSER"] = "obertruper"
os.environ["PGDATABASE"] = "bot_trading_v3"

from core.config.config_manager import ConfigManager
from database.models.base_models import SignalType

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
from database.models.signal import Signal
from exchanges.registry import ExchangeRegistry
from trading.execution.executor import ExecutionEngine
from trading.orders.order_manager import OrderManager
from trading.signals.signal_processor import SignalProcessor


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    print("=" * 80)
    print("üß™ –ü–†–Ø–ú–û–ô –¢–ï–°–¢: –°–ò–ì–ù–ê–õ ‚Üí –û–†–î–ï–†")
    print(f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 80)

    config_manager = ConfigManager()
    config = config_manager.get_config()

    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        print("\n1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")

        # Exchange Registry
        exchange_registry = ExchangeRegistry()
        await exchange_registry.initialize()
        print("‚úÖ Exchange Registry –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # Order Manager
        order_manager = OrderManager(exchange_registry)
        await order_manager.start()
        print("‚úÖ Order Manager –∑–∞–ø—É—â–µ–Ω")

        # Signal Processor
        signal_processor = SignalProcessor(
            config=config.get("signal_processing", {}),
            exchange_registry=exchange_registry,
            order_manager=order_manager,
        )
        await signal_processor.start()
        print("‚úÖ Signal Processor –∑–∞–ø—É—â–µ–Ω")

        # Execution Engine
        execution_engine = ExecutionEngine(
            order_manager=order_manager, exchange_registry=exchange_registry
        )
        await execution_engine.start()
        print("‚úÖ Execution Engine –∑–∞–ø—É—â–µ–Ω")

        # 2. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É BTC
        print("\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã BTC...")
        from exchanges.factory import ExchangeFactory

        factory = ExchangeFactory()
        exchange = await factory.create_and_connect(
            exchange_type="bybit",
            api_key=os.getenv("BYBIT_API_KEY"),
            api_secret=os.getenv("BYBIT_API_SECRET"),
            sandbox=False,
        )
        await exchange.initialize()

        # Bybit —Ç—Ä–µ–±—É–µ—Ç —Å–∏–º–≤–æ–ª –±–µ–∑ —Å–ª—ç—à–∞
        bybit_symbol = "BTCUSDT"
        ticker = await exchange.get_ticker(bybit_symbol)
        # ticker - —ç—Ç–æ –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ —Å–ª–æ–≤–∞—Ä—å
        current_price = ticker.last if hasattr(ticker, "last") else ticker.price
        print(f"üìä –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC/USDT: ${current_price:.2f}")

        # 3. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        print("\n3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞...")
        test_signal = Signal(
            symbol="BTCUSDT",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç Bybit –±–µ–∑ —Å–ª—ç—à–∞
            exchange="bybit",
            signal_type=SignalType.LONG,
            strength=0.75,
            confidence=0.75,
            suggested_price=current_price,
            suggested_stop_loss=current_price * 0.98,
            suggested_take_profit=current_price * 1.03,
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è Bybit - 0.001 BTC –∏–ª–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ $115
            suggested_position_size=120.0,  # $120 –¥–ª—è —Ç–µ—Å—Ç–∞ (—á—É—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º—É–º–∞)
            suggested_quantity=120.0 / current_price,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC
            strategy_name="TEST_DIRECT",
            signal_metadata={"test": True},
        )

        print(f"üìã –°–æ–∑–¥–∞–Ω —Å–∏–≥–Ω–∞–ª LONG BTC/USDT @ ${current_price:.2f}")
        print(f"   SL: ${test_signal.suggested_stop_loss:.2f}")
        print(f"   TP: ${test_signal.suggested_take_profit:.2f}")
        print(f"   –†–∞–∑–º–µ—Ä: ${test_signal.suggested_position_size}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC: {test_signal.suggested_quantity:.6f}")

        # 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª
        print("\n4Ô∏è‚É£ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ SignalProcessor...")
        orders = await signal_processor.process_signal(test_signal)

        if orders:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(orders)} –æ—Ä–¥–µ—Ä–æ–≤")

            # 5. –ò—Å–ø–æ–ª–Ω—è–µ–º –æ—Ä–¥–µ—Ä–∞
            print("\n5Ô∏è‚É£ –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤...")
            for i, order in enumerate(orders):
                print(f"\n–û—Ä–¥–µ—Ä {i + 1}:")
                print(f"  –°–∏–º–≤–æ–ª: {order.symbol}")
                print(f"  –°—Ç–æ—Ä–æ–Ω–∞: {order.side.value}")
                print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order.quantity}")
                print(f"  –¶–µ–Ω–∞: ${order.price:.2f}")

                # –ü–µ—Ä–µ–¥–∞–µ–º –æ—Ä–¥–µ—Ä –≤ OrderManager –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –±–∏—Ä–∂—É
                success = await order_manager.submit_order(order)

                if success:
                    print("  ‚úÖ –û—Ä–¥–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –±–∏—Ä–∂—É")
                else:
                    print("  ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ä–¥–µ—Ä–∞")
        else:
            print("‚ùå –û—Ä–¥–µ—Ä–∞ –Ω–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã")

        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –±–∏—Ä–∂–µ
        print("\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ Bybit...")
        await asyncio.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤

        bybit_client = exchange.client if hasattr(exchange, "client") else exchange

        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç
            open_orders = await bybit_client.get_open_orders("BTCUSDT")
            if open_orders:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(open_orders)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤:")
                for order in open_orders[:5]:
                    print(
                        f"   {order.get('createdTime', 'N/A')} | {order.get('symbol')} | "
                        f"{order.get('side')} {order.get('qty')} @ {order.get('price')}"
                    )
            else:
                print("‚ùå –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –±–∏—Ä–∂–µ")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {e}")

    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback

        traceback.print_exc()

    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        print("\nüõë –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
        if "exchange" in locals():
            # BybitExchange –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ close, –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
            pass
        print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")

    print("\n" + "=" * 80)


if __name__ == "__main__":
    asyncio.run(main())
