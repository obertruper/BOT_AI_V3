#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä –¥–ª—è Enhanced Position Tracker
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ —Ç–∏–ø—ã —Ç–µ—Å—Ç–æ–≤ –≤ –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
"""

import asyncio
import sys
import time
from pathlib import Path
from typing import Dict, Any, List
import pytest
import subprocess

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from core.logger import setup_logger

logger = setup_logger(__name__)


class PositionTrackerTestSuite:
    """
    –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ Position Tracker
    """
    
    def __init__(self):
        self.test_results: Dict[str, Any] = {}
        self.test_modules = {
            "unit": "tests/unit/test_position_tracker.py",
            "integration": "tests/integration/test_position_tracker_integration.py",
            "performance": "tests/performance/test_position_tracker_performance.py"
        }
        
    async def run_all_tests(self, verbose: bool = False) -> Dict[str, Any]:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã Position Tracker
        
        Args:
            verbose: –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        """
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤ Enhanced Position Tracker")
        
        overall_start_time = time.perf_counter()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–æ–≤
        for test_type, test_module in self.test_modules.items():
            logger.info(f"üìã –ó–∞–ø—É—Å–∫ {test_type} —Ç–µ—Å—Ç–æ–≤...")
            
            result = await self._run_test_module(test_type, test_module, verbose)
            self.test_results[test_type] = result
            
            if result["success"]:
                logger.info(f"‚úÖ {test_type} —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.error(f"‚ùå {test_type} —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        
        overall_time = time.perf_counter() - overall_start_time
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—â–∏–π –æ—Ç—á–µ—Ç
        summary = self._generate_summary(overall_time)
        self.test_results["summary"] = summary
        
        return self.test_results
    
    async def run_unit_tests(self, verbose: bool = False) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ unit —Ç–µ—Å—Ç–æ–≤"""
        logger.info("üîß –ó–∞–ø—É—Å–∫ Unit —Ç–µ—Å—Ç–æ–≤ Position Tracker")
        return await self._run_test_module("unit", self.test_modules["unit"], verbose)
    
    async def run_integration_tests(self, verbose: bool = False) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ integration —Ç–µ—Å—Ç–æ–≤"""
        logger.info("üîó –ó–∞–ø—É—Å–∫ Integration —Ç–µ—Å—Ç–æ–≤ Position Tracker")
        return await self._run_test_module("integration", self.test_modules["integration"], verbose)
    
    async def run_performance_tests(self, verbose: bool = False) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ performance —Ç–µ—Å—Ç–æ–≤"""
        logger.info("‚ö° –ó–∞–ø—É—Å–∫ Performance —Ç–µ—Å—Ç–æ–≤ Position Tracker")
        return await self._run_test_module("performance", self.test_modules["performance"], verbose)
    
    async def _run_test_module(self, test_type: str, module_path: str, verbose: bool) -> Dict[str, Any]:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–æ–¥—É–ª—å —Ç–µ—Å—Ç–æ–≤
        
        Args:
            test_type: –¢–∏–ø —Ç–µ—Å—Ç–æ–≤
            module_path: –ü—É—Ç—å –∫ –º–æ–¥—É–ª—é
            verbose: –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
        """
        start_time = time.perf_counter()
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É pytest
            cmd = [
                sys.executable, "-m", "pytest",
                str(project_root / module_path),
                "-v" if verbose else "-q",
                "--tb=short",
                "--json-report",
                f"--json-report-file=test_results/position_tracker_{test_type}_report.json",
                "--maxfail=10"  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø–æ—Å–ª–µ 10 –æ—à–∏–±–æ–∫
            ]
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=300  # 5 –º–∏–Ω—É—Ç –Ω–∞ –∫–∞–∂–¥—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–æ–≤
            )
            
            end_time = time.perf_counter()
            execution_time = end_time - start_time
            
            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            test_result = {
                "success": result.returncode == 0,
                "execution_time": execution_time,
                "return_code": result.returncode,
                "stdout": result.stdout,
                "stderr": result.stderr,
                "test_type": test_type
            }
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –≤—ã–≤–æ–¥–∞ pytest
            test_result.update(self._parse_pytest_output(result.stdout))
            
            return test_result
            
        except subprocess.TimeoutExpired:
            logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {test_type} —Ç–µ—Å—Ç–æ–≤")
            return {
                "success": False,
                "execution_time": 300,
                "error": "Timeout",
                "test_type": test_type
            }
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {test_type} —Ç–µ—Å—Ç–æ–≤: {e}")
            return {
                "success": False,
                "execution_time": time.perf_counter() - start_time,
                "error": str(e),
                "test_type": test_type
            }
    
    def _parse_pytest_output(self, output: str) -> Dict[str, Any]:
        """
        –ü–∞—Ä—Å–∏—Ç –≤—ã–≤–æ–¥ pytest –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        
        Args:
            output: –í—ã–≤–æ–¥ pytest
            
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤
        """
        stats = {
            "passed": 0,
            "failed": 0,
            "skipped": 0,
            "errors": 0,
            "total": 0
        }
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        lines = output.split('\n')
        for line in lines:
            if "passed" in line or "failed" in line:
                # –ü—Ä–∏–º–µ—Ä—ã: "5 passed", "2 failed, 3 passed", etc.
                parts = line.split()
                for i, part in enumerate(parts):
                    if part.isdigit() and i + 1 < len(parts):
                        count = int(part)
                        status = parts[i + 1].replace(',', '').lower()
                        
                        if status in stats:
                            stats[status] = count
        
        stats["total"] = sum([stats["passed"], stats["failed"], stats["skipped"], stats["errors"]])
        
        return stats
    
    def _generate_summary(self, total_time: float) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—â–∏–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º —Ç–µ—Å—Ç–∞–º
        
        Args:
            total_time: –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
        """
        summary = {
            "total_execution_time": total_time,
            "overall_success": True,
            "test_types_run": len(self.test_results),
            "total_tests": 0,
            "total_passed": 0,
            "total_failed": 0,
            "total_skipped": 0,
            "total_errors": 0,
            "success_rate": 0.0,
            "performance_metrics": {}
        }
        
        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for test_type, result in self.test_results.items():
            if test_type == "summary":
                continue
                
            if not result.get("success", False):
                summary["overall_success"] = False
            
            # –°—É–º–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            for key in ["total", "passed", "failed", "skipped", "errors"]:
                if key in result:
                    summary[f"total_{key}"] += result[key]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if test_type == "performance":
                summary["performance_metrics"]["execution_time"] = result.get("execution_time", 0)
                summary["performance_metrics"]["performance_tests"] = result.get("total", 0)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        if summary["total_total"] > 0:
            summary["success_rate"] = (summary["total_passed"] / summary["total_total"]) * 100
        
        return summary
    
    def print_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if "summary" not in self.test_results:
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞")
            return
        
        summary = self.test_results["summary"]
        
        print("\n" + "="*80)
        print("üéØ ENHANCED POSITION TRACKER TEST RESULTS")
        print("="*80)
        
        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"üìä –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {summary['total_execution_time']:.2f}s")
        print(f"üèÜ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£–°–ü–ï–•' if summary['overall_success'] else '‚ùå –ù–ï–£–î–ê–ß–ê'}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {summary['success_rate']:.1f}%")
        
        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º —Ç–µ—Å—Ç–æ–≤
        print(f"\nüìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ç–µ—Å—Ç–æ–≤:")
        for test_type in ["unit", "integration", "performance"]:
            if test_type in self.test_results:
                result = self.test_results[test_type]
                status = "‚úÖ" if result.get("success", False) else "‚ùå"
                time_taken = result.get("execution_time", 0)
                total_tests = result.get("total", 0)
                passed_tests = result.get("passed", 0)
                
                print(f"  {status} {test_type.capitalize()}: {passed_tests}/{total_tests} ({time_taken:.2f}s)")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüî¢ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  üìù –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {summary['total_total']}")
        print(f"  ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {summary['total_passed']}")
        print(f"  ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {summary['total_failed']}")
        print(f"  ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {summary['total_skipped']}")
        print(f"  üí• –û—à–∏–±–æ–∫: {summary['total_errors']}")
        
        # Performance –º–µ—Ç—Ä–∏–∫–∏
        if summary["performance_metrics"]:
            perf = summary["performance_metrics"]
            print(f"\n‚ö° Performance –º–µ—Ç—Ä–∏–∫–∏:")
            print(f"  üöÄ Performance —Ç–µ—Å—Ç—ã: {perf.get('performance_tests', 0)}")
            print(f"  ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {perf.get('execution_time', 0):.2f}s")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        if summary['overall_success']:
            print("  üéâ –í—Å–µ —Ç–µ—Å—Ç—ã Position Tracker –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
            print("  ‚ú® –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        else:
            print("  üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫")
            print("  üõ†Ô∏è –ò—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–æ–º")
        
        print("="*80)
    
    async def generate_html_report(self, output_file: str = "test_results/position_tracker_report.html"):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –æ—Ç—á–µ—Ç –ø–æ —Ç–µ—Å—Ç–∞–º
        
        Args:
            output_file: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É HTML —Ñ–∞–π–ª—É
        """
        if not self.test_results:
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")
            return
        
        html_content = self._create_html_report()
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        Path(output_file).parent.mkdir(parents=True, exist_ok=True)
        
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        logger.info(f"üìÑ HTML –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
    
    def _create_html_report(self) -> str:
        """–°–æ–∑–¥–∞–µ—Ç HTML –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ—Ç—á–µ—Ç–∞"""
        summary = self.test_results.get("summary", {})
        
        html = f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Enhanced Position Tracker Test Report</title>
    <style>
        body {{ font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }}
        .container {{ max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 20px rgba(0,0,0,0.1); }}
        .header {{ text-align: center; border-bottom: 2px solid #eee; padding-bottom: 20px; margin-bottom: 30px; }}
        .header h1 {{ color: #2c3e50; margin: 0; }}
        .summary {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 30px; }}
        .card {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 8px; text-align: center; }}
        .card.success {{ background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%); }}
        .card.danger {{ background: linear-gradient(135deg, #f44336 0%, #da190b 100%); }}
        .card h3 {{ margin: 0 0 10px 0; font-size: 2em; }}
        .card p {{ margin: 0; opacity: 0.9; }}
        .test-section {{ margin-bottom: 30px; }}
        .test-section h2 {{ color: #2c3e50; border-left: 4px solid #3498db; padding-left: 15px; }}
        .test-grid {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 15px; }}
        .test-item {{ border: 1px solid #ddd; border-radius: 6px; padding: 15px; }}
        .test-item.success {{ border-left: 4px solid #4CAF50; }}
        .test-item.failure {{ border-left: 4px solid #f44336; }}
        .test-item h4 {{ margin: 0 0 10px 0; color: #333; }}
        .test-item .stats {{ font-size: 0.9em; color: #666; }}
        .footer {{ text-align: center; margin-top: 40px; padding-top: 20px; border-top: 1px solid #eee; color: #666; }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üéØ Enhanced Position Tracker</h1>
            <h2>Test Results Report</h2>
            <p>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {time.strftime('%Y-%m-%d %H:%M:%S')}</p>
        </div>
        
        <div class="summary">
            <div class="card {'success' if summary.get('overall_success') else 'danger'}">
                <h3>{'‚úÖ' if summary.get('overall_success') else '‚ùå'}</h3>
                <p>–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</p>
            </div>
            <div class="card">
                <h3>{summary.get('success_rate', 0):.1f}%</h3>
                <p>–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏</p>
            </div>
            <div class="card">
                <h3>{summary.get('total_total', 0)}</h3>
                <p>–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤</p>
            </div>
            <div class="card">
                <h3>{summary.get('total_execution_time', 0):.1f}s</h3>
                <p>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</p>
            </div>
        </div>
        
        <div class="test-section">
            <h2>üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ç–∏–ø–∞–º —Ç–µ—Å—Ç–æ–≤</h2>
            <div class="test-grid">
        """
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ç–µ—Å—Ç–æ–≤
        for test_type in ["unit", "integration", "performance"]:
            if test_type in self.test_results:
                result = self.test_results[test_type]
                success = result.get("success", False)
                
                html += f"""
                <div class="test-item {'success' if success else 'failure'}">
                    <h4>{'‚úÖ' if success else '‚ùå'} {test_type.capitalize()} Tests</h4>
                    <div class="stats">
                        <p><strong>–í—Ä–µ–º—è:</strong> {result.get('execution_time', 0):.2f}s</p>
                        <p><strong>–ü—Ä–æ–π–¥–µ–Ω–æ:</strong> {result.get('passed', 0)}/{result.get('total', 0)}</p>
                        <p><strong>–ü—Ä–æ–≤–∞–ª–µ–Ω–æ:</strong> {result.get('failed', 0)}</p>
                        <p><strong>–ü—Ä–æ–ø—É—â–µ–Ω–æ:</strong> {result.get('skipped', 0)}</p>
                    </div>
                </div>
                """
        
        html += """
            </div>
        </div>
        
        <div class="footer">
            <p>ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç Enhanced Position Tracker Test Suite</p>
        </div>
    </div>
</body>
</html>
        """
        
        return html


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    import argparse
    
    parser = argparse.ArgumentParser(description="Enhanced Position Tracker Test Suite")
    parser.add_argument("--type", choices=["all", "unit", "integration", "performance"], 
                       default="all", help="–¢–∏–ø —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
    parser.add_argument("--verbose", "-v", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
    parser.add_argument("--html-report", action="store_true", help="–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å HTML –æ—Ç—á–µ—Ç")
    
    args = parser.parse_args()
    
    suite = PositionTrackerTestSuite()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    if args.type == "all":
        await suite.run_all_tests(verbose=args.verbose)
    elif args.type == "unit":
        result = await suite.run_unit_tests(verbose=args.verbose)
        suite.test_results = {"unit": result}
    elif args.type == "integration":
        result = await suite.run_integration_tests(verbose=args.verbose)
        suite.test_results = {"integration": result}
    elif args.type == "performance":
        result = await suite.run_performance_tests(verbose=args.verbose)
        suite.test_results = {"performance": result}
    
    # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
    suite.print_summary()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –æ—Ç—á–µ—Ç –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
    if args.html_report:
        await suite.generate_html_report()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    overall_success = suite.test_results.get("summary", {}).get("overall_success", False)
    sys.exit(0 if overall_success else 1)


if __name__ == "__main__":
    asyncio.run(main())