#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –æ—Ä–¥–µ—Ä–æ–≤

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
1. –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã LONG/SHORT
2. –§–æ—Ä—Å–∏—Ä—É–µ—Ç –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
3. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ —Å —Ç–µ—Å—Ç–æ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º $150
4. –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ü–µ–ø–æ—á–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
5. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ –æ–±—Ä—ã–≤–∞ —Ü–µ–ø–æ—á–∫–∏
"""

import asyncio
import logging
import sys
import uuid
from datetime import datetime, timedelta
from typing import List

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, "/mnt/SSD/PYCHARMPRODJECT/BOT_AI_V3")

from database.connections import get_async_db
from database.models.base_models import (
    Balance,
    Order,
    OrderSide,
    OrderStatus,
    OrderType,
    Signal,
    SignalType,
    Trade,
)


class ForcedSignalOrderTester:
    """–§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤"""

    def __init__(self):
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)

        # –¢–µ—Å—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å $150
        self.test_balance = 150.0
        self.test_trader_id = "test_trader_150usd"

    async def run_forced_tests(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        self.logger.info("üöÄ –§–û–†–°–ò–†–û–í–ê–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–ì–ù–ê–õ ‚Üí –û–†–î–ï–†")

        try:
            # 1. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
            await self._setup_test_balance()

            # 2. –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            signals = await self._create_forced_signals()

            # 3. –§–æ—Ä—Å–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
            await self._force_create_orders_direct(signals)

            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
            await self._test_through_trading_engine(signals)

            # 5. –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã
            await self._diagnose_problems()

        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

    async def _setup_test_balance(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ $150"""
        self.logger.info(f"üí∞ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å ${self.test_balance}")

        try:
            async with get_async_db() as db:
                # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±–∞–ª–∞–Ω—Å—ã —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞
                await db.execute(
                    "DELETE FROM balances WHERE trader_id = %s", (self.test_trader_id,)
                )

                # –°–æ–∑–¥–∞–µ–º USDT –±–∞–ª–∞–Ω—Å
                usdt_balance = Balance(
                    exchange="bybit",
                    asset="USDT",
                    free=self.test_balance,
                    locked=0.0,
                    total=self.test_balance,
                    usd_value=self.test_balance,
                    trader_id=self.test_trader_id,
                )

                # –°–æ–∑–¥–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–π BTC –±–∞–ª–∞–Ω—Å –¥–ª—è SHORT –ø–æ–∑–∏—Ü–∏–π
                btc_balance = Balance(
                    exchange="bybit",
                    asset="BTC",
                    free=0.002,  # ~$90 –ø—Ä–∏ $45000
                    locked=0.0,
                    total=0.002,
                    usd_value=90.0,
                    trader_id=self.test_trader_id,
                )

                db.add(usdt_balance)
                db.add(btc_balance)
                await db.commit()

                self.logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å —Å–æ–∑–¥–∞–Ω:")
                self.logger.info(f"   üî∏ USDT: ${self.test_balance}")
                self.logger.info("   üî∏ BTC: 0.002 (~$90)")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")

    async def _create_forced_signals(self) -> List[Signal]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        self.logger.info("üìù –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã...")

        current_time = datetime.utcnow()

        # –°–∏–≥–Ω–∞–ª—ã —Å —É—á–µ—Ç–æ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ $150
        forced_signals = [
            {
                "symbol": "BTCUSDT",
                "signal_type": SignalType.LONG,
                "strength": 0.95,
                "confidence": 0.98,
                "suggested_price": 45000.0,
                "suggested_quantity": 0.001,  # ~$45 –∏–∑ $150
                "suggested_stop_loss": 44000.0,
                "suggested_take_profit": 47000.0,
                "strategy": "forced_test_ml",
                "priority": "high",
            },
            {
                "symbol": "ETHUSDT",
                "signal_type": SignalType.SHORT,
                "strength": 0.90,
                "confidence": 0.95,
                "suggested_price": 2500.0,
                "suggested_quantity": 0.02,  # ~$50 –∏–∑ $150
                "suggested_stop_loss": 2600.0,
                "suggested_take_profit": 2400.0,
                "strategy": "forced_test_momentum",
                "priority": "high",
            },
            {
                "symbol": "ADAUSDT",
                "signal_type": SignalType.LONG,
                "strength": 0.85,
                "confidence": 0.88,
                "suggested_price": None,  # Market order
                "suggested_quantity": 100.0,  # ~$50 –∏–∑ $150 (–ø—Ä–∏ $0.50)
                "suggested_stop_loss": 0.48,
                "suggested_take_profit": 0.55,
                "strategy": "forced_test_breakout",
                "priority": "medium",
            },
        ]

        signals = []

        try:
            async with get_async_db() as db:
                for signal_data in forced_signals:
                    signal = Signal(
                        symbol=signal_data["symbol"],
                        exchange="bybit",
                        signal_type=signal_data["signal_type"],
                        strength=signal_data["strength"],
                        confidence=signal_data["confidence"],
                        suggested_price=signal_data["suggested_price"],
                        suggested_quantity=signal_data["suggested_quantity"],
                        suggested_stop_loss=signal_data["suggested_stop_loss"],
                        suggested_take_profit=signal_data["suggested_take_profit"],
                        strategy_name=signal_data["strategy"],
                        timeframe="5m",
                        created_at=current_time,
                        expires_at=current_time + timedelta(hours=2),
                        indicators={
                            "forced_test": True,
                            "priority": signal_data["priority"],
                            "test_balance": self.test_balance,
                            "rsi": 75.5,
                            "macd_signal": "strong_" + signal_data["signal_type"].value,
                        },
                        extra_data={
                            "forced_creation": True,
                            "test_id": str(uuid.uuid4()),
                            "balance_check": True,
                            "trader_id": self.test_trader_id,
                        },
                    )

                    db.add(signal)
                    signals.append(signal)

                await db.commit()

                # –û–±–Ω–æ–≤–ª—è–µ–º ID
                for signal in signals:
                    await db.refresh(signal)

                self.logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(signals)} —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
                for signal in signals:
                    self.logger.info(
                        f"   üî∏ {signal.id}: {signal.signal_type.value} {signal.symbol}"
                    )

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

        return signals

    async def _force_create_orders_direct(self, signals: List[Signal]):
        """–ü—Ä—è–º–æ–µ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤"""
        self.logger.info("‚ö° –§–û–†–°–ò–†–£–ï–ú —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞–ø—Ä—è–º—É—é...")

        try:
            async with get_async_db() as db:
                for signal in signals:
                    self.logger.info(f"üîÑ –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ {signal.id}")

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞
                    order_side = self._get_order_side(signal.signal_type)
                    order_type = (
                        OrderType.LIMIT if signal.suggested_price else OrderType.MARKET
                    )

                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –æ—Ä–¥–µ—Ä–∞
                    order_id = f"FORCED_{uuid.uuid4().hex[:8]}_{int(datetime.utcnow().timestamp())}"

                    # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä
                    order = Order(
                        exchange=signal.exchange,
                        symbol=signal.symbol,
                        order_id=order_id,
                        side=order_side,
                        order_type=order_type,
                        status=OrderStatus.PENDING,
                        price=float(signal.suggested_price)
                        if signal.suggested_price
                        else None,
                        quantity=float(signal.suggested_quantity),
                        filled_quantity=0.0,
                        stop_loss=(
                            float(signal.suggested_stop_loss)
                            if signal.suggested_stop_loss
                            else None
                        ),
                        take_profit=(
                            float(signal.suggested_take_profit)
                            if signal.suggested_take_profit
                            else None
                        ),
                        strategy_name=signal.strategy_name,
                        trader_id=self.test_trader_id,
                        extra_data={
                            "signal_id": signal.id,
                            "forced_creation": True,
                            "test_balance": self.test_balance,
                            "signal_strength": signal.strength,
                            "signal_confidence": signal.confidence,
                        },
                    )

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                    db.add(order)
                    await db.commit()
                    await db.refresh(order)

                    self.logger.info(f"‚úÖ –û—Ä–¥–µ—Ä {order.order_id} —Å–æ–∑–¥–∞–Ω:")
                    self.logger.info(f"   üî∏ Symbol: {order.symbol}")
                    self.logger.info(f"   üî∏ Side: {order.side.value}")
                    self.logger.info(f"   üî∏ Type: {order.order_type.value}")
                    self.logger.info(f"   üî∏ Quantity: {order.quantity}")
                    self.logger.info(f"   üî∏ Price: {order.price}")
                    self.logger.info(f"   üî∏ Status: {order.status.value}")

                    # –°–∏–º—É–ª–∏—Ä—É–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    await self._simulate_order_execution(order, db)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤: {e}")

    async def _simulate_order_execution(self, order: Order, db):
        """–°–∏–º—É–ª—è—Ü–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.logger.info(f"üéØ –°–∏–º—É–ª–∏—Ä—É–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ {order.order_id}")

        try:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
            execution_price = order.price if order.price else 45000.0  # Mock price
            filled_quantity = order.quantity

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä
            order.status = OrderStatus.FILLED
            order.filled_quantity = filled_quantity
            order.average_price = execution_price
            order.filled_at = datetime.utcnow()

            await db.merge(order)

            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–¥–µ–ª–∫—É
            trade = Trade(
                exchange=order.exchange,
                symbol=order.symbol,
                trade_id=f"TRADE_{uuid.uuid4().hex[:8]}",
                order_id=order.order_id,
                side=order.side,
                price=execution_price,
                quantity=filled_quantity,
                commission=filled_quantity * execution_price * 0.001,  # 0.1% –∫–æ–º–∏—Å—Å–∏—è
                commission_asset="USDT",
                realized_pnl=0.0,  # –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                executed_at=datetime.utcnow(),
                strategy_name=order.strategy_name,
                trader_id=order.trader_id,
            )

            db.add(trade)
            await db.commit()

            self.logger.info(f"   ‚úÖ –û—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω –ø–æ —Ü–µ–Ω–µ {execution_price}")
            self.logger.info(f"   üî∏ –û–±—ä–µ–º: {filled_quantity}")
            self.logger.info(f"   üî∏ –°—É–º–º–∞: ${execution_price * filled_quantity:.2f}")

        except Exception as e:
            self.logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")

    async def _test_through_trading_engine(self, signals: List[Signal]):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)"""
        self.logger.info("üèóÔ∏è  –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫...")

        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
            from core.system.orchestrator import SystemOrchestrator
            from trading.engine import TradingEngine

            self.logger.info("   ‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")

            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫
            # –ù–æ —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
            self.logger.warning(
                "   ‚ö†Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –¥–≤–∏–∂–æ–∫ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"
            )

        except ImportError as e:
            self.logger.warning(f"   ‚ö†Ô∏è  –¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        except Exception as e:
            self.logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–≤–∏–∂–∫–∞: {e}")

    async def _diagnose_problems(self):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º –≤ —Å–∏—Å—Ç–µ–º–µ"""
        self.logger.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú...")

        try:
            async with get_async_db() as db:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                signals_result = await db.execute(
                    "SELECT COUNT(*) FROM signals WHERE extra_data::text LIKE '%forced_creation%'"
                )
                forced_signals_count = signals_result.scalar()

                orders_result = await db.execute(
                    "SELECT COUNT(*) FROM orders WHERE extra_data::text LIKE '%forced_creation%'"
                )
                forced_orders_count = orders_result.scalar()

                trades_result = await db.execute(
                    "SELECT COUNT(*) FROM trades WHERE trader_id = %s",
                    (self.test_trader_id,),
                )
                trades_count = trades_result.scalar()

                balance_result = await db.execute(
                    "SELECT asset, free, locked, total FROM balances WHERE trader_id = %s",
                    (self.test_trader_id,),
                )
                balances = balance_result.fetchall()

                self.logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
                self.logger.info(
                    f"   üî∏ –§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {forced_signals_count}"
                )
                self.logger.info(f"   üî∏ –§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {forced_orders_count}")
                self.logger.info(f"   üî∏ –°–¥–µ–ª–æ–∫: {trades_count}")

                self.logger.info("üí∞ –ë–ê–õ–ê–ù–°–´:")
                for balance in balances:
                    self.logger.info(
                        f"   üî∏ {balance.asset}: {balance.free} (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {balance.locked})"
                    )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –±–µ–∑ –æ—Ä–¥–µ—Ä–æ–≤
                all_signals_result = await db.execute("SELECT COUNT(*) FROM signals")
                all_signals_count = all_signals_result.scalar()

                all_orders_result = await db.execute("SELECT COUNT(*) FROM orders")
                all_orders_count = all_orders_result.scalar()

                self.logger.info("üîç –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
                self.logger.info(f"   üî∏ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –ë–î: {all_signals_count}")
                self.logger.info(f"   üî∏ –í—Å–µ–≥–æ –æ—Ä–¥–µ—Ä–æ–≤ –≤ –ë–î: {all_orders_count}")
                self.logger.info(
                    f"   üî∏ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ –∫ —Å–∏–≥–Ω–∞–ª–∞–º: {all_orders_count / all_signals_count * 100:.1f}%"
                )

                if all_signals_count > 50 and all_orders_count < 10:
                    self.logger.error("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ú–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤, –º–∞–ª–æ –æ—Ä–¥–µ—Ä–æ–≤!")
                    self.logger.error("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                    self.logger.error(
                        "   1. SignalProcessor –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ OrderManager"
                    )
                    self.logger.error(
                        "   2. TradingEngine –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã"
                    )
                    self.logger.error("   3. –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤")
                    self.logger.error("   4. –ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–æ–º")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")

    def _get_order_side(self, signal_type: SignalType) -> OrderSide:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω—ã –æ—Ä–¥–µ—Ä–∞"""
        mapping = {
            SignalType.LONG: OrderSide.BUY,
            SignalType.SHORT: OrderSide.SELL,
            SignalType.CLOSE_LONG: OrderSide.SELL,
            SignalType.CLOSE_SHORT: OrderSide.BUY,
        }
        return mapping.get(signal_type, OrderSide.BUY)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = ForcedSignalOrderTester()
    await tester.run_forced_tests()


if __name__ == "__main__":
    asyncio.run(main())
