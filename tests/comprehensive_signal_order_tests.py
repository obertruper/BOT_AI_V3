#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ü–µ–ø–æ—á–∫–∏ —Å–∏–≥–Ω–∞–ª ‚Üí –æ—Ä–¥–µ—Ä

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
2. –û–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ SignalProcessor
3. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ –∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ OrderManager
4. –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ ExecutionEngine
5. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø—Ä–æ–±–ª–µ–º –≤ —Ü–µ–ø–æ—á–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
"""

import asyncio
import logging
import sys
import uuid
from datetime import datetime, timedelta

from sqlalchemy import text

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, "/mnt/SSD/PYCHARMPRODJECT/BOT_AI_V3")

from database.connections import get_async_db
from database.models.base_models import (
    Order,
    OrderSide,
    OrderStatus,
    OrderType,
    Signal,
    SignalType,
)
from trading.orders.order_manager import OrderManager
from trading.signals.signal_processor import SignalProcessor


class ComprehensiveTradingDiagnostics:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""

    def __init__(self):
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤
        self.test_stats = {
            "signals_created": 0,
            "signals_processed": 0,
            "orders_created": 0,
            "orders_submitted": 0,
            "errors": [],
            "warnings": [],
        }

    async def run_comprehensive_tests(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤"""
        self.logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã")

        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
            await self._test_database_connection()

            # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            await self._analyze_existing_data()

            # 3. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã LONG –∏ SHORT
            test_signals = await self._create_test_signals()

            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –ë–î
            await self._verify_signals_in_db(test_signals)

            # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ SignalProcessor
            await self._test_signal_processing(test_signals)

            # 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ –∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤
            await self._test_order_creation_from_signals(test_signals)

            # 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –æ—Ä–¥–µ—Ä–æ–≤
            await self._test_order_validation()

            # 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
            await self._test_system_components()

            # 9. –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Ü–µ–ø–æ—á–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await self._simulate_full_processing_chain()

            # 10. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            await self._generate_diagnostic_report()

        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: {e}")
            self.test_stats["errors"].append(f"Critical error: {e}")

    async def _test_database_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
        self.logger.info("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...")

        try:
            async with get_async_db() as db:
                result = await db.execute(text("SELECT version()"))
                version = result.scalar()
                self.logger.info(f"‚úÖ –ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∞: {version}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü
                result = await db.execute(
                    text(
                        "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public'"
                    )
                )
                tables = [row[0] for row in result]
                required_tables = ["signals", "orders", "trades", "balances"]

                for table in required_tables:
                    if table in tables:
                        self.logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    else:
                        self.logger.error(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {table} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            self.test_stats["errors"].append(f"DB connection failed: {e}")

    async def _analyze_existing_data(self):
        """–ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î"""
        self.logger.info("üìà –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ...")

        try:
            async with get_async_db() as db:
                # –°–∏–≥–Ω–∞–ª—ã
                result = await db.execute("SELECT COUNT(*), MAX(created_at) FROM signals")
                signals_count, last_signal = result.fetchone()

                # –û—Ä–¥–µ—Ä–∞
                result = await db.execute(
                    "SELECT COUNT(*), COUNT(*) FILTER (WHERE status = 'filled') FROM orders"
                )
                orders_count, filled_orders = result.fetchone()

                # –°–¥–µ–ª–∫–∏
                result = await db.execute(
                    "SELECT COUNT(*), COALESCE(SUM(quantity * price), 0) FROM trades"
                )
                trades_count, total_volume = result.fetchone()

                self.logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö:")
                self.logger.info(f"   üî∏ –°–∏–≥–Ω–∞–ª—ã: {signals_count} (–ø–æ—Å–ª–µ–¥–Ω–∏–π: {last_signal})")
                self.logger.info(f"   üî∏ –û—Ä–¥–µ—Ä–∞: {orders_count} (–∏—Å–ø–æ–ª–Ω–µ–Ω–æ: {filled_orders})")
                self.logger.info(f"   üî∏ –°–¥–µ–ª–∫–∏: {trades_count} (–æ–±—ä–µ–º: ${total_volume:.2f})")

                if signals_count > 0 and orders_count == 0:
                    self.logger.warning("‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –ï—Å—Ç—å —Å–∏–≥–Ω–∞–ª—ã, –Ω–æ –Ω–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤!")
                    self.test_stats["warnings"].append("Signals exist but no orders created")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")

    async def _create_test_signals(self) -> list[Signal]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ LONG –∏ SHORT"""
        self.logger.info("üìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã...")

        test_signals = []
        current_time = datetime.utcnow()

        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        test_scenarios = [
            {
                "symbol": "BTCUSDT",
                "signal_type": SignalType.LONG,
                "strength": 0.85,
                "confidence": 0.90,
                "suggested_price": 45000.0,
                "suggested_quantity": 0.001,
                "suggested_stop_loss": 44000.0,
                "suggested_take_profit": 47000.0,
                "strategy": "test_ml_strategy",
                "exchange": "bybit",
            },
            {
                "symbol": "ETHUSDT",
                "signal_type": SignalType.SHORT,
                "strength": 0.75,
                "confidence": 0.85,
                "suggested_price": 2800.0,
                "suggested_quantity": 0.01,
                "suggested_stop_loss": 2900.0,
                "suggested_take_profit": 2700.0,
                "strategy": "test_momentum_strategy",
                "exchange": "bybit",
            },
            {
                "symbol": "ADAUSDT",
                "signal_type": SignalType.LONG,
                "strength": 0.60,
                "confidence": 0.70,
                "suggested_price": None,  # Market order
                "suggested_quantity": 10.0,
                "suggested_stop_loss": 0.45,
                "suggested_take_profit": 0.55,
                "strategy": "test_breakout_strategy",
                "exchange": "bybit",
            },
        ]

        try:
            async with get_async_db() as db:
                for scenario in test_scenarios:
                    signal = Signal(
                        symbol=scenario["symbol"],
                        exchange=scenario["exchange"],
                        signal_type=scenario["signal_type"],
                        strength=scenario["strength"],
                        confidence=scenario["confidence"],
                        suggested_price=scenario["suggested_price"],
                        suggested_quantity=scenario["suggested_quantity"],
                        suggested_stop_loss=scenario["suggested_stop_loss"],
                        suggested_take_profit=scenario["suggested_take_profit"],
                        strategy_name=scenario["strategy"],
                        timeframe="15m",
                        created_at=current_time,
                        expires_at=current_time + timedelta(hours=1),
                        indicators={
                            "rsi": 65.5,
                            "macd": 0.15,
                            "bb_position": 0.75,
                            "volume_ratio": 1.8,
                        },
                        extra_data={
                            "test_signal": True,
                            "test_id": str(uuid.uuid4()),
                            "created_by": "comprehensive_diagnostics",
                        },
                    )

                    db.add(signal)
                    test_signals.append(signal)

                await db.commit()

                # –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ –∫–æ–º–º–∏—Ç–∞
                for signal in test_signals:
                    await db.refresh(signal)

                self.test_stats["signals_created"] = len(test_signals)
                self.logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(test_signals)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            self.test_stats["errors"].append(f"Test signal creation failed: {e}")

        return test_signals

    async def _verify_signals_in_db(self, test_signals: list[Signal]):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –ë–î"""
        self.logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –ë–î...")

        try:
            async with get_async_db() as db:
                for signal in test_signals:
                    result = await db.execute("SELECT * FROM signals WHERE id = %s", (signal.id,))
                    db_signal = result.fetchone()

                    if db_signal:
                        self.logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª {signal.id} –Ω–∞–π–¥–µ–Ω –≤ –ë–î")

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
                        if db_signal.symbol == signal.symbol:
                            self.logger.info(f"   üî∏ Symbol: {db_signal.symbol} ‚úì")
                        else:
                            self.logger.error(
                                f"   ‚ùå Symbol mismatch: {db_signal.symbol} != {signal.symbol}"
                            )

                        if db_signal.signal_type == signal.signal_type:
                            self.logger.info(f"   üî∏ Type: {db_signal.signal_type.value} ‚úì")
                        else:
                            self.logger.error("   ‚ùå Type mismatch")

                        if abs(float(db_signal.strength) - float(signal.strength)) < 0.01:
                            self.logger.info(f"   üî∏ Strength: {db_signal.strength} ‚úì")
                        else:
                            self.logger.error("   ‚ùå Strength mismatch")

                    else:
                        self.logger.error(f"‚ùå –°–∏–≥–Ω–∞–ª {signal.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î!")
                        self.test_stats["errors"].append(f"Signal {signal.id} not found in DB")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

    async def _test_signal_processing(self, test_signals: list[Signal]):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ SignalProcessor"""
        self.logger.info("‚öôÔ∏è  –¢–µ—Å—Ç–∏—Ä—É–µ–º SignalProcessor...")

        try:
            processor = SignalProcessor()

            for signal in test_signals:
                self.logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª {signal.id} ({signal.signal_type.value})")

                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
                if processor._validate_signal(signal):
                    self.logger.info("   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞")
                else:
                    self.logger.error("   ‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞!")
                    self.test_stats["errors"].append(f"Signal {signal.id} validation failed")
                    continue

                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                try:
                    result = await processor.process_signal(signal)
                    if result:
                        self.logger.info("   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞")
                        self.test_stats["signals_processed"] += 1
                    else:
                        self.logger.warning("   ‚ö†Ô∏è  –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç)")
                        self.test_stats["warnings"].append(
                            f"Signal {signal.id} processing rejected"
                        )

                except Exception as e:
                    self.logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
                    self.test_stats["errors"].append(f"Signal {signal.id} processing error: {e}")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SignalProcessor: {e}")

    async def _test_order_creation_from_signals(self, test_signals: list[Signal]):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤ –∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        self.logger.info("üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ –∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤...")

        try:
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ exchange_registry
            class MockExchangeRegistry:
                async def get_exchange(self, exchange_name):
                    return MockExchange()

            class MockExchange:
                async def create_order(self, **kwargs):
                    return f"test_order_{uuid.uuid4().hex[:8]}"

                async def get_balance(self, asset):
                    return {"free": 1000.0, "locked": 0.0, "total": 1000.0}

                async def get_ticker(self, symbol):
                    return {"last": 45000.0, "high": 46000.0, "low": 44000.0}

                async def get_orderbook(self, symbol):
                    return {"bids": [[44950.0, 1.5]], "asks": [[45050.0, 1.2]]}

            exchange_registry = MockExchangeRegistry()
            order_manager = OrderManager(exchange_registry)

            for signal in test_signals:
                self.logger.info(f"üîÑ –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä –∏–∑ —Å–∏–≥–Ω–∞–ª–∞ {signal.id}")

                try:
                    order = await order_manager.create_order_from_signal(signal, "test_trader")

                    if order:
                        self.logger.info(f"   ‚úÖ –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω: {order.order_id}")
                        self.logger.info(f"      üî∏ Symbol: {order.symbol}")
                        self.logger.info(f"      üî∏ Side: {order.side.value}")
                        self.logger.info(f"      üî∏ Type: {order.order_type.value}")
                        self.logger.info(f"      üî∏ Quantity: {order.quantity}")
                        self.logger.info(f"      üî∏ Price: {order.price}")
                        self.logger.info(f"      üî∏ Status: {order.status.value}")

                        self.test_stats["orders_created"] += 1

                        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ä–¥–µ—Ä–∞
                        await self._test_order_submission(order, order_manager)

                    else:
                        self.logger.error("   ‚ùå –û—Ä–¥–µ—Ä –Ω–µ —Å–æ–∑–¥–∞–Ω!")
                        self.test_stats["errors"].append(
                            f"Order creation failed for signal {signal.id}"
                        )

                except Exception as e:
                    self.logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {e}")
                    self.test_stats["errors"].append(
                        f"Order creation error for signal {signal.id}: {e}"
                    )

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤ –æ—Ä–¥–µ—Ä–æ–≤: {e}")

    async def _test_order_submission(self, order: Order, order_manager: OrderManager):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ä–¥–µ—Ä–∞"""
        self.logger.info(f"üì§ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ä–¥–µ—Ä–∞ {order.order_id}")

        try:
            result = await order_manager.submit_order(order)

            if result:
                self.logger.info("   ‚úÖ –û—Ä–¥–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                self.test_stats["orders_submitted"] += 1
            else:
                self.logger.warning("   ‚ö†Ô∏è  –û—Ä–¥–µ—Ä –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                self.test_stats["warnings"].append(f"Order {order.order_id} submission failed")

        except Exception as e:
            self.logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
            self.test_stats["errors"].append(f"Order {order.order_id} submission error: {e}")

    async def _test_order_validation(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤"""
        self.logger.info("‚úÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –æ—Ä–¥–µ—Ä–æ–≤...")

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ä–¥–µ—Ä–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏
        test_orders = [
            # –í–∞–ª–∏–¥–Ω—ã–π –æ—Ä–¥–µ—Ä
            Order(
                exchange="bybit",
                symbol="BTCUSDT",
                order_id="valid_order",
                side=OrderSide.BUY,
                order_type=OrderType.LIMIT,
                status=OrderStatus.PENDING,
                price=45000.0,
                quantity=0.001,
            ),
            # –ù—É–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            Order(
                exchange="bybit",
                symbol="BTCUSDT",
                order_id="zero_quantity",
                side=OrderSide.BUY,
                order_type=OrderType.LIMIT,
                status=OrderStatus.PENDING,
                price=45000.0,
                quantity=0.0,
            ),
            # –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –±–µ–∑ —Ü–µ–Ω—ã
            Order(
                exchange="bybit",
                symbol="BTCUSDT",
                order_id="no_price",
                side=OrderSide.BUY,
                order_type=OrderType.LIMIT,
                status=OrderStatus.PENDING,
                price=None,
                quantity=0.001,
            ),
            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            Order(
                exchange="bybit",
                symbol="BTCUSDT",
                order_id="wrong_status",
                side=OrderSide.BUY,
                order_type=OrderType.LIMIT,
                status=OrderStatus.FILLED,
                price=45000.0,
                quantity=0.001,
            ),
        ]

        # –ú–æ–∫ execution engine
        class MockExecutionEngine:
            def _validate_order(self, order):
                if order.status != OrderStatus.PENDING:
                    return False
                if order.quantity <= 0:
                    return False
                if order.order_type == OrderType.LIMIT and not order.price:
                    return False
                return True

        executor = MockExecutionEngine()

        for order in test_orders:
            is_valid = executor._validate_order(order)
            expected_valid = order.order_id == "valid_order"

            if is_valid == expected_valid:
                self.logger.info(f"   ‚úÖ {order.order_id}: –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ ({is_valid})")
            else:
                self.logger.error(f"   ‚ùå {order.order_id}: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏")

    async def _test_system_components(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        self.logger.info("üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
        components_check = {
            "SignalProcessor": False,
            "OrderManager": False,
            "ExecutionEngine": False,
            "Database": False,
            "Models": False,
        }

        try:
            components_check["SignalProcessor"] = True
            self.logger.info("   ‚úÖ SignalProcessor –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            self.logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ SignalProcessor: {e}")

        try:
            components_check["OrderManager"] = True
            self.logger.info("   ‚úÖ OrderManager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            self.logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ OrderManager: {e}")

        try:
            components_check["ExecutionEngine"] = True
            self.logger.info("   ‚úÖ ExecutionEngine –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            self.logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ ExecutionEngine: {e}")

        try:
            components_check["Database"] = True
            self.logger.info("   ‚úÖ Database connection –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            self.logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ database: {e}")

        try:
            components_check["Models"] = True
            self.logger.info("   ‚úÖ Database models –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        except Exception as e:
            self.logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ models: {e}")

    async def _simulate_full_processing_chain(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª ‚Üí –æ—Ä–¥–µ—Ä ‚Üí –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ"""
        self.logger.info("üîÑ –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Ü–µ–ø–æ—á–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏...")

        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –ø–æ–ª–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏
            test_signal = Signal(
                symbol="BTCUSDT",
                exchange="bybit",
                signal_type=SignalType.LONG,
                strength=0.80,
                confidence=0.85,
                suggested_price=45000.0,
                suggested_quantity=0.001,
                suggested_stop_loss=44000.0,
                suggested_take_profit=46000.0,
                strategy_name="full_chain_test",
                timeframe="5m",
                created_at=datetime.utcnow(),
                expires_at=datetime.utcnow() + timedelta(minutes=30),
                indicators={"test": True},
                extra_data={"full_chain_test": True},
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            async with get_async_db() as db:
                db.add(test_signal)
                await db.commit()
                await db.refresh(test_signal)

            self.logger.info(f"   üî∏ –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª {test_signal.id}")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ SignalProcessor
            processor = SignalProcessor()
            processed = await processor.process_signal(test_signal)

            if processed:
                self.logger.info("   üî∏ –®–∞–≥ 2: –°–∏–≥–Ω–∞–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω ‚úÖ")
            else:
                self.logger.warning("   üî∏ –®–∞–≥ 2: –°–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω ‚ö†Ô∏è")
                return

            # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä
            class MockExchangeRegistry:
                async def get_exchange(self, name):
                    class MockExchange:
                        async def create_order(self, **kwargs):
                            return f"chain_test_{uuid.uuid4().hex[:8]}"

                        async def get_balance(self, asset):
                            return {"free": 1000.0}

                    return MockExchange()

            order_manager = OrderManager(MockExchangeRegistry())
            order = await order_manager.create_order_from_signal(test_signal, "chain_test_trader")

            if order:
                self.logger.info(f"   üî∏ –®–∞–≥ 3: –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω {order.order_id} ‚úÖ")
            else:
                self.logger.error("   üî∏ –®–∞–≥ 3: –û—Ä–¥–µ—Ä –ù–ï —Å–æ–∑–¥–∞–Ω ‚ùå")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä
            submitted = await order_manager.submit_order(order)

            if submitted:
                self.logger.info("   üî∏ –®–∞–≥ 4: –û—Ä–¥–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚úÖ")
            else:
                self.logger.error("   üî∏ –®–∞–≥ 4: –û—Ä–¥–µ—Ä –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚ùå")

            self.logger.info("üéâ –ü–æ–ª–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞!")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ª–Ω–æ–π —Ü–µ–ø–æ—á–∫–µ: {e}")
            self.test_stats["errors"].append(f"Full chain simulation error: {e}")

    async def _generate_diagnostic_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        self.logger.info("\n" + "=" * 60)
        self.logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
        self.logger.info("=" * 60)

        self.logger.info("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        self.logger.info(f"   üî∏ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {self.test_stats['signals_created']}")
        self.logger.info(f"   üî∏ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {self.test_stats['signals_processed']}")
        self.logger.info(f"   üî∏ –°–æ–∑–¥–∞–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤: {self.test_stats['orders_created']}")
        self.logger.info(f"   üî∏ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤: {self.test_stats['orders_submitted']}")

        if self.test_stats["errors"]:
            self.logger.error(f"\n‚ùå –û–®–ò–ë–ö–ò ({len(self.test_stats['errors'])}):")
            for i, error in enumerate(self.test_stats["errors"], 1):
                self.logger.error(f"   {i}. {error}")

        if self.test_stats["warnings"]:
            self.logger.warning(f"\n‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø ({len(self.test_stats['warnings'])}):")
            for i, warning in enumerate(self.test_stats["warnings"], 1):
                self.logger.warning(f"   {i}. {warning}")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self.logger.info("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")

        if self.test_stats["signals_created"] > 0 and self.test_stats["orders_created"] == 0:
            self.logger.info("   üî∏ –ö–†–ò–¢–ò–ß–ù–û: –°–∏–≥–Ω–∞–ª—ã —Å–æ–∑–¥–∞—é—Ç—Å—è, –Ω–æ –æ—Ä–¥–µ—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞—é—Ç—Å—è!")
            self.logger.info("      - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é OrderManager –≤ TradingEngine")
            self.logger.info("      - –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ SignalProcessor –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤")
            self.logger.info("      - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ _process_signal()")

        if len(self.test_stats["errors"]) == 0:
            self.logger.info("   üéâ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        else:
            self.logger.info(
                f"   ‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(self.test_stats['errors'])} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º"
            )

        self.logger.info("\n" + "=" * 60)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    diagnostics = ComprehensiveTradingDiagnostics()
    await diagnostics.run_comprehensive_tests()


if __name__ == "__main__":
    asyncio.run(main())
