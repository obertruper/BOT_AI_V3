#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π Enhanced SL/TP Manager —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from exchanges.base.models import Position
from trading.positions.position_manager import Position as TradingPosition
from trading.sltp.enhanced_manager import EnhancedSLTPManager, PositionAdapter
from trading.sltp.models import SLTPConfig


class MockExchangeClient:
    """–ú–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –±–∏—Ä–∂–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""

    async def set_stop_loss(self, symbol: str, price: float, quantity: float):
        class MockResponse:
            success = True
            order_id = f"sl_{symbol}_{price}"

        return MockResponse()

    async def set_take_profit(self, symbol: str, price: float, quantity: float):
        class MockResponse:
            success = True
            order_id = f"tp_{symbol}_{price}"

        return MockResponse()

    async def create_order(self, params: dict):
        class MockResponse:
            success = True
            order_id = f"order_{params['symbol']}_{params['qty']}"

        return MockResponse()

    async def cancel_order(self, symbol: str, order_id: str):
        class MockResponse:
            success = True

        return MockResponse()


class MockConfigManager:
    """–ú–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""

    def get_system_config(self):
        return {
            "enhanced_sltp": {
                "trailing_stop": {
                    "enabled": True,
                    "type": "percentage",
                    "step": 0.5,
                    "min_profit": 0.3,
                    "max_distance": 2.0,
                },
                "partial_take_profit": {
                    "enabled": True,
                    "update_sl_after_partial": True,
                    "levels": [
                        {"percent": 1.0, "close_ratio": 0.25},
                        {"percent": 2.0, "close_ratio": 0.25},
                        {"percent": 3.0, "close_ratio": 0.50},
                    ],
                },
                "profit_protection": {
                    "enabled": True,
                    "breakeven_percent": 1.0,
                    "breakeven_offset": 0.2,
                    "lock_percent": [
                        {"trigger": 2.0, "lock": 1.0},
                        {"trigger": 3.0, "lock": 2.0},
                    ],
                    "max_updates": 5,
                },
                "volatility_adjustment": {"enabled": False, "multiplier": 1.0},
            },
            "trading": {"hedge_mode": True},
        }


def test_position_adapter():
    """–¢–µ—Å—Ç –∞–¥–∞–ø—Ç–µ—Ä–∞ Position"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PositionAdapter ===")

    # –¢–µ—Å—Ç —Å exchanges.base.models.Position
    exchange_position = Position(
        symbol="BTCUSDT", side="Buy", size=1.0, entry_price=50000.0, mark_price=51000.0
    )

    adapter1 = PositionAdapter(exchange_position)
    print("Exchange Position —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä:")
    print(f"  Symbol: {adapter1.symbol}")
    print(f"  Side: {adapter1.side}")
    print(f"  Size: {adapter1.size}")
    print(f"  Entry Price: {adapter1.entry_price}")

    # –¢–µ—Å—Ç —Å trading.positions.position_manager.Position
    trading_position = TradingPosition(
        symbol="ETHUSDT",
        exchange="bybit",
        side="long",
        quantity=10.0,
        entry_price=3000.0,
    )

    adapter2 = PositionAdapter(trading_position)
    print("\nTrading Position —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä:")
    print(f"  Symbol: {adapter2.symbol}")
    print(f"  Side: {adapter2.side}")
    print(f"  Size: {adapter2.size}")
    print(f"  Entry Price: {adapter2.entry_price}")

    print("‚úÖ PositionAdapter —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


async def test_enhanced_sltp_manager():
    """–¢–µ—Å—Ç Enhanced SL/TP Manager"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EnhancedSLTPManager ===")

    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    config_manager = MockConfigManager()
    exchange_client = MockExchangeClient()

    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
    manager = EnhancedSLTPManager(config_manager, exchange_client)

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
    position = Position(
        symbol="BTCUSDT", side="Buy", size=1.0, entry_price=50000.0, mark_price=50000.0
    )

    print(f"–°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: {position.symbol} {position.side} {position.size}")

    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö SL/TP –æ—Ä–¥–µ—Ä–æ–≤ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å SL/TP
        config = SLTPConfig(
            stop_loss=2.0,  # 2%
            take_profit=4.0,  # 4%
        )

        orders = await manager.create_sltp_orders(position, None, config)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(orders)} SL/TP –æ—Ä–¥–µ—Ä–æ–≤")

        for order in orders:
            print(f"  - {order.order_type}: {order.trigger_price} (qty: {order.quantity})")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SL/TP: {e}")

    # –¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å V2
    try:
        result = await manager.register_sltp_orders(
            trade_id="test_001",
            symbol="BTCUSDT",
            side="Buy",
            entry_price=50000.0,
            stop_loss=49000.0,
            take_profit=52000.0,
            trade_qty=1.0,
        )
        print(f"‚úÖ register_sltp_orders —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ register_sltp_orders: {e}")

    # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤
    try:
        check_result = await manager.check_and_fix_sltp("test_001")
        print(f"‚úÖ check_and_fix_sltp —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {check_result}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ check_and_fix_sltp: {e}")

    # –¢–µ—Å—Ç —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø–∞
    try:
        current_price = 51500.0  # –ü—Ä–∏–±—ã–ª—å 3%
        trailing_result = await manager.update_trailing_stop(position, current_price)
        if trailing_result:
            print(f"‚úÖ Trailing stop –æ–±–Ω–æ–≤–ª–µ–Ω: {trailing_result.trigger_price}")
        else:
            print("‚ÑπÔ∏è  Trailing stop –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω (—É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã)")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ trailing stop: {e}")

    # –¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –ø—Ä–∏–±—ã–ª–∏
    try:
        current_price = 52000.0  # –ü—Ä–∏–±—ã–ª—å 4%
        protection_result = await manager.update_profit_protection(position, current_price)
        if protection_result:
            print(f"‚úÖ Profit protection –æ–±–Ω–æ–≤–ª–µ–Ω: {protection_result.trigger_price}")
        else:
            print("‚ÑπÔ∏è  Profit protection –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ profit protection: {e}")

    # –¢–µ—Å—Ç —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ TP
    try:
        current_price = 50500.0  # –ü—Ä–∏–±—ã–ª—å 1% - –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
        partial_result = await manager.check_partial_tp(position, current_price)
        if partial_result:
            print("‚úÖ Partial TP –≤—ã–ø–æ–ª–Ω–µ–Ω")
        else:
            print("‚ÑπÔ∏è  Partial TP –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ partial TP: {e}")

    print("‚úÖ EnhancedSLTPManager –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω")


def test_config_loading():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===")

    config_manager = MockConfigManager()
    manager = EnhancedSLTPManager(config_manager)

    config = manager.config

    print(f"Trailing stop enabled: {config.trailing_stop.enabled}")
    print(f"Trailing stop type: {config.trailing_stop.type}")
    print(f"Partial TP enabled: {config.partial_tp_enabled}")
    print(f"Partial TP levels: {len(config.partial_tp_levels)}")
    print(f"Profit protection enabled: {config.profit_protection.enabled}")

    for level in config.partial_tp_levels:
        print(f"  Level {level.level}: {level.percentage}% -> close {level.close_ratio}")

    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π Enhanced SL/TP Manager —Å–∏—Å—Ç–µ–º—ã")

    try:
        # –¢–µ—Å—Ç –∞–¥–∞–ø—Ç–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π
        test_position_adapter()

        # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        test_config_loading()

        # –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
        await test_enhanced_sltp_manager()

        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback

        traceback.print_exc()
        return False

    return True


if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
