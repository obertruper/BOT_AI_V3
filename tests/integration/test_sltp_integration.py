#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ SL/TP —Å —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
"""

import asyncio
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


async def test_sltp_integration():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ SL/TP"""
    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")

        from core.config.config_manager import ConfigManager
        from database.models.base_models import Order, OrderSide, OrderStatus, OrderType
        from exchanges.exchange_manager import ExchangeManager
        from trading.orders.order_manager import OrderManager
        from trading.sltp.enhanced_manager import EnhancedSLTPManager

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        config_manager = ConfigManager()
        config = config_manager.get_config()

        # Exchange Manager
        exchange_manager = ExchangeManager(config)
        await exchange_manager.initialize()

        # Enhanced SL/TP Manager
        sltp_manager = EnhancedSLTPManager(config_manager=config_manager)

        # Order Manager —Å SL/TP
        order_manager = OrderManager(exchange_registry=exchange_manager, sltp_manager=sltp_manager)

        logger.info("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

        # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
        logger.info("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞...")

        test_order = Order(
            exchange="bybit",
            symbol="BTCUSDT",
            order_id="test_order_001",
            side=OrderSide.BUY,
            order_type=OrderType.MARKET,
            status=OrderStatus.PENDING,
            price=50000.0,
            quantity=0.001,
            strategy_name="test_strategy",
            trader_id="test_trader",
            created_at=datetime.utcnow(),
            metadata={"stop_loss_pct": 0.02, "take_profit_pct": 0.04},  # 2%  # 4%
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
        order_manager._active_orders[test_order.order_id] = test_order

        logger.info(
            f"‚úÖ –°–æ–∑–¥–∞–Ω –æ—Ä–¥–µ—Ä: {test_order.symbol} {test_order.side.value} {test_order.quantity}"
        )

        # 3. –°–∏–º—É–ª—è—Ü–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
        logger.info("\nüéØ –°–∏–º—É–ª—è—Ü–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞...")

        # –°–æ–∑–¥–∞–µ–º mock exchange –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        class MockExchange:
            async def place_order(self, order_request):
                logger.info(f"Mock: –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ {order_request}")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                from dataclasses import dataclass

                @dataclass
                class MockResponse:
                    success: bool = True
                    order_id: str = "mock_sl_tp_order"
                    error: str = None

                return MockResponse()

            async def set_stop_loss(self, symbol, price, size):
                logger.info(f"Mock: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ SL –¥–ª—è {symbol} –Ω–∞ {price}")
                from dataclasses import dataclass

                @dataclass
                class MockResponse:
                    success: bool = True
                    order_id: str = f"mock_sl_{symbol}_{price}"

                return MockResponse()

            async def set_take_profit(self, symbol, price, size):
                logger.info(f"Mock: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ TP –¥–ª—è {symbol} –Ω–∞ {price}")
                from dataclasses import dataclass

                @dataclass
                class MockResponse:
                    success: bool = True
                    order_id: str = f"mock_tp_{symbol}_{price}"

                return MockResponse()

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º mock exchange
        exchange_manager.exchanges["bybit"] = MockExchange()

        # –ú–æ–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        async def mock_update_db(order):
            logger.info(f"Mock: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –≤ –ë–î {order.order_id}")

        order_manager._update_order_in_db = mock_update_db

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ FILLED
        await order_manager.update_order_status(
            order_id=test_order.order_id,
            new_status=OrderStatus.FILLED,
            filled_quantity=test_order.quantity,
            average_price=50000.0,
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ SL/TP
        if test_order.metadata and test_order.metadata.get("sltp_created"):
            logger.info("‚úÖ SL/TP –æ—Ä–¥–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            logger.info(f"   - SL Order ID: {test_order.metadata.get('sl_order_id')}")
            logger.info(f"   - TP Order IDs: {test_order.metadata.get('tp_order_ids')}")
        else:
            logger.warning("‚ö†Ô∏è SL/TP –æ—Ä–¥–µ—Ä–∞ –Ω–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã")

        # 4. –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø–∞
        logger.info("\nüìà –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø–∞...")

        if order_manager.sltp_integration and test_order.metadata.get("position_id"):
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–æ—Å—Ç —Ü–µ–Ω—ã –Ω–∞ 3%
            new_price = 50000.0 * 1.03  # 51500

            updated = await order_manager.sltp_integration.update_position_sltp(
                test_order.metadata["position_id"], new_price
            )

            if updated:
                logger.info(f"‚úÖ –¢—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø –æ–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ —Ü–µ–Ω–µ {new_price}")
            else:
                logger.info("‚ÑπÔ∏è –¢—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

        # 5. –¢–µ—Å—Ç —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ TP
        logger.info("\nüí∞ –¢–µ—Å—Ç —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ Take Profit...")

        if order_manager.sltp_integration and test_order.metadata.get("position_id"):
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è TP (2%)
            tp_price = 50000.0 * 1.02  # 51000

            partial_executed = await order_manager.sltp_integration.check_partial_tp(
                test_order.metadata["position_id"], tp_price
            )

            if partial_executed:
                logger.info(f"‚úÖ –ß–∞—Å—Ç–∏—á–Ω—ã–π TP –≤—ã–ø–æ–ª–Ω–µ–Ω –ø—Ä–∏ —Ü–µ–Ω–µ {tp_price}")
            else:
                logger.info("‚ÑπÔ∏è –£—Å–ª–æ–≤–∏—è –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ TP –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")

        logger.info("\n‚ú® –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(test_sltp_integration())
