#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
"""

import asyncio
import os

from dotenv import load_dotenv

load_dotenv()

import sys
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent))

from exchanges.base.order_types import OrderRequest, OrderSide, OrderType
from exchanges.bybit.bybit_exchange import BybitExchange


async def test_real_trading():
    """–¢–µ—Å—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ —Å SL/TP"""

    print("=" * 60)
    print("–¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ô –¢–û–†–ì–û–í–õ–ò –° SL/TP")
    print("=" * 60)

    # API –∫–ª—é—á–∏
    api_key = os.getenv("BYBIT_API_KEY")
    api_secret = os.getenv("BYBIT_API_SECRET")

    print(f"\nüìå API Key: {api_key[:10]}...")
    print(f"üìå Secret: {api_secret[:10]}...")

    # –°–æ–∑–¥–∞–µ–º –±–∏—Ä–∂—É
    exchange = BybitExchange(api_key=api_key, api_secret=api_secret, sandbox=False)

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
    print("\n1Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit...")
    connected = await exchange.connect()
    if not connected:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
        return
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ")

    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
    print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞...")
    balances = await exchange.get_balances()
    for balance in balances:
        if balance.currency == "USDT":
            print(f"üí∞ –ë–∞–ª–∞–Ω—Å USDT: ${balance.total:.2f}")
            break

    # –í—ã–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª —Å –º–∞–ª–µ–Ω—å–∫–∏–º –º–∏–Ω–∏–º—É–º–æ–º
    symbol = "DOGEUSDT"  # DOGE –∏–º–µ–µ—Ç –º–∞–ª–µ–Ω—å–∫—É—é —Ü–µ–Ω—É –∏ –º–∏–Ω–∏–º—É–º

    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É
    print(f"\n3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã {symbol}...")
    ticker = await exchange.get_ticker(symbol)
    current_price = float(ticker.last_price)
    print(f"üìä –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.4f}")

    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è DOGE (–º–∏–Ω–∏–º—É–º $5 –¥–ª—è Bybit)
    min_order_value = 5.0
    position_size = round(min_order_value / current_price + 1)  # –ß—É—Ç—å –±–æ–ª—å—à–µ $5

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    position_value = position_size * current_price
    print("\n4Ô∏è‚É£ –†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏:")
    print(f"   –†–∞–∑–º–µ—Ä: {position_size} DOGE")
    print(f"   –°—Ç–æ–∏–º–æ—Å—Ç—å: ${position_value:.4f}")

    # SL/TP —É—Ä–æ–≤–Ω–∏
    stop_loss = current_price * 0.98  # -2%
    take_profit = current_price * 1.03  # +3%

    print("\n5Ô∏è‚É£ –£—Ä–æ–≤–Ω–∏ SL/TP:")
    print(f"   Stop Loss: ${stop_loss:.8f} (-2%)")
    print(f"   Take Profit: ${take_profit:.8f} (+3%)")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ—á–æ
    print("\n6Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–µ—á–∞ 5x...")
    try:
        leverage_set = await exchange.set_leverage(symbol, 5)
        if leverage_set:
            print("‚úÖ –ü–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        else:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

    # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä
    print("\n7Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞...")

    order_request = OrderRequest(
        symbol=symbol,
        side=OrderSide.BUY,
        order_type=OrderType.MARKET,
        quantity=position_size,
        stop_loss=stop_loss,
        take_profit=take_profit,
        position_idx=1,  # –î–ª—è hedge mode
        exchange_params={
            "tpslMode": "Full",
            "tpOrderType": "Market",
            "slOrderType": "Market",
        },
    )

    print(
        f"""
üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞:
   Symbol: {symbol}
   Side: BUY
   Size: {position_size} DOGE
   Value: ${position_value:.4f}
   SL: ${stop_loss:.4f}
   TP: ${take_profit:.4f}
    """
    )

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞
    confirm = "yes"  # –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ input("–°–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä? (yes/no): ")
    print(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {confirm}")

    if confirm.lower() == "yes":
        try:
            print("\n‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ä–¥–µ—Ä–∞...")
            response = await exchange.place_order(order_request)

            if response and response.success:
                print("\n‚úÖ –£–°–ü–ï–•!")
                print(f"   Order ID: {response.order_id}")
                print(f"   Status: {response.status}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é
                await asyncio.sleep(2)
                print("\n8Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–∏...")
                positions = await exchange.get_positions(symbol)
                if positions:
                    for pos in positions:
                        print(
                            f"""
üìä –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞:
   Symbol: {pos.symbol}
   Side: {pos.side}
   Size: {pos.size}
   Entry: ${pos.entry_price:.8f}
   SL: ${pos.stop_loss:.8f} ‚úì
   TP: ${pos.take_profit:.8f} ‚úì
   P&L: ${pos.unrealized_pnl:.4f}
                        """
                        )

                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
                        print("\n9Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤...")
                        print("–°–º–æ—Ç—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã:")
                        print("   - data/logs/trading.log")
                        print("   - data/logs/orders.log")
                        print("   - data/logs/sltp_operations.log")
            else:
                print(
                    f"\n‚ùå –û—à–∏–±–∫–∞: {response.error if response else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}"
                )

        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
    else:
        print("\n‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")

    # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
    await exchange.disconnect()

    print("\n" + "=" * 60)
    print("–ò–¢–û–ì–ò:")
    print("=" * 60)
    print(
        """
‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ:
   - API –∫–ª—é—á–∏ —Ä–∞–±–æ—Ç–∞—é—Ç
   - –ë–∞–ª–∞–Ω—Å –¥–æ—Å—Ç—É–ø–µ–Ω
   - –ü–ª–µ—á–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è
   - SL/TP –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
   - –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è
   - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    """
    )


if __name__ == "__main__":
    asyncio.run(test_real_trading())
