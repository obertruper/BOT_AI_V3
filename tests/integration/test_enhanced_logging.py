#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏
"""

import asyncio
from datetime import datetime

from core.logging.trade_logger import get_trade_logger
from trading.orders.order_logger import OrderLogger
from trading.sltp.sltp_logger import SLTPLogger


async def simulate_trade_cycle():
    """–°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–æ–≤
    trade_logger = get_trade_logger()
    order_logger = OrderLogger()
    sltp_logger = SLTPLogger()

    print("\n" + "=" * 60)
    print("üöÄ –ó–ê–ü–£–°–ö –°–ò–ú–£–õ–Ø–¶–ò–ò –¢–û–†–ì–û–í–û–ì–û –¶–ò–ö–õ–ê")
    print("=" * 60)

    # 1. –ü–û–õ–£–ß–ï–ù–ò–ï –°–ò–ì–ù–ê–õ–ê
    print("\nüì° –≠—Ç–∞–ø 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞")
    signal = {
        "id": "SIG_001",
        "symbol": "BTCUSDT",
        "signal_type": "BUY",
        "strength": 0.75,
        "confidence": 0.82,
        "source": "ML_STRATEGY",
        "price": 50000,
    }

    trade_logger.log_signal_received(signal)
    await asyncio.sleep(0.5)

    # 2. –û–ë–†–ê–ë–û–¢–ö–ê –°–ò–ì–ù–ê–õ–ê
    print("\n‚öôÔ∏è –≠—Ç–∞–ø 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞")
    trade_logger.log_signal_processing(
        signal["id"], "VALIDATION", {"checks_passed": True, "risk_approved": True}
    )
    await asyncio.sleep(0.5)

    # 3. –°–û–ó–î–ê–ù–ò–ï –û–†–î–ï–†–ê
    print("\nüìù –≠—Ç–∞–ø 3: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞")
    order = {
        "id": "ORD_001",
        "symbol": "BTCUSDT",
        "side": "BUY",
        "order_type": "MARKET",
        "quantity": 0.01,
        "price": 50000,
        "leverage": 5,
        "signal_id": signal["id"],
    }

    trade_logger.log_order_creation(order)

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ä–¥–µ—Ä–∞
    order_logger.log_order_validation(
        order, {"valid": True, "checks": ["size", "balance", "leverage"]}
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫–æ–≤
    order_logger.log_order_risk_check(
        order, {"risk_percent": 2.0, "max_allowed": 3.0, "approved": True}
    )
    await asyncio.sleep(0.5)

    # 4. –û–¢–ü–†–ê–í–ö–ê –û–†–î–ï–†–ê
    print("\nüì§ –≠—Ç–∞–ø 4: –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂—É")
    trade_logger.log_order_submission(
        order["id"], "BYBIT", {"retCode": 0, "retMsg": "OK", "orderId": "EX_ORD_123"}
    )

    order_logger.log_order_lifecycle(
        order["id"],
        "SUBMITTED",
        {"exchange_id": "EX_ORD_123", "timestamp": datetime.now().isoformat()},
    )
    await asyncio.sleep(0.5)

    # 5. –ò–°–ü–û–õ–ù–ï–ù–ò–ï –û–†–î–ï–†–ê
    print("\n‚úÖ –≠—Ç–∞–ø 5: –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞")
    execution = {
        "executed_qty": 0.01,
        "executed_price": 50050,  # –ù–µ–±–æ–ª—å—à–æ–π slippage
        "commission": 0.00001,
        "commission_asset": "BTC",
        "slippage": 0.1,
        "execution_time_ms": 152,
    }

    trade_logger.log_order_execution(order["id"], execution)
    order_logger.log_order_execution_details(order["id"], execution)
    await asyncio.sleep(0.5)

    # 6. –û–¢–ö–†–´–¢–ò–ï –ü–û–ó–ò–¶–ò–ò
    print("\nüü¢ –≠—Ç–∞–ø 6: –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏")
    position = {
        "id": "POS_001",
        "symbol": "BTCUSDT",
        "side": "LONG",
        "size": 0.01,
        "entry_price": 50050,
        "leverage": 5,
    }

    trade_logger.log_position_opened(position)
    await asyncio.sleep(0.5)

    # 7. –£–°–¢–ê–ù–û–í–ö–ê SL/TP
    print("\nüéØ –≠—Ç–∞–ø 7: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ SL/TP —Å —á–∞—Å—Ç–∏—á–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏")

    # –†–∞—Å—á–µ—Ç SL/TP
    sltp_logger.log_sltp_calculation(
        position,
        {"percent": 2.0, "price": 49049, "distance": 1001},
        {"percent": 4.0, "price": 52052, "risk_reward_ratio": 2.0},
    )

    # –ß–∞—Å—Ç–∏—á–Ω—ã–µ TP —É—Ä–æ–≤–Ω–∏
    partial_levels = [
        {"price": 50550, "percent": 1.0, "close_ratio": 0.3, "quantity": 0.003},
        {"price": 51050, "percent": 2.0, "close_ratio": 0.3, "quantity": 0.003},
        {"price": 51550, "percent": 3.0, "close_ratio": 0.4, "quantity": 0.004},
    ]

    sltp_logger.log_partial_tp_setup(position["id"], partial_levels)

    trade_logger.log_sltp_setup(
        position["id"], sl_price=49049, tp_price=52052, partial_levels=partial_levels
    )
    await asyncio.sleep(0.5)

    # 8. –°–ò–ú–£–õ–Ø–¶–ò–Ø –î–í–ò–ñ–ï–ù–ò–Ø –¶–ï–ù–´ –ò TRAILING STOP
    print("\nüìà –≠—Ç–∞–ø 8: –î–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏ Trailing Stop")

    current_price = 50050
    highest_price = current_price
    current_sl = 49049
    trailing_activated = False
    updates_count = 0

    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–æ—Å—Ç —Ü–µ–Ω—ã
    price_movements = [50200, 50500, 50800, 51000, 50900, 51200]

    for new_price in price_movements:
        current_price = new_price
        profit_pct = (
            (current_price - position["entry_price"]) / position["entry_price"]
        ) * 100

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ PnL
        unrealized_pnl = (current_price - position["entry_price"]) * position["size"]
        trade_logger.log_pnl_update(position["id"], unrealized_pnl, 0, profit_pct)

        # –ê–∫—Ç–∏–≤–∞—Ü–∏—è trailing stop –ø—Ä–∏ 1% –ø—Ä–∏–±—ã–ª–∏
        if profit_pct >= 1.0 and not trailing_activated:
            trailing_activated = True
            trade_logger.log_trailing_activated(
                position["id"], current_price, profit_pct
            )

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ trailing stop
        if trailing_activated and current_price > highest_price:
            highest_price = current_price
            new_sl = current_price * 0.995  # 0.5% trailing distance

            if new_sl > current_sl:
                trade_logger.log_trailing_update(
                    position["id"], current_sl, new_sl, current_price
                )
                current_sl = new_sl
                updates_count += 1

                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è trailing
                sltp_logger.log_trailing_stop_state(
                    position["id"],
                    {
                        "activated": True,
                        "current_price": current_price,
                        "entry_price": position["entry_price"],
                        "current_sl": current_sl,
                        "highest_price": highest_price,
                        "profit_percent": profit_pct,
                        "updates_count": updates_count,
                    },
                )

        await asyncio.sleep(0.3)

    # 9. –ß–ê–°–¢–ò–ß–ù–û–ï –ó–ê–ö–†–´–¢–ò–ï
    print("\nüìä –≠—Ç–∞–ø 9: –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –Ω–∞ –ø–µ—Ä–≤–æ–º —É—Ä–æ–≤–Ω–µ")

    # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ TP
    if current_price >= partial_levels[0]["price"]:
        sltp_logger.log_partial_tp_execution(
            position["id"],
            level=1,
            executed_qty=0.003,
            executed_price=partial_levels[0]["price"],
            remaining_qty=0.007,
        )

        trade_logger.log_partial_close(
            position["id"],
            level=1,
            percent=30,
            quantity=0.003,
            price=partial_levels[0]["price"],
        )

        # –ü–µ—Ä–µ–Ω–æ—Å SL –≤ –±–µ–∑—É–±—ã—Ç–æ–∫
        trade_logger.log_sl_moved_to_breakeven(
            position["id"],
            position["entry_price"],
            position["entry_price"] + 10,  # –ù–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø
        )

        sltp_logger.log_sl_adjustment(
            position["id"],
            "–ü–µ—Ä–µ–Ω–æ—Å –≤ –±–µ–∑—É–±—ã—Ç–æ–∫ –ø–æ—Å–ª–µ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è",
            current_sl,
            position["entry_price"] + 10,
            position["entry_price"],
        )

        await asyncio.sleep(0.5)

    # 10. –ó–ê–©–ò–¢–ê –ü–†–ò–ë–´–õ–ò
    print("\nüõ°Ô∏è –≠—Ç–∞–ø 10: –ó–∞—â–∏—Ç–∞ –ø—Ä–∏–±—ã–ª–∏")

    sltp_logger.log_profit_protection(
        position["id"],
        {
            "profit_percent": profit_pct,
            "locked_profit": 1.0,
            "new_sl": current_sl,
            "type": "partial",
        },
    )
    await asyncio.sleep(0.5)

    # 11. –ó–ê–ö–†–´–¢–ò–ï –ü–û–ó–ò–¶–ò–ò
    print("\nüî¥ –≠—Ç–∞–ø 11: –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏")

    close_price = 51100
    final_pnl = (close_price - position["entry_price"]) * position["size"]

    trade_logger.log_position_closed(
        position["id"], close_price, final_pnl, "TP –¥–æ—Å—Ç–∏–≥–Ω—É—Ç"
    )

    trade_logger.log_sltp_triggered(position["id"], "TP", close_price, final_pnl)
    await asyncio.sleep(0.5)

    # 12. –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    print("\nüìä –≠—Ç–∞–ø 12: –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    trade_logger.log_daily_summary()

    stats = trade_logger.get_statistics()
    print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞:")
    for key, value in stats.items():
        print(f"   {key}: {value}")

    print("\n" + "=" * 60)
    print("‚úÖ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 60)
    print("\nüìÅ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:")
    print("   - data/logs/trades_*.log")
    print("   - data/logs/bot_trading.log")
    print("   - –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å —Ü–≤–µ—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º")


async def test_error_logging():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫"""
    print("\n" + "=" * 60)
    print("‚ùå –¢–ï–°–¢ –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –û–®–ò–ë–û–ö")
    print("=" * 60)

    trade_logger = get_trade_logger()
    sltp_logger = SLTPLogger()
    order_logger = OrderLogger()

    # –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    trade_logger.log_signal_rejected("SIG_002", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å")

    # –û—à–∏–±–∫–∞ –æ—Ä–¥–µ—Ä–∞
    order_logger.log_order_retry("ORD_002", 1, "Connection timeout")
    order_logger.log_order_retry("ORD_002", 2, "Rate limit exceeded")

    # –û—à–∏–±–∫–∞ SL/TP
    sltp_logger.log_sltp_error(
        "POS_002",
        "SET_STOP_LOSS",
        "Invalid stop loss price",
        {"attempted_sl": 48000, "current_price": 50000},
    )

    # –û–±—â–∞—è –æ—à–∏–±–∫–∞
    trade_logger.log_error(
        "API_ERROR",
        "Failed to connect to exchange",
        {"exchange": "BYBIT", "attempts": 3},
        Exception("Connection refused"),
    )

    print("\n‚úÖ –û—à–∏–±–∫–∏ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω—ã")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
    await simulate_trade_cycle()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
    await test_error_logging()

    print("\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´")
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤ –≤ data/logs/")
    print("2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ config/logging.yaml")
    print("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ trade_logger –¥–ª—è –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")
    print("4. –î–æ–±–∞–≤—å—Ç–µ WebSocket –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è real-time –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
    print("5. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–æ—Ç–∞—Ü–∏—é –ª–æ–≥–æ–≤ –¥–ª—è production")


if __name__ == "__main__":
    asyncio.run(main())
