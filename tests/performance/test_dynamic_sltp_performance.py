#!/usr/bin/env python3
"""
Performance —Ç–µ—Å—Ç—ã –¥–ª—è Dynamic SL/TP
–ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
"""

import pytest
import asyncio
import time
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import psutil
import tracemalloc
from concurrent.futures import ThreadPoolExecutor, ProcessPoolExecutor

from trading.orders.dynamic_sltp_calculator import DynamicSLTPCalculator


@pytest.mark.performance
@pytest.mark.sltp
class TestDynamicSLTPPerformance:
    """Performance —Ç–µ—Å—Ç—ã –¥–ª—è Dynamic SL/TP Calculator"""
    
    @pytest.fixture
    def large_dataset(self):
        """–ë–æ–ª—å—à–æ–π –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        dates = pd.date_range(start='2024-01-01', periods=10000, freq='1min')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        prices = []
        base_price = 50000
        current_price = base_price
        
        for i in range(10000):
            # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
            change = np.random.normal(0, 0.002)
            current_price *= (1 + change)
            
            prices.append({
                'timestamp': dates[i],
                'open': current_price,
                'high': current_price * (1 + abs(np.random.normal(0, 0.001))),
                'low': current_price * (1 - abs(np.random.normal(0, 0.001))),
                'close': current_price * (1 + np.random.normal(0, 0.0005)),
                'volume': np.random.uniform(100, 1000)
            })
        
        return pd.DataFrame(prices)
    
    @pytest.mark.asyncio
    async def test_single_calculation_speed(self, large_dataset):
        """–¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–¥–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞ –±–æ–ª—å—à–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ"""
        calculator = DynamicSLTPCalculator()
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å–≤–µ—á–µ–π
        candles = large_dataset.tail(1000)
        current_price = 50000
        
        # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        start_time = time.perf_counter()
        
        result = calculator.calculate_dynamic_levels(
            current_price=current_price,
            candles=candles,
            confidence=0.75,
            signal_type='BUY'
        )
        
        end_time = time.perf_counter()
        execution_time = end_time - start_time
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        assert result is not None
        assert execution_time < 0.1, f"–†–∞—Å—á–µ—Ç –∑–∞–Ω—è–ª {execution_time:.4f}s, –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å < 0.1s"
        
        print(f"\nüìä Single calculation time: {execution_time*1000:.2f}ms")
    
    @pytest.mark.asyncio
    async def test_batch_calculations(self, large_dataset):
        """–¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤"""
        calculator = DynamicSLTPCalculator()
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º 50 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        symbols = [f"SYMBOL{i}USDT" for i in range(50)]
        candles = large_dataset.tail(100)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–≤–µ—á–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
        
        results = []
        
        # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        start_time = time.perf_counter()
        
        for symbol in symbols:
            # –ù–µ–º–Ω–æ–≥–æ –∏–∑–º–µ–Ω—è–µ–º —Ü–µ–Ω—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            current_price = 50000 * (1 + np.random.uniform(-0.1, 0.1))
            
            result = calculator.calculate_dynamic_levels(
                current_price=current_price,
                candles=candles,
                confidence=np.random.uniform(0.5, 0.95),
                signal_type=np.random.choice(['BUY', 'SELL'])
            )
            results.append(result)
        
        end_time = time.perf_counter()
        total_time = end_time - start_time
        avg_time = total_time / len(symbols)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert len(results) == 50
        assert total_time < 2.0, f"Batch processing took {total_time:.2f}s, should be < 2s"
        assert avg_time < 0.04, f"Average time per symbol: {avg_time:.4f}s, should be < 0.04s"
        
        print(f"\nüìä Batch processing stats:")
        print(f"   Total symbols: {len(symbols)}")
        print(f"   Total time: {total_time:.2f}s")
        print(f"   Average per symbol: {avg_time*1000:.2f}ms")
        print(f"   Throughput: {len(symbols)/total_time:.1f} symbols/sec")
    
    @pytest.mark.asyncio
    async def test_parallel_processing(self, large_dataset):
        """–¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        calculator = DynamicSLTPCalculator()
        candles = large_dataset.tail(100)
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        def calculate_for_symbol(symbol_data):
            symbol, price, confidence, signal_type = symbol_data
            return calculator.calculate_dynamic_levels(
                current_price=price,
                candles=candles,
                confidence=confidence,
                signal_type=signal_type
            )
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è 100 —Å–∏–º–≤–æ–ª–æ–≤
        symbols_data = [
            (
                f"SYMBOL{i}USDT",
                50000 * (1 + np.random.uniform(-0.1, 0.1)),
                np.random.uniform(0.5, 0.95),
                np.random.choice(['BUY', 'SELL'])
            )
            for i in range(100)
        ]
        
        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        start_seq = time.perf_counter()
        seq_results = [calculate_for_symbol(data) for data in symbols_data]
        seq_time = time.perf_counter() - start_seq
        
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å ThreadPoolExecutor
        start_parallel = time.perf_counter()
        with ThreadPoolExecutor(max_workers=4) as executor:
            parallel_results = list(executor.map(calculate_for_symbol, symbols_data))
        parallel_time = time.perf_counter() - start_parallel
        
        # –†–∞—Å—á–µ—Ç —É—Å–∫–æ—Ä–µ–Ω–∏—è
        speedup = seq_time / parallel_time
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert len(parallel_results) == 100
        assert speedup > 1.5, f"Parallel speedup: {speedup:.2f}x, expected > 1.5x"
        
        print(f"\n‚ö° Parallel processing performance:")
        print(f"   Sequential time: {seq_time:.2f}s")
        print(f"   Parallel time: {parallel_time:.2f}s")
        print(f"   Speedup: {speedup:.2f}x")
        print(f"   Efficiency: {(speedup/4)*100:.1f}%")
    
    @pytest.mark.asyncio
    async def test_memory_usage(self, large_dataset):
        """–¢–µ—Å—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        calculator = DynamicSLTPCalculator()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–π—Å–∏–Ω–≥ –ø–∞–º—è—Ç–∏
        tracemalloc.start()
        
        # –ù–∞—á–∞–ª—å–Ω—ã–π —Å–Ω–∏–º–æ–∫
        snapshot_start = tracemalloc.take_snapshot()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º 100 —Ä–∞—Å—á–µ—Ç–æ–≤
        results = []
        for i in range(100):
            candles = large_dataset.iloc[i*100:(i+1)*100]  # –†–∞–∑–Ω—ã–µ –æ–∫–Ω–∞ –¥–∞–Ω–Ω—ã—Ö
            result = calculator.calculate_dynamic_levels(
                current_price=50000,
                candles=candles,
                confidence=0.75,
                signal_type='BUY'
            )
            results.append(result)
        
        # –ö–æ–Ω–µ—á–Ω—ã–π —Å–Ω–∏–º–æ–∫
        snapshot_end = tracemalloc.take_snapshot()
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–Ω–∏—Ü—ã
        top_stats = snapshot_end.compare_to(snapshot_start, 'lineno')
        
        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
        total_memory = sum(stat.size_diff for stat in top_stats) / 1024 / 1024  # MB
        
        tracemalloc.stop()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert total_memory < 50, f"Memory usage: {total_memory:.2f}MB, should be < 50MB"
        
        print(f"\nüíæ Memory usage stats:")
        print(f"   Total allocated: {total_memory:.2f}MB")
        print(f"   Per calculation: {total_memory/100:.3f}MB")
    
    @pytest.mark.asyncio
    async def test_cache_effectiveness(self):
        """–¢–µ—Å—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        calculator = DynamicSLTPCalculator()
        
        # –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        dates = pd.date_range(start='2024-01-01', periods=100, freq='1min')
        candles = pd.DataFrame({
            'timestamp': dates,
            'open': [50000] * 100,
            'high': [50100] * 100,
            'low': [49900] * 100,
            'close': [50050] * 100,
            'volume': [100] * 100
        })
        
        # –ü–µ—Ä–≤—ã–π —Ä–∞—Å—á–µ—Ç (—Ö–æ–ª–æ–¥–Ω—ã–π –∫—ç—à)
        start_cold = time.perf_counter()
        result1 = calculator.calculate_dynamic_levels(
            current_price=50000,
            candles=candles,
            confidence=0.75,
            signal_type='BUY'
        )
        cold_time = time.perf_counter() - start_cold
        
        # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å —Ç–µ–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏ (—Ç–µ–ø–ª—ã–π –∫—ç—à)
        start_warm = time.perf_counter()
        result2 = calculator.calculate_dynamic_levels(
            current_price=50000,
            candles=candles,
            confidence=0.75,
            signal_type='BUY'
        )
        warm_time = time.perf_counter() - start_warm
        
        # –ö—ç—à –¥–æ–ª–∂–µ–Ω —É—Å–∫–æ—Ä—è—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
        cache_speedup = cold_time / warm_time if warm_time > 0 else 1
        
        print(f"\nüöÄ Cache effectiveness:")
        print(f"   Cold cache: {cold_time*1000:.2f}ms")
        print(f"   Warm cache: {warm_time*1000:.2f}ms")
        print(f"   Speedup: {cache_speedup:.2f}x")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–º–∏
        assert result1['stop_loss_pct'] == result2['stop_loss_pct']
        assert result1['take_profit_pct'] == result2['take_profit_pct']
    
    @pytest.mark.asyncio
    async def test_stress_continuous_calculation(self, large_dataset):
        """–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç: –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
        calculator = DynamicSLTPCalculator()
        candles = large_dataset.tail(100)
        
        duration = 5  # —Å–µ–∫—É–Ω–¥
        calculations = 0
        errors = 0
        
        start_time = time.time()
        end_time = start_time + duration
        
        while time.time() < end_time:
            try:
                # –°–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
                result = calculator.calculate_dynamic_levels(
                    current_price=50000 * (1 + np.random.uniform(-0.05, 0.05)),
                    candles=candles,
                    confidence=np.random.uniform(0.4, 0.95),
                    signal_type=np.random.choice(['BUY', 'SELL'])
                )
                calculations += 1
            except Exception as e:
                errors += 1
                print(f"Error during stress test: {e}")
        
        actual_duration = time.time() - start_time
        rate = calculations / actual_duration
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert errors == 0, f"Had {errors} errors during stress test"
        assert rate > 50, f"Calculation rate: {rate:.1f}/sec, expected > 50/sec"
        
        print(f"\nüî• Stress test results:")
        print(f"   Duration: {actual_duration:.1f}s")
        print(f"   Total calculations: {calculations}")
        print(f"   Rate: {rate:.1f} calc/sec")
        print(f"   Errors: {errors}")
    
    @pytest.mark.asyncio
    async def test_compare_with_fixed_sltp(self):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ SL/TP"""
        calculator = DynamicSLTPCalculator()
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        dates = pd.date_range(start='2024-01-01', periods=100, freq='1min')
        candles = pd.DataFrame({
            'timestamp': dates,
            'open': np.random.uniform(49000, 51000, 100),
            'high': np.random.uniform(49500, 51500, 100),
            'low': np.random.uniform(48500, 50500, 100),
            'close': np.random.uniform(49000, 51000, 100),
            'volume': np.random.uniform(100, 1000, 100)
        })
        
        # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ SL/TP (–ø—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç)
        def calculate_fixed_sltp(current_price, signal_type):
            sl_pct = 1.5
            tp_pct = 4.5
            
            if signal_type == 'BUY':
                sl_price = current_price * (1 - sl_pct / 100)
                tp_price = current_price * (1 + tp_pct / 100)
            else:
                sl_price = current_price * (1 + sl_pct / 100)
                tp_price = current_price * (1 - tp_pct / 100)
            
            return {
                'stop_loss_pct': sl_pct,
                'take_profit_pct': tp_pct,
                'stop_loss_price': sl_price,
                'take_profit_price': tp_price
            }
        
        iterations = 1000
        
        # –ò–∑–º–µ—Ä–µ–Ω–∏–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö SL/TP
        start_fixed = time.perf_counter()
        for _ in range(iterations):
            fixed_result = calculate_fixed_sltp(50000, 'BUY')
        fixed_time = time.perf_counter() - start_fixed
        
        # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö SL/TP
        start_dynamic = time.perf_counter()
        for _ in range(iterations):
            dynamic_result = calculator.calculate_dynamic_levels(
                current_price=50000,
                candles=candles,
                confidence=0.75,
                signal_type='BUY'
            )
        dynamic_time = time.perf_counter() - start_dynamic
        
        # –†–∞—Å—á–µ—Ç overhead
        overhead = (dynamic_time / fixed_time) - 1
        
        print(f"\nüìä Performance comparison:")
        print(f"   Fixed SL/TP: {fixed_time:.3f}s for {iterations} iterations")
        print(f"   Dynamic SL/TP: {dynamic_time:.3f}s for {iterations} iterations")
        print(f"   Overhead: {overhead*100:.1f}%")
        print(f"   Dynamic is {dynamic_time/fixed_time:.1f}x slower")
        
        # Dynamic –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ —á–µ–º –≤ 10 —Ä–∞–∑ –º–µ–¥–ª–µ–Ω–Ω–µ–µ
        assert dynamic_time / fixed_time < 10, "Dynamic SL/TP too slow compared to fixed"