#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ LONG —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞
"""

import asyncio
import sys
from datetime import UTC, datetime
from decimal import Decimal

sys.path.append(".")

from core.logger import setup_logger
from database.connections.postgres import AsyncPGPool
from database.models.base_models import SignalType
from database.models.signal import Signal

logger = setup_logger("test_signal_generator")


async def create_test_long_signal():
    """–°–æ–∑–¥–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π LONG —Å–∏–≥–Ω–∞–ª"""

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î (–ø—É–ª —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏)
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ")

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π LONG —Å–∏–≥–Ω–∞–ª
        test_signal = Signal(
            symbol="BTCUSDT",
            signal_type=SignalType.LONG,
            confidence=0.85,
            entry_price=Decimal("90000.0"),
            stop_loss=Decimal("88000.0"),  # -2.2%
            take_profit=Decimal("95000.0"),  # +5.5%
            position_size=Decimal("0.001"),
            source="TEST_MANUAL",
            strategy="test_long_signal",
            timeframe="15m",
            exchange="bybit",
            created_at=datetime.now(UTC),
            metadata={
                "test": True,
                "ml_confidence": 0.85,
                "risk_level": "LOW",
                "expected_duration": "2h",
                "generated_by": "manual_test",
            },
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        await AsyncPGPool.execute(
            """
            INSERT INTO signals (symbol, signal_type, confidence, entry_price, stop_loss, take_profit,
                               position_size, source, strategy, timeframe, exchange, metadata, created_at)
            VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)
        """,
            test_signal.symbol,
            test_signal.signal_type.value,
            float(test_signal.confidence),
            float(test_signal.entry_price),
            float(test_signal.stop_loss),
            float(test_signal.take_profit),
            float(test_signal.position_size),
            test_signal.source,
            test_signal.strategy,
            test_signal.timeframe,
            test_signal.exchange,
            test_signal.metadata,
            test_signal.created_at,
        )

        logger.info("üü¢ –¢–ï–°–¢–û–í–´–ô LONG –°–ò–ì–ù–ê–õ –°–û–ó–î–ê–ù!")
        logger.info(f"üìä –°–∏–º–≤–æ–ª: {test_signal.symbol}")
        logger.info(f"üìà –¢–∏–ø: {test_signal.signal_type.value}")
        logger.info(f"üí∞ –í—Ö–æ–¥: ${test_signal.entry_price}")
        logger.info(f"üõë SL: ${test_signal.stop_loss} (-2.2%)")
        logger.info(f"üéØ TP: ${test_signal.take_profit} (+5.5%)")
        logger.info(f"üìè –†–∞–∑–º–µ—Ä: {test_signal.position_size} BTC")
        logger.info(f"üé≤ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {test_signal.confidence * 100}%")

        print("\n" + "=" * 60)
        print("üöÄ –¢–ï–°–¢–û–í–´–ô LONG –°–ò–ì–ù–ê–õ –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù!")
        print("=" * 60)
        print(f"üìä –°–∏–º–≤–æ–ª: {test_signal.symbol}")
        print(f"üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {test_signal.signal_type.value}")
        print(f"üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${test_signal.entry_price}")
        print(f"üõë Stop Loss: ${test_signal.stop_loss} (-2.2%)")
        print(f"üéØ Take Profit: ${test_signal.take_profit} (+5.5%)")
        print(f"üìè –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {test_signal.position_size} BTC")
        print(f"üé≤ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {test_signal.confidence * 100}%")
        print(f"üîß –ò—Å—Ç–æ—á–Ω–∏–∫: {test_signal.source}")
        print(f"‚è∞ –°–æ–∑–¥–∞–Ω: {test_signal.created_at}")
        print("=" * 60)
        print("üëÄ –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç—Ç–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞!")
        print("=" * 60)

        await AsyncPGPool.close_pool()
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞: {e}")
        import traceback

        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = asyncio.run(create_test_long_signal())
    if success:
        print("\n‚úÖ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞")
        sys.exit(1)
