#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ SL/TP
"""

import asyncio
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


async def generate_signal(
    signal_type: str = "LONG", symbol: str = "SOLUSDT", exchange: str = "bybit"
):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞

    Args:
        signal_type: "LONG" –∏–ª–∏ "SHORT"
        symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é SOLUSDT)
        exchange: –ë–∏—Ä–∂–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é bybit)
    """
    try:
        logger.info(f"üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ {signal_type} —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        from sqlalchemy import select

        from database.connections import get_async_db
        from database.models.base_models import SignalType
        from database.models.signal import Signal

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏–∑ –ë–î –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é
        async with get_async_db() as db:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É –∏–∑ market_data
            from database.models import RawMarketData

            query = (
                select(RawMarketData)
                .where(RawMarketData.symbol == symbol)
                .order_by(RawMarketData.timestamp.desc())
                .limit(1)
            )

            result = await db.execute(query)
            last_data = result.scalar_one_or_none()

            if last_data and last_data.close:
                current_price = float(last_data.close)
                logger.info(f"üí∞ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É –∏–∑ –ë–î: {current_price}")
            else:
                # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–Ω–µ—Ç
                default_prices = {
                    "SOLUSDT": 160.0,
                    "BTCUSDT": 50000.0,
                    "ETHUSDT": 3000.0,
                    "BNBUSDT": 400.0,
                    "XRPUSDT": 0.6,
                    "ADAUSDT": 0.5,
                    "DOGEUSDT": 0.08,
                    "MATICUSDT": 0.8,
                    "DOTUSDT": 6.0,
                    "AVAXUSDT": 35.0,
                }
                current_price = default_prices.get(symbol, 100.0)
                logger.info(f"üí∞ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É: {current_price}")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ $5 –Ω–∞ Bybit
            min_order_value = 5.0  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –≤ USDT

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è $5
            min_quantity = min_order_value / current_price

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –º–∏–Ω–∏–º—É–º–∞
            if current_price > 10000:  # BTC
                quantity = max(0.001, min_quantity)
            elif current_price > 1000:  # ETH
                quantity = max(0.01, min_quantity)
            elif current_price > 100:  # SOL, BNB
                quantity = max(0.1, min_quantity)
            elif current_price > 10:  # DOT, AVAX
                quantity = max(1.0, min_quantity)
            elif current_price > 1:  # ADA, MATIC
                quantity = max(10.0, min_quantity)
            else:  # DOGE, XRP
                quantity = max(100.0, min_quantity)

            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ä–∞–∑—É–º–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–Ω–∞–∫–æ–≤
            if quantity < 1:
                quantity = round(quantity, 4)
            elif quantity < 10:
                quantity = round(quantity, 2)
            else:
                quantity = round(quantity, 0)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ–±—ä–µ–º
            order_value = quantity * current_price
            logger.info(
                f"üíµ –û–±—ä–µ–º –ø–æ–∑–∏—Ü–∏–∏: {order_value:.2f} USDT (–º–∏–Ω–∏–º—É–º: {min_order_value} USDT)"
            )

            # –†–∞—Å—á–µ—Ç SL/TP –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–∞
            if signal_type.upper() == "LONG":
                signal_type_enum = SignalType.LONG
                stop_loss = current_price * 0.98  # -2%
                take_profit = current_price * 1.04  # +4%
                side_text = "–ø–æ–∫—É–ø–∫–∞"
            else:  # SHORT
                signal_type_enum = SignalType.SHORT
                stop_loss = current_price * 1.02  # +2% (–¥–ª—è —à–æ—Ä—Ç–∞ SL –≤—ã—à–µ)
                take_profit = current_price * 0.96  # -4% (–¥–ª—è —à–æ—Ä—Ç–∞ TP –Ω–∏–∂–µ)
                side_text = "–ø—Ä–æ–¥–∞–∂–∞"

            # –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª
            test_signal = Signal(
                strategy_name="manual_test_signal",
                symbol=symbol,
                exchange=exchange,
                signal_type=signal_type_enum,
                strength=0.85,  # –°–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
                confidence=0.90,  # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                suggested_price=current_price,
                suggested_quantity=quantity,
                suggested_stop_loss=stop_loss,
                suggested_take_profit=take_profit,
                metadata={
                    "test": True,
                    "manual": True,
                    "stop_loss_pct": 0.02,
                    "take_profit_pct": 0.04,
                    "trailing_stop": True,
                    "partial_tp_levels": [0.01, 0.02, 0.03, 0.04],  # 1%, 2%, 3%, 4%
                    "partial_tp_percentages": [
                        0.25,
                        0.25,
                        0.25,
                        0.25,
                    ],  # –ü–æ 25% –Ω–∞ –∫–∞–∂–¥–æ–º —É—Ä–æ–≤–Ω–µ
                    "profit_protection": {
                        "enabled": True,
                        "activation_profit": 0.015,  # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–∏ +1.5%
                        "protection_level": 0.008,  # –ó–∞—â–∏—Ç–∞ 0.8% –ø—Ä–∏–±—ã–ª–∏
                    },
                    "description": f"–¢–µ—Å—Ç–æ–≤—ã–π {signal_type} —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol}",
                },
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            db.add(test_signal)
            await db.commit()
            await db.refresh(test_signal)

            logger.info("‚úÖ –°–∏–≥–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
            logger.info("üìä –î–µ—Ç–∞–ª–∏ —Å–∏–≥–Ω–∞–ª–∞:")
            logger.info(f"   ID: {test_signal.id}")
            logger.info(f"   –¢–∏–ø: {signal_type} ({side_text})")
            logger.info(f"   –°–∏–º–≤–æ–ª: {symbol}")
            logger.info(f"   –ë–∏—Ä–∂–∞: {exchange}")
            logger.info(f"   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {current_price}")
            logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}")
            logger.info(
                f"   Stop Loss: {stop_loss} ({'-2%' if signal_type == 'LONG' else '+2%'})"
            )
            logger.info(
                f"   Take Profit: {take_profit} ({'+4%' if signal_type == 'LONG' else '-4%'})"
            )
            logger.info("   –¢—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø: ‚úÖ")
            logger.info("   –ß–∞—Å—Ç–∏—á–Ω—ã–µ TP: 25% –Ω–∞ +1%, +2%, +3%, +4%")
            logger.info("   –ó–∞—â–∏—Ç–∞ –ø—Ä–∏–±—ã–ª–∏: ‚úÖ (–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–∏ +1.5%)")

            logger.info(
                "\nüöÄ –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!"
            )
            logger.info(
                "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ./monitor_signals.sh –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
            )

            return test_signal

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
        import traceback

        traceback.print_exc()
        return None


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse

    parser = argparse.ArgumentParser(description="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
    parser.add_argument(
        "--type",
        choices=["LONG", "SHORT", "long", "short"],
        default="LONG",
        help="–¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞: LONG –∏–ª–∏ SHORT",
    )
    parser.add_argument(
        "--symbol", default="SOLUSDT", help="–¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é SOLUSDT)"
    )
    parser.add_argument(
        "--exchange", default="bybit", help="–ë–∏—Ä–∂–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é bybit)"
    )

    args = parser.parse_args()

    # –ü—Ä–∏–≤–æ–¥–∏–º —Ç–∏–ø –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    signal_type = args.type.upper()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
    signal = await generate_signal(
        signal_type=signal_type,
        symbol=args.symbol.upper(),
        exchange=args.exchange.lower(),
    )

    if signal:
        logger.info("\n‚úÖ –ì–æ—Ç–æ–≤–æ! –°–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π.")
    else:
        logger.error("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∏–≥–Ω–∞–ª.")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
