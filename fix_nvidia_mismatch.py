#!/usr/bin/env python3
"""
–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥—Ä–∞–π–≤–µ—Ä–æ–≤ NVIDIA
–û–±—Ö–æ–¥ –¥–ª—è RTX 5090
"""

import os
import subprocess


def fix_nvidia_libraries():
    """–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–µ—Ä—Å–∏–π –±–∏–±–ª–∏–æ—Ç–µ–∫"""

    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥—Ä–∞–π–≤–µ—Ä–æ–≤ NVIDIA...")

    # 1. –°–æ–∑–¥–∞–µ–º —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤–µ—Ä—Å–∏–π
    commands = [
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Å—ã–ª–∫–∏
        "sudo rm -f /usr/local/cuda/lib64/libnvidia-ml.so.1",
        "sudo rm -f /usr/local/cuda/lib64/libnvidia-ml.so",
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –≤–µ—Ä—Å–∏–∏ 570.169
        "sudo ln -s /lib/x86_64-linux-gnu/libnvidia-ml.so.1 /usr/local/cuda/lib64/libnvidia-ml.so.1",
        "sudo ln -s /lib/x86_64-linux-gnu/libnvidia-ml.so.1 /usr/local/cuda/lib64/libnvidia-ml.so",
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –±–∏–±–ª–∏–æ—Ç–µ–∫
        "sudo ldconfig",
    ]

    password = "ilpnqw1234"

    for cmd in commands:
        try:
            if "sudo" in cmd:
                # –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ stdin
                process = subprocess.Popen(
                    cmd.split(),
                    stdin=subprocess.PIPE,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                )
                stdout, stderr = process.communicate(input=f"{password}\n")
                if process.returncode == 0:
                    print(f"‚úÖ {cmd}")
                else:
                    print(f"‚ùå {cmd}: {stderr}")
            else:
                subprocess.run(cmd.split(), check=True)
                print(f"‚úÖ {cmd}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {cmd}: {e}")

    # 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫
    env_vars = {
        # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–µ—Ä—Å–∏–π
        "PYTORCH_NVML_BASED_CUDA_CHECK": "0",
        "CUDA_MODULE_LOADING": "LAZY",
        # –§–æ—Ä—Å–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPU
        "CUDA_VISIBLE_DEVICES": "0",
        "PYTORCH_CUDA_FORCE_CUDA_ENABLED": "1",
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è RTX 5090
        "TORCH_CUDA_ARCH_LIST": "8.6;8.9;9.0;12.0",
        "CUDA_LAUNCH_BLOCKING": "0",  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        # –ü—É—Ç–∏ –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º
        "LD_LIBRARY_PATH": "/usr/local/cuda/lib64:/lib/x86_64-linux-gnu:"
        + os.environ.get("LD_LIBRARY_PATH", ""),
    }

    for key, value in env_vars.items():
        os.environ[key] = value
        print(f"üìå –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {key}={value}")

    print("\n‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

    # 3. –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º
    launcher_script = """#!/bin/bash
# –ó–∞–ø—É—Å–∫–∞—Ç–µ–ª—å —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º –¥–ª—è RTX 5090

export PYTORCH_NVML_BASED_CUDA_CHECK=0
export CUDA_MODULE_LOADING=LAZY
export CUDA_VISIBLE_DEVICES=0
export PYTORCH_CUDA_FORCE_CUDA_ENABLED=1
export TORCH_CUDA_ARCH_LIST="8.6;8.9;9.0;12.0"
export CUDA_LAUNCH_BLOCKING=0
export LD_LIBRARY_PATH=/usr/local/cuda/lib64:/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH

# –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
source venv/bin/activate

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É
exec "$@"
"""

    with open("launch_with_gpu.sh", "w") as f:
        f.write(launcher_script)

    os.chmod("launch_with_gpu.sh", 0o755)
    print("üìù –°–æ–∑–¥–∞–Ω launch_with_gpu.sh –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å GPU")

    return True


def test_gpu_after_fix():
    """–¢–µ—Å—Ç GPU –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""

    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GPU...")

    try:
        import torch

        print(f"PyTorch –≤–µ—Ä—Å–∏—è: {torch.__version__}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å CUDA
        if torch.cuda.is_available():
            print("‚úÖ CUDA –¥–æ—Å—Ç—É–ø–Ω–∞!")
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ GPU: {torch.cuda.device_count()}")

            for i in range(torch.cuda.device_count()):
                props = torch.cuda.get_device_properties(i)
                print(f"\nGPU {i}: {props.name}")
                print(f"  Compute Capability: {props.major}.{props.minor}")
                print(f"  –ü–∞–º—è—Ç—å: {props.total_memory / 1024**3:.1f} GB")

            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–Ω–∑–æ—Ä–∞
            device = torch.device("cuda:0")
            x = torch.randn(1000, 1000, device=device)
            y = torch.randn(1000, 1000, device=device)
            z = torch.matmul(x, y)

            print("\n‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ GPU —Ä–∞–±–æ—Ç–∞—é—Ç!")
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {z.shape} –Ω–∞ {z.device}")

            return True
        else:
            print("‚ùå CUDA –≤—Å–µ –µ—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

            # –ü—Ä–æ–±—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
            try:
                device = torch.device("cuda:0")
                test = torch.zeros(1, device=device)
                print("‚úÖ –ù–æ –ø—Ä—è–º–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–Ω–∑–æ—Ä–∞ –Ω–∞ GPU —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                return True
            except Exception as e:
                print(f"‚ùå –ü—Ä—è–º–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–Ω–∑–æ—Ä–∞ —Ç–æ–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
                return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if fix_nvidia_libraries():
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º GPU
        if test_gpu_after_fix():
            print("\nüéâ GPU —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
            print("\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ./launch_with_gpu.sh –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å GPU:")
            print("  ./launch_with_gpu.sh python main.py")
            print("  ./launch_with_gpu.sh python unified_launcher.py")
        else:
            print(
                "\n‚ö†Ô∏è  GPU –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ launch_with_gpu.sh"
            )
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
