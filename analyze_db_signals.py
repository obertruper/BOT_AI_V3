#!/usr/bin/env python3
"""–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ confidence"""

import asyncio

import numpy as np
from sqlalchemy import desc, select

from database.connections import get_async_db
from database.models.signal import Signal


async def analyze():
    """–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –ë–î"""

    print("=" * 80)
    print("–ê–ù–ê–õ–ò–ó CONFIDENCE –ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 80)

    async with get_async_db() as db:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 ML —Å–∏–≥–Ω–∞–ª–æ–≤
        result = await db.execute(
            select(Signal)
            .where(Signal.strategy_name == "PatchTST_ML")
            .order_by(desc(Signal.created_at))
            .limit(100)
        )
        signals = result.scalars().all()

        if not signals:
            print("–ù–µ—Ç ML —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return

        print(f"\n–ù–∞–π–¥–µ–Ω–æ {len(signals)} ML —Å–∏–≥–Ω–∞–ª–æ–≤")
        print("-" * 40)

        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        confidence_values = []
        strength_values = []
        symbols_data = {}

        for signal in signals:
            confidence_values.append(signal.confidence)
            strength_values.append(signal.strength)

            if signal.symbol not in symbols_data:
                symbols_data[signal.symbol] = {
                    "confidences": [],
                    "strengths": [],
                    "types": [],
                }

            symbols_data[signal.symbol]["confidences"].append(signal.confidence)
            symbols_data[signal.symbol]["strengths"].append(signal.strength)
            symbols_data[signal.symbol]["types"].append(signal.signal_type.value)

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        conf_array = np.array(confidence_values)
        strength_array = np.array(strength_values)

        print("\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print("Confidence:")
        print(f"  –°—Ä–µ–¥–Ω–µ–µ: {conf_array.mean():.6f}")
        print(f"  –°—Ç–¥. –æ—Ç–∫–ª.: {conf_array.std():.6f}")
        print(f"  –ú–∏–Ω–∏–º—É–º: {conf_array.min():.6f}")
        print(f"  –ú–∞–∫—Å–∏–º—É–º: {conf_array.max():.6f}")
        print(f"  –ú–µ–¥–∏–∞–Ω–∞: {np.median(conf_array):.6f}")

        print("\nStrength:")
        print(f"  –°—Ä–µ–¥–Ω–µ–µ: {strength_array.mean():.6f}")
        print(f"  –°—Ç–¥. –æ—Ç–∫–ª.: {strength_array.std():.6f}")
        print(f"  –ú–∏–Ω–∏–º—É–º: {strength_array.min():.6f}")
        print(f"  –ú–∞–∫—Å–∏–º—É–º: {strength_array.max():.6f}")

        # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ confidence –∑–Ω–∞—á–µ–Ω–∏–π
        print("\nüìà –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï CONFIDENCE:")
        bins = [0.55, 0.58, 0.59, 0.595, 0.60, 0.605, 0.61, 0.62, 0.65, 1.0]
        hist, _ = np.histogram(conf_array, bins=bins)

        for i, count in enumerate(hist):
            if count > 0:
                print(f"  [{bins[i]:.3f} - {bins[i + 1]:.3f}]: {'‚ñà' * count} ({count})")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é –æ–∫–æ–ª–æ 0.60
        near_0_60 = np.abs(conf_array - 0.60) < 0.005
        pct_near = near_0_60.sum() / len(conf_array) * 100

        print(f"\n‚ö†Ô∏è {pct_near:.1f}% –∑–Ω–∞—á–µ–Ω–∏–π –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ¬±0.005 –æ—Ç 0.60")

        if pct_near > 50:
            print("\nüö® –ü–†–û–ë–õ–ï–ú–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!")
            print(
                "–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ confidence –∑–Ω–∞—á–µ–Ω–∏–π —Å–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —Ç–æ—á–Ω–æ –Ω–∞ –ø–æ—Ä–æ–≥–µ 0.60"
            )

        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–ò–ú–í–û–õ–ê–ú:")
        for symbol, data in symbols_data.items():
            conf = np.array(data["confidences"])
            print(f"\n{symbol}:")
            print(f"  –°–∏–≥–Ω–∞–ª–æ–≤: {len(conf)}")
            print(f"  Confidence: {conf.mean():.6f} ¬± {conf.std():.6f}")
            print(
                f"  –¢–∏–ø—ã: LONG={data['types'].count('LONG')}, SHORT={data['types'].count('SHORT')}"
            )

        # –î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —Å–∏–≥–Ω–∞–ª–æ–≤
        print("\nüìã –ü–û–°–õ–ï–î–ù–ò–ï 10 –°–ò–ì–ù–ê–õ–û–í:")
        print("-" * 80)
        for signal in signals[:10]:
            print(
                f"{signal.created_at.strftime('%Y-%m-%d %H:%M:%S')} | "
                f"{signal.symbol:12} | {signal.signal_type.value:5} | "
                f"Conf: {signal.confidence:.6f} | Str: {signal.strength:.6f}"
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º—É–ª—É
        # combined_confidence = signal_strength * 0.4 + model_confidence * 0.4 + (1.0 - avg_risk) * 0.2
        print("\nüîç –ê–ù–ê–õ–ò–ó –§–û–†–ú–£–õ–´ CONFIDENCE:")
        print(
            "combined_confidence = signal_strength * 0.4 + model_confidence * 0.4 + (1.0 - avg_risk) * 0.2"
        )

        # –ï—Å–ª–∏ –≤—Å–µ confidence ‚âà 0.60, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        if pct_near > 50:
            print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –¥–ª—è confidence ‚âà 0.60:")

            # –í–∞—Ä–∏–∞–Ω—Ç 1: signal_strength = 1.0, model_conf = 0.35, risk = 0.30
            calc1 = 1.0 * 0.4 + 0.35 * 0.4 + 0.70 * 0.2
            print(f"1. strength=1.00, model_conf=0.35, (1-risk)=0.70 ‚Üí {calc1:.3f}")

            # –í–∞—Ä–∏–∞–Ω—Ç 2: signal_strength = 0.75, model_conf = 0.50, risk = 0.30
            calc2 = 0.75 * 0.4 + 0.50 * 0.4 + 0.70 * 0.2
            print(f"2. strength=0.75, model_conf=0.50, (1-risk)=0.70 ‚Üí {calc2:.3f}")

            # –í–∞—Ä–∏–∞–Ω—Ç 3: signal_strength = 0.50, model_conf = 0.65, risk = 0.30
            calc3 = 0.50 * 0.4 + 0.65 * 0.4 + 0.70 * 0.2
            print(f"3. strength=0.50, model_conf=0.65, (1-risk)=0.70 ‚Üí {calc3:.3f}")

            print("\nüí° –í–´–í–û–î:")
            print("Model_confidence —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è —Ç–∞–∫,")
            print("—á—Ç–æ –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è signal_strength –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ~0.60")


if __name__ == "__main__":
    asyncio.run(analyze())
