#!/usr/bin/env python3
"""
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –º–µ–∂–¥—É –æ–±—É—á–µ–Ω–∏–µ–º –∏ —Ç–µ–∫—É—â–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
"""

import asyncio
import pickle
import sys
from datetime import datetime
from pathlib import Path

import numpy as np
import pandas as pd

sys.path.insert(0, str(Path(__file__).parent))


async def compare_features():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""

    print("=" * 70)
    print("üîç –°–†–ê–í–ù–ï–ù–ò–ï –ü–†–ò–ó–ù–ê–ö–û–í –ú–ï–ñ–î–£ –û–ë–£–ß–ï–ù–ò–ï–ú –ò –ò–ù–¢–ï–ì–†–ê–¶–ò–ï–ô")
    print("=" * 70)

    # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º scaler –∏–∑ –æ–±—É—á–µ–Ω–∏—è
    scaler_path = Path("models/saved/data_scaler.pkl")
    if not scaler_path.exists():
        print(f"‚ùå Scaler –Ω–µ –Ω–∞–π–¥–µ–Ω: {scaler_path}")
        return

    with open(scaler_path, "rb") as f:
        scaler = pickle.load(f)

    print("\nüìä SCALER –ò–ó –û–ë–£–ß–ï–ù–ò–Ø:")
    print(f"–¢–∏–ø: {type(scaler).__name__}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {scaler.n_features_in_}")
    print(f"–ü—Ä–∏–∑–Ω–∞–∫–∏ –æ–±—É—á–µ–Ω—ã: {scaler.n_samples_seen_}")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ scaler
    if hasattr(scaler, "mean_"):
        print("\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏:")
        print(f"  Mean range: [{scaler.mean_.min():.4f}, {scaler.mean_.max():.4f}]")
        print(f"  Std range: [{scaler.scale_.min():.4f}, {scaler.scale_.max():.4f}]")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ä–æ–∂–¥–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        zero_std = np.where(scaler.scale_ < 1e-6)[0]
        if len(zero_std) > 0:
            print(
                f"  ‚ö†Ô∏è –ü—Ä–∏–∑–Ω–∞–∫–∏ —Å –Ω—É–ª–µ–≤–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–µ–π: {len(zero_std)} –∏–∑ {scaler.n_features_in_}"
            )

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    print("\nüìä –¢–ï–ö–£–©–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø –ü–†–ò–ó–ù–ê–ö–û–í:")

    from core.config.config_manager import ConfigManager
    from ml.logic.feature_engineering import FeatureEngineer

    config_manager = ConfigManager()
    config = {
        "ml": config_manager.get_ml_config(),
        "system": config_manager.get_system_config(),
        "trading": config_manager.get_config("trading", {}),
    }

    feature_engineer = FeatureEngineer(config)

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = pd.DataFrame(
        {
            "timestamp": pd.date_range(end=datetime.now(), periods=100, freq="15min"),
            "open": np.random.randn(100) * 1000 + 50000,
            "high": np.random.randn(100) * 1000 + 50100,
            "low": np.random.randn(100) * 1000 + 49900,
            "close": np.random.randn(100) * 1000 + 50000,
            "volume": np.random.randn(100) * 100000 + 1000000,
            "symbol": "BTCUSDT",
        }
    )

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
    features = feature_engineer.create_features(test_data)

    if isinstance(features, pd.DataFrame):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        numeric_cols = features.select_dtypes(include=[np.number]).columns
        # –ò—Å–∫–ª—é—á–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        feature_cols = [
            col
            for col in numeric_cols
            if not col.startswith(("future_", "direction_", "profit_"))
            and col not in ["id", "timestamp", "datetime", "symbol"]
        ]

        print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(feature_cols)}")
        print(f"–û–∂–∏–¥–∞–ª–æ—Å—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {scaler.n_features_in_}")

        if len(feature_cols) != scaler.n_features_in_:
            print("‚ùå –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –ö–û–õ–ò–ß–ï–°–¢–í–ê –ü–†–ò–ó–ù–ê–ö–û–í!")
            print(f"   –†–∞–∑–Ω–∏—Ü–∞: {abs(len(feature_cols) - scaler.n_features_in_)}")
        else:
            print("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        print("\n–ü–µ—Ä–≤—ã–µ 10 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
        for i, col in enumerate(feature_cols[:10]):
            print(f"  {i:3d}: {col}")
    else:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(features)}")

    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±—É—á–µ–Ω–∏—è
    print("\nüìä –û–ñ–ò–î–ê–ï–ú–´–ï –ü–†–ò–ó–ù–ê–ö–ò (–∏–∑ –æ–±—É—á–µ–Ω–∏—è):")

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ v4.0
    expected_features = [
        # –ë–∞–∑–æ–≤—ã–µ OHLCV
        "open",
        "high",
        "low",
        "close",
        "volume",
        # Returns
        "returns_1",
        "returns_2",
        "returns_3",
        "returns_5",
        "returns_10",
        "log_returns_1",
        "log_returns_2",
        "log_returns_3",
        # Volatility
        "volatility_5",
        "volatility_10",
        "volatility_20",
        "atr_14",
        "atr_20",
        "true_range",
        # Moving Averages
        "sma_5",
        "sma_10",
        "sma_20",
        "sma_50",
        "ema_5",
        "ema_10",
        "ema_20",
        "ema_50",
        # Price ratios
        "close_to_sma_5",
        "close_to_sma_10",
        "close_to_sma_20",
        "close_to_ema_5",
        "close_to_ema_10",
        "close_to_ema_20",
        # Technical Indicators
        "rsi_14",
        "rsi_20",
        "rsi_30",
        "macd",
        "macd_signal",
        "macd_diff",
        "bb_upper",
        "bb_middle",
        "bb_lower",
        "bb_width",
        "bb_position",
        "stoch_k",
        "stoch_d",
        "adx_14",
        "plus_di",
        "minus_di",
        "cci_20",
        "mfi_14",
        "obv",
        "obv_ma_10",
        "vwap",
        "close_to_vwap",
        # Volume features
        "volume_ma_5",
        "volume_ma_10",
        "volume_ratio",
        "volume_delta",
        "volume_pressure",
        # Microstructure
        "spread",
        "spread_pct",
        "high_low_ratio",
        "close_position",
        "upper_shadow",
        "lower_shadow",
        # Pattern Recognition
        "higher_high",
        "lower_low",
        "inside_bar",
        "outside_bar",
        "bullish_engulfing",
        "bearish_engulfing",
        "hammer",
        "shooting_star",
        "doji",
        # Market Regime
        "trend_strength",
        "trend_direction",
        "regime_sma_20",
        "regime_ema_20",
        # Support/Resistance
        "distance_to_resistance",
        "distance_to_support",
        "pivot_point",
        "r1",
        "r2",
        "s1",
        "s2",
        # Advanced
        "hurst_exponent",
        "fractal_dimension",
        "entropy_10",
        "entropy_20",
        "autocorr_1",
        "autocorr_5",
        "autocorr_10",
    ]

    print(f"–ë–∞–∑–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ v4.0: {len(expected_features)}")

    # –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 240 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å —É—á–µ—Ç–æ–º –ª–∞–≥–æ–≤ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö
    print("\n‚ö†Ô∏è –í–ê–ñ–ù–û: –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –Ω–∞ 240 –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö")
    print("–≠—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç:")
    print("  - –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (~100)")
    print("  - –õ–∞–≥–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (lag_1, lag_2, lag_3)")
    print("  - Rolling —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    print("  - Interaction features")

    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print("\nüìä –ü–†–û–í–ï–†–ö–ê –ù–ê –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•:")

    from database.connections.postgres import AsyncPGPool

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    candles = await AsyncPGPool.fetch(
        """
        SELECT timestamp, open, high, low, close, volume
        FROM raw_market_data
        WHERE symbol = 'BTCUSDT'
        AND timestamp > NOW() - INTERVAL '2 days'
        ORDER BY timestamp DESC
        LIMIT 200
    """
    )

    if len(candles) >= 100:
        df_real = pd.DataFrame(candles)
        df_real = df_real.sort_values("timestamp")
        df_real["symbol"] = "BTCUSDT"

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        features_real = feature_engineer.create_features(df_real)

        if isinstance(features_real, pd.DataFrame):
            numeric_cols = features_real.select_dtypes(include=[np.number]).columns
            feature_cols = [
                col
                for col in numeric_cols
                if not col.startswith(("future_", "direction_", "profit_"))
                and col not in ["id", "timestamp", "datetime", "symbol"]
            ]

            print(f"–ü—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {len(feature_cols)}")

            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 96 —Å—Ç—Ä–æ–∫
            if len(features_real) >= 96:
                features_array = features_real[feature_cols].iloc[-96:].values

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º—É
                print(f"–§–æ—Ä–º–∞ –º–∞—Å—Å–∏–≤–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {features_array.shape}")
                print("–û–∂–∏–¥–∞–µ–º–∞—è —Ñ–æ—Ä–º–∞: (96, 240)")

                # –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –¥–æ–ø–æ–ª–Ω—è–µ–º
                if features_array.shape[1] < 240:
                    print(f"‚ö†Ô∏è –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {240 - features_array.shape[1]} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
                    print("–î–æ–ø–æ–ª–Ω—è–µ–º –Ω—É–ª—è–º–∏...")
                    padding = np.zeros((96, 240 - features_array.shape[1]))
                    features_array = np.hstack([features_array, padding])
                elif features_array.shape[1] > 240:
                    print(f"‚ö†Ô∏è –õ–∏—à–Ω–∏–µ {features_array.shape[1] - 240} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
                    print("–û–±—Ä–µ–∑–∞–µ–º –¥–æ 240...")
                    features_array = features_array[:, :240]

                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
                try:
                    features_normalized = scaler.transform(features_array)
                    print("\n‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                    print("–ü–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:")
                    print(f"  Mean: {features_normalized.mean():.4f}")
                    print(f"  Std: {features_normalized.std():.4f}")
                    print(f"  Min: {features_normalized.min():.4f}")
                    print(f"  Max: {features_normalized.max():.4f}")

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ NaN/Inf
                    nan_count = np.isnan(features_normalized).sum()
                    inf_count = np.isinf(features_normalized).sum()
                    if nan_count > 0:
                        print(f"  ‚ö†Ô∏è NaN –∑–Ω–∞—á–µ–Ω–∏–π: {nan_count}")
                    if inf_count > 0:
                        print(f"  ‚ö†Ô∏è Inf –∑–Ω–∞—á–µ–Ω–∏–π: {inf_count}")

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

    await AsyncPGPool.close()

    print("\n" + "=" * 70)
    print("üìù –ò–¢–û–ì–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("=" * 70)
    print(
        """
–ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –º–µ–∂–¥—É –æ–±—É—á–µ–Ω–∏–µ–º –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π

–†–ï–®–ï–ù–ò–ï:
1. –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å feature_engineering.py –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±—É—á–µ–Ω–∏—è
2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —Ä–æ–≤–Ω–æ 240 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—Ç –∂–µ –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ—Ä—Å–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫ (pandas, numpy, ta)

–ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ê:
–ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—á–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å
—Å —Ç–µ–∫—É—â–∏–º feature_engineering –∏–∑ BOT_AI_V3
    """
    )


if __name__ == "__main__":
    asyncio.run(compare_features())
