#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ—Ç–æ–∫–∞ ML -> Orders
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""

import asyncio
import logging
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ["UNIFIED_MODE"] = "true"  # –û—Ç–∫–ª—é—á–∞–µ–º API —Å–µ—Ä–≤–µ—Ä—ã


async def test_ml_flow():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML –ø–æ—Ç–æ–∫–∞"""

    logger.info("=" * 80)
    logger.info("üöÄ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç ML –ø–æ—Ç–æ–∫–∞")
    logger.info("=" * 80)

    try:
        # 1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        logger.info("\nüìã –®–∞–≥ 1: –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")

        from core.config.config_manager import ConfigManager
        from ml.ml_manager import MLManager
        from ml.ml_signal_processor import MLSignalProcessor
        from ml.signal_scheduler import SignalScheduler

        logger.info("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")

        # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        logger.info("\nüìã –®–∞–≥ 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        config_manager = ConfigManager()
        config = config_manager.get_config()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        ml_config = config.get("ml", {})
        symbols = ml_config.get("symbols", ["BTCUSDT"])
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        logger.info(f"   –°–∏–º–≤–æ–ª—ã: {symbols}")

        # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        logger.info("\nüìã –®–∞–≥ 3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")

        # ML Manager
        ml_manager = MLManager(config)
        await ml_manager.initialize()
        logger.info("‚úÖ ML Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # ML Signal Processor
        ml_signal_processor = MLSignalProcessor(
            ml_manager=ml_manager, config=config, config_manager=config_manager
        )
        await ml_signal_processor.initialize()
        logger.info("‚úÖ ML Signal Processor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # 4. –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞
        logger.info("\nüìã –®–∞–≥ 4: –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ML —Å–∏–≥–Ω–∞–ª–∞...")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        if symbols:
            symbol = symbols[0]
            logger.info(f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}...")

            signal = await ml_signal_processor.process_realtime_signal(
                symbol=symbol, exchange="bybit"
            )

            if signal:
                logger.info("‚úÖ –°–∏–≥–Ω–∞–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
                logger.info(f"   –¢–∏–ø: {signal.signal_type.value}")
                logger.info(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.1f}%")
                logger.info(f"   –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {signal.strategy_name}")

                # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
                logger.info("\nüìã –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞...")

                from exchanges.registry import ExchangeRegistry
                from trading.signals.signal_processor import SignalProcessor

                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π exchange registry
                exchange_registry = ExchangeRegistry()

                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤
                signal_processor = SignalProcessor(
                    config=config.get("signal_processing", {}),
                    exchange_registry=exchange_registry,
                )

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª
                orders = await signal_processor.process_signal(signal)

                if orders:
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(orders)} –æ—Ä–¥–µ—Ä–æ–≤!")
                    for order in orders:
                        logger.info(
                            f"   –û—Ä–¥–µ—Ä: {order.side.value} {order.quantity} {order.symbol}"
                        )
                else:
                    logger.info("‚ö†Ô∏è –û—Ä–¥–µ—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, NEUTRAL —Å–∏–≥–Ω–∞–ª)")

            else:
                logger.warning("‚ö†Ô∏è –°–∏–≥–Ω–∞–ª –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")

        # 6. –¢–µ—Å—Ç Signal Scheduler
        logger.info("\nüìã –®–∞–≥ 6: –¢–µ—Å—Ç Signal Scheduler...")

        scheduler = SignalScheduler(config_manager)
        await scheduler.initialize()
        logger.info("‚úÖ Signal Scheduler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
        status = await scheduler.get_status()
        logger.info("üìä –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:")
        logger.info(f"   –í–∫–ª—é—á–µ–Ω: {status['enabled']}")
        logger.info(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª: {status['interval_seconds']}—Å")
        logger.info(f"   –°–∏–º–≤–æ–ª–æ–≤: {len(status['symbols'])}")

        # 7. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        logger.info("\n" + "=" * 80)
        logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê")
        logger.info("=" * 80)
        logger.info("‚úÖ ML Manager: —Ä–∞–±–æ—Ç–∞–µ—Ç")
        logger.info("‚úÖ ML Signal Processor: —Ä–∞–±–æ—Ç–∞–µ—Ç")
        logger.info("‚úÖ Signal Scheduler: —Ä–∞–±–æ—Ç–∞–µ—Ç")
        logger.info("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: —Ä–∞–±–æ—Ç–∞–µ—Ç")
        logger.info("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤: —Ä–∞–±–æ—Ç–∞–µ—Ç")
        logger.info("\nüéâ –¢–ï–°–¢ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!")

    except Exception as e:
        logger.error(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {e}", exc_info=True)

    logger.info("\n" + "=" * 80)
    logger.info("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
    logger.info("=" * 80)


if __name__ == "__main__":
    asyncio.run(test_ml_flow())
