#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ—Ç–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
–í—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ML –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ LONG/SHORT —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import asyncio
import json
import sys
from datetime import datetime
from pathlib import Path

sys.path.append(str(Path(__file__).parent))

from core.logger import setup_logger
from database.connections.postgres import AsyncPGPool
from database.models.base_models import SignalType
from database.models.signal import Signal
from ml.ml_manager import MLManager
from ml.ml_signal_processor import MLSignalProcessor

logger = setup_logger("test_signal_flow")


class TestMLManager(MLManager):
    """–¢–µ—Å—Ç–æ–≤—ã–π ML Manager —Å —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏."""

    def _interpret_predictions(self, outputs):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤."""

        # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        result = super()._interpret_predictions(outputs)

        # –§–æ—Ä—Å–∏—Ä—É–µ–º LONG —Å–∏–≥–Ω–∞–ª –¥–ª—è —Ç–µ—Å—Ç–∞
        logger.warning("üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –§–æ—Ä—Å–∏—Ä—É–µ–º LONG —Å–∏–≥–Ω–∞–ª")

        result.update(
            {
                "signal_type": "LONG",
                "signal_strength": 0.85,
                "confidence": 0.75,
                "success_probability": 0.72,
                "stop_loss_pct": 0.02,  # 2%
                "take_profit_pct": 0.05,  # 5%
                "risk_level": "LOW",
                "predictions": {
                    "returns_15m": 0.002,
                    "returns_1h": 0.005,
                    "returns_4h": 0.01,
                    "returns_12h": 0.015,
                    "direction_score": 1.8,
                    "directions_by_timeframe": [2, 2, 2, 1],  # Mostly LONG
                    "direction_probabilities": [
                        [0.1, 0.2, 0.7],  # 15m: 70% LONG
                        [0.15, 0.15, 0.7],  # 1h: 70% LONG
                        [0.1, 0.1, 0.8],  # 4h: 80% LONG
                        [0.2, 0.6, 0.2],  # 12h: 60% NEUTRAL
                    ],
                },
            }
        )

        return result


async def test_signal_flow():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–µ—Å—å –ø–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞."""

    print("üß™ –¢–ï–°–¢ –ü–û–¢–û–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–û–ì–û –°–ò–ì–ù–ê–õ–ê\n")
    print("=" * 60)

    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    print("\n1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")

    config = {
        "ml": {
            "model": {"device": "cuda"},
            "model_directory": "models/saved",
            "signal_processor": {
                "min_confidence": 0.3,  # –°–Ω–∏–∂–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞
                "min_signal_strength": 0.1,
            },
        }
    }

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π ML Manager
    ml_manager = TestMLManager(config)
    await ml_manager.initialize()

    ml_processor = MLSignalProcessor(ml_manager, config)

    print("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

    # 2. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("\n2Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

    symbol = "BTCUSDT"
    query = f"""
    SELECT * FROM raw_market_data
    WHERE symbol = '{symbol}'
    ORDER BY datetime DESC
    LIMIT 100
    """

    raw_data = await AsyncPGPool.fetch(query)

    if len(raw_data) < 96:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
        return

    import pandas as pd

    df_data = [dict(row) for row in raw_data]
    df = pd.DataFrame(df_data)

    for col in ["open", "high", "low", "close", "volume"]:
        df[col] = df[col].astype(float)

    df = df.sort_values("datetime")
    current_price = df["close"].iloc[-1]

    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π")
    print(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:,.2f}")

    # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    print("\n3Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è...")

    prediction = await ml_manager.predict(df)

    print("\nüìä –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:")
    print(f"   –¢–∏–ø: {prediction['signal_type']}")
    print(f"   –°–∏–ª–∞: {prediction['signal_strength']:.2f}")
    print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction['confidence']:.1%}")
    print(f"   Stop Loss: {prediction.get('stop_loss_pct', 0):.1%}")
    print(f"   Take Profit: {prediction.get('take_profit_pct', 0):.1%}")

    # 4. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–∏–≥–Ω–∞–ª
    print("\n4Ô∏è‚É£ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª...")

    # –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –≤—Ä—É—á–Ω—É—é –¥–ª—è —Ç–µ—Å—Ç–∞
    from datetime import timedelta

    signal = Signal(
        symbol=symbol,
        exchange="bybit",
        signal_type=SignalType.LONG
        if prediction["signal_type"] == "LONG"
        else SignalType.SHORT,
        strength=prediction["signal_strength"],
        confidence=prediction["confidence"],
        suggested_price=current_price,
        suggested_quantity=0.001,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è BTC
        suggested_stop_loss=current_price * (1 - prediction["stop_loss_pct"]),
        suggested_take_profit=current_price * (1 + prediction["take_profit_pct"]),
        strategy_name="PatchTST_ML",
        timeframe="15m",
        created_at=datetime.utcnow(),
        expires_at=datetime.utcnow() + timedelta(hours=1),
        indicators=json.dumps(
            {
                "ml_predictions": prediction.get("predictions", {}),
                "risk_level": prediction.get("risk_level", "LOW"),
                "success_probability": prediction.get("success_probability", 0.5),
            }
        ),
        extra_data=json.dumps({"test_mode": True}),
    )

    if signal:
        print("\n‚úÖ –°–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω:")
        print(f"   ID: {signal.id}")
        print(f"   –°–∏–º–≤–æ–ª: {signal.symbol}")
        print(f"   –¢–∏–ø: {signal.signal_type.value}")
        print(f"   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${signal.suggested_price:,.2f}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {signal.suggested_quantity}")
        print(f"   Stop Loss: ${signal.suggested_stop_loss:,.2f}")
        print(f"   Take Profit: ${signal.suggested_take_profit:,.2f}")
        print(f"   –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {signal.strategy_name}")

        # 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        print("\n5Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ SignalManager
            from trading.signals.signal_manager import SignalManager

            signal_manager = SignalManager(config)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª
            saved_signal = await signal_manager.create_signal(signal)

            if saved_signal:
                print(f"‚úÖ –°–∏–≥–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î —Å ID: {saved_signal.id}")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∏–≥–Ω–∞–ª")

        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")

            # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é
            print("\n   –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î...")

            insert_query = """
            INSERT INTO signals (
                symbol, exchange, signal_type, strength, confidence,
                suggested_price, suggested_quantity, suggested_stop_loss,
                suggested_take_profit, strategy_name, timeframe,
                created_at, expires_at, extra_data
            ) VALUES (
                $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14
            ) RETURNING id
            """

            try:
                result = await AsyncPGPool.fetchrow(
                    insert_query,
                    signal.symbol,
                    signal.exchange,
                    signal.signal_type.value.upper(),
                    signal.strength,
                    signal.confidence,
                    signal.suggested_price,
                    signal.suggested_quantity,
                    signal.suggested_stop_loss,
                    signal.suggested_take_profit,
                    signal.strategy_name,
                    signal.timeframe,
                    signal.created_at,
                    signal.expires_at,
                    signal.extra_data,
                )
                if result:
                    print(f"‚úÖ –°–∏–≥–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞–ø—Ä—è–º—É—é —Å ID: {result['id']}")
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∏–≥–Ω–∞–ª")
            except Exception as db_error:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {db_error}")

        # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞
        print("\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Å–∏–≥–Ω–∞–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        await asyncio.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–¥–µ—Ä–∞
        orders_query = """
        SELECT COUNT(*) as order_count
        FROM orders
        WHERE symbol = $1
        AND created_at > NOW() - INTERVAL '1 minute'
        """

        order_count_result = await AsyncPGPool.fetchrow(orders_query, symbol)
        order_count = order_count_result["order_count"] if order_count_result else 0

        if order_count and order_count > 0:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤: {order_count}")

            # –î–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞
            order_details = await AsyncPGPool.fetchrow(
                """
                SELECT * FROM orders
                WHERE symbol = $1
                ORDER BY created_at DESC
                LIMIT 1
            """,
                symbol,
            )

            if order_details:
                print("\n   –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ä–¥–µ—Ä:")
                print(f"   ID: {order_details['id']}")
                print(f"   –ë–∏—Ä–∂–∞: {order_details['exchange']}")
                print(f"   –°—Ç–æ—Ä–æ–Ω–∞: {order_details['side']}")
                print(f"   –°—Ç–∞—Ç—É—Å: {order_details['status']}")
                print(f"   –¶–µ–Ω–∞: ${order_details.get('price', 0):,.2f}")
                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order_details['quantity']}")
        else:
            print("‚ùå –û—Ä–¥–µ—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
            print("\n   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å")
            print("   - Risk Manager –æ—Ç–∫–ª–æ–Ω–∏–ª")
            print("   - Trading Engine –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")

    else:
        print("‚ùå –°–∏–≥–Ω–∞–ª –Ω–µ —Å–æ–∑–¥–∞–Ω (–≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é)")

    # 7. –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print("\n7Ô∏è‚É£ –ò–¢–û–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–û–¢–û–ö–ê:")
    print("=" * 60)

    checks = {
        "ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ": prediction is not None
        and prediction["signal_type"] != "NEUTRAL",
        "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞": signal is not None,
        "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î": False,  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤—ã—à–µ
        "–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞": False,  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤—ã—à–µ
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    if signal:
        saved_signal = await AsyncPGPool.fetchrow(
            """
            SELECT * FROM signals
            WHERE symbol = $1
            ORDER BY created_at DESC
            LIMIT 1
        """,
            symbol,
        )

        if saved_signal:
            time_diff = datetime.utcnow() - saved_signal["created_at"].replace(
                tzinfo=None
            )
            if time_diff.total_seconds() < 60:  # –°–æ–∑–¥–∞–Ω –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É
                checks["–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î"] = True

    for check, status in checks.items():
        status_str = "‚úÖ –£—Å–ø–µ—à–Ω–æ" if status else "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
        print(f"{check}: {status_str}")

    print("\n" + "=" * 60)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    print("\n‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –æ–±—ã—á–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º!")


if __name__ == "__main__":
    asyncio.run(test_signal_flow())
