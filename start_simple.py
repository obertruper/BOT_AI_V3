#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
"""

import asyncio
import logging
import os
import signal

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler(), logging.FileHandler("data/logs/simple_bot.log")],
)
logger = logging.getLogger(__name__)

# –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏
logging.getLogger("aiohttp").setLevel(logging.WARNING)
logging.getLogger("asyncio").setLevel(logging.WARNING)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞")

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        from exchanges.bybit.client import BybitClient
        from ml.ml_signal_processor import MLSignalProcessor
        from trading.signals.ai_signal_generator import AISignalGenerator

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        api_key = os.getenv("BYBIT_API_KEY")
        api_secret = os.getenv("BYBIT_API_SECRET")

        if not api_key or not api_secret:
            logger.error("‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –±–∏—Ä–∂–∏
        logger.info("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit...")
        client = BybitClient(api_key, api_secret, sandbox=False)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if await client.test_connection():
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Bybit")
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Bybit")
            return

        # –°–æ–∑–¥–∞–µ–º ML –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        logger.info("üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML —Å–∏—Å—Ç–µ–º—ã...")
        from core.config.config_manager import ConfigManager
        from ml.ml_manager import MLManager

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_manager = ConfigManager()
        ml_config = config_manager.get_ml_config()

        ml_manager = MLManager(config=ml_config)
        ml_processor = MLSignalProcessor(
            ml_manager=ml_manager, config={"symbols": ["BTCUSDT", "ETHUSDT"]}
        )

        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤
        logger.info("üìä –°–æ–∑–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤...")
        # –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å exchange factory –∏ registry
        from exchanges.factory import ExchangeFactory
        from exchanges.registry import ExchangeRegistry

        exchange_registry = ExchangeRegistry()
        exchange_factory = ExchangeFactory(config_manager.config)

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–∏—Ä–∂—É
        await exchange_registry.register_exchange("bybit", client)

        signal_generator = AISignalGenerator(
            config_manager=config_manager, exchange_name="bybit"
        )
        signal_generator.exchange_registry = exchange_registry

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤...")
        await signal_generator.start()

        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        logger.info("üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º: BTCUSDT, ETHUSDT")
        logger.info("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")

        # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        stop_event = asyncio.Event()

        def signal_handler(sig, frame):
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
            stop_event.set()

        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)

        # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
        while not stop_event.is_set():
            await asyncio.sleep(5)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
            if (
                hasattr(signal_generator, "is_running")
                and not signal_generator.is_running
            ):
                logger.warning("‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...")
                await signal_generator.start()

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        logger.info("‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        await signal_generator.stop()

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()
    finally:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    from dotenv import load_dotenv

    load_dotenv()

    # –ó–∞–ø—É—Å–∫–∞–µ–º
    asyncio.run(main())
