#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏ feature engineering
"""

import asyncio
from datetime import UTC, datetime

import numpy as np
import pandas as pd

from core.logger import setup_logger
from ml.logic.archive_old_versions.feature_engineering_v2 import FeatureEngineer
from ml.realtime_indicator_calculator import RealTimeIndicatorCalculator

logger = setup_logger(__name__)


async def test_new_indicators():
    """–¢–µ—Å—Ç –Ω–æ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    periods = 500
    dates = pd.date_range(end=datetime.now(UTC), periods=periods, freq="15min")

    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ü–µ–Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ç—Ä–µ–Ω–¥–æ–º –∏ —à—É–º–æ–º
    trend = np.linspace(100000, 102000, periods)
    noise = np.random.normal(0, 200, periods)
    prices = trend + noise

    df = pd.DataFrame(
        {
            "datetime": dates,
            "symbol": "BTCUSDT",
            "open": prices * 0.999,
            "high": prices * 1.002,
            "low": prices * 0.998,
            "close": prices,
            "volume": np.random.uniform(100, 500, periods) * 1e6,
            "turnover": prices * np.random.uniform(100, 500, periods) * 1e6,
        }
    )

    logger.info("=" * 50)
    logger.info("üî¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–´–• –ò–ù–î–ò–ö–ê–¢–û–†–û–í")
    logger.info("=" * 50)

    # 1. –¢–µ—Å—Ç FeatureEngineer
    logger.info("\nüìä 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FeatureEngineer")
    fe = FeatureEngineer({})

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
    features_df = fe.create_features(df.copy())

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    new_indicators = [
        "hurst_exponent",
        "fractal_dimension",
        "efficiency_ratio",
        "ichimoku_tenkan",
        "ichimoku_kijun",
        "ichimoku_cloud_thickness",
        "keltner_upper_20",
        "keltner_position_20",
        "donchian_upper_20",
        "donchian_position_20",
        "mfi_14",
        "cci_14",
        "williams_r_14",
        "adx_14",
        "obv",
        "realized_vol_1h",
        "garch_vol",
        "return_entropy",
        "returns_ac_1",
        "returns_ac_5",
        "returns_ac_10",
        "returns_ac_20",
        "price_jump",
        "jump_intensity",
        "vol_clustering",
        "efficiency_volatility",
        "microstructure_noise",
    ]

    logger.info("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–æ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:")
    for indicator in new_indicators:
        if indicator in features_df.columns:
            value = features_df[indicator].iloc[-1]
            if pd.notna(value):
                logger.info(f"  ‚úì {indicator}: {value:.4f}")
            else:
                logger.warning(f"  ‚ö† {indicator}: NaN")
        else:
            logger.error(f"  ‚úó {indicator}: –ù–ï –ù–ê–ô–î–ï–ù")

    # 2. –¢–µ—Å—Ç RealTimeIndicatorCalculator
    logger.info("\nüìä 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RealTimeIndicatorCalculator")
    calc = RealTimeIndicatorCalculator()

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    indicators = await calc.calculate_indicators(
        "BTCUSDT", df.set_index("datetime"), save_to_db=False
    )

    if indicators:
        logger.info("\n‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
        for key in indicators.keys():
            if isinstance(indicators[key], dict):
                logger.info(f"  {key}: {len(indicators[key])} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            else:
                logger.info(f"  {key}: {type(indicators[key])}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ML features
        if "ml_features" in indicators:
            ml_features = indicators["ml_features"]
            logger.info(f"\nüìä ML –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(ml_features)}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö ML –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            ml_indicators = [
                "hurst_exponent",
                "fractal_dimension",
                "efficiency_ratio",
                "return_entropy",
                "vol_clustering",
                "microstructure_noise",
            ]

            for ind in ml_indicators:
                found = any(ind in key for key in ml_features.keys())
                if found:
                    matching_keys = [k for k in ml_features.keys() if ind in k]
                    logger.info(f"  ‚úì {ind} –Ω–∞–π–¥–µ–Ω –≤: {matching_keys[0][:50]}...")
                else:
                    logger.warning(f"  ‚ö† {ind} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ML features")

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
    logger.info("\nüìä 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º NaN –∑–Ω–∞—á–µ–Ω–∏—è
    nan_counts = features_df.isnull().sum()
    high_nan_cols = nan_counts[nan_counts > len(features_df) * 0.5]

    if len(high_nan_cols) > 0:
        logger.warning("\n‚ö† –ö–æ–ª–æ–Ω–∫–∏ —Å >50% NaN –∑–Ω–∞—á–µ–Ω–∏–π:")
        for col in high_nan_cols.index[:10]:
            logger.warning(
                f"  {col}: {nan_counts[col]}/{len(features_df)} ({nan_counts[col] / len(features_df) * 100:.1f}%)"
            )
    else:
        logger.info("‚úÖ –í—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –∏–º–µ—é—Ç <50% NaN –∑–Ω–∞—á–µ–Ω–∏–π")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    inf_counts = np.isinf(features_df.select_dtypes(include=[np.number])).sum()
    inf_cols = inf_counts[inf_counts > 0]

    if len(inf_cols) > 0:
        logger.warning("\n‚ö† –ö–æ–ª–æ–Ω–∫–∏ —Å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏:")
        for col in inf_cols.index[:10]:
            logger.warning(f"  {col}: {inf_counts[col]} inf –∑–Ω–∞—á–µ–Ω–∏–π")
    else:
        logger.info("‚úÖ –ù–µ—Ç –∫–æ–ª–æ–Ω–æ–∫ —Å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏")

    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ ML input
    logger.info("\nüìä 4. –¢–µ—Å—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ ML –≤—Ö–æ–¥–∞")

    try:
        ml_input, metadata = await calc.prepare_ml_input("BTCUSDT", df.set_index("datetime"))
        logger.info(f"‚úÖ ML input shape: {ml_input.shape}")
        logger.info(f"   Metadata: {metadata}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Å–ø–µ—Ä—Å–∏—é
        feature_std = np.std(ml_input[0], axis=0)
        zero_std_features = np.sum(feature_std < 1e-6)
        logger.info(f"   –ü—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å –Ω—É–ª–µ–≤–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–µ–π: {zero_std_features}/{ml_input.shape[2]}")

        if zero_std_features > ml_input.shape[2] * 0.3:
            logger.warning("‚ö† –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å –Ω—É–ª–µ–≤–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–µ–π!")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ ML –≤—Ö–æ–¥–∞: {e}")

    logger.info("\n" + "=" * 50)
    logger.info("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    logger.info("=" * 50)


if __name__ == "__main__":
    asyncio.run(test_new_indicators())
