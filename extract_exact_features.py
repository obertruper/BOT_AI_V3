#!/usr/bin/env python3
"""
–¢–æ—á–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –æ–±—É—á–∞—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ BOT_AI_V2/–∞–∞–∞.py
–ü–∞—Ä—Å–∏—Ç –∫–æ–¥ –∏ –Ω–∞—Ö–æ–¥–∏—Ç –í–°–ï —Å—Ç—Ä–æ–∫–∏ df['feature_name'] = –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
"""

import re


def extract_features_from_code(file_path: str) -> list[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑ Python –∫–æ–¥–∞, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—è –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è df[...]"""

    with open(file_path, encoding="utf-8") as f:
        content = f.read()

    features = []

    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –≤–∏–¥–æ–≤ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–π –∫ df
    patterns = [
        # df['feature'] = ...
        r"df\['([^']+)'\]\s*=",
        # df["feature"] = ...
        r'df\["([^"]+)"\]\s*=',
        # –ë–∞–∑–æ–≤—ã–µ f-—Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        r"df\[f'([^{}']+)'\]\s*=",
        r'df\[f"([^{}"]+)"\]\s*=',
    ]

    for pattern in patterns:
        matches = re.findall(pattern, content)
        features.extend(matches)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ f-—Å—Ç—Ä–æ–∫ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ (–±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π —Å–ª—É—á–∞–π)
    # –ù–∞–π–¥–µ–º –≤—Å–µ —Ü–∏–∫–ª—ã –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Ö

    # –ü–∞—Ç—Ç–µ—Ä–Ω: for variable_name in [values]:
    for_loops = re.findall(r"for\s+(\w+)\s+in\s+\[([^\]]+)\]:", content)

    for var_name, values_str in for_loops:
        try:
            # –ü–∞—Ä—Å–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ü–∏–∫–ª–∞
            values = eval(f"[{values_str}]")

            # –ù–∞–π—Ç–∏ –±–ª–æ–∫ –∫–æ–¥–∞ –ø–æ—Å–ª–µ —Ü–∏–∫–ª–∞ (–¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ def –∏–ª–∏ –∫–æ–Ω—Ü–∞ —Ñ—É–Ω–∫—Ü–∏–∏)
            loop_start = content.find(f"for {var_name} in [{values_str}]:")
            if loop_start == -1:
                continue

            # –ù–∞–π—Ç–∏ –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ —Ü–∏–∫–ª–∞
            loop_lines = content[loop_start:].split("\n")
            loop_code = []

            in_loop = False
            base_indent = None

            for line in loop_lines:
                if f"for {var_name} in" in line:
                    in_loop = True
                    base_indent = len(line) - len(line.lstrip())
                    continue

                if in_loop:
                    if line.strip() == "":
                        continue

                    current_indent = len(line) - len(line.lstrip())

                    # –ï—Å–ª–∏ –æ—Ç—Å—Ç—É–ø —Ä–∞–≤–µ–Ω –∏–ª–∏ –º–µ–Ω—å—à–µ –±–∞–∑–æ–≤–æ–≥–æ, —Ü–∏–∫–ª –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
                    if current_indent <= base_indent:
                        break

                    loop_code.append(line)

            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è –≤ –∫–æ–¥–µ —Ü–∏–∫–ª–∞
            loop_text = "\n".join(loop_code)

            # f-—Å—Ç—Ä–æ–∫–∏ –≤ —Ü–∏–∫–ª–µ
            f_string_patterns = [
                rf"df\[f'([^']*\{{{var_name}}}[^']*)'\]\s*=",
                rf'df\[f"([^"]*\{{{var_name}}}[^"]*)"\]\s*=',
            ]

            for pattern in f_string_patterns:
                f_matches = re.findall(pattern, loop_text)
                for f_template in f_matches:
                    for value in values:
                        feature_name = f_template.format(**{var_name: value})
                        features.append(feature_name)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–∏–∫–ª–∞ for {var_name}: {e}")
            continue

    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫
    unique_features = []
    seen = set()
    for feature in features:
        if feature not in seen:
            unique_features.append(feature)
            seen.add(feature)

    return unique_features


def analyze_feature_sections(file_path: str) -> dict[str, list[str]]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ —Å–µ–∫—Ü–∏—è–º —Ñ—É–Ω–∫—Ü–∏–π"""

    with open(file_path, encoding="utf-8") as f:
        content = f.read()

    # –ù–∞–π—Ç–∏ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    section_pattern = r"def (_create_\w+_features?)\(.*?\):.*?(?=def\s|\Z)"
    sections = re.findall(section_pattern, content, re.DOTALL)

    section_features = {}

    for section_name in sections:
        # –ù–∞–π—Ç–∏ –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏
        func_start = content.find(f"def {section_name}(")
        if func_start == -1:
            continue

        # –ù–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–ª–∏ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
        next_func = content.find("\n    def ", func_start + 1)
        if next_func == -1:
            func_content = content[func_start:]
        else:
            func_content = content[func_start:next_func]

        # –ò–∑–≤–ª–µ—á—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        section_features[section_name] = extract_features_from_code_snippet(func_content)

    return section_features


def extract_features_from_code_snippet(code_snippet: str) -> list[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –∫–æ–¥–∞"""
    features = []

    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–π
    patterns = [
        r"df\['([^']+)'\]\s*=",
        r'df\["([^"]+)"\]\s*=',
    ]

    for pattern in patterns:
        matches = re.findall(pattern, code_snippet)
        features.extend(matches)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–∏–∫–ª–æ–≤ –≤ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–µ
    for_loops = re.findall(r"for\s+(\w+)\s+in\s+\[([^\]]+)\]:", code_snippet)

    for var_name, values_str in for_loops:
        try:
            values = eval(f"[{values_str}]")

            # –ù–∞–π—Ç–∏ f-—Å—Ç—Ä–æ–∫–∏ –≤ —ç—Ç–æ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç–µ
            f_patterns = [
                rf"df\[f'([^']*\{{{var_name}}}[^']*)'\]\s*=",
                rf'df\[f"([^"]*\{{{var_name}}}[^"]*)"\]\s*=',
            ]

            for pattern in f_patterns:
                f_matches = re.findall(pattern, code_snippet)
                for f_template in f_matches:
                    for value in values:
                        feature_name = f_template.format(**{var_name: value})
                        features.append(feature_name)

        except:
            pass

    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    unique_features = []
    seen = set()
    for feature in features:
        if feature not in seen:
            unique_features.append(feature)
            seen.add(feature)

    return unique_features


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    training_file = "/mnt/SSD/PYCHARMPRODJECT/BOT_AI_V3/BOT_AI_V2/–∞–∞–∞.py"

    print("üîç –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –¢–û–ß–ù–´–• –ü–†–ò–ó–ù–ê–ö–û–í –ò–ó –û–ë–£–ß–ê–Æ–©–ï–ì–û –§–ê–ô–õ–ê")
    print("=" * 60)

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    all_features = extract_features_from_code(training_file)
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(all_features)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

    # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–µ–∫—Ü–∏—è–º
    section_features = analyze_feature_sections(training_file)

    print("\nüìã –ü–†–ò–ó–ù–ê–ö–ò –ü–û –°–ï–ö–¶–ò–Ø–ú:")
    print("-" * 40)

    total_by_sections = 0
    for section_name, features in section_features.items():
        print(f"  {section_name:25}: {len(features):3d} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        total_by_sections += len(features)

    print(f"  {'–ò–¢–û–ì–û –ø–æ —Å–µ–∫—Ü–∏—è–º':<25}: {total_by_sections:3d} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    print(f"  {'–í–°–ï–ì–û —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö':<25}: {len(all_features):3d} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

    # –ü–æ–¥—Ä–æ–±–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    print("\nüìù –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –ü–†–ò–ó–ù–ê–ö–û–í:")
    print("-" * 40)
    for i, feature in enumerate(all_features, 1):
        print(f"  {i:3d}. {feature}")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    with open("exact_training_features.py", "w", encoding="utf-8") as f:
        f.write('"""–¢–æ—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –æ–±—É—á–∞—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ BOT_AI_V2/–∞–∞–∞.py"""\n\n')
        f.write("# –ü—Ä–∏–∑–Ω–∞–∫–∏, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤ –∫–æ–¥–µ:\n")
        f.write("EXACT_TRAINING_FEATURES = [\n")
        for feature in all_features:
            f.write(f'    "{feature}",\n')
        f.write("]\n\n")
        f.write(f"# –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(all_features)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤\n\n")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–±–∏–≤–∫—É –ø–æ —Å–µ–∫—Ü–∏—è–º
        f.write("# –ü—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ —Å–µ–∫—Ü–∏—è–º:\n")
        for section_name, features in section_features.items():
            f.write(f"# {section_name}: {len(features)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤\n")
            f.write(
                f"{section_name.upper().replace('_CREATE_', '').replace('_FEATURES', '')}_FEATURES = [\n"
            )
            for feature in features:
                f.write(f'    "{feature}",\n')
            f.write("]\n\n")

    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("üêç –¢–æ—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: exact_training_features.py")
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(all_features)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

    return all_features, section_features


if __name__ == "__main__":
    main()
