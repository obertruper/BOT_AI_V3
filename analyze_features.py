#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –ø–æ—á–µ–º—É –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–º–µ—é—Ç –Ω—É–ª–µ–≤—É—é –¥–∏—Å–ø–µ—Ä—Å–∏—é
"""

import asyncio
import sys
from pathlib import Path

import numpy as np
import pandas as pd

sys.path.insert(0, str(Path(__file__).parent))


async def analyze_features():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏"""

    print("=" * 80)
    print("üîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú –° –ü–†–ò–ó–ù–ê–ö–ê–ú–ò")
    print("=" * 80)

    from core.config.config_manager import ConfigManager
    from database.connections.postgres import AsyncPGPool
    from ml.logic.archive_old_versions.feature_engineering import FeatureEngineer

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    candles = await AsyncPGPool.fetch(
        """
        SELECT timestamp, open, high, low, close, volume
        FROM raw_market_data
        WHERE symbol = 'BTCUSDT'
        ORDER BY timestamp DESC
        LIMIT 300
    """
    )

    df = pd.DataFrame([dict(row) for row in candles])
    df = df.sort_values("timestamp")

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã
    for col in ["open", "high", "low", "close", "volume"]:
        df[col] = pd.to_numeric(df[col], errors="coerce")

    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π")
    print(
        f"   –î–∞–Ω–Ω—ã–µ: min={df['close'].min():.2f}, max={df['close'].max():.2f}, std={df['close'].std():.2f}"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    df["symbol"] = "BTCUSDT"
    df["datetime"] = pd.to_datetime(df["timestamp"], unit="ms")

    # –°–æ–∑–¥–∞–µ–º feature engineer
    config_manager = ConfigManager()
    config = {
        "ml": config_manager.get_ml_config(),
        "system": config_manager.get_system_config(),
        "trading": config_manager.get_config("trading", {}),
    }

    fe = FeatureEngineer(config)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
    print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
    features = fe.create_features(df)

    if features is None:
        print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤!")
        return

    print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {features.shape[1]} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

    # –ê–Ω–∞–ª–∏–∑ –¥–∏—Å–ø–µ—Ä—Å–∏–∏
    if isinstance(features, pd.DataFrame):
        features_np = features.values.astype(np.float64)
        columns = features.columns
    else:
        features_np = features.astype(np.float64)
        columns = [f"feature_{i}" for i in range(features.shape[1])]

    std_by_col = np.std(features_np, axis=0)

    # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    zero_var_mask = std_by_col < 1e-6
    low_var_mask = (std_by_col >= 1e-6) & (std_by_col < 0.01)
    normal_var_mask = std_by_col >= 0.01

    zero_var_count = zero_var_mask.sum()
    low_var_count = low_var_mask.sum()
    normal_var_count = normal_var_mask.sum()

    print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ò–°–ü–ï–†–°–ò–ò:")
    print(f"   –ù—É–ª–µ–≤–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è (< 1e-6): {zero_var_count}")
    print(f"   –ù–∏–∑–∫–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è (1e-6 - 0.01): {low_var_count}")
    print(f"   –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è (>= 0.01): {normal_var_count}")

    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    if zero_var_count > 0:
        print(f"\n‚ùå –ü–†–ò–ó–ù–ê–ö–ò –° –ù–£–õ–ï–í–û–ô –î–ò–°–ü–ï–†–°–ò–ï–ô ({zero_var_count}):")
        zero_var_indices = np.where(zero_var_mask)[0]

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
        price_features = []
        ma_features = []
        rsi_features = []
        bb_features = []
        macd_features = []
        volume_features = []
        other_features = []

        for idx in zero_var_indices:
            col_name = columns[idx]
            if "ma_" in col_name or "ema_" in col_name or "wma_" in col_name:
                ma_features.append(col_name)
            elif "rsi" in col_name:
                rsi_features.append(col_name)
            elif "bb_" in col_name:
                bb_features.append(col_name)
            elif "macd" in col_name:
                macd_features.append(col_name)
            elif "volume" in col_name or "vwap" in col_name:
                volume_features.append(col_name)
            elif any(x in col_name for x in ["open", "high", "low", "close", "price"]):
                price_features.append(col_name)
            else:
                other_features.append(col_name)

        if ma_features:
            print(f"\n   üìâ Moving Averages ({len(ma_features)}):")
            for feat in ma_features[:5]:
                idx = columns.index(feat) if isinstance(columns, list) else columns.get_loc(feat)
                val = features_np[:, idx][0]
                print(f"      {feat}: –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è = {val:.6f}")

        if rsi_features:
            print(f"\n   üìä RSI ({len(rsi_features)}):")
            for feat in rsi_features[:5]:
                idx = columns.index(feat) if isinstance(columns, list) else columns.get_loc(feat)
                val = features_np[:, idx][0]
                print(f"      {feat}: –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è = {val:.6f}")

        if bb_features:
            print(f"\n   üìà Bollinger Bands ({len(bb_features)}):")
            for feat in bb_features[:5]:
                idx = columns.index(feat) if isinstance(columns, list) else columns.get_loc(feat)
                val = features_np[:, idx][0]
                print(f"      {feat}: –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è = {val:.6f}")

        if macd_features:
            print(f"\n   üìä MACD ({len(macd_features)}):")
            for feat in macd_features[:5]:
                idx = columns.index(feat) if isinstance(columns, list) else columns.get_loc(feat)
                val = features_np[:, idx][0]
                print(f"      {feat}: –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è = {val:.6f}")

        if other_features:
            print(f"\n   üîß –î—Ä—É–≥–∏–µ ({len(other_features)}):")
            for feat in other_features[:10]:
                idx = columns.index(feat) if isinstance(columns, list) else columns.get_loc(feat)
                val = features_np[:, idx][0]
                print(f"      {feat}: –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è = {val:.6f}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    if normal_var_count > 0:
        print(f"\n‚úÖ –ü–†–ò–ó–ù–ê–ö–ò –° –ù–û–†–ú–ê–õ–¨–ù–û–ô –î–ò–°–ü–ï–†–°–ò–ï–ô ({normal_var_count}):")
        normal_indices = np.where(normal_var_mask)[0]
        for idx in normal_indices[:10]:
            col_name = columns[idx]
            col_std = std_by_col[idx]
            col_mean = np.mean(features_np[:, idx])
            print(f"   {col_name}: mean={col_mean:.3f}, std={col_std:.3f}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤—Ä—É—á–Ω—É—é
    print("\n" + "=" * 80)
    print("üî¨ –ü–†–û–í–ï–†–ö–ê –ò–ù–î–ò–ö–ê–¢–û–†–û–í –í–†–£–ß–ù–£–Æ")
    print("=" * 80)

    # RSI
    print("\n1. RSI (—Ä—É—á–Ω–æ–π —Ä–∞—Å—á–µ—Ç):")
    close_prices = df["close"].values
    deltas = np.diff(close_prices)
    gains = np.where(deltas > 0, deltas, 0)
    losses = np.where(deltas < 0, -deltas, 0)

    period = 14
    avg_gain = np.mean(gains[:period])
    avg_loss = np.mean(losses[:period])

    if avg_loss != 0:
        rs = avg_gain / avg_loss
        rsi = 100 - (100 / (1 + rs))
        print(f"   RSI(14) = {rsi:.2f}")
    else:
        print("   RSI: avg_loss = 0, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å")

    # SMA
    print("\n2. SMA (—Ä—É—á–Ω–æ–π —Ä–∞—Å—á–µ—Ç):")
    for period in [5, 10, 20]:
        sma = np.mean(close_prices[-period:])
        print(f"   SMA({period}) = {sma:.2f}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ta –±–∏–±–ª–∏–æ—Ç–µ–∫—É
    print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ta:")
    try:
        import ta

        # RSI —á–µ—Ä–µ–∑ ta
        rsi_indicator = ta.momentum.RSIIndicator(close=pd.Series(close_prices), window=14)
        rsi_values = rsi_indicator.rsi()
        print(f"   ta.RSI: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π = {rsi_values.tail().values}")

        # MACD —á–µ—Ä–µ–∑ ta
        macd = ta.trend.MACD(close=pd.Series(close_prices))
        macd_line = macd.macd()
        print(f"   ta.MACD: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π = {macd_line.tail().values}")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ta: {e}")

    print("\n" + "=" * 80)
    print("üí° –í–´–í–û–î–´")
    print("=" * 80)

    if zero_var_count > 200:
        print(
            """
‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è!

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
1. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 200-250 —Å–≤–µ—á–µ–π)
2. –û—à–∏–±–∫–∏ –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
3. –ü—Ä–æ–±–ª–µ–º—ã —Å —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö (Decimal vs float)
4. –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ ta –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç NaN –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤

–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
2. –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É NaN –∑–Ω–∞—á–µ–Ω–∏–π
3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
"""
        )
    else:
        print("‚úÖ Feature engineering —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


if __name__ == "__main__":
    asyncio.run(analyze_features())
