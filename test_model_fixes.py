#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –º–æ–¥–µ–ª–∏
"""

import asyncio
import sys
from pathlib import Path

import numpy as np
import pandas as pd

sys.path.insert(0, str(Path(__file__).parent))


async def test_model_fixes():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ —Å –Ω–æ–≤—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏"""

    print("=" * 70)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –ú–û–î–ï–õ–ò")
    print("=" * 70)

    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ML Manager
    from core.config.config_manager import ConfigManager
    from ml.ml_manager import MLManager

    config_manager = ConfigManager()
    config = {
        "ml": config_manager.get_ml_config(),
        "system": config_manager.get_system_config(),
        "trading": config_manager.get_config("trading", {}),
    }

    print("\n1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML Manager —Å –Ω–æ–≤—ã–º feature_engineering_training...")
    ml_manager = MLManager(config)
    await ml_manager.initialize()
    print("‚úÖ ML Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º feature engineering
    print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ feature engineering...")
    from ml.logic.feature_engineering import FeatureEngineer

    fe = FeatureEngineer(config)
    # –£ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ feature_engineering –Ω–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ feature_names
    print("   Feature engineering –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 240 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

    test_df = pd.DataFrame(
        {
            "open": np.random.randn(100) + 100,
            "high": np.random.randn(100) + 101,
            "low": np.random.randn(100) + 99,
            "close": np.random.randn(100) + 100,
            "volume": np.random.randn(100) + 1000,
            "symbol": ["TEST"] * 100,
            "datetime": pd.date_range("2024-01-01", periods=100, freq="15min"),
        }
    )
    test_features = fe.create_features(test_df)
    assert test_features.shape[1] == 240, (
        f"–û—à–∏–±–∫–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å 240, –ø–æ–ª—É—á–µ–Ω–æ {test_features.shape[1]}"
    )
    print("‚úÖ Feature engineering –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: 240 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

    # 3. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    from database.connections.postgres import AsyncPGPool

    print("\n3Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î...")

    symbols = ["BTCUSDT", "ETHUSDT", "SOLUSDT"]

    for symbol in symbols:
        print(f"\n--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {symbol} ---")

        candles = await AsyncPGPool.fetch(
            """
            SELECT timestamp, open, high, low, close, volume
            FROM raw_market_data
            WHERE symbol = $1
            ORDER BY timestamp DESC
            LIMIT 200
        """,
            symbol,
        )

        if len(candles) < 96:
            print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {len(candles)} —Å–≤–µ—á–µ–π")
            continue

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DataFrame
        df = pd.DataFrame([dict(row) for row in candles])
        df = df.sort_values("timestamp")
        df["symbol"] = symbol

        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π")

        # 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        print("   –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
        features = fe.create_features(df)

        print(f"   –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {features.shape[1]}")

        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 96 —Å—Ç—Ä–æ–∫
        if len(features) >= 96:
            features_for_pred = features.iloc[-96:].values
        else:
            # Padding –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
            padding = np.zeros((96 - len(features), 240))
            features_for_pred = np.vstack([padding, features.values])

        print(f"   Shape –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {features_for_pred.shape}")

        # 5. –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        print("   –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ...")
        prediction = await ml_manager.predict(features_for_pred)

        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –î–õ–Ø {symbol}:")
        print(f"   Signal type: {prediction['signal_type']}")
        print(f"   Confidence: {prediction['confidence']:.1%}")
        print(f"   Signal strength: {prediction['signal_strength']:.3f}")

        if "predictions" in prediction:
            pred = prediction["predictions"]
            print(f"   Direction score: {pred['direction_score']:.3f}")
            print(f"   Directions: {pred['directions_by_timeframe']}")

            # –ê–Ω–∞–ª–∏–∑ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
            probs = pred["direction_probabilities"]
            print("\n   –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º:")
            timeframes = ["15m", "1h", "4h", "12h"]

            for i, tf in enumerate(timeframes):
                p = probs[i]
                max_idx = np.argmax(p)
                max_class = ["LONG", "SHORT", "NEUTRAL"][max_idx]
                print(
                    f"     {tf}: {max_class} ({p[max_idx]:.1%}) - L:{p[0]:.1%}, S:{p[1]:.1%}, N:{p[2]:.1%}"
                )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
            all_probs = np.array(probs).flatten()
            prob_std = np.std(all_probs)
            prob_range = np.max(all_probs) - np.min(all_probs)

            print("\n   üìà –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞:")
            print(f"     Std –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π: {prob_std:.3f}")
            print(f"     –†–∞–∑–±—Ä–æ—Å: {prob_range:.3f}")

            if prob_std > 0.15:
                print("     ‚úÖ –ú–æ–¥–µ–ª—å –≤—ã–¥–∞–µ—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
            else:
                print("     ‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–∞—è (–Ω–∏–∑–∫–∏–π std)")

    await AsyncPGPool.close()

    print("\n" + "=" * 70)
    print("üìù –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 70)

    print(
        """
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—à–µ:

‚úÖ –£–°–ü–ï–• –µ—Å–ª–∏:
- Feature engineering –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–æ–≤–Ω–æ 240 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
- –ï—Å—Ç—å —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–∏–≥–Ω–∞–ª–æ–≤ (–Ω–µ —Ç–æ–ª—å–∫–æ NEUTRAL)
- –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ù–ï —Ä–∞–≤–Ω—ã ~33% –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤
- Std –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π > 0.15

‚ùå –ü–†–û–ë–õ–ï–ú–ê –µ—Å–ª–∏:
- –í—Å–µ —Å–∏–≥–Ω–∞–ª—ã NEUTRAL
- –í—Å–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ ~33%
- Direction score –≤—Å–µ–≥–¥–∞ ~1.3-1.6

–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –æ—Å—Ç–∞—é—Ç—Å—è:
1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ—Ä—Å–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫ (–æ—Å–æ–±–µ–Ω–Ω–æ ta)
3. –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å
    """
    )


if __name__ == "__main__":
    asyncio.run(test_model_fixes())
