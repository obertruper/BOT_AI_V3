#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import sys
from pathlib import Path

import aiohttp

sys.path.append(str(Path(__file__).parent))

from database.connections.postgres import AsyncPGPool


async def check_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã."""

    print("üîç –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –°–ò–°–¢–ï–ú–´\n")

    # 1. API
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get("http://localhost:8080/api/health") as resp:
                if resp.status == 200:
                    data = await resp.json()
                    print(f"‚úÖ API: {data.get('status', 'unknown')}")
                    if "components" in data:
                        active = [k for k, v in data["components"].items() if v]
                        inactive = [k for k, v in data["components"].items() if not v]
                        if active:
                            print(f"   –ê–∫—Ç–∏–≤–Ω—ã: {', '.join(active)}")
                        if inactive:
                            print(f"   –ù–µ –∞–∫—Ç–∏–≤–Ω—ã: {', '.join(inactive)}")
                else:
                    print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥ {resp.status})")
    except Exception as e:
        print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

    # 2. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    try:
        result = await AsyncPGPool.fetchval("SELECT 1")
        print("‚úÖ PostgreSQL: –ø–æ–¥–∫–ª—é—á–µ–Ω")
    except Exception as e:
        print(f"‚ùå PostgreSQL: {e}")

    # 3. –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã
    recent_signals = await AsyncPGPool.fetchrow(
        """
        SELECT COUNT(*) as count, MAX(created_at) as last_time
        FROM signals
        WHERE created_at > NOW() - INTERVAL '5 minutes'
    """
    )

    if recent_signals and recent_signals["count"] > 0:
        print(f"‚úÖ –°–∏–≥–Ω–∞–ª—ã: {recent_signals['count']} –∑–∞ 5 –º–∏–Ω—É—Ç")
    else:
        print("‚ùå –°–∏–≥–Ω–∞–ª—ã: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")

    # 4. ML –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    ml_activity = await AsyncPGPool.fetchrow(
        """
        SELECT COUNT(*) as count, MAX(created_at) as last_time
        FROM processed_market_data
        WHERE created_at > NOW() - INTERVAL '5 minutes'
    """
    )

    if ml_activity and ml_activity["count"] > 0:
        print(f"‚úÖ ML: {ml_activity['count']} –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∑–∞ 5 –º–∏–Ω—É—Ç")
    else:
        print("‚ùå ML: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")

    # 5. –û—Ä–¥–µ—Ä–∞
    orders = await AsyncPGPool.fetchrow(
        """
        SELECT COUNT(*) as count
        FROM orders
        WHERE created_at > NOW() - INTERVAL '1 hour'
    """
    )

    if orders and orders["count"] > 0:
        print(f"‚úÖ –û—Ä–¥–µ—Ä–∞: {orders['count']} –∑–∞ —á–∞—Å")
    else:
        print("‚ùå –û—Ä–¥–µ—Ä–∞: –Ω–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å")

    print("\n" + "=" * 40)


if __name__ == "__main__":
    asyncio.run(check_status())
