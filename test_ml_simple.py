#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç ML —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio

from core.config.config_manager import ConfigManager
from core.logger import setup_logger
from ml.signal_scheduler import SignalScheduler

logger = setup_logger(__name__)


async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤"""

    logger.info("\n" + "=" * 80)
    logger.info("ü§ñ BOT_AI_V3 - –ó–∞–ø—É—Å–∫ ML —Ç–æ—Ä–≥–æ–≤–ª–∏")
    logger.info("=" * 80 + "\n")

    config_manager = ConfigManager()
    scheduler = SignalScheduler(config_manager)

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        await scheduler.initialize()

        # –ó–∞–ø—É—Å–∫
        await scheduler.start()

        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º 2 –º–∏–Ω—É—Ç—ã —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logger.info("‚è±Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –º–∏–Ω—É—Ç...")

        for i in range(4):  # 4 —Ä–∞–∑–∞ –ø–æ 30 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(30)

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
            status = await scheduler.get_status()

            logger.info(f"\nüìä –°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ {(i + 1) * 30} —Å–µ–∫—É–Ω–¥:")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã
            signals_count = 0
            for symbol, data in status["symbols"].items():
                if data.get("last_signal") and data["last_signal"].get("signal"):
                    signals_count += 1
                    sig = data["last_signal"]["signal"]
                    logger.info(
                        f"   {symbol}: {sig.signal_type.value} (conf: {sig.confidence:.1%})"
                    )

            if signals_count == 0:
                logger.info("   –ü–æ–∫–∞ –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤...")
            else:
                logger.info(f"   –í—Å–µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {signals_count}")

    except KeyboardInterrupt:
        logger.info("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞...")
    finally:
        await scheduler.stop()
        logger.info("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ")


if __name__ == "__main__":
    asyncio.run(main())
