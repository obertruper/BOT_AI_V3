#!/usr/bin/env python3
"""
üöÄ UNIFIED BOT_AI_V3 TEST RUNNER üöÄ
–ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

–û–±—ä–µ–¥–∏–Ω—è–µ—Ç:
- Enhanced Master Test Runner (–Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞)
- Master Test Runner (legacy —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
- Comprehensive Test Generator
- Performance & Coverage Analysis

–ê–≤—Ç–æ—Ä: Enhanced Testing System
–í–µ—Ä—Å–∏—è: 4.0.0
"""

import argparse
import asyncio
import json
import subprocess
import sys
import time
from pathlib import Path
from typing import Any

PROJECT_ROOT = Path(__file__).parent.parent


class UnifiedTestRunner:
    """–ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º BOT_AI_V3"""

    def __init__(self, project_root: Path = PROJECT_ROOT):
        self.project_root = project_root
        self.results_dir = project_root / "analysis_results"
        self.results_dir.mkdir(parents=True, exist_ok=True)

    def print_banner(self):
        """–ü–µ—á–∞—Ç–∞–µ—Ç –±–∞–Ω–Ω–µ—Ä —Å–∏—Å—Ç–µ–º—ã"""
        print(
            """
üöÄ            UNIFIED BOT_AI_V3 TEST RUNNER v4.0            üöÄ
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üéØ –ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
üîç –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
‚ö° –í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π AST –∞–Ω–∞–ª–∏–∑ (3775 —Ñ—É–Ω–∫—Ü–∏–π)
üß† ML-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
üîó –ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∫–ª–∞—Å—Å–∞–º–∏ (540 –∫–ª–∞—Å—Å–æ–≤)
üìä –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üìÅ –ü—Ä–æ–µ–∫—Ç: {self.project_root}
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {self.results_dir}
üåê PostgreSQL: localhost:5555 (–ù–ï 5432!)
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
"""
        )

    async def run_enhanced_analysis(self, mode: str = "full") -> dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∞–Ω–∞–ª–∏–∑–∞"""
        print("üî• –ó–∞–ø—É—Å–∫ Enhanced Master Test Runner...")

        cmd = [
            sys.executable,
            str(self.project_root / "scripts" / "enhanced_master_test_runner.py"),
            f"--mode={mode}",
        ]

        try:
            result = subprocess.run(
                cmd, capture_output=True, text=True, timeout=600, cwd=self.project_root  # 10 –º–∏–Ω—É—Ç
            )

            return {
                "success": result.returncode == 0,
                "output": result.stdout,
                "errors": result.stderr,
                "duration": "enhanced_system",
            }

        except subprocess.TimeoutExpired:
            return {
                "success": False,
                "output": "",
                "errors": "Enhanced analysis timeout (10 minutes)",
                "duration": 600,
            }
        except Exception as e:
            return {
                "success": False,
                "output": "",
                "errors": f"Enhanced analysis error: {e}",
                "duration": 0,
            }

    def run_comprehensive_test_generation(self) -> dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç comprehensive test generator"""
        print("üß™ –ó–∞–ø—É—Å–∫ Comprehensive Test Generator...")

        cmd = [
            sys.executable,
            str(self.project_root / "scripts" / "comprehensive_test_generator.py"),
        ]

        try:
            result = subprocess.run(
                cmd, capture_output=True, text=True, timeout=300, cwd=self.project_root  # 5 –º–∏–Ω—É—Ç
            )

            return {
                "success": result.returncode == 0,
                "output": result.stdout,
                "errors": result.stderr,
                "tests_generated": True,
            }

        except subprocess.TimeoutExpired:
            return {
                "success": False,
                "output": "",
                "errors": "Test generation timeout (5 minutes)",
                "tests_generated": False,
            }
        except Exception as e:
            return {
                "success": False,
                "output": "",
                "errors": f"Test generation error: {e}",
                "tests_generated": False,
            }

    def run_legacy_analysis(self, full_analysis: bool = False) -> dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç legacy —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        print("üîÑ –ó–∞–ø—É—Å–∫ Legacy Master Test Runner...")

        cmd = [sys.executable, str(self.project_root / "scripts" / "master_test_runner.py")]
        if full_analysis:
            cmd.append("--full-analysis")

        try:
            result = subprocess.run(
                cmd, capture_output=True, text=True, timeout=600, cwd=self.project_root  # 10 –º–∏–Ω—É—Ç
            )

            return {
                "success": result.returncode == 0,
                "output": result.stdout,
                "errors": result.stderr,
                "legacy_mode": True,
            }

        except subprocess.TimeoutExpired:
            return {
                "success": False,
                "output": "",
                "errors": "Legacy analysis timeout (10 minutes)",
                "legacy_mode": True,
            }
        except Exception as e:
            return {
                "success": False,
                "output": "",
                "errors": f"Legacy analysis error: {e}",
                "legacy_mode": True,
            }

    def run_pytest_tests(self) -> dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç pytest —Ç–µ—Å—Ç—ã"""
        print("üß™ –ó–∞–ø—É—Å–∫ pytest —Ç–µ—Å—Ç–æ–≤...")

        cmd = [sys.executable, "-m", "pytest", "tests/", "--tb=short", "-v", "--disable-warnings"]

        try:
            result = subprocess.run(
                cmd, capture_output=True, text=True, timeout=300, cwd=self.project_root  # 5 –º–∏–Ω—É—Ç
            )

            # –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ pytest –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–µ—Å—Ç–æ–≤
            output_lines = result.stdout.split("\n")
            tests_collected = 0
            tests_passed = 0
            tests_failed = 0

            for line in output_lines:
                if "collected" in line and "items" in line:
                    try:
                        tests_collected = int(line.split()[0])
                    except:
                        pass
                elif "passed" in line and "failed" in line:
                    # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    for part in line.split():
                        if "passed" in part:
                            try:
                                tests_passed = int(part.replace("passed", ""))
                            except:
                                pass
                        elif "failed" in part:
                            try:
                                tests_failed = int(part.replace("failed", ""))
                            except:
                                pass

            return {
                "success": result.returncode == 0,
                "output": result.stdout,
                "errors": result.stderr,
                "tests_collected": tests_collected,
                "tests_passed": tests_passed,
                "tests_failed": tests_failed,
                "coverage_run": False,
            }

        except subprocess.TimeoutExpired:
            return {
                "success": False,
                "output": "",
                "errors": "Pytest timeout (5 minutes)",
                "tests_collected": 0,
                "tests_passed": 0,
                "tests_failed": 0,
            }
        except Exception as e:
            return {
                "success": False,
                "output": "",
                "errors": f"Pytest error: {e}",
                "tests_collected": 0,
                "tests_passed": 0,
                "tests_failed": 0,
            }

    def run_coverage_analysis(self) -> dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞"""
        print("üìä –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∫—Ä—ã—Ç–∏—è...")

        cmd = [
            sys.executable,
            "-m",
            "pytest",
            "tests/",
            "--cov=.",
            "--cov-report=json",
            "--cov-report=html",
            "--cov-report=term-missing",
            "--disable-warnings",
            "-q",
        ]

        try:
            result = subprocess.run(
                cmd, capture_output=True, text=True, timeout=300, cwd=self.project_root  # 5 –º–∏–Ω—É—Ç
            )

            # –ß–∏—Ç–∞–µ–º coverage.json –µ—Å–ª–∏ —Å–æ–∑–¥–∞–ª—Å—è
            coverage_file = self.project_root / "coverage.json"
            coverage_data = {}

            if coverage_file.exists():
                try:
                    with open(coverage_file) as f:
                        coverage_data = json.load(f)
                except:
                    pass

            return {
                "success": result.returncode == 0,
                "output": result.stdout,
                "errors": result.stderr,
                "coverage_data": coverage_data,
                "coverage_percentage": coverage_data.get("totals", {}).get("percent_covered", 0),
                "html_report": str(self.project_root / "htmlcov" / "index.html"),
            }

        except subprocess.TimeoutExpired:
            return {
                "success": False,
                "output": "",
                "errors": "Coverage analysis timeout (5 minutes)",
                "coverage_percentage": 0,
            }
        except Exception as e:
            return {
                "success": False,
                "output": "",
                "errors": f"Coverage analysis error: {e}",
                "coverage_percentage": 0,
            }

    def generate_unified_report(self, results: dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–¥–∏–Ω—ã–π –æ—Ç—á–µ—Ç"""
        print("üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–¥–∏–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON –æ—Ç—á–µ—Ç
        report_file = self.results_dir / "unified_test_report.json"
        with open(report_file, "w", encoding="utf-8") as f:
            json.dump(results, f, indent=2, default=str)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Markdown –æ—Ç—á–µ—Ç
        markdown_file = self.results_dir / "unified_test_report.md"
        markdown_content = self._generate_markdown_report(results)

        with open(markdown_file, "w", encoding="utf-8") as f:
            f.write(markdown_content)

        return str(report_file)

    def _generate_markdown_report(self, results: dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Markdown –æ—Ç—á–µ—Ç"""
        report = f"""# üöÄ Unified BOT_AI_V3 Test Report

**–î–∞—Ç–∞:** {time.strftime('%Y-%m-%d %H:%M:%S')}
**–ü—Ä–æ–µ–∫—Ç:** BOT_AI_V3
**–í–µ—Ä—Å–∏—è —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:** 4.0.0

## üìä –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

- **–û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** {results.get('total_duration', 'N/A')}
- **–£—Å–ø–µ—à–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤:** {results.get('successful_components', 0)}/{results.get('total_components', 0)}
- **–û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å:** {results.get('overall_success_rate', 0):.1f}%

## üî• Enhanced Analysis Results

- **–°—Ç–∞—Ç—É—Å:** {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if results.get('enhanced_analysis', {}).get('success') else '‚ùå –û—à–∏–±–∫–∞'}
- **–§–∞–π–ª–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:** {results.get('files_analyzed', 0)}
- **–§—É–Ω–∫—Ü–∏–π –Ω–∞–π–¥–µ–Ω–æ:** {results.get('functions_found', 0)}
- **–ö–ª–∞—Å—Å–æ–≤ –Ω–∞–π–¥–µ–Ω–æ:** {results.get('classes_found', 0)}

## üß™ Test Generation Results

- **–°—Ç–∞—Ç—É—Å:** {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if results.get('test_generation', {}).get('success') else '‚ùå –û—à–∏–±–∫–∞'}
- **Unit —Ç–µ—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ:** {results.get('unit_tests_generated', 0)}
- **Integration —Ç–µ—Å—Ç–æ–≤:** {results.get('integration_tests_generated', 0)}
- **Performance —Ç–µ—Å—Ç–æ–≤:** {results.get('performance_tests_generated', 0)}

## üìä Coverage Analysis

- **–ü–æ–∫—Ä—ã—Ç–∏–µ:** {results.get('coverage_analysis', {}).get('coverage_percentage', 0):.1f}%
- **–¢–µ—Å—Ç–æ–≤ —Å–æ–±—Ä–∞–Ω–æ:** {results.get('pytest_results', {}).get('tests_collected', 0)}
- **–¢–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–æ:** {results.get('pytest_results', {}).get('tests_passed', 0)}
- **–¢–µ—Å—Ç–æ–≤ —É–ø–∞–ª–æ:** {results.get('pytest_results', {}).get('tests_failed', 0)}

## üîç Detailed Results

### Enhanced Analysis
```
{results.get('enhanced_analysis', {}).get('output', 'No output')[:500]}...
```

### Test Generation
```
{results.get('test_generation', {}).get('output', 'No output')[:500]}...
```

### Coverage Analysis
```
{results.get('coverage_analysis', {}).get('output', 'No output')[:500]}...
```

## üìÇ Generated Files

- **JSON –æ—Ç—á–µ—Ç:** `analysis_results/unified_test_report.json`
- **HTML –¥–∞—à–±–æ—Ä–¥:** `analysis_results/enhanced_testing_dashboard.html`
- **Coverage HTML:** `htmlcov/index.html`
- **Enhanced results:** `analysis_results/enhanced_*.json`

## üöÄ Quick Commands

```bash
# –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
python3 scripts/unified_test_runner.py --mode=full

# –¢–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
python3 scripts/unified_test_runner.py --mode=generate

# –¢–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è
python3 scripts/unified_test_runner.py --mode=coverage

# Legacy —Å–∏—Å—Ç–µ–º–∞
python3 scripts/unified_test_runner.py --mode=legacy
```

## üéØ Recommendations

"""

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if results.get("coverage_analysis", {}).get("coverage_percentage", 0) < 50:
            report += (
                "- üî¥ **–ö—Ä–∏—Ç–∏—á–Ω–æ:** –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ–µ. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–æ–≤.\n"
            )

        if results.get("pytest_results", {}).get("tests_failed", 0) > 0:
            report += "- ‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –ï—Å—Ç—å –ø–∞–¥–∞—é—â–∏–µ —Ç–µ—Å—Ç—ã. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.\n"

        if not results.get("enhanced_analysis", {}).get("success"):
            report += "- üîß **–ò—Å–ø—Ä–∞–≤–∏—Ç—å:** –ü—Ä–æ–±–ª–µ–º—ã —Å enhanced –∞–Ω–∞–ª–∏–∑–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.\n"

        report += f"\n---\n**–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:** {time.strftime('%Y-%m-%d %H:%M:%S')}\n"

        return report

    async def run_unified_analysis(self, mode: str = "full") -> dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∞–Ω–∞–ª–∏–∑–∞"""
        start_time = time.time()

        self.print_banner()

        results = {"start_time": start_time, "mode": mode, "version": "4.0.0"}

        components_run = 0
        components_successful = 0

        try:
            if mode in ["full", "enhanced"]:
                # Enhanced –∞–Ω–∞–ª–∏–∑
                enhanced_result = await self.run_enhanced_analysis("full")
                results["enhanced_analysis"] = enhanced_result
                components_run += 1
                if enhanced_result["success"]:
                    components_successful += 1

            if mode in ["full", "generate"]:
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
                test_gen_result = self.run_comprehensive_test_generation()
                results["test_generation"] = test_gen_result
                components_run += 1
                if test_gen_result["success"]:
                    components_successful += 1

            if mode in ["full", "tests", "pytest"]:
                # Pytest —Ç–µ—Å—Ç—ã
                pytest_result = self.run_pytest_tests()
                results["pytest_results"] = pytest_result
                components_run += 1
                if pytest_result["success"]:
                    components_successful += 1

            if mode in ["full", "coverage"]:
                # –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è
                coverage_result = self.run_coverage_analysis()
                results["coverage_analysis"] = coverage_result
                components_run += 1
                if coverage_result["success"]:
                    components_successful += 1

            if mode == "legacy":
                # Legacy —Å–∏—Å—Ç–µ–º–∞
                legacy_result = self.run_legacy_analysis(full_analysis=True)
                results["legacy_analysis"] = legacy_result
                components_run += 1
                if legacy_result["success"]:
                    components_successful += 1

        except Exception as e:
            results["global_error"] = str(e)
            print(f"‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_duration = time.time() - start_time
        results.update(
            {
                "total_duration": total_duration,
                "total_components": components_run,
                "successful_components": components_successful,
                "overall_success_rate": (
                    (components_successful / components_run * 100) if components_run > 0 else 0
                ),
                "end_time": time.time(),
            }
        )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report_file = self.generate_unified_report(results)

        # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        print(
            f"""
üéâ            UNIFIED TEST RUNNER - –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–Å–¢            üéâ
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_duration:.1f}—Å
‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {components_successful}/{components_run}
üìä –û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {results['overall_success_rate']:.1f}%
üöÄ –†–µ–∂–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {mode}
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üèÜ UNIFIED –°–ò–°–¢–ï–ú–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!

üìÇ –†–ï–ó–£–õ–¨–¢–ê–¢–´:
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üìÑ –ï–¥–∏–Ω—ã–π –æ—Ç—á—ë—Ç: {report_file}
üìù Markdown –æ—Ç—á—ë—Ç: {self.results_dir}/unified_test_report.md
üåê –î–∞—à–±–æ—Ä–¥: {self.results_dir}/enhanced_testing_dashboard.html
üìä Coverage: htmlcov/index.html

üöÄ –ë–´–°–¢–†–´–ï –ö–û–ú–ê–ù–î–´:
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
python3 scripts/unified_test_runner.py --mode=full

# –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã
python3 scripts/unified_test_runner.py --mode=tests

# –¢–æ–ª—å–∫–æ –ø–æ–∫—Ä—ã—Ç–∏–µ  
python3 scripts/unified_test_runner.py --mode=coverage

# Enhanced –∞–Ω–∞–ª–∏–∑
python3 scripts/unified_test_runner.py --mode=enhanced

üéØ –°–¢–ê–¢–£–°: {"üü¢ –í–°–Å –û–¢–õ–ò–ß–ù–û!" if results['overall_success_rate'] >= 80 else "üü° –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø" if results['overall_success_rate'] >= 50 else "üî¥ –ù–£–ñ–ù–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø"}
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
"""
        )

        return results


def main():
    """Main function"""
    parser = argparse.ArgumentParser(
        description="üöÄ Unified BOT_AI_V3 Test Runner v4.0 - –ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:
  full        - –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (enhanced + –≥–µ–Ω–µ—Ä–∞—Ü–∏—è + —Ç–µ—Å—Ç—ã + –ø–æ–∫—Ä—ã—Ç–∏–µ)
  enhanced    - –¢–æ–ª—å–∫–æ enhanced –∞–Ω–∞–ª–∏–∑ AST –∏ ML –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
  generate    - –¢–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤  
  tests       - –¢–æ–ª—å–∫–æ –∑–∞–ø—É—Å–∫ pytest —Ç–µ—Å—Ç–æ–≤
  coverage    - –¢–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞
  legacy      - Legacy master test runner (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)

–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python3 scripts/unified_test_runner.py --mode=full
  python3 scripts/unified_test_runner.py --mode=coverage
  python3 scripts/unified_test_runner.py --mode=legacy
        """,
    )

    parser.add_argument(
        "--mode",
        choices=["full", "enhanced", "generate", "tests", "coverage", "legacy"],
        default="full",
        help="–†–µ–∂–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: full)",
    )

    parser.add_argument(
        "--project-root", type=Path, default=PROJECT_ROOT, help="–ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"
    )

    args = parser.parse_args()

    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º runner
    runner = UnifiedTestRunner(args.project_root)

    try:
        results = asyncio.run(runner.run_unified_analysis(args.mode))

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        if results["overall_success_rate"] >= 80:
            sys.exit(0)  # –£—Å–ø–µ—Ö
        elif results["overall_success_rate"] >= 50:
            sys.exit(1)  # –ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö
        else:
            sys.exit(2)  # –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫

    except KeyboardInterrupt:
        print("\n‚ùå –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(130)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
