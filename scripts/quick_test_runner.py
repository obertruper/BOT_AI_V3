#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º
–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
"""

import subprocess
import sys
import time
from datetime import datetime
from pathlib import Path

import click


class QuickTestRunner:
    """–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""

    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.failed_tests = []
        self.slow_tests = []

    def get_changed_files(self) -> list[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            # –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ main
            result = subprocess.run(
                ["git", "diff", "--name-only", "HEAD", "origin/main"],
                capture_output=True,
                text=True,
            )

            if result.returncode == 0:
                return [f for f in result.stdout.strip().split("\n") if f.endswith(".py")]
        except:
            pass

        # –ï—Å–ª–∏ git –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        import os
        import time

        now = time.time()
        recent_files = []

        for file_path in self.project_root.rglob("*.py"):
            if "test" not in str(file_path) and "__pycache__" not in str(file_path):
                mtime = os.path.getmtime(file_path)
                if now - mtime < 3600:  # –ò–∑–º–µ–Ω–µ–Ω—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
                    recent_files.append(str(file_path.relative_to(self.project_root)))

        return recent_files

    def find_related_tests(self, changed_file: str) -> list[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Ç–µ—Å—Ç—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º"""

        tests = []

        # trading/engine.py -> tests/unit/trading/test_engine.py
        if "/" in changed_file:
            parts = Path(changed_file).parts
            category = parts[0]
            module = Path(changed_file).stem

            test_patterns = [
                f"tests/unit/{category}/test_{module}.py",
                f"tests/unit/{category}/test_{module}_*.py",
                f"tests/integration/test_{module}.py",
                f"tests/integration/test_{category}_{module}.py",
            ]

            for pattern in test_patterns:
                for test_file in self.project_root.glob(pattern):
                    if test_file.exists():
                        tests.append(str(test_file))

        return tests

    def run_test(self, test_file: str) -> dict:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω —Ç–µ—Å—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""

        start_time = time.time()

        result = subprocess.run(
            ["pytest", test_file, "-v", "--tb=short", "--quiet"],
            capture_output=True,
            text=True,
            cwd=self.project_root,
        )

        elapsed = time.time() - start_time

        return {
            "file": test_file,
            "passed": result.returncode == 0,
            "time": elapsed,
            "output": result.stdout if not result.returncode == 0 else "",
            "errors": result.stderr,
        }

    def run_quick_tests(self, changed_files: list[str]) -> dict:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""

        all_tests = set()

        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        for file in changed_files:
            tests = self.find_related_tests(file)
            all_tests.update(tests)

        if not all_tests:
            return {"status": "no_tests", "files": changed_files}

        print(f"üß™ –ó–∞–ø—É—Å–∫ {len(all_tests)} —Ç–µ—Å—Ç–æ–≤...")

        results = {"total": len(all_tests), "passed": 0, "failed": 0, "slow": 0, "details": []}

        for test in all_tests:
            test_name = Path(test).name
            print(f"  ‚Ä¢ {test_name}...", end=" ")

            result = self.run_test(test)

            if result["passed"]:
                results["passed"] += 1
                if result["time"] > 1.0:
                    print(f"‚úÖ (–º–µ–¥–ª–µ–Ω–Ω–æ: {result['time']:.2f}s)")
                    results["slow"] += 1
                    self.slow_tests.append(test)
                else:
                    print(f"‚úÖ ({result['time']:.2f}s)")
            else:
                results["failed"] += 1
                print("‚ùå FAILED!")
                self.failed_tests.append(test)
                results["details"].append(result)

        return results

    def run_smoke_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ smoke —Ç–µ—Å—Ç—ã"""

        smoke_tests = [
            "tests/unit/trading/test_engine.py::test_engine_initialization",
            "tests/unit/database/test_connections.py::test_db_connection",
            "tests/unit/ml/test_ml_manager.py::test_model_loading",
        ]

        print("üî• Smoke —Ç–µ—Å—Ç—ã...")

        for test in smoke_tests:
            if "::" in test:
                file, func = test.split("::")
                if Path(self.project_root / file).exists():
                    result = subprocess.run(
                        ["pytest", file, "-k", func, "-q"],
                        capture_output=True,
                        cwd=self.project_root,
                    )

                    if result.returncode != 0:
                        print(f"  ‚ùå {func} - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê!")
                        return False

        print("  ‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
        return True

    def check_imports(self, file_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç"""

        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å
            spec = __import__(file_path.replace("/", ".").replace(".py", ""))
            return True
        except ImportError as e:
            print(f"  ‚ùå Import error: {e}")
            return False
        except Exception as e:
            print(f"  ‚ùå Error: {e}")
            return False

    def generate_report(self, results: dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""

        report = f"""
# üß™ –û—Ç—á—ë—Ç –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}

## üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:
- –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {results.get('total', 0)}
- ‚úÖ –ü—Ä–æ—à–ª–æ: {results.get('passed', 0)}
- ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {results.get('failed', 0)}
- üêå –ú–µ–¥–ª–µ–Ω–Ω—ã—Ö: {results.get('slow', 0)}
"""

        if self.failed_tests:
            report += "\n## ‚ùå –ü—Ä–æ–≤–∞–ª–∏–≤—à–∏–µ—Å—è —Ç–µ—Å—Ç—ã:\n"
            for test in self.failed_tests:
                report += f"- {test}\n"

            report += "\n## üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:\n"
            for detail in results.get("details", []):
                if not detail["passed"]:
                    report += f"\n### {detail['file']}\n"
                    report += "```\n"
                    report += detail["output"][:500]  # –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
                    report += "\n```\n"

        if self.slow_tests:
            report += "\n## üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã (>1s):\n"
            for test in self.slow_tests:
                report += f"- {test}\n"

        return report


@click.command()
@click.option("--watch", is_flag=True, help="–†–µ–∂–∏–º –Ω–∞–±–ª—é–¥–µ–Ω–∏—è")
@click.option("--smoke", is_flag=True, help="–¢–æ–ª—å–∫–æ smoke —Ç–µ—Å—Ç—ã")
@click.option("--all", is_flag=True, help="–í—Å–µ —Ç–µ—Å—Ç—ã")
def main(watch, smoke, all):
    """–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º"""

    runner = QuickTestRunner()

    if smoke:
        print("üî• –ó–∞–ø—É—Å–∫ smoke —Ç–µ—Å—Ç–æ–≤...")
        if runner.run_smoke_tests():
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        else:
            print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã!")
            sys.exit(1)
        return

    if all:
        print("üß™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤...")
        result = subprocess.run(["pytest", "tests/", "-q", "--tb=short"], cwd=runner.project_root)
        sys.exit(result.returncode)

    if watch:
        print("üëÄ –†–µ–∂–∏–º –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏...")
        last_check = {}

        while True:
            try:
                changed = runner.get_changed_files()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                new_changes = [f for f in changed if f not in last_check]

                if new_changes:
                    print(f"\nüîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è: {len(new_changes)} —Ñ–∞–π–ª–æ–≤")
                    results = runner.run_quick_tests(new_changes)

                    if results.get("failed", 0) > 0:
                        print("\n‚ùå –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´!")
                        print(runner.generate_report(results))
                    else:
                        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏!")

                    last_check = dict.fromkeys(changed, True)

                time.sleep(5)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

            except KeyboardInterrupt:
                print("\nüëã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è")
                break

    else:
        # –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫
        print("üîç –ü–æ–∏—Å–∫ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        changed = runner.get_changed_files()

        if not changed:
            print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

            # –ó–∞–ø—É—Å–∫–∞–µ–º smoke —Ç–µ—Å—Ç—ã –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            if runner.run_smoke_tests():
                print("‚úÖ Smoke —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
            return

        print(f"üìù –ò–∑–º–µ–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(changed)}")
        for file in changed[:5]:
            print(f"  ‚Ä¢ {file}")

        if len(changed) > 5:
            print(f"  ... –∏ –µ—â—ë {len(changed) - 5}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        results = runner.run_quick_tests(changed)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
        report = runner.generate_report(results)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
        report_path = runner.project_root / "tests" / "last_test_run.md"
        with open(report_path, "w") as f:
            f.write(report)

        print(report)

        if results.get("failed", 0) > 0:
            print(f"\nüí° –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: cat {report_path}")
            sys.exit(1)
        else:
            print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")


if __name__ == "__main__":
    main()
