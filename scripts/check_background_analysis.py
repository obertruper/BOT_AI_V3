#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ BOT_AI_V3
"""
import json
from datetime import datetime
from pathlib import Path

PROJECT_ROOT = Path(__file__).parent.parent


def check_background_analysis():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""

    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ BOT_AI_V3")
    print("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∞–Ω–∞–ª–∏–∑–µ
    notification_file = PROJECT_ROOT / "analysis_results" / "last_background_analysis.txt"

    if notification_file.exists():
        print("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–æ–Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑:")
        print("-" * 30)
        with open(notification_file, encoding="utf-8") as f:
            print(f.read())
    else:
        print("‚ùå –§–∞–π–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ñ–æ–Ω–æ–≤–æ–º –∞–Ω–∞–ª–∏–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print(f"   –û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å: {notification_file}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    warnings_file = PROJECT_ROOT / "analysis_results" / "analysis_warnings.txt"

    if warnings_file.exists():
        print("\n‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
        print("-" * 30)
        with open(warnings_file, encoding="utf-8") as f:
            print(f.read())

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏
    logs_dir = PROJECT_ROOT / "data" / "logs"

    if logs_dir.exists():
        background_logs = list(logs_dir.glob("background_analysis_*.log"))

        if background_logs:
            latest_log = max(background_logs, key=lambda p: p.stat().st_mtime)
            print("\nüìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥ –∞–Ω–∞–ª–∏–∑–∞:")
            print(f"   {latest_log}")
            print(f"   –†–∞–∑–º–µ—Ä: {latest_log.stat().st_size} –±–∞–π—Ç")
            print(f"   –ò–∑–º–µ–Ω—ë–Ω: {datetime.fromtimestamp(latest_log.stat().st_mtime)}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫
            with open(latest_log, encoding="utf-8") as f:
                lines = f.readlines()
                print("\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞:")
                print("-" * 30)
                for line in lines[-10:]:
                    print(f"   {line.rstrip()}")
        else:
            print("\nüìÑ –õ–æ–≥–∏ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    results_dir = PROJECT_ROOT / "analysis_results"

    if results_dir.exists():
        print("\nüìä –§–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞:")
        print("-" * 30)

        for result_file in results_dir.glob("*.json"):
            file_stats = result_file.stat()
            print(f"   üìÑ {result_file.name}")
            print(f"      –†–∞–∑–º–µ—Ä: {file_stats.st_size} –±–∞–π—Ç")
            print(f"      –ò–∑–º–µ–Ω—ë–Ω: {datetime.fromtimestamp(file_stats.st_mtime)}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º coverage –¥–∞–Ω–Ω—ã–µ
        coverage_file = PROJECT_ROOT / "coverage_post_commit.json"
        if coverage_file.exists():
            try:
                with open(coverage_file) as f:
                    coverage_data = json.load(f)

                coverage_percent = coverage_data["totals"]["percent_covered"]
                lines_covered = coverage_data["totals"]["covered_lines"]
                lines_total = coverage_data["totals"]["num_statements"]

                print("\nüìà –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑):")
                print(f"   –ü–æ–∫—Ä—ã—Ç–∏–µ: {coverage_percent:.1f}%")
                print(f"   –°—Ç—Ä–æ–∫ –ø–æ–∫—Ä—ã—Ç–æ: {lines_covered}/{lines_total}")

            except Exception as e:
                print(f"\n‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏—è: {e}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∞–Ω–∞–ª–∏–∑–∞
    try:
        import psutil

        analysis_processes = []
        for proc in psutil.process_iter(["pid", "name", "cmdline"]):
            try:
                cmdline = " ".join(proc.info["cmdline"]) if proc.info["cmdline"] else ""
                if any(
                    script in cmdline
                    for script in [
                        "master_test_runner.py",
                        "code_chain_analyzer.py",
                        "full_chain_tester.py",
                        "coverage_monitor.py",
                    ]
                ):
                    analysis_processes.append(
                        {"pid": proc.info["pid"], "name": proc.info["name"], "cmdline": cmdline}
                    )
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue

        if analysis_processes:
            print("\nüîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∞–Ω–∞–ª–∏–∑–∞:")
            print("-" * 30)
            for proc in analysis_processes:
                print(f"   PID {proc['pid']}: {proc['cmdline'][:80]}...")
        else:
            print("\nüí§ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∞–Ω–∞–ª–∏–∑–∞")

    except ImportError:
        print("\n‚ùì psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("-" * 30)

    if warnings_file.exists():
        print("   üî¥ –ï—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ analysis_warnings.txt")

    if not (PROJECT_ROOT / "analysis_results").exists():
        print(
            "   üü° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑: python3 scripts/master_test_runner.py --full-analysis"
        )

    print("   üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞—à–±–æ—Ä–¥–∞: firefox analysis_results/testing_dashboard.html")
    print("   üìà HTML –ø–æ–∫—Ä—ã—Ç–∏–µ: firefox htmlcov/index.html")
    print("   üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: python3 scripts/coverage_monitor.py")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        check_background_analysis()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –û—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    main()
