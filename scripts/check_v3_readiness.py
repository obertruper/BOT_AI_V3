#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ BOT Trading v3 –∫ –∑–∞–ø—É—Å–∫—É
"""

import asyncio
import importlib.util
import os
import sys
from pathlib import Path

import asyncpg
import yaml

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.logger import setup_logger

logger = setup_logger("v3_readiness_check")


class ReadinessChecker:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ v3"""

    def __init__(self, base_path: str = "."):
        self.base_path = Path(base_path)
        self.checks_passed = 0
        self.checks_failed = 0
        self.warnings = []

    async def run(self) -> bool:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.

        Returns:
            True –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É
        """
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ BOT Trading v3...")
        logger.info("=" * 60)

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        self._check_directory_structure()

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        await self._check_configurations()

        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        self._check_dependencies()

        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await self._check_database()

        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ ML –º–æ–¥–µ–ª–µ–π
        self._check_ml_models()

        # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        await self._check_core_components()

        # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∏ WebSocket
        await self._check_api_endpoints()

        # –ò—Ç–æ–≥–∏
        logger.info("=" * 60)
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ: {self.checks_passed}")
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.checks_failed}")
        logger.info(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(self.warnings)}")

        if self.warnings:
            logger.warning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
            for warning in self.warnings:
                logger.warning(f"  - {warning}")

        if self.checks_failed == 0:
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É!")
            return True
        else:
            logger.error("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏.")
            return False

    def _check_directory_structure(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        logger.info("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")

        required_dirs = [
            "config",
            "config/traders",
            "config/exchanges",
            "config/ml",
            "core",
            "core/config",
            "core/system",
            "core/traders",
            "database",
            "database/models",
            "database/connections",
            "exchanges",
            "exchanges/bybit",
            "exchanges/base",
            "ml",
            "ml/logic",
            "strategies",
            "strategies/ml_strategy",
            "trading",
            "trading/sltp",
            "web",
            "web/api",
            "web/frontend",
            "scripts",
            "scripts/migration",
            "models",
            "models/saved",
            "logs",
            "data",
        ]

        for dir_path in required_dirs:
            full_path = self.base_path / dir_path
            if full_path.exists():
                self._check_passed(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_path}")
            else:
                self._check_failed(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    async def _check_configurations(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        logger.info("\n‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º system.yaml
        system_config_path = self.base_path / "config" / "system.yaml"
        if system_config_path.exists():
            try:
                with open(system_config_path, "r") as f:
                    config = yaml.safe_load(f)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
                required_sections = [
                    "database",
                    "exchanges",
                    "notifications",
                    "ml_models",
                    "risk_management",
                ]

                for section in required_sections:
                    if section in config:
                        self._check_passed(f"–°–µ–∫—Ü–∏—è {section} –≤ system.yaml")
                    else:
                        self._check_failed(
                            f"–°–µ–∫—Ü–∏—è {section} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ system.yaml"
                        )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç –ë–î
                db_port = config.get("database", {}).get("port")
                if db_port == 5555:
                    self._check_passed("–ü–æ—Ä—Ç –ë–î = 5555")
                else:
                    self._check_failed(
                        f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—Ç –ë–î: {db_port} (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 5555)"
                    )

            except Exception as e:
                self._check_failed(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è system.yaml: {e}")
        else:
            self._check_failed("–§–∞–π–ª system.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞
        traders_dir = self.base_path / "config" / "traders"
        if traders_dir.exists():
            trader_configs = list(traders_dir.glob("*.yaml"))
            if trader_configs:
                self._check_passed(
                    f"–ù–∞–π–¥–µ–Ω–æ {len(trader_configs)} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Ç—Ä–µ–π–¥–µ—Ä–æ–≤"
                )
            else:
                self._check_failed("–ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Ç—Ä–µ–π–¥–µ—Ä–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        ml_config_path = self.base_path / "config" / "ml" / "ml_config.yaml"
        if ml_config_path.exists():
            self._check_passed("ML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
        else:
            self._check_failed("ML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    def _check_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
        logger.info("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")

        required_packages = [
            "asyncio",
            "asyncpg",
            "fastapi",
            "uvicorn",
            "sqlalchemy",
            "alembic",
            "ccxt",
            "pandas",
            "numpy",
            "torch",
            "aiohttp",
            "websockets",
            "pydantic",
            "telegram",  # python-telegram-bot –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ telegram
            "structlog",
            "prometheus_client",
        ]

        for package in required_packages:
            spec = importlib.util.find_spec(package)
            if spec is not None:
                self._check_passed(f"–ü–∞–∫–µ—Ç {package}")
            else:
                self._check_failed(f"–ü–∞–∫–µ—Ç {package} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _check_database(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("\nüóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

        try:
            # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            system_config_path = self.base_path / "config" / "system.yaml"
            if not system_config_path.exists():
                self._check_failed("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î")
                return

            with open(system_config_path, "r") as f:
                config = yaml.safe_load(f)

            db_config = config.get("database", {})

            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            conn = await asyncpg.connect(
                host=db_config.get("host", "127.0.0.1"),
                port=db_config.get("port", 5555),
                database=db_config.get("name", "bot_trading_v3"),
                user=db_config.get("user", "obertruper"),
                password=db_config.get("password", "postgres"),
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é PostgreSQL
            version = await conn.fetchval("SELECT version()")
            self._check_passed("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL")
            logger.info(f"  PostgreSQL: {version.split(',')[0]}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            tables = [
                "trades",
                "orders",
                "positions",
                "signals",
                "balances",
                "performance_metrics",
            ]

            for table in tables:
                exists = await conn.fetchval(
                    "SELECT EXISTS (SELECT FROM information_schema.tables "
                    "WHERE table_schema = 'public' AND table_name = $1)",
                    table,
                )
                if exists:
                    self._check_passed(f"–¢–∞–±–ª–∏—Ü–∞ {table}")
                else:
                    self._check_failed(f"–¢–∞–±–ª–∏—Ü–∞ {table} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

            await conn.close()

        except Exception as e:
            self._check_failed(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")

    def _check_ml_models(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ ML –º–æ–¥–µ–ª–µ–π"""
        logger.info("\nü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ ML –º–æ–¥–µ–ª–µ–π...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º PatchTST –º–æ–¥–µ–ª—å
        model_path = (
            self.base_path / "models" / "saved" / "best_model_20250728_215703.pth"
        )
        if model_path.exists():
            self._check_passed("PatchTST –º–æ–¥–µ–ª—å")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            size_mb = model_path.stat().st_size / (1024 * 1024)
            logger.info(f"  –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏: {size_mb:.1f} MB")
        else:
            self._check_failed("PatchTST –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º scaler
        scaler_path = self.base_path / "models" / "saved" / "data_scaler.pkl"
        if scaler_path.exists():
            self._check_passed("Data scaler")
        else:
            self._check_failed("Data scaler –Ω–µ –Ω–∞–π–¥–µ–Ω")

    async def _check_core_components(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"""
        logger.info("\n‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        core_files = [
            ("main.py", "–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª"),
            ("core/system/orchestrator.py", "System Orchestrator"),
            ("core/traders/trader_manager.py", "Trader Manager"),
            ("exchanges/bybit/bybit_exchange.py", "Bybit Exchange"),
            ("ml/ml_manager.py", "ML Manager"),
            ("ml/ml_signal_processor.py", "ML Signal Processor"),
            ("trading/sltp/enhanced_manager.py", "Enhanced SL/TP Manager"),
            ("web/api/main.py", "Web API"),
            ("strategies/ml_strategy/patchtst_strategy.py", "PatchTST Strategy"),
        ]

        for file_path, description in core_files:
            full_path = self.base_path / file_path
            if full_path.exists():
                self._check_passed(description)
            else:
                self._check_failed(f"{description} ({file_path})")

    async def _check_api_endpoints(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç API endpoints"""
        logger.info("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ endpoint —Ñ–∞–π–ª–æ–≤
        endpoint_files = [
            "web/api/endpoints/system.py",
            "web/api/endpoints/traders.py",
            "web/api/endpoints/monitoring.py",
            "web/api/endpoints/strategies.py",
            "web/api/endpoints/exchanges.py",
        ]

        for endpoint_file in endpoint_files:
            full_path = self.base_path / endpoint_file
            if full_path.exists():
                self._check_passed(
                    f"Endpoint: {endpoint_file.split('/')[-1].replace('.py', '')}"
                )
            else:
                self._check_failed(f"Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω: {endpoint_file}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º WebSocket manager
        ws_manager = self.base_path / "web" / "api" / "websocket" / "manager.py"
        if ws_manager.exists():
            self._check_passed("WebSocket Manager")
        else:
            self._check_failed("WebSocket Manager –Ω–µ –Ω–∞–π–¥–µ–Ω")

    def _check_passed(self, message: str):
        """–û—Ç–º–µ—á–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É"""
        self.checks_passed += 1
        logger.info(f"  ‚úÖ {message}")

    def _check_failed(self, message: str):
        """–û—Ç–º–µ—á–∞–µ—Ç –Ω–µ—É–¥–∞—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É"""
        self.checks_failed += 1
        logger.error(f"  ‚ùå {message}")

    def _add_warning(self, message: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        self.warnings.append(message)
        logger.warning(f"  ‚ö†Ô∏è {message}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse

    parser = argparse.ArgumentParser(description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ BOT Trading v3")
    parser.add_argument(
        "--path", type=str, default=".", help="–ü—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ v3"
    )

    args = parser.parse_args()

    checker = ReadinessChecker(args.path)
    success = await checker.run()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    asyncio.run(main())
