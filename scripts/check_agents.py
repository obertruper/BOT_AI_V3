#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Claude Code –∞–≥–µ–Ω—Ç–æ–≤
"""

from pathlib import Path
from typing import Dict

import yaml


def check_agent_file(file_path: Path) -> Dict:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –∞–≥–µ–Ω—Ç–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å."""
    errors = []
    warnings = []

    try:
        with open(file_path, "r", encoding="utf-8") as f:
            content = f.read()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è YAML frontmatter
        if not content.startswith("---"):
            errors.append("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '---' (YAML frontmatter)")
            return {"valid": False, "errors": errors, "warnings": warnings}

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ YAML
        parts = content.split("---", 2)
        if len(parts) < 3:
            errors.append("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç YAML frontmatter")
            return {"valid": False, "errors": errors, "warnings": warnings}

        try:
            metadata = yaml.safe_load(parts[1])
        except yaml.YAMLError as e:
            errors.append(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ YAML: {e}")
            return {"valid": False, "errors": errors, "warnings": warnings}

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ["name", "description"]
        for field in required_fields:
            if field not in metadata:
                errors.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏
        if "name" in metadata:
            name = metadata["name"]
            if not isinstance(name, str):
                errors.append("–ü–æ–ª–µ 'name' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
            elif " " in name:
                errors.append("–ü–æ–ª–µ 'name' –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã")
            elif name != name.lower():
                warnings.append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å lowercase –¥–ª—è 'name'")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
        if "description" in metadata:
            desc = metadata["description"]
            if not isinstance(desc, str):
                errors.append("–ü–æ–ª–µ 'description' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
            elif len(desc) < 10:
                warnings.append("–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ tools
        if "tools" in metadata:
            tools = metadata["tools"]
            if tools != "all" and not isinstance(tools, list):
                errors.append("–ü–æ–ª–µ 'tools' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 'all' –∏–ª–∏ —Å–ø–∏—Å–∫–æ–º")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        body = parts[2].strip()
        if len(body) < 100:
            warnings.append("–¢–µ–ª–æ –∞–≥–µ–Ω—Ç–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ")

        return {
            "valid": len(errors) == 0,
            "errors": errors,
            "warnings": warnings,
            "metadata": metadata if len(errors) == 0 else None,
        }

    except Exception as e:
        return {"valid": False, "errors": [f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}"], "warnings": []}


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    agents_dir = Path(".claude/agents")

    if not agents_dir.exists():
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è .claude/agents –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Claude Code –∞–≥–µ–Ω—Ç–æ–≤...\n")

    agent_files = list(agents_dir.glob("*.md"))
    agent_files = [f for f in agent_files if f.name != "README.md"]

    if not agent_files:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤!")
        return

    print(f"–ù–∞–π–¥–µ–Ω–æ {len(agent_files)} –∞–≥–µ–Ω—Ç–æ–≤:\n")

    valid_agents = []
    invalid_agents = []

    for agent_file in sorted(agent_files):
        result = check_agent_file(agent_file)

        if result["valid"]:
            valid_agents.append(agent_file)
            print(f"‚úÖ {agent_file.name}")
            if result["warnings"]:
                for warning in result["warnings"]:
                    print(f"   ‚ö†Ô∏è  {warning}")
        else:
            invalid_agents.append(agent_file)
            print(f"‚ùå {agent_file.name}")
            for error in result["errors"]:
                print(f"   ‚ùó {error}")

    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"   ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤: {len(valid_agents)}")
    print(f"   ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤: {len(invalid_agents)}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
    global_agents_dir = Path.home() / ".claude" / "agents"
    if global_agents_dir.exists():
        global_count = len(list(global_agents_dir.glob("*.md")))
        print(f"\nüìÅ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã: {global_count}")
    else:
        print(f"\nüìÅ –ì–ª–æ–±–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∞–≥–µ–Ω—Ç–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {global_agents_dir}")
        print("   –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print(f"   cp -r .claude/agents {global_agents_dir}")

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
    print("\nüí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤:")
    print("   1. –í –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ Claude Code –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /agents")
    print("   2. –ê–≥–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–¥–∞—á")
    print("   3. –ú–æ–∂–Ω–æ —è–≤–Ω–æ –≤—ã–∑–≤–∞—Ç—å —á–µ—Ä–µ–∑ Task tool")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥
    commands_dir = Path(".claude/commands")
    if commands_dir.exists():
        command_files = list(commands_dir.glob("*.md"))
        print(f"\nüéØ –¢–∞–∫–∂–µ –Ω–∞–π–¥–µ–Ω–æ {len(command_files)} slash-–∫–æ–º–∞–Ω–¥")


if __name__ == "__main__":
    main()
