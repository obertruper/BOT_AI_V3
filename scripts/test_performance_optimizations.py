#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ BOT_AI_V3
"""

import asyncio
import sys
import time
from pathlib import Path
from typing import Any

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from core.logger import setup_logger
from core.system.performance_cache import (
    get_cache_health,
    performance_cache,
    warm_up_cache,
)
from core.system.process_manager import ProcessManager

logger = setup_logger(__name__)


class PerformanceTestSuite:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""

    def __init__(self):
        self.results = {}
        self.process_manager = ProcessManager()

    async def run_all_tests(self) -> dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        logger.info("=" * 60)

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∫–µ—à–∞
        performance_cache.start_cleanup_task()

        # –¢–µ—Å—Ç—ã –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        await self.test_cache_performance()
        await self.test_cache_memory_management()
        await self.test_batch_operations()

        # –¢–µ—Å—Ç—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        await self.test_logging_performance()

        # –¢–µ—Å—Ç—ã ProcessManager
        await self.test_process_management()

        # –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        await self.print_summary()

        return self.results

    async def test_cache_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–µ—à–∞...")

        test_data = {}
        start_time = time.time()

        # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏
        write_start = time.time()
        for i in range(1000):
            await performance_cache.set(f"test_key_{i}", f"test_value_{i}")
        write_time = time.time() - write_start

        # –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è
        read_start = time.time()
        for i in range(1000):
            value = await performance_cache.get(f"test_key_{i}")
            assert value == f"test_value_{i}", f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–ª—é—á–∞ test_key_{i}"
        read_time = time.time() - read_start

        # –¢–µ—Å—Ç batch –æ–ø–µ—Ä–∞—Ü–∏–π
        batch_data = {f"batch_key_{i}": f"batch_value_{i}" for i in range(100)}
        batch_start = time.time()
        await performance_cache.set_many(batch_data)
        batch_time = time.time() - batch_start

        total_time = time.time() - start_time

        test_data = {
            "total_time": round(total_time, 3),
            "write_time": round(write_time, 3),
            "read_time": round(read_time, 3),
            "batch_time": round(batch_time, 3),
            "write_ops_per_sec": round(1000 / write_time, 1),
            "read_ops_per_sec": round(1000 / read_time, 1),
            "batch_ops_per_sec": round(100 / batch_time, 1),
        }

        self.results["cache_performance"] = test_data

        logger.info(f"  ‚úÖ –ó–∞–ø–∏—Å—å: {test_data['write_ops_per_sec']} ops/sec")
        logger.info(f"  ‚úÖ –ß—Ç–µ–Ω–∏–µ: {test_data['read_ops_per_sec']} ops/sec")
        logger.info(f"  ‚úÖ Batch: {test_data['batch_ops_per_sec']} ops/sec")

    async def test_cache_memory_management(self):
        """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é –∫–µ—à–∞"""
        logger.info("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é...")

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        initial_stats = performance_cache.get_stats()

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–µ—à –¥–æ –ª–∏–º–∏—Ç–∞
        for i in range(performance_cache.max_size + 100):
            await performance_cache.set(f"memory_test_{i}", f"large_value_{'x' * 100}_{i}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–º–µ—Ä –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
        final_stats = performance_cache.get_stats()

        test_data = {
            "initial_size": initial_stats["size"],
            "final_size": final_stats["size"],
            "max_size": performance_cache.max_size,
            "evictions": final_stats["evictions"],
            "within_limit": final_stats["size"] <= performance_cache.max_size,
        }

        self.results["cache_memory"] = test_data

        logger.info(f"  ‚úÖ –†–∞–∑–º–µ—Ä –∫–µ—à–∞: {test_data['final_size']}/{test_data['max_size']}")
        logger.info(f"  ‚úÖ Evictions: {test_data['evictions']}")
        logger.info(f"  ‚úÖ –í –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞: {test_data['within_limit']}")

    async def test_batch_operations(self):
        """–¢–µ—Å—Ç batch –æ–ø–µ—Ä–∞—Ü–∏–π"""
        logger.info("üì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ batch –æ–ø–µ—Ä–∞—Ü–∏–π...")

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        operations = []
        for i in range(100):
            operations.extend(
                [
                    {"type": "set", "key": f"batch_op_{i}", "value": f"value_{i}"},
                    {"type": "get", "key": f"batch_op_{i}"},
                ]
            )

        # –í—ã–ø–æ–ª–Ω—è–µ–º batch –æ–ø–µ—Ä–∞—Ü–∏–∏
        start_time = time.time()
        results = await performance_cache.batch_update(operations)
        execution_time = time.time() - start_time

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful_ops = sum(1 for result in results if result is not None)

        test_data = {
            "total_operations": len(operations),
            "successful_operations": successful_ops,
            "execution_time": round(execution_time, 3),
            "ops_per_sec": round(len(operations) / execution_time, 1),
            "success_rate": round(successful_ops / len(operations) * 100, 1),
        }

        self.results["batch_operations"] = test_data

        logger.info(f"  ‚úÖ –û–ø–µ—Ä–∞—Ü–∏–π: {test_data['total_operations']}")
        logger.info(f"  ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {test_data['successful_operations']}")
        logger.info(f"  ‚úÖ –°–∫–æ—Ä–æ—Å—Ç—å: {test_data['ops_per_sec']} ops/sec")

    async def test_logging_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")

        test_logger = setup_logger("performance_test")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        start_time = time.time()

        for i in range(1000):
            test_logger.debug(f"Debug message {i}")
            test_logger.info(f"Info message {i}")
            if i % 10 == 0:
                test_logger.warning(f"Warning message {i}")
            if i % 100 == 0:
                test_logger.error(f"Error message {i}")

        execution_time = time.time() - start_time

        test_data = {
            "total_logs": 4000,  # 1000 debug + 1000 info + 100 warning + 10 error
            "execution_time": round(execution_time, 3),
            "logs_per_sec": round(4000 / execution_time, 1),
        }

        self.results["logging_performance"] = test_data

        logger.info(f"  ‚úÖ –õ–æ–≥–æ–≤: {test_data['total_logs']}")
        logger.info(f"  ‚úÖ –í—Ä–µ–º—è: {test_data['execution_time']}—Å")
        logger.info(f"  ‚úÖ –°–∫–æ—Ä–æ—Å—Ç—å: {test_data['logs_per_sec']} logs/sec")

    async def test_process_management(self):
        """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏"""
        logger.info("‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏...")

        await self.process_manager.initialize()

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø—Ä–æ—Ü–µ—Å—Å–∞
        start_time = time.time()

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ—Ü–µ—Å—Å
            pid = await self.process_manager.start_component(
                name="test_process", command="sleep 5", auto_restart=False
            )

            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
            await asyncio.sleep(1)

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            proc_info = self.process_manager.get_process_info("test_process")

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            await self.process_manager.stop_component("test_process")

            execution_time = time.time() - start_time

            test_data = {
                "process_started": pid is not None,
                "process_info_available": proc_info is not None,
                "execution_time": round(execution_time, 3),
                "process_pid": pid,
            }

        except Exception as e:
            test_data = {
                "process_started": False,
                "process_info_available": False,
                "execution_time": round(time.time() - start_time, 3),
                "error": str(e),
            }

        self.results["process_management"] = test_data

        logger.info(f"  ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω: {test_data['process_started']}")
        logger.info(f"  ‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞: {test_data['process_info_available']}")
        logger.info(f"  ‚úÖ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {test_data['execution_time']}—Å")

    async def print_summary(self):
        """–í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        logger.info("\n" + "=" * 60)
        logger.info("üìã –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        logger.info("=" * 60)

        # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–µ—à–∞
        cache_perf = self.results.get("cache_performance", {})
        if cache_perf.get("read_ops_per_sec", 0) > 10000:
            cache_rating = "–û–¢–õ–ò–ß–ù–û"
        elif cache_perf.get("read_ops_per_sec", 0) > 5000:
            cache_rating = "–•–û–†–û–®–û"
        else:
            cache_rating = "–¢–†–ï–ë–£–ï–¢ –£–õ–£–ß–®–ï–ù–ò–Ø"

        logger.info(f"\nüèÜ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–µ—à–∞: {cache_rating}")

        # –ó–¥–æ—Ä–æ–≤—å–µ –∫–µ—à–∞
        cache_health = await get_cache_health()
        logger.info(f"üíö –ó–¥–æ—Ä–æ–≤—å–µ –∫–µ—à–∞: {cache_health['status'].upper()}")

        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        total_tests = len(self.results)
        successful_tests = sum(1 for test in self.results.values() if not test.get("error"))

        logger.info("\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        logger.info(f"  –¢–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {total_tests}")
        logger.info(f"  –£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests}")
        logger.info(f"  –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {round(successful_tests / total_tests * 100, 1)}%")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = cache_health.get("recommendations", [])
        if recommendations:
            logger.info("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            for rec in recommendations:
                logger.info(f"  - {rec}")

        logger.info("\n" + "=" * 60)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ BOT_AI_V3")

    # –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º –∫–µ—à
    await warm_up_cache()

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_suite = PerformanceTestSuite()
    results = await test_suite.run_all_tests()

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–µ—à
    await performance_cache.stop()

    logger.info("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

    return results


if __name__ == "__main__":
    asyncio.run(main())
