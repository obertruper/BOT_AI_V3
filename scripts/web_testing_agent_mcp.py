#!/usr/bin/env python3
"""
Web Testing Agent —Å MCP Puppeteer

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Puppeteer MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ BOT_AI_V3
"""

import asyncio
import json
from datetime import datetime
from pathlib import Path
from typing import Any

# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ Claude Code
# –∫–æ—Ç–æ—Ä—ã–π –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ MCP Puppeteer —Å–µ—Ä–≤–µ—Ä—É


class WebTestingAgentMCP:
    """
    –ê–≥–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Puppeteer MCP

    –í–∞–∂–Ω–æ: –≠—Ç–æ—Ç –∞–≥–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Claude Code
    –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ MCP —Å–µ—Ä–≤–µ—Ä–∞–º
    """

    def __init__(self):
        self.base_url = "http://localhost:5173"
        self.api_url = "http://localhost:8080"
        self.test_results: list[dict[str, Any]] = []
        self.screenshots_dir = Path("test_results/screenshots")
        self.screenshots_dir.mkdir(parents=True, exist_ok=True)

    def log(self, message: str, level: str = "INFO"):
        """–ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        print(f"[{timestamp}] [{level}] {message}")

    async def test_dashboard_load(self) -> dict[str, Any]:
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ dashboard"""
        self.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ Dashboard...")

        result = {
            "test": "Dashboard Load",
            "url": self.base_url,
            "status": "pending",
            "timestamp": datetime.now().isoformat(),
        }

        try:
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –∑–∞–ø—É—Å–∫–µ —á–µ—Ä–µ–∑ Claude Code:
            # await mcp_puppeteer_navigate(url=self.base_url)

            # –°–∫—Ä–∏–Ω—à–æ—Ç
            screenshot_name = f"dashboard_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            # await mcp_puppeteer_screenshot(name=screenshot_name, width=1920, height=1080)

            result["status"] = "passed"
            result["screenshot"] = screenshot_name
            self.log("‚úÖ Dashboard –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")

        except Exception as e:
            result["status"] = "failed"
            result["error"] = str(e)
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Dashboard: {e}", "ERROR")

        self.test_results.append(result)
        return result

    async def test_trader_cards(self) -> dict[str, Any]:
        """–¢–µ—Å—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤"""
        self.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤...")

        result = {
            "test": "Trader Cards",
            "status": "pending",
            "timestamp": datetime.now().isoformat(),
            "traders_found": 0,
        }

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
            pass
            # script = """
            # const cards = document.querySelectorAll('.trader-card');
            # cards.length;
            # """
            # traders_count = await mcp_puppeteer_evaluate(script=script)

            # result["traders_found"] = traders_count

            # if traders_count > 0:
            #     result["status"] = "passed"
            #     self.log(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {traders_count} –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤")
            # else:
            #     result["status"] = "failed"
            #     self.log("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∏ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", "ERROR")

        except Exception as e:
            result["status"] = "failed"
            result["error"] = str(e)
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫: {e}", "ERROR")

        self.test_results.append(result)
        return result

    async def test_click_trader(self) -> dict[str, Any]:
        """–¢–µ—Å—Ç –∫–ª–∏–∫–∞ –ø–æ —Ç—Ä–µ–π–¥–µ—Ä—É"""
        self.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–∫–∞ –ø–æ —Ç—Ä–µ–π–¥–µ—Ä—É...")

        result = {
            "test": "Click Trader",
            "status": "pending",
            "timestamp": datetime.now().isoformat(),
        }

        try:
            # –ö–ª–∏–∫ –ø–æ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ —Ç—Ä–µ–π–¥–µ—Ä–∞
            # await mcp_puppeteer_click(selector=".trader-card:first-child")

            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
            await asyncio.sleep(1)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–∫—Ä—ã–ª–∏—Å—å –¥–µ—Ç–∞–ª–∏
            # script = """
            # const details = document.querySelector('.trader-details');
            # !!details;
            # """
            # details_visible = await mcp_puppeteer_evaluate(script=script)

            # if details_visible:
            #     result["status"] = "passed"
            #     self.log("‚úÖ –î–µ—Ç–∞–ª–∏ —Ç—Ä–µ–π–¥–µ—Ä–∞ –æ—Ç–∫—Ä—ã—Ç—ã")
            #
            #     # –°–∫—Ä–∏–Ω—à–æ—Ç –¥–µ—Ç–∞–ª–µ–π
            #     await mcp_puppeteer_screenshot(
            #         name="trader_details",
            #         selector=".trader-details"
            #     )
            # else:
            #     result["status"] = "failed"
            #     self.log("‚ùå –î–µ—Ç–∞–ª–∏ —Ç—Ä–µ–π–¥–µ—Ä–∞ –Ω–µ –æ—Ç–∫—Ä—ã–ª–∏—Å—å", "ERROR")

        except Exception as e:
            result["status"] = "failed"
            result["error"] = str(e)
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞: {e}", "ERROR")

        self.test_results.append(result)
        return result

    async def test_form_interaction(self) -> dict[str, Any]:
        """–¢–µ—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ñ–æ—Ä–º–∞–º–∏"""
        self.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º...")

        result = {
            "test": "Form Interaction",
            "status": "pending",
            "timestamp": datetime.now().isoformat(),
        }

        try:
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
            # await mcp_puppeteer_navigate(url=f"{self.base_url}/settings")

            # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
            # await mcp_puppeteer_fill(
            #     selector="input[name='leverage']",
            #     value="10"
            # )

            # –í—ã–±–æ—Ä –∏–∑ dropdown
            # await mcp_puppeteer_select(
            #     selector="select[name='exchange']",
            #     value="bybit"
            # )

            # –°–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã
            # await mcp_puppeteer_screenshot(name="settings_form")

            result["status"] = "passed"
            self.log("‚úÖ –§–æ—Ä–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

        except Exception as e:
            result["status"] = "failed"
            result["error"] = str(e)
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º: {e}", "ERROR")

        self.test_results.append(result)
        return result

    async def test_responsive_views(self) -> dict[str, Any]:
        """–¢–µ—Å—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        self.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏...")

        result = {
            "test": "Responsive Design",
            "status": "pending",
            "timestamp": datetime.now().isoformat(),
            "viewports": [],
        }

        viewports = [
            {"name": "Mobile", "width": 375, "height": 667},
            {"name": "Tablet", "width": 768, "height": 1024},
            {"name": "Desktop", "width": 1920, "height": 1080},
        ]

        try:
            for viewport in viewports:
                self.log(f"üì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {viewport['name']}...")

                # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ viewport
                # await mcp_puppeteer_set_viewport(
                #     width=viewport["width"],
                #     height=viewport["height"]
                # )

                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                # await mcp_puppeteer_navigate(url=self.base_url)

                # –°–∫—Ä–∏–Ω—à–æ—Ç
                screenshot_name = f"responsive_{viewport['name'].lower()}"
                # await mcp_puppeteer_screenshot(
                #     name=screenshot_name,
                #     width=viewport["width"],
                #     height=viewport["height"]
                # )

                viewport_result = {
                    "viewport": viewport["name"],
                    "screenshot": screenshot_name,
                    "status": "passed",
                }

                result["viewports"].append(viewport_result)
                self.log(f"‚úÖ {viewport['name']} –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω")

            result["status"] = "passed"

        except Exception as e:
            result["status"] = "failed"
            result["error"] = str(e)
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}", "ERROR")

        self.test_results.append(result)
        return result

    async def test_api_calls(self) -> dict[str, Any]:
        """–¢–µ—Å—Ç API –≤—ã–∑–æ–≤–æ–≤ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API –≤—ã–∑–æ–≤–æ–≤...")

        result = {
            "test": "API Integration",
            "status": "pending",
            "timestamp": datetime.now().isoformat(),
            "api_calls": [],
        }

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–æ–ª–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ API
            # script = """
            # // –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –∫–æ–Ω—Å–æ–ª–∏
            # const logs = [];
            # const originalLog = console.log;
            # const originalError = console.error;
            #
            # console.log = function(...args) {
            #     logs.push({type: 'log', message: args.join(' ')});
            #     originalLog.apply(console, args);
            # };
            #
            # console.error = function(...args) {
            #     logs.push({type: 'error', message: args.join(' ')});
            #     originalError.apply(console, args);
            # };
            #
            # // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Å–±–æ—Ä–∞ –ª–æ–≥–æ–≤
            # setTimeout(() => {
            #     window.__testLogs = logs;
            # }, 2000);
            # """
            # await mcp_puppeteer_evaluate(script=script)

            # –ñ–¥–µ–º —Å–±–æ—Ä–∞ –ª–æ–≥–æ–≤
            await asyncio.sleep(2.5)

            # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏
            # get_logs_script = "window.__testLogs || []"
            # logs = await mcp_puppeteer_evaluate(script=get_logs_script)

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏
            # api_errors = [log for log in logs if log["type"] == "error" and "api" in log["message"].lower()]

            # if not api_errors:
            #     result["status"] = "passed"
            #     self.log("‚úÖ API –≤—ã–∑–æ–≤—ã —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ –æ—à–∏–±–æ–∫")
            # else:
            #     result["status"] = "failed"
            #     result["api_errors"] = api_errors
            #     self.log(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {len(api_errors)} –æ—à–∏–±–æ–∫ API", "ERROR")

        except Exception as e:
            result["status"] = "failed"
            result["error"] = str(e)
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API: {e}", "ERROR")

        self.test_results.append(result)
        return result

    def generate_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        report_path = (
            Path("test_results")
            / f"mcp_test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        )
        report_path.parent.mkdir(parents=True, exist_ok=True)

        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total = len(self.test_results)
        passed = sum(1 for t in self.test_results if t["status"] == "passed")
        failed = sum(1 for t in self.test_results if t["status"] == "failed")

        report = {
            "timestamp": datetime.now().isoformat(),
            "summary": {
                "total": total,
                "passed": passed,
                "failed": failed,
                "success_rate": f"{(passed / total * 100):.1f}%" if total > 0 else "0%",
            },
            "results": self.test_results,
        }

        with open(report_path, "w", encoding="utf-8") as f:
            json.dump(report, f, indent=2, ensure_ascii=False)

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n" + "=" * 60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 60)
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {passed}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
        print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {report['summary']['success_rate']}")
        print("=" * 60)
        print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")

        return str(report_path)

    async def run_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ Web Testing Agent —Å MCP Puppeteer")
        print("=" * 60)

        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        await self.test_dashboard_load()
        await self.test_trader_cards()
        await self.test_click_trader()
        await self.test_form_interaction()
        await self.test_responsive_views()
        await self.test_api_calls()

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        self.generate_report()

        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ Claude Code
INSTRUCTIONS = """
ü§ñ Web Testing Agent —Å Puppeteer MCP

–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ Claude Code:

1. –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ Dashboard:
   await mcp_puppeteer_navigate(url="http://localhost:5173")

2. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:
   await mcp_puppeteer_screenshot(name="dashboard", width=1920, height=1080)

3. –ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É:
   await mcp_puppeteer_click(selector=".trader-card:first-child")

4. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã:
   await mcp_puppeteer_fill(selector="input[name='leverage']", value="10")

5. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ JavaScript:
   await mcp_puppeteer_evaluate(script="document.querySelectorAll('.trader-card').length")

6. –ò–∑–º–µ–Ω–µ–Ω–∏–µ viewport:
   await mcp_puppeteer_navigate(url="http://localhost:5173")
   # –ó–∞—Ç–µ–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –≤ launch options

–ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π:
python3 scripts/web_testing_agent_mcp.py
"""


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print(INSTRUCTIONS)

    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–∞
    agent = WebTestingAgentMCP()
    await agent.run_tests()


if __name__ == "__main__":
    asyncio.run(main())
