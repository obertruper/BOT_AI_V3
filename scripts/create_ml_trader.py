#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞ —Å ML —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π PatchTST

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
1. –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º—É SystemOrchestrator
2. –°–æ–∑–¥–∞–µ—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞ —Å ML —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π patchtst_strategy
3. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –µ–≥–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä–æ–π BTC/USDT –Ω–∞ –±–∏—Ä–∂–µ Bybit
4. –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
5. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏ –ø–µ—Ä–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
"""

import asyncio
import logging
import sys
from datetime import datetime
from pathlib import Path
from typing import Any, Dict

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from sqlalchemy import select

from core.config.config_manager import get_global_config_manager
from core.system.orchestrator import SystemOrchestrator
from core.traders.trader_factory import get_global_trader_factory
from database.models import Signal
from strategies.ml_strategy.patchtst_strategy import PatchTSTStrategy

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


class MLTraderCreator:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ML —Ç—Ä–µ–π–¥–µ—Ä–æ–º"""

    def __init__(self):
        self.config_manager = get_global_config_manager()
        self.orchestrator = None
        self.trader_id = f"ml_trader_{datetime.now().strftime('%Y%m%d_%H%M%S')}"

    async def initialize_system(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...")

        # –°–æ–∑–¥–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        self.orchestrator = SystemOrchestrator(self.config_manager)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        await self.orchestrator.initialize()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        await self.orchestrator.start()

        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏ –∑–∞–ø—É—â–µ–Ω–∞")

    async def register_ml_strategy(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è PatchTST —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ —Ñ–∞–±—Ä–∏–∫–µ"""
        logger.info("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ML —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
        trader_factory = get_global_trader_factory()

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º PatchTST —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        trader_factory.register_strategy("patchtst_strategy", PatchTSTStrategy)

        logger.info("‚úÖ ML —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")

    async def create_trader_config(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è ML —Ç—Ä–µ–π–¥–µ—Ä–∞"""
        config = {
            "trader_id": self.trader_id,
            "enabled": True,
            "exchange": "bybit",
            "exchange_config": {
                "api_key": self.config_manager.get_config(
                    "exchanges.bybit.api_key", ""
                ),
                "api_secret": self.config_manager.get_config(
                    "exchanges.bybit.api_secret", ""
                ),
                "testnet": True,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º testnet –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                "market_type": "spot",
            },
            "strategy": "patchtst_strategy",
            "strategy_config": {
                "name": "PatchTST_ML",
                "symbol": "BTC/USDT",
                "exchange": "bybit",
                "timeframe": "15m",
                "parameters": {
                    # –ü—É—Ç–∏ –∫ –º–æ–¥–µ–ª—è–º
                    "model_path": "models/saved/best_model_20250728_215703.pth",
                    "scaler_path": "models/saved/data_scaler.pkl",
                    "config_path": "models/saved/config.pkl",
                    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏
                    "min_confidence": 0.6,
                    "min_profit_probability": 0.65,
                    "max_risk_threshold": 0.03,
                    "position_sizing_mode": "kelly",
                    # –í–µ—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
                    "timeframe_weights": {"15m": 0.3, "1h": 0.3, "4h": 0.3, "12h": 0.1},
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    "kelly_safety_factor": 0.25,
                    "fixed_risk_pct": 0.02,
                    "min_position_pct": 0.01,
                    "max_position_pct": 0.1,
                    "risk_multiplier": 1.5,
                    "min_risk_reward_ratio": 2.0,
                },
            },
            "risk_management": {
                "type": "basic",
                "max_position_size": 0.1,  # 10% –æ—Ç –±–∞–ª–∞–Ω—Å–∞
                "max_daily_loss": 0.05,  # 5% –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π —É–±—ã—Ç–æ–∫
                "max_open_positions": 1,  # –û–¥–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –∑–∞ —Ä–∞–∑
                "stop_loss_percentage": 0.02,  # 2% —Å—Ç–æ–ø-–ª–æ—Å—Å
            },
        }

        return config

    async def create_ml_trader(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ ML —Ç—Ä–µ–π–¥–µ—Ä–∞"""
        logger.info(f"ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ ML —Ç—Ä–µ–π–¥–µ—Ä–∞ {self.trader_id}...")

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç—Ä–µ–π–¥–µ—Ä–∞
        trader_config = await self.create_trader_config()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config_manager.set_trader_config(self.trader_id, trader_config)

        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–π–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
        trader_manager = self.orchestrator.trader_manager

        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–π–¥–µ—Ä–∞
        await trader_manager.create_trader(self.trader_id)
        await trader_manager.start_trader(self.trader_id)

        logger.info(f"‚úÖ ML —Ç—Ä–µ–π–¥–µ—Ä {self.trader_id} —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω")

    async def monitor_trader(self, duration_seconds: int = 300) -> None:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç—ã —Ç—Ä–µ–π–¥–µ—Ä–∞"""
        logger.info(f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–µ–π–¥–µ—Ä–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ {duration_seconds} —Å–µ–∫—É–Ω–¥...")

        start_time = datetime.now()
        signal_count = 0

        while (datetime.now() - start_time).seconds < duration_seconds:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–π–¥–µ—Ä–∞
                trader_manager = self.orchestrator.trader_manager
                trader_context = trader_manager._traders.get(self.trader_id)

                if trader_context:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    logger.info(f"–°—Ç–∞—Ç—É—Å —Ç—Ä–µ–π–¥–µ—Ä–∞: {trader_context.state}")

                    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
                    if hasattr(trader_context, "strategy") and trader_context.strategy:
                        metrics = trader_context.strategy.get_metrics()
                        logger.info(f"–ú–µ—Ç—Ä–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {metrics}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
                    from database.connections import AsyncSessionLocal

                    async with AsyncSessionLocal() as db:
                        query = (
                            select(Signal)
                            .where(Signal.created_at > start_time)
                            .order_by(Signal.created_at.desc())
                            .limit(10)
                        )
                        result = await db.execute(query)
                        signals = result.scalars().all()

                        if signals:
                            new_signals = len(signals) - signal_count
                            if new_signals > 0:
                                signal_count = len(signals)
                                logger.info(f"üéØ –ù–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {new_signals}")

                                for signal in signals[:new_signals]:
                                    logger.info(
                                        f"  - {signal.signal_type.value} @ {signal.created_at} | "
                                        f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.2%} | "
                                        f"–°–∏–ª–∞: {signal.strength:.2f}"
                                    )

                # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(10)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")

        logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")

    async def stop_trader(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–µ–π–¥–µ—Ä–∞ –∏ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–µ–π–¥–µ—Ä–∞...")

        if self.orchestrator and self.orchestrator.trader_manager:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–µ–π–¥–µ—Ä–∞
            await self.orchestrator.trader_manager.stop_trader(self.trader_id)

            # –£–¥–∞–ª—è–µ–º —Ç—Ä–µ–π–¥–µ—Ä–∞
            await self.orchestrator.trader_manager.remove_trader(self.trader_id)

        logger.info("‚úÖ –¢—Ä–µ–π–¥–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def cleanup(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")

        if self.orchestrator:
            await self.orchestrator.stop()

        logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


async def check_prerequisites() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏
    model_files = {
        "model": Path("models/saved/best_model_20250728_215703.pth"),
        "scaler": Path("models/saved/data_scaler.pkl"),
        "config": Path("models/saved/config.pkl"),
    }

    all_exist = True
    for name, path in model_files.items():
        if path.exists():
            logger.info(f"‚úÖ {name}: {path}")
        else:
            logger.error(f"‚ùå {name} –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
            all_exist = False

    if not all_exist:
        logger.error("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!")
        logger.info(
            "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ LLM TRANSFORM –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ prepare_model_config.py"
        )
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    try:
        from database.connections import AsyncSessionLocal

        async with AsyncSessionLocal() as db:
            await db.execute(select(1))
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return False

    return True


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("=" * 60)
    logger.info("üöÄ –ó–ê–ü–£–°–ö ML –¢–†–ï–ô–î–ï–†–ê –° –°–¢–†–ê–¢–ï–ì–ò–ï–ô PatchTST")
    logger.info("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
    if not await check_prerequisites():
        return

    creator = MLTraderCreator()

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
        await creator.initialize_system()

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º ML —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        await creator.register_ml_strategy()

        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–π–¥–µ—Ä–∞
        await creator.create_ml_trader()

        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Ä–∞–±–æ—Ç—É —Ç—Ä–µ–π–¥–µ—Ä–∞
        await creator.monitor_trader(duration_seconds=300)  # 5 –º–∏–Ω—É—Ç

    except KeyboardInterrupt:
        logger.info("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)

    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–µ–π–¥–µ—Ä–∞
        await creator.stop_trader()

        # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        await creator.cleanup()

        logger.info("=" * 60)
        logger.info("‚úÖ –†–ê–ë–û–¢–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        logger.info("=" * 60)


if __name__ == "__main__":
    asyncio.run(main())
