#!/usr/bin/env python3
"""–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit"""

import asyncio
import os

import ccxt.async_support as ccxt
from dotenv import load_dotenv


async def check_bybit():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –±–∞–ª–∞–Ω—Å–∞ Bybit"""
    load_dotenv()

    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ Bybit
        exchange = ccxt.bybit(
            {
                "apiKey": os.getenv("BYBIT_API_KEY"),
                "secret": os.getenv("BYBIT_API_SECRET"),
                "testnet": os.getenv("BYBIT_TESTNET", "false").lower() == "true",
                "options": {
                    "defaultType": "linear",  # USDT perpetual
                    "adjustForTimeDifference": True,
                },
            }
        )

        print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit...")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä—ã–Ω–∫–∏
        await exchange.load_markets()
        print("‚úÖ –†—ã–Ω–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        balance = await exchange.fetch_balance()

        print("\nüí∞ –ë–ê–õ–ê–ù–°–´ BYBIT:")
        print("=" * 50)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º USDT –±–∞–ª–∞–Ω—Å
        if "USDT" in balance:
            usdt = balance["USDT"]
            print("USDT:")
            print(f"  –°–≤–æ–±–æ–¥–Ω–æ: {usdt['free']:.2f}")
            print(f"  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {usdt['used']:.2f}")
            print(f"  –í—Å–µ–≥–æ: {usdt['total']:.2f}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –±–∞–ª–∞–Ω—Å—ã
        for currency, bal in balance.items():
            if currency in ["info", "free", "used", "total", "USDT"]:
                continue
            if bal["total"] > 0:
                print(f"\n{currency}:")
                print(f"  –°–≤–æ–±–æ–¥–Ω–æ: {bal['free']:.8f}")
                print(f"  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {bal['used']:.8f}")
                print(f"  –í—Å–µ–≥–æ: {bal['total']:.8f}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        print("\nüìä –û–¢–ö–†–´–¢–´–ï –ü–û–ó–ò–¶–ò–ò:")
        print("=" * 50)

        positions = await exchange.fetch_positions()
        if positions:
            for pos in positions:
                if pos["contracts"] > 0:
                    print(f"\n–°–∏–º–≤–æ–ª: {pos['symbol']}")
                    print(f"  –°—Ç–æ—Ä–æ–Ω–∞: {pos['side']}")
                    print(f"  –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã: {pos['contracts']}")
                    print(f"  –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {pos['markPrice']}")
                    print(f"  –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL: {pos['unrealizedPnl']:.2f}")
        else:
            print("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –ø–æ–∑–∏—Ü–∏–π
        print("\n‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –ê–ö–ö–ê–£–ù–¢–ê:")
        print("=" * 50)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
        account_info = await exchange.fetch_account()
        if account_info:
            print(f"–¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞: {account_info.get('type', 'N/A')}")
            print(f"VIP —É—Ä–æ–≤–µ–Ω—å: {account_info.get('vipLevel', 'N/A')}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏
        print("\nüìà –ü–û–°–õ–ï–î–ù–ò–ï –°–î–ï–õ–ö–ò:")
        print("=" * 50)

        try:
            trades = await exchange.fetch_my_trades("BTCUSDT", limit=5)
            if trades:
                for trade in trades:
                    print(f"\n–í—Ä–µ–º—è: {trade['datetime']}")
                    print(f"  –°–∏–º–≤–æ–ª: {trade['symbol']}")
                    print(f"  –°—Ç–æ—Ä–æ–Ω–∞: {trade['side']}")
                    print(f"  –¶–µ–Ω–∞: {trade['price']}")
                    print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {trade['amount']}")
                    print(
                        f"  –ö–æ–º–∏—Å—Å–∏—è: {trade['fee']['cost']} {trade['fee']['currency']}"
                    )
            else:
                print("–ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–¥–µ–ª–æ–∫")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫: {e}")

        await exchange.close()
        print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        print(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        if "Invalid" in str(e) or "credentials" in str(e):
            print("\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å API –∫–ª—é—á–∞–º–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
            print("1. API –∫–ª—é—á–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã –∏ –Ω–µ –∏—Å—Ç–µ–∫–ª–∏")
            print("2. API –∫–ª—é—á–∏ –∏–º–µ—é—Ç –Ω—É–∂–Ω—ã–µ –ø—Ä–∞–≤–∞ (spot/derivatives trading)")
            print("3. IP –∞–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ whitelist (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)")
            print("4. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–µ–π –≤ .env —Ñ–∞–π–ª–µ")


if __name__ == "__main__":
    asyncio.run(check_bybit())
