#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ ML —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ PatchTST –º–æ–¥–µ–ª–∏
"""

import argparse
import asyncio
import logging
import sys
from pathlib import Path

import yaml

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from sqlalchemy import select

from database.connections import get_async_db
from database.models import HistoricalData
from strategies.ml_strategy.patchtst_strategy import PatchTSTStrategy

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


async def load_historical_data(symbol: str, limit: int = 1000):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    async with get_async_db() as db:
        query = (
            select(HistoricalData)
            .where(HistoricalData.symbol == symbol)
            .order_by(HistoricalData.timestamp.desc())
            .limit(limit)
        )
        result = await db.execute(query)
        data = result.scalars().all()

        if not data:
            raise ValueError(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {symbol}")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        market_data = []
        for row in reversed(data):  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫
            market_data.append(
                {
                    "symbol": row.symbol,
                    "timestamp": row.timestamp,
                    "open": float(row.open),
                    "high": float(row.high),
                    "low": float(row.low),
                    "close": float(row.close),
                    "volume": float(row.volume),
                }
            )

        return market_data


async def run_strategy(config_path: str, symbol: str, dry_run: bool = True):
    """–ó–∞–ø—É—Å–∫ ML —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    with open(config_path) as f:
        config = yaml.safe_load(f)

    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ {config_path}")

    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    try:
        strategy = PatchTSTStrategy(config)
        logger.info("ML —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    try:
        market_data = await load_historical_data(symbol)
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(market_data)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {symbol}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    total_signals = 0
    long_signals = 0
    short_signals = 0

    for data_point in market_data[-100:]:  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Ç–æ—á–µ–∫
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
            signal = await strategy.generate_signal(data_point)

            if signal:
                total_signals += 1

                if signal.direction == "LONG":
                    long_signals += 1
                    action = "üìà LONG"
                elif signal.direction == "SHORT":
                    short_signals += 1
                    action = "üìâ SHORT"
                else:
                    action = "‚è∏Ô∏è FLAT"

                logger.info(
                    f"{action} —Å–∏–≥–Ω–∞–ª –¥–ª—è {signal.symbol} @ {signal.price:.2f} | "
                    f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.2%} | "
                    f"SL: {signal.stop_loss:.2f} | TP: {signal.take_profit:.2f}"
                )

                # –í —Ä–µ–∂–∏–º–µ dry run –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏
                if not dry_run:
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –±–∏—Ä–∂—É
                    pass

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    logger.info("\n" + "=" * 50)
    logger.info("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–ì–ù–ê–õ–û–í:")
    logger.info(f"–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total_signals}")
    logger.info(
        f"LONG —Å–∏–≥–Ω–∞–ª–æ–≤: {long_signals} ({long_signals / max(total_signals, 1) * 100:.1f}%)"
    )
    logger.info(
        f"SHORT —Å–∏–≥–Ω–∞–ª–æ–≤: {short_signals} ({short_signals / max(total_signals, 1) * 100:.1f}%)"
    )
    logger.info("=" * 50)


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ ML —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    parser.add_argument(
        "--config",
        type=str,
        default="strategies/ml_strategy/patchtst_config.yaml",
        help="–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏",
    )
    parser.add_argument("--symbol", type=str, default="BTCUSDT", help="–¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª")
    parser.add_argument(
        "--live",
        action="store_true",
        help="–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é dry run)",
    )

    args = parser.parse_args()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏
    model_path = Path("models/saved/best_model_20250728_215703.pth")
    scaler_path = Path("models/saved/data_scaler.pkl")

    if not model_path.exists():
        logger.error(f"–§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {model_path}")
        logger.info("–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏ –∏–∑ LLM TRANSFORM –ø—Ä–æ–µ–∫—Ç–∞")
        return

    if not scaler_path.exists():
        logger.error(f"–§–∞–π–ª scaler –Ω–µ –Ω–∞–π–¥–µ–Ω: {scaler_path}")
        logger.info("–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª scaler –∏–∑ LLM TRANSFORM –ø—Ä–æ–µ–∫—Ç–∞")
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    await run_strategy(args.config, args.symbol, dry_run=not args.live)


if __name__ == "__main__":
    asyncio.run(main())
