#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ ML —Ç—Ä–µ–π–¥–µ—Ä–∞
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
"""

import asyncio
import logging
import sys
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from core.config.config_manager import ConfigManager
from core.traders.trader_factory import TraderFactory
from core.traders.trader_manager import TraderManager
from strategies.ml_strategy.patchtst_strategy import PatchTSTStrategy

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)


async def quick_start():
    """–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ ML —Ç—Ä–µ–π–¥–µ—Ä–∞"""

    logger.info("üöÄ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ ML —Ç—Ä–µ–π–¥–µ—Ä–∞...")

    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_manager = ConfigManager()

    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É –∏ –º–µ–Ω–µ–¥–∂–µ—Ä —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
    trader_factory = TraderFactory(config_manager)
    trader_manager = TraderManager(config_manager, trader_factory)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º PatchTST —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    trader_factory.register_strategy("patchtst_strategy", PatchTSTStrategy)
    logger.info("‚úÖ ML —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
    await trader_manager.initialize()
    await trader_manager.start()
    logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω")

    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç—Ä–µ–π–¥–µ—Ä–∞
    trader_id = f"ml_demo_{datetime.now().strftime('%H%M%S')}"
    trader_config = {
        "trader_id": trader_id,
        "enabled": True,
        "exchange": "bybit",
        "exchange_config": {
            "api_key": "demo_key",
            "api_secret": "demo_secret",
            "testnet": True,
            "market_type": "spot",
        },
        "strategy": "patchtst_strategy",
        "strategy_config": {
            "name": "PatchTST_Demo",
            "symbol": "BTC/USDT",
            "exchange": "bybit",
            "timeframe": "15m",
            "parameters": {
                "model_path": "models/saved/best_model_20250728_215703.pth",
                "scaler_path": "models/saved/data_scaler.pkl",
                "config_path": "models/saved/config.pkl",
                "min_confidence": 0.5,
                "min_profit_probability": 0.6,
            },
        },
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_manager.set_trader_config(trader_id, trader_config)

    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–π–¥–µ—Ä–∞
    try:
        await trader_manager.create_trader(trader_id)
        await trader_manager.start_trader(trader_id)
        logger.info(f"‚úÖ ML —Ç—Ä–µ–π–¥–µ—Ä {trader_id} –∑–∞–ø—É—â–µ–Ω")

        # –†–∞–±–æ—Ç–∞–µ–º 2 –º–∏–Ω—É—Ç—ã
        logger.info("‚è≥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç—ã —Ç—Ä–µ–π–¥–µ—Ä–∞ (2 –º–∏–Ω—É—Ç—ã)...")
        await asyncio.sleep(120)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–µ–π–¥–µ—Ä–∞
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–µ–π–¥–µ—Ä–∞...")
        await trader_manager.stop_trader(trader_id)
        await trader_manager.stop()
        logger.info("‚úÖ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


if __name__ == "__main__":
    print("=" * 50)
    print("ü§ñ –î–ï–ú–û –ó–ê–ü–£–°–ö ML –¢–†–ï–ô–î–ï–†–ê")
    print("=" * 50)
    print("–≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã ML —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.")
    print("–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ create_ml_trader.py")
    print("=" * 50)

    asyncio.run(quick_start())
