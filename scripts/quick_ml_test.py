#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç ML —Å–∏—Å—Ç–µ–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–∞–ª–æ–≥ –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from core.config.config_manager import ConfigManager
from core.logger import setup_logger
from ml.ml_manager import MLManager
from ml.ml_signal_processor import MLSignalProcessor
from ml.signal_scheduler import SignalScheduler

logger = setup_logger(__name__)


async def test_ml_signal_generation():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ML —Å–∏–≥–Ω–∞–ª–æ–≤"""

    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç ML –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤...")

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        config_manager = ConfigManager()
        config = config_manager.get_config()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ML –≤–∫–ª—é—á–µ–Ω
        ml_config = config.get("ml", {})
        logger.info(f"ML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: enabled={ml_config.get('enabled', False)}")

        if not ml_config.get("enabled", False):
            logger.error("ML —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            logger.info("–í–∫–ª—é—á–∞–µ–º ML –¥–ª—è —Ç–µ—Å—Ç–∞...")
            if "ml" not in config:
                config["ml"] = {}
            config["ml"]["enabled"] = True

        logger.info("‚úÖ ML —Å–∏—Å—Ç–µ–º–∞ –≤–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ML Manager
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML Manager...")
        ml_manager = MLManager(config)
        await ml_manager.initialize()
        logger.info("‚úÖ ML Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Signal Processor
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML Signal Processor...")
        signal_processor = MLSignalProcessor(
            ml_manager=ml_manager, config=config, config_manager=config_manager
        )
        await signal_processor.initialize()
        logger.info("‚úÖ ML Signal Processor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è BTCUSDT
        test_symbol = "BTCUSDT"
        logger.info(f"üîÑ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {test_symbol}...")

        signal = await signal_processor.process_realtime_signal(
            symbol=test_symbol, exchange="bybit"
        )

        if signal:
            logger.info("‚úÖ –°–∏–≥–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:")
            logger.info(f"   –°–∏–º–≤–æ–ª: {signal.symbol}")
            logger.info(f"   –¢–∏–ø: {signal.signal_type.value}")
            logger.info(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.2f}")
            logger.info(f"   –°–∏–ª–∞: {signal.strength:.2f}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
            is_valid = await signal_processor.validate_signal(signal)
            logger.info(f"   –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å: {'‚úÖ –î–∞' if is_valid else '‚ùå –ù–µ—Ç'}")

        else:
            logger.warning(f"‚ö†Ô∏è –°–∏–≥–Ω–∞–ª –¥–ª—è {test_symbol} –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await signal_processor.get_metrics()
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞:")
        for key, value in stats.items():
            logger.info(f"   {key}: {value}")

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        await signal_processor.shutdown()

        logger.info("‚úÖ –¢–µ—Å—Ç ML –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ ML —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        import traceback

        logger.error(traceback.format_exc())
        return False


async def test_signal_scheduler():
    """–¢–µ—Å—Ç SignalScheduler"""

    logger.info("üß™ –¢–µ—Å—Ç Signal Scheduler...")

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler = SignalScheduler()
        await scheduler.initialize()

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
        status = await scheduler.get_status()
        logger.info("üìä –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:")
        logger.info(f"   –ó–∞–ø—É—â–µ–Ω: {status['running']}")
        logger.info(f"   –í–∫–ª—é—á–µ–Ω: {status['enabled']}")
        logger.info(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª: {status['interval_seconds']}—Å")
        logger.info(f"   –°–∏–º–≤–æ–ª–æ–≤: {len(status['symbols'])}")

        # –¢–µ—Å—Ç–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        test_symbol = "BTCUSDT"
        logger.info(f"üîÑ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è {test_symbol}...")

        signal = await scheduler._generate_signal(test_symbol)

        if signal:
            logger.info("‚úÖ –°–∏–≥–Ω–∞–ª –æ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:")
            logger.info(f"   –¢–∏–ø: {signal.signal_type.value}")
            logger.info(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.2f}")
        else:
            logger.warning("‚ö†Ô∏è –°–∏–≥–Ω–∞–ª –æ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")

        # –ó–∞–≤–µ—Ä—à–∞–µ–º
        await scheduler.stop()

        logger.info("‚úÖ –¢–µ—Å—Ç Signal Scheduler –∑–∞–≤–µ—Ä—à–µ–Ω")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        import traceback

        logger.error(traceback.format_exc())
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ ML —Å–∏—Å—Ç–µ–º—ã")

    # –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
    test1_result = await test_ml_signal_generation()

    # –¢–µ—Å—Ç 2: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    test2_result = await test_signal_scheduler()

    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if test1_result and test2_result:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã ML —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        logger.error("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        return False


if __name__ == "__main__":
    result = asyncio.run(main())
    sys.exit(0 if result else 1)
