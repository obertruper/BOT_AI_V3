#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã BOT_AI_V3
"""

import asyncio
import subprocess
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from core.logger import setup_logger

logger = setup_logger("system_tests")


async def run_system_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""

    logger.info("üß™ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã BOT_AI_V3...")

    tests = [
        (
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
            "python -c 'from core.config.config_manager import ConfigManager; print(\"‚úÖ ConfigManager OK\")'",
        ),
        (
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ ML –º–æ–¥–µ–ª–∏",
            "python -c 'from ml.logic.patchtst_model import UnifiedPatchTST; print(\"‚úÖ ML Model OK\")'",
        ),
        (
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ ExchangeFactory",
            "python -c 'from exchanges.factory import ExchangeFactory; print(\"‚úÖ ExchangeFactory OK\")'",
        ),
        (
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
            "python -c 'from database.connections.postgres import AsyncPGPool; print(\"‚úÖ Database OK\")'",
        ),
        (
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ TradingEngine",
            "python -c 'from trading.engine import TradingEngine; print(\"‚úÖ TradingEngine OK\")'",
        ),
        (
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ SystemOrchestrator",
            "python -c 'from core.system.orchestrator import SystemOrchestrator; print(\"‚úÖ SystemOrchestrator OK\")'",
        ),
    ]

    results = []

    for test_name, command in tests:
        try:
            logger.info(f"üîç {test_name}...")
            result = subprocess.run(command, shell=True, capture_output=True, text=True)

            if result.returncode == 0:
                logger.info(f"‚úÖ {test_name}: –£–°–ü–ï–•")
                results.append((test_name, True, result.stdout.strip()))
            else:
                logger.error(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê")
                logger.error(f"   –û—à–∏–±–∫–∞: {result.stderr}")
                results.append((test_name, False, result.stderr.strip()))

        except Exception as e:
            logger.error(f"‚ùå {test_name}: –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï - {e}")
            results.append((test_name, False, str(e)))

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    logger.info("\n" + "=" * 50)
    logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    logger.info("=" * 50)

    passed = sum(1 for _, success, _ in results if success)
    total = len(results)

    for test_name, success, output in results:
        status = "‚úÖ –£–°–ü–ï–•" if success else "‚ùå –û–®–ò–ë–ö–ê"
        logger.info(f"{status} {test_name}")
        if output:
            logger.info(f"   {output}")

    logger.info(f"\nüìà –ò–¢–û–ì–û: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")

    if passed == total:
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        return True
    else:
        logger.error("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨!")
        return False


if __name__ == "__main__":
    success = asyncio.run(run_system_tests())
    sys.exit(0 if success else 1)
