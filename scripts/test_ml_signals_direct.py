#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ML —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent))

from core.config.config_manager import ConfigManager
from core.logger import setup_logger
from data.data_loader import DataLoader
from database.connections import init_async_db
from ml.ml_manager import MLManager
from ml.ml_signal_processor import MLSignalProcessor

logger = setup_logger("test_ml_signals")


async def test_ml_signals():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML —Å–∏–≥–Ω–∞–ª–æ–≤"""

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ ML —Å–∏–≥–Ω–∞–ª–æ–≤...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    await init_async_db()

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_manager = ConfigManager()
    await config_manager.initialize()
    config = config_manager._config

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML Manager
    ml_manager = MLManager(config)
    await ml_manager.initialize()

    logger.info("‚úÖ ML Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    logger.info(f"üìä –ú–æ–¥–µ–ª—å: {ml_manager.get_model_info()}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML Signal Processor
    signal_processor = MLSignalProcessor(ml_manager, config, config_manager)
    await signal_processor.initialize()

    logger.info("‚úÖ Signal Processor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Data Loader
    data_loader = DataLoader(config_manager)
    await data_loader.initialize()

    # –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–º–≤–æ–ª
    symbol = "BTCUSDT"
    exchange = "bybit"

    logger.info(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {symbol}...")

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        logger.info("üì• –ó–∞–≥—Ä—É–∑–∫–∞ OHLCV –¥–∞–Ω–Ω—ã—Ö...")
        await data_loader.update_latest_data(
            symbols=[symbol], interval_minutes=15, exchange=exchange
        )

        # –î–∞–µ–º –¥–∞–Ω–Ω—ã–º –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
        import time

        time.sleep(2)

        candles = True  # –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –ë–î

        if not candles:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            return

        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –ë–î")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
        logger.info("\nü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ML —Å–∏–≥–Ω–∞–ª–∞...")
        signal = await signal_processor.process_realtime_signal(
            symbol=symbol, exchange=exchange
        )

        if signal:
            logger.info(
                f"""
‚úÖ –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù {signal.signal_type.value.upper()} –°–ò–ì–ù–ê–õ!
   –°–∏–º–≤–æ–ª: {signal.symbol}
   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.2%}
   –°–∏–ª–∞: {signal.strength:.2f}
   Stop Loss: {signal.suggested_stop_loss:.2f}
   Take Profit: {signal.suggested_take_profit:.2f}
   –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {signal.strategy_name}
"""
            )
        else:
            logger.info("‚ö™ –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ (–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è)")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        test_symbols = ["ETHUSDT", "BNBUSDT", "SOLUSDT"]

        logger.info("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤...")

        signals = await signal_processor.generate_signals_for_symbols(
            symbols=test_symbols, exchange=exchange
        )

        logger.info("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        logger.info(f"   –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(test_symbols)}")
        logger.info(f"   –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")

        if signals:
            for sig in signals:
                logger.info(
                    f"   - {sig.symbol}: {sig.signal_type.value} "
                    f"(—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {sig.confidence:.2%})"
                )

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = await signal_processor.get_metrics()
        logger.info(
            f"""
üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞:
   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats["total_processed"]}
   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats["success_rate"]:.1%}
   –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {stats["save_rate"]:.1%}
   –û—à–∏–±–æ–∫: {stats["error_rate"]:.1%}
"""
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}", exc_info=True)

    finally:
        # –û—á–∏—Å—Ç–∫–∞
        await data_loader.cleanup()
        logger.info("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")


if __name__ == "__main__":
    asyncio.run(test_ml_signals())
