#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ BOT_AI_V3

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/check_config.py                    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    python scripts/check_config.py --trader ml_01     # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞
    python scripts/check_config.py --validate         # –í–∞–ª–∏–¥–∞—Ü–∏—è –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏
"""

import argparse
import asyncio
import os
import sys
from pathlib import Path
from typing import Any, Dict

import yaml
from colorama import Fore, Style, init
from tabulate import tabulate

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from core.config.config_manager import ConfigManager
from core.config.validation import ConfigValidator, ValidationLevel

init(autoreset=True)


class ConfigChecker:
    """–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""

    def __init__(self):
        self.config_manager = ConfigManager()
        self.validator = ConfigValidator()

    async def check_all(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print(
            f"\n{Fore.CYAN}=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ BOT_AI_V3 ==={Style.RESET_ALL}\n"
        )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        try:
            await self.config_manager.initialize()
            print(f"{Fore.GREEN}‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞{Style.RESET_ALL}")
        except Exception as e:
            print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}{Style.RESET_ALL}")
            return

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_info = self.config_manager.get_config_info()
        if config_info:
            print(f"\nüìÅ –ü—É—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config_info.path}")
            print(
                f"üìÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞: {config_info.loaded_at.strftime('%Y-%m-%d %H:%M:%S')}"
            )

        # –°–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self._check_system_config()

        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        self._check_database_config()

        # –¢—Ä–µ–π–¥–µ—Ä—ã
        await self._check_traders_config()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        self._run_validation()

    def _check_system_config(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print(f"\n{Fore.YELLOW}üìã –°–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:{Style.RESET_ALL}")

        system_config = self.config_manager.get_system_config()

        table_data = []
        table_data.append(["–ù–∞–∑–≤–∞–Ω–∏–µ", system_config.get("name", "N/A")])
        table_data.append(["–í–µ—Ä—Å–∏—è", system_config.get("version", "N/A")])
        table_data.append(["–û–∫—Ä—É–∂–µ–Ω–∏–µ", system_config.get("environment", "N/A")])

        limits = system_config.get("limits", {})
        table_data.append(["–ú–∞–∫—Å. —Ç—Ä–µ–π–¥–µ—Ä–æ–≤", limits.get("max_traders", "N/A")])
        table_data.append(["–ú–∞–∫—Å. —Å–¥–µ–ª–æ–∫", limits.get("max_concurrent_trades", "N/A")])

        print(tabulate(table_data, tablefmt="grid"))

    def _check_database_config(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ë–î"""
        print(f"\n{Fore.YELLOW}üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:{Style.RESET_ALL}")

        db_config = self.config_manager.get_database_config()

        table_data = []
        table_data.append(["–¢–∏–ø", db_config.get("type", "N/A")])
        table_data.append(["–•–æ—Å—Ç", db_config.get("host", "N/A")])
        table_data.append(["–ü–æ—Ä—Ç", db_config.get("port", "N/A")])
        table_data.append(["–ë–∞–∑–∞", db_config.get("name", "N/A")])
        table_data.append(["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", db_config.get("user", "N/A")])

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        env_status = "‚úÖ" if os.getenv("PGPASSWORD") else "‚ùå"
        table_data.append(["–ü–∞—Ä–æ–ª—å (env)", f"{env_status} PGPASSWORD"])

        print(tabulate(table_data, tablefmt="grid"))

    async def _check_traders_config(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Ç—Ä–µ–π–¥–µ—Ä–æ–≤"""
        print(f"\n{Fore.YELLOW}üë• –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤:{Style.RESET_ALL}")

        trader_ids = self.config_manager.get_all_trader_ids()

        if not trader_ids:
            print(f"{Fore.RED}–¢—Ä–µ–π–¥–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã{Style.RESET_ALL}")
            return

        table_data = []
        headers = ["ID", "–ò–º—è", "–°—Ç–∞—Ç—É—Å", "–ë–∏—Ä–∂–∞", "–ü–∞—Ä–∞", "–°—Ç—Ä–∞—Ç–µ–≥–∏—è"]

        for trader_id in trader_ids:
            config = self.config_manager.get_trader_config(trader_id)

            status_icon = "‚úÖ" if config.get("enabled", False) else "‚è∏Ô∏è"

            table_data.append(
                [
                    trader_id,
                    config.get("name", "N/A"),
                    status_icon,
                    config.get("exchange", "N/A"),
                    config.get("symbol", "N/A"),
                    config.get("strategy", "N/A"),
                ]
            )

        print(tabulate(table_data, headers=headers, tablefmt="grid"))

    def _run_validation(self):
        """–ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print(f"\n{Fore.YELLOW}üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:{Style.RESET_ALL}")

        config = self.config_manager.get_config()
        results = self.validator.validate_config(config)

        if not results:
            print(f"{Fore.GREEN}‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ{Style.RESET_ALL}")
            return

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º
        errors = [r for r in results if r.level == ValidationLevel.ERROR]
        warnings = [r for r in results if r.level == ValidationLevel.WARNING]
        info = [r for r in results if r.level == ValidationLevel.INFO]

        # –í—ã–≤–æ–¥ –æ—à–∏–±–æ–∫
        if errors:
            print(f"\n{Fore.RED}‚ùå –û—à–∏–±–∫–∏ ({len(errors)}):{Style.RESET_ALL}")
            for result in errors:
                print(f"  - [{result.field}] {result.message}")
                if result.suggestion:
                    print(f"    üí° {result.suggestion}")

        # –í—ã–≤–æ–¥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        if warnings:
            print(
                f"\n{Fore.YELLOW}‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ({len(warnings)}):{Style.RESET_ALL}"
            )
            for result in warnings:
                print(f"  - [{result.field}] {result.message}")
                if result.suggestion:
                    print(f"    üí° {result.suggestion}")

        # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if info:
            print(f"\n{Fore.BLUE}‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ({len(info)}):{Style.RESET_ALL}")
            for result in info:
                print(f"  - [{result.field}] {result.message}")

    async def check_trader(self, trader_id: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞"""
        print(f"\n{Fore.CYAN}=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–π–¥–µ—Ä–∞: {trader_id} ==={Style.RESET_ALL}\n")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        await self.config_manager.initialize()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = self.config_manager.get_trader_config(trader_id)

        if not config:
            print(f"{Fore.RED}‚ùå –¢—Ä–µ–π–¥–µ—Ä '{trader_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω{Style.RESET_ALL}")
            return

        # –í—ã–≤–æ–¥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        print(f"{Fore.YELLOW}üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:{Style.RESET_ALL}")
        self._print_config(config)

        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        print(f"\n{Fore.YELLOW}üîç –í–∞–ª–∏–¥–∞—Ü–∏—è:{Style.RESET_ALL}")
        results = self.validator.validate_trader_config(trader_id, config)

        if not results:
            print(f"{Fore.GREEN}‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ{Style.RESET_ALL}")
        else:
            for result in results:
                level_color = {
                    ValidationLevel.ERROR: Fore.RED,
                    ValidationLevel.WARNING: Fore.YELLOW,
                    ValidationLevel.INFO: Fore.BLUE,
                }.get(result.level, Fore.WHITE)

                print(
                    f"{level_color}[{result.level.value}] {result.field}: {result.message}{Style.RESET_ALL}"
                )
                if result.suggestion:
                    print(f"  üí° {result.suggestion}")

    def _print_config(self, config: Dict[str, Any], indent: int = 0):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–≤–æ–¥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        for key, value in config.items():
            prefix = "  " * indent
            if isinstance(value, dict):
                print(f"{prefix}{key}:")
                self._print_config(value, indent + 1)
            elif isinstance(value, list):
                print(f"{prefix}{key}:")
                for item in value:
                    if isinstance(item, dict):
                        self._print_config(item, indent + 1)
                    else:
                        print(f"{prefix}  - {item}")
            else:
                print(f"{prefix}{key}: {value}")

    async def validate_file(self, file_path: str):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print(f"\n{Fore.CYAN}=== –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞: {file_path} ==={Style.RESET_ALL}\n")

        try:
            with open(file_path, "r", encoding="utf-8") as f:
                config = yaml.safe_load(f)

            print(f"{Fore.GREEN}‚úÖ YAML —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω{Style.RESET_ALL}")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if "strategy" in config and "exchange" in config:
                # –≠—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç—Ä–µ–π–¥–µ—Ä–∞
                trader_id = config.get("id", "unknown")
                results = self.validator.validate_trader_config(trader_id, config)
            else:
                # –û–±—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
                results = self.validator.validate_config(config)

            if not results:
                print(f"{Fore.GREEN}‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ{Style.RESET_ALL}")
            else:
                for result in results:
                    level_color = {
                        ValidationLevel.ERROR: Fore.RED,
                        ValidationLevel.WARNING: Fore.YELLOW,
                        ValidationLevel.INFO: Fore.BLUE,
                    }.get(result.level, Fore.WHITE)

                    print(
                        f"{level_color}[{result.level.value}] {result.field}: {result.message}{Style.RESET_ALL}"
                    )
                    if result.suggestion:
                        print(f"  üí° {result.suggestion}")

        except yaml.YAMLError as e:
            print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ YAML: {e}{Style.RESET_ALL}")
        except Exception as e:
            print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞: {e}{Style.RESET_ALL}")


async def main():
    parser = argparse.ArgumentParser(description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ BOT_AI_V3")
    parser.add_argument("--trader", help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞")
    parser.add_argument("--validate", help="–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    parser.add_argument(
        "--all", action="store_true", help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
    )

    args = parser.parse_args()

    checker = ConfigChecker()

    if args.trader:
        await checker.check_trader(args.trader)
    elif args.validate:
        await checker.validate_file(args.validate)
    else:
        await checker.check_all()


if __name__ == "__main__":
    asyncio.run(main())
