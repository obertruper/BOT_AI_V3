#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
"""

import asyncio
import os
import sys
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.connections.postgres import AsyncPGPool


class DatabaseSchemaFixer:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""

    def __init__(self):
        self.fixes_applied = []
        self.errors_found = []

    async def fix_signals_table(self):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã signals"""
        print("\nüìä –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã signals...")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ side
            result = await AsyncPGPool.fetch(
                """
                SELECT column_name
                FROM information_schema.columns
                WHERE table_name = 'signals' AND column_name = 'side'
            """
            )

            if not result:
                print("   üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ 'side' –≤ —Ç–∞–±–ª–∏—Ü—É signals...")

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É side
                await AsyncPGPool.execute(
                    """
                    ALTER TABLE signals
                    ADD COLUMN side VARCHAR(10)
                """
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ signal_type
                await AsyncPGPool.execute(
                    """
                    UPDATE signals
                    SET side = CASE
                        WHEN signal_type = 'LONG' THEN 'buy'
                        WHEN signal_type = 'SHORT' THEN 'sell'
                        WHEN signal_type = 'CLOSE_LONG' THEN 'sell'
                        WHEN signal_type = 'CLOSE_SHORT' THEN 'buy'
                        ELSE 'neutral'
                    END
                """
                )

                print("   ‚úÖ –ö–æ–ª–æ–Ω–∫–∞ 'side' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞")
                self.fixes_applied.append("Added 'side' column to signals table")
            else:
                print("   ‚úÖ –ö–æ–ª–æ–Ω–∫–∞ 'side' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            await self._add_missing_columns()

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã signals: {e}")
            self.errors_found.append(f"Signals table fix error: {e}")

    async def _add_missing_columns(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫"""
        print("   üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫...")

        # –°–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        columns_to_check = [
            ("updated_at", "TIMESTAMP WITH TIME ZONE DEFAULT NOW()"),
            ("metadata", "JSONB"),
        ]

        for column_name, column_definition in columns_to_check:
            try:
                result = await AsyncPGPool.fetch(
                    f"""
                    SELECT column_name
                    FROM information_schema.columns
                    WHERE table_name = 'signals' AND column_name = '{column_name}'
                """
                )

                if not result:
                    print(f"      üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ '{column_name}'...")
                    await AsyncPGPool.execute(
                        f"""
                        ALTER TABLE signals
                        ADD COLUMN {column_name} {column_definition}
                    """
                    )
                    print(f"      ‚úÖ –ö–æ–ª–æ–Ω–∫–∞ '{column_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞")
                    self.fixes_applied.append(
                        f"Added '{column_name}' column to signals table"
                    )
                else:
                    print(f"      ‚úÖ –ö–æ–ª–æ–Ω–∫–∞ '{column_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

            except Exception as e:
                print(f"      ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ '{column_name}': {e}")
                self.errors_found.append(f"Column '{column_name}' add error: {e}")

    async def fix_signal_processing(self):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        print("\nüì° –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤...")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            result = await AsyncPGPool.fetch(
                """
                SELECT COUNT(*) as count
                FROM signals
                WHERE side IS NULL OR side = ''
            """
            )

            null_side_count = result[0]["count"] if result else 0

            if null_side_count > 0:
                print(f"   üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {null_side_count} –∑–∞–ø–∏—Å–µ–π —Å –ø—É—Å—Ç—ã–º side...")

                await AsyncPGPool.execute(
                    """
                    UPDATE signals
                    SET side = CASE
                        WHEN signal_type = 'LONG' THEN 'buy'
                        WHEN signal_type = 'SHORT' THEN 'sell'
                        WHEN signal_type = 'CLOSE_LONG' THEN 'sell'
                        WHEN signal_type = 'CLOSE_SHORT' THEN 'buy'
                        ELSE 'neutral'
                    END
                    WHERE side IS NULL OR side = ''
                """
                )

                print("   ‚úÖ –ó–∞–ø–∏—Å–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
                self.fixes_applied.append(
                    f"Fixed {null_side_count} signals with null side"
                )
            else:
                print("   ‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π side")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            self.errors_found.append(f"Signal processing fix error: {e}")

    async def create_indexes(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        print("\nüìà –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...")

        try:
            # –°–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
            indexes = [
                ("ix_signals_symbol_side", "signals", "symbol, side"),
                ("ix_signals_created_at", "signals", "created_at"),
                ("ix_signals_signal_type", "signals", "signal_type"),
            ]

            for index_name, table_name, columns in indexes:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
                    result = await AsyncPGPool.fetch(
                        f"""
                        SELECT indexname
                        FROM pg_indexes
                        WHERE indexname = '{index_name}'
                    """
                    )

                    if not result:
                        print(f"   üîß –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ '{index_name}'...")
                        await AsyncPGPool.execute(
                            f"""
                            CREATE INDEX {index_name} ON {table_name} ({columns})
                        """
                        )
                        print(f"   ‚úÖ –ò–Ω–¥–µ–∫—Å '{index_name}' —Å–æ–∑–¥–∞–Ω")
                        self.fixes_applied.append(f"Created index {index_name}")
                    else:
                        print(f"   ‚úÖ –ò–Ω–¥–µ–∫—Å '{index_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ '{index_name}': {e}")
                    self.errors_found.append(
                        f"Index '{index_name}' creation error: {e}"
                    )

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
            self.errors_found.append(f"Indexes creation error: {e}")

    async def verify_fixes(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã signals
            result = await AsyncPGPool.fetch(
                """
                SELECT column_name, data_type, is_nullable
                FROM information_schema.columns
                WHERE table_name = 'signals'
                ORDER BY ordinal_position
            """
            )

            print("   üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã signals:")
            for row in result:
                print(
                    f"      {row['column_name']}: {row['data_type']} ({'NULL' if row['is_nullable'] == 'YES' else 'NOT NULL'})"
                )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            result = await AsyncPGPool.fetch("SELECT COUNT(*) as count FROM signals")
            signals_count = result[0]["count"] if result else 0

            result = await AsyncPGPool.fetch(
                "SELECT COUNT(*) as count FROM signals WHERE side IS NOT NULL"
            )
            valid_side_count = result[0]["count"] if result else 0

            print("   üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"      –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {signals_count}")
            print(f"      –° –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º side: {valid_side_count}")
            print(
                f"      –ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö: {(valid_side_count / signals_count * 100):.1f}%"
                if signals_count > 0
                else "N/A"
            )

            if valid_side_count == signals_count:
                print("   ‚úÖ –í—Å–µ —Å–∏–≥–Ω–∞–ª—ã –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π side")
                self.fixes_applied.append("All signals have valid side values")
            else:
                print(
                    f"   ‚ö†Ô∏è {signals_count - valid_side_count} —Å–∏–≥–Ω–∞–ª–æ–≤ —Ç—Ä–µ–±—É—é—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
                )
                self.errors_found.append(
                    f"{signals_count - valid_side_count} signals need side fix"
                )

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")
            self.errors_found.append(f"Verification error: {e}")

    async def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        print("\nüìä –û—Ç—á–µ—Ç –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö —Å—Ö–µ–º—ã –ë–î")
        print("=" * 50)

        report = {
            "timestamp": datetime.now().isoformat(),
            "fixes_applied": self.fixes_applied,
            "errors_found": self.errors_found,
            "fixes_count": len(self.fixes_applied),
            "errors_count": len(self.errors_found),
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_file = (
            f"logs/schema_fix_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        )
        with open(report_file, "w", encoding="utf-8") as f:
            import json

            json.dump(report, f, indent=2, ensure_ascii=False, default=str)

        print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")

        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:")
        print(f"   ‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {report['fixes_count']}")
        print(f"   ‚ùå –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {report['errors_count']}")

        if self.fixes_applied:
            print("\n‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
            for fix in self.fixes_applied:
                print(f"   ‚Ä¢ {fix}")

        if self.errors_found:
            print("\n‚ùå –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
            for error in self.errors_found:
                print(f"   ‚Ä¢ {error}")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if self.errors_found:
            print("\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫")
            print("   2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É —Ç–æ—Ä–≥–æ–≤–ª–∏")
            print(
                "   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: python scripts/monitor_system_enhanced.py"
            )
        else:
            print("\nüéâ –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")

    async def run_all_fixes(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        print("üöÄ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        print("=" * 50)

        try:
            await self.fix_signals_table()
            await self.fix_signal_processing()
            await self.create_indexes()
            await self.verify_fixes()
            await self.generate_report()

            print("\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

        except Exception as e:
            print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            self.errors_found.append(f"Critical error: {e}")
            await self.generate_report()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    fixer = DatabaseSchemaFixer()
    await fixer.run_all_fixes()


if __name__ == "__main__":
    asyncio.run(main())
