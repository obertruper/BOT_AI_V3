#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Web Testing Agent –¥–ª—è BOT_AI_V3

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–≥–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Puppeteer MCP –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–æ–º
- –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
- –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å dashboard
- –î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
- –ü—Ä–æ–≤–µ—Ä—è–µ—Ç API endpoints
"""

import asyncio
import json
import sys
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from core.logger import setup_logger

logger = setup_logger("web_testing_agent")


class WebTestingAgent:
    """
    –ê–≥–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Puppeteer MCP –¥–ª—è:
    - –ù–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    - –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    - –°–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
    - –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    """

    def __init__(self):
        self.base_url = "http://localhost:5173"
        self.api_url = "http://localhost:8080"
        self.test_results: List[Dict[str, Any]] = []
        self.screenshots_dir = Path("test_results/screenshots")
        self.screenshots_dir.mkdir(parents=True, exist_ok=True)

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞"""
        logger.info("ü§ñ Web Testing Agent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"üìÇ –°–∫—Ä–∏–Ω—à–æ—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {self.screenshots_dir}")

    async def test_page_load(self, url: str, page_name: str) -> Dict[str, Any]:
        """
        –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

        Args:
            url: URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            page_name: –ò–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
        """
        result = {
            "test": f"Page Load: {page_name}",
            "url": url,
            "status": "pending",
            "timestamp": datetime.now().isoformat(),
            "error": None,
            "screenshot": None,
        }

        try:
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏: {page_name} ({url})")

            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ Puppeteer MCP
            # await puppeteer_navigate(url)

            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
            screenshot_name = f"{page_name.lower().replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
            screenshot_path = self.screenshots_dir / screenshot_name

            # await puppeteer_screenshot(name=screenshot_name)

            result["status"] = "passed"
            result["screenshot"] = str(screenshot_path)
            logger.info(f"‚úÖ {page_name} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

        except Exception as e:
            result["status"] = "failed"
            result["error"] = str(e)
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {page_name}: {e}")

        self.test_results.append(result)
        return result

    async def test_dashboard_elements(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ dashboard"""
        result = {
            "test": "Dashboard Elements",
            "status": "pending",
            "timestamp": datetime.now().isoformat(),
            "checks": [],
        }

        try:
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ dashboard...")

            # –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            elements_to_check = [
                {"selector": "#sidebar", "name": "–ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å"},
                {"selector": ".trader-card", "name": "–ö–∞—Ä—Ç–æ—á–∫–∏ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤"},
                {"selector": ".chart-container", "name": "–ì—Ä–∞—Ñ–∏–∫–∏"},
                {"selector": ".positions-table", "name": "–¢–∞–±–ª–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π"},
                {"selector": ".metrics-panel", "name": "–ü–∞–Ω–µ–ª—å –º–µ—Ç—Ä–∏–∫"},
            ]

            for element in elements_to_check:
                check = {
                    "element": element["name"],
                    "selector": element["selector"],
                    "found": False,
                }

                try:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
                    # element_exists = await puppeteer_evaluate(f"!!document.querySelector('{element['selector']}')")
                    # check["found"] = element_exists

                    if check["found"]:
                        logger.info(f"‚úÖ {element['name']} –Ω–∞–π–¥–µ–Ω")
                    else:
                        logger.warning(f"‚ö†Ô∏è {element['name']} –Ω–µ –Ω–∞–π–¥–µ–Ω")

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {element['name']}: {e}")

                result["checks"].append(check)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
            passed_checks = sum(1 for check in result["checks"] if check["found"])
            total_checks = len(result["checks"])

            if passed_checks == total_checks:
                result["status"] = "passed"
                logger.info("‚úÖ –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã dashboard –Ω–∞–π–¥–µ–Ω—ã")
            elif passed_checks > 0:
                result["status"] = "partial"
                logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {passed_checks}/{total_checks} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            else:
                result["status"] = "failed"
                logger.error("‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã dashboard –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        except Exception as e:
            result["status"] = "failed"
            result["error"] = str(e)
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è dashboard: {e}")

        self.test_results.append(result)
        return result

    async def test_trader_interaction(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ç—Ä–µ–π–¥–µ—Ä–∞–º–∏"""
        result = {
            "test": "Trader Interaction",
            "status": "pending",
            "timestamp": datetime.now().isoformat(),
            "actions": [],
        }

        try:
            logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ç—Ä–µ–π–¥–µ—Ä–∞–º–∏...")

            # –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç—Ä–µ–π–¥–µ—Ä–∞
            action = {"action": "Click trader card", "success": False}

            try:
                # await puppeteer_click(".trader-card:first-child")
                action["success"] = True
                logger.info("‚úÖ –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç—Ä–µ–π–¥–µ—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω")

                # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
                await asyncio.sleep(1)

                # –°–∫—Ä–∏–Ω—à–æ—Ç –¥–µ—Ç–∞–ª–µ–π —Ç—Ä–µ–π–¥–µ—Ä–∞
                # await puppeteer_screenshot(name="trader_details")

            except Exception as e:
                action["error"] = str(e)
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Ç—Ä–µ–π–¥–µ—Ä—É: {e}")

            result["actions"].append(action)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            control_buttons = [
                {"selector": ".btn-start", "name": "Start"},
                {"selector": ".btn-stop", "name": "Stop"},
                {"selector": ".btn-settings", "name": "Settings"},
            ]

            for button in control_buttons:
                action = {"action": f"Check {button['name']} button", "success": False}

                try:
                    # exists = await puppeteer_evaluate(f"!!document.querySelector('{button['selector']}')")
                    # action["success"] = exists

                    if action["success"]:
                        logger.info(f"‚úÖ –ö–Ω–æ–ø–∫–∞ {button['name']} –Ω–∞–π–¥–µ–Ω–∞")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ {button['name']} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

                except Exception as e:
                    action["error"] = str(e)

                result["actions"].append(action)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            successful_actions = sum(
                1 for action in result["actions"] if action.get("success", False)
            )

            if successful_actions == len(result["actions"]):
                result["status"] = "passed"
            elif successful_actions > 0:
                result["status"] = "partial"
            else:
                result["status"] = "failed"

        except Exception as e:
            result["status"] = "failed"
            result["error"] = str(e)
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: {e}")

        self.test_results.append(result)
        return result

    async def test_api_integration(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å API"""
        result = {
            "test": "API Integration",
            "status": "pending",
            "timestamp": datetime.now().isoformat(),
            "endpoints": [],
        }

        try:
            logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å API...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ dashboard –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ API
            # –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ Network tab –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–Ω—Å–æ–ª–∏

            api_calls = {
                "/api/system/status": "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã",
                "/api/traders": "–°–ø–∏—Å–æ–∫ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤",
                "/api/positions": "–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏",
                "/api/performance": "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
            }

            for endpoint, description in api_calls.items():
                check = {
                    "endpoint": endpoint,
                    "description": description,
                    "called": False,
                    "status_code": None,
                }

                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å Network tab —á–µ—Ä–µ–∑ Puppeteer
                # –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ API

                result["endpoints"].append(check)

            result["status"] = "passed"
            logger.info("‚úÖ API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")

        except Exception as e:
            result["status"] = "failed"
            result["error"] = str(e)
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")

        self.test_results.append(result)
        return result

    async def test_responsive_design(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞"""
        result = {
            "test": "Responsive Design",
            "status": "pending",
            "timestamp": datetime.now().isoformat(),
            "viewports": [],
        }

        try:
            logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞...")

            viewports = [
                {"name": "Desktop", "width": 1920, "height": 1080},
                {"name": "Tablet", "width": 768, "height": 1024},
                {"name": "Mobile", "width": 375, "height": 667},
            ]

            for viewport in viewports:
                check = {
                    "device": viewport["name"],
                    "width": viewport["width"],
                    "height": viewport["height"],
                    "screenshot": None,
                    "status": "pending",
                }

                try:
                    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ viewport
                    # await puppeteer_set_viewport(width=viewport["width"], height=viewport["height"])

                    # –°–∫—Ä–∏–Ω—à–æ—Ç
                    screenshot_name = f"responsive_{viewport['name'].lower()}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
                    # await puppeteer_screenshot(name=screenshot_name)

                    check["screenshot"] = screenshot_name
                    check["status"] = "passed"
                    logger.info(f"‚úÖ {viewport['name']} –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω")

                except Exception as e:
                    check["status"] = "failed"
                    check["error"] = str(e)
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {viewport['name']}: {e}")

                result["viewports"].append(check)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
            passed = sum(1 for vp in result["viewports"] if vp["status"] == "passed")

            if passed == len(viewports):
                result["status"] = "passed"
            elif passed > 0:
                result["status"] = "partial"
            else:
                result["status"] = "failed"

        except Exception as e:
            result["status"] = "failed"
            result["error"] = str(e)
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è responsive: {e}")

        self.test_results.append(result)
        return result

    async def generate_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        report_path = (
            Path("test_results")
            / f"web_test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        )
        report_path.parent.mkdir(parents=True, exist_ok=True)

        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_tests = len(self.test_results)
        passed_tests = sum(
            1 for test in self.test_results if test["status"] == "passed"
        )
        failed_tests = sum(
            1 for test in self.test_results if test["status"] == "failed"
        )
        partial_tests = sum(
            1 for test in self.test_results if test["status"] == "partial"
        )

        report = {
            "timestamp": datetime.now().isoformat(),
            "summary": {
                "total": total_tests,
                "passed": passed_tests,
                "failed": failed_tests,
                "partial": partial_tests,
                "success_rate": (
                    f"{(passed_tests / total_tests * 100):.1f}%"
                    if total_tests > 0
                    else "0%"
                ),
            },
            "test_results": self.test_results,
            "screenshots_directory": str(self.screenshots_dir),
        }

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        with open(report_path, "w", encoding="utf-8") as f:
            json.dump(report, f, indent=2, ensure_ascii=False)

        logger.info(f"üìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")

        # –í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        logger.info("=" * 60)
        logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        logger.info("=" * 60)
        logger.info(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {passed_tests}")
        logger.info(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        logger.info(f"‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ: {partial_tests}")
        logger.info(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {report['summary']['success_rate']}")
        logger.info("=" * 60)

        return str(report_path)

    async def run_full_test_suite(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")

        try:
            # 1. –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await self.test_page_load(self.base_url, "Dashboard")

            # 2. –¢–µ—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ dashboard
            await self.test_dashboard_elements()

            # 3. –¢–µ—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ç—Ä–µ–π–¥–µ—Ä–∞–º–∏
            await self.test_trader_interaction()

            # 4. –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å API
            await self.test_api_integration()

            # 5. –¢–µ—Å—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞
            await self.test_responsive_design()

            # 6. –¢–µ—Å—Ç –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
            pages_to_test = [
                ("/traders", "Traders Page"),
                ("/positions", "Positions Page"),
                ("/analytics", "Analytics Page"),
                ("/settings", "Settings Page"),
            ]

            for path, name in pages_to_test:
                await self.test_page_load(f"{self.base_url}{path}", name)

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        report_path = await self.generate_report()

        logger.info("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        logger.info(f"üìÑ –û—Ç—á–µ—Ç: {report_path}")
        logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã: {self.screenshots_dir}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    agent = WebTestingAgent()
    await agent.initialize()
    await agent.run_full_test_suite()


if __name__ == "__main__":
    asyncio.run(main())
