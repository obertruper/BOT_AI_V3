#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å–∏—Å—Ç–µ–º—ã BOT Trading v3
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, PositionManager, 499 –æ—à–∏–±–∫–∏ –∏ –¥—Ä—É–≥–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
"""

import asyncio
import json
import os
import re
import sys
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.config.config_manager import ConfigManager
from database.connections.postgres import AsyncPGPool


class SystemIssueFixer:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –≤–∫–ª—é—á–∞—è 499 –æ—à–∏–±–∫–∏"""

    def __init__(self):
        self.config_manager = None
        self.fixes_applied = []
        self.errors_found = []
        self.websocket_issues = []
        self.http_timeout_issues = []
        self.async_issues = []

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"""
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º")

        try:
            self.config_manager = ConfigManager("config/system.yaml")
            await self.config_manager.initialize()
            print("‚úÖ ConfigManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ConfigManager: {e}")
            self.errors_found.append(f"ConfigManager init error: {e}")

    async def analyze_499_errors(self):
        """–ê–Ω–∞–ª–∏–∑ 499 –æ—à–∏–±–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ"""
        print("\nüîç –ê–Ω–∞–ª–∏–∑ 499 –æ—à–∏–±–æ–∫...")

        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç 499 –æ—à–∏–±–æ–∫
            log_files = [
                "data/logs/trading.log",
                "data/logs/system.log",
                "data/logs/api.log",
                "logs/trading.log",
                "logs/system.log",
            ]

            error_499_count = 0
            error_details = []

            for log_file in log_files:
                if os.path.exists(log_file):
                    print(f"   üìÑ –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–∞: {log_file}")

                    with open(log_file, encoding="utf-8") as f:
                        content = f.read()

                    # –ò—â–µ–º 499 –æ—à–∏–±–∫–∏
                    error_patterns = [
                        r"499.*error",
                        r"Client.*closed.*request",
                        r"Connection.*closed.*prematurely",
                        r"WebSocket.*closed",
                        r"timeout.*error",
                        r"Connection.*timeout",
                    ]

                    for pattern in error_patterns:
                        matches = re.findall(pattern, content, re.IGNORECASE)
                        if matches:
                            error_499_count += len(matches)
                            error_details.extend(matches[:5])  # –ü–µ—Ä–≤—ã–µ 5 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

                    print(f"      –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º: {error_499_count}")

            if error_499_count > 0:
                print(f"   ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {error_499_count} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö 499 –æ—à–∏–±–æ–∫")
                self.errors_found.append(f"Found {error_499_count} potential 499 errors")

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏
                print("   üìä –ê–Ω–∞–ª–∏–∑ –¥–µ—Ç–∞–ª–µ–π –æ—à–∏–±–æ–∫:")
                for detail in error_details[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    print(f"      ‚Ä¢ {detail}")
            else:
                print("   ‚úÖ 499 –æ—à–∏–±–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤ –ª–æ–≥–∞—Ö")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ 499 –æ—à–∏–±–æ–∫: {e}")
            self.errors_found.append(f"499 error analysis error: {e}")

    async def fix_websocket_issues(self):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏"""
        print("\nüîå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å WebSocket...")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º WebSocket –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            websocket_files = [
                "exchanges/base/websocket_base.py",
                "web/api/websocket/manager.py",
                "web/frontend/src/hooks/useWebSocket.ts",
            ]

            for file_path in websocket_files:
                if os.path.exists(file_path):
                    print(f"   üìÑ –ê–Ω–∞–ª–∏–∑ WebSocket —Ñ–∞–π–ª–∞: {file_path}")

                    with open(file_path, encoding="utf-8") as f:
                        content = f.read()

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤
                    timeout_issues = []

                    # –ò—â–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏
                    if "timeout" in content.lower():
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–∞–π–º–∞—É—Ç—ã
                        short_timeout_pattern = r"timeout.*[=:]\s*(\d+)"
                        matches = re.findall(short_timeout_pattern, content)

                        for match in matches:
                            try:
                                timeout_value = int(match)
                                if timeout_value < 5:  # –ú–µ–Ω—å—à–µ 5 —Å–µ–∫—É–Ω–¥ - –ø—Ä–æ–±–ª–µ–º–∞
                                    timeout_issues.append(
                                        f"–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç: {timeout_value}s"
                                    )
                            except ValueError:
                                pass

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
                    if "except" not in content and "error" in content.lower():
                        timeout_issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")

                    if timeout_issues:
                        print("      ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã –Ω–∞–π–¥–µ–Ω—ã:")
                        for issue in timeout_issues:
                            print(f"         ‚Ä¢ {issue}")
                        self.websocket_issues.extend(timeout_issues)
                    else:
                        print("      ‚úÖ –ü—Ä–æ–±–ª–µ–º—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")

            # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WebSocket
            await self._create_websocket_optimizations()

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ WebSocket: {e}")
            self.errors_found.append(f"WebSocket analysis error: {e}")

    async def _create_websocket_optimizations(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ WebSocket"""
        print("   üîß –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ WebSocket...")

        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        optimizations = {
            "websocket_timeouts": {
                "connection_timeout": 30,
                "ping_interval": 25,
                "ping_timeout": 10,
                "reconnect_delay": 5,
                "max_reconnect_attempts": 10,
            },
            "http_timeouts": {
                "request_timeout": 30,
                "connect_timeout": 10,
                "read_timeout": 20,
            },
            "async_operations": {
                "task_timeout": 60,
                "max_concurrent_tasks": 50,
                "retry_attempts": 3,
            },
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        config_file = "config/websocket_optimizations.json"
        with open(config_file, "w", encoding="utf-8") as f:
            json.dump(optimizations, f, indent=2, ensure_ascii=False)

        print(f"   ‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {config_file}")
        self.fixes_applied.append("WebSocket optimizations created")

    async def fix_http_timeout_issues(self):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å HTTP —Ç–∞–π–º–∞—É—Ç–∞–º–∏"""
        print("\nüåê –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å HTTP —Ç–∞–π–º–∞—É—Ç–∞–º–∏...")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP –∫–ª–∏–µ–Ω—Ç—ã
            http_files = [
                "exchanges/bybit/client.py",
                "exchanges/factory.py",
                "web/frontend/src/api/client.ts",
            ]

            for file_path in http_files:
                if os.path.exists(file_path):
                    print(f"   üìÑ –ê–Ω–∞–ª–∏–∑ HTTP –∫–ª–∏–µ–Ω—Ç–∞: {file_path}")

                    with open(file_path, encoding="utf-8") as f:
                        content = f.read()

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤
                    timeout_issues = []

                    # –ò—â–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏
                    if "timeout" in content.lower():
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–∞–π–º–∞—É—Ç—ã
                        short_timeout_pattern = r"timeout.*[=:]\s*(\d+)"
                        matches = re.findall(short_timeout_pattern, content)

                        for match in matches:
                            try:
                                timeout_value = int(match)
                                if timeout_value < 10:  # –ú–µ–Ω—å—à–µ 10 —Å–µ–∫—É–Ω–¥ - –ø—Ä–æ–±–ª–µ–º–∞
                                    timeout_issues.append(
                                        f"–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π HTTP —Ç–∞–π–º–∞—É—Ç: {timeout_value}s"
                                    )
                            except ValueError:
                                pass

                    if timeout_issues:
                        print("      ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã –Ω–∞–π–¥–µ–Ω—ã:")
                        for issue in timeout_issues:
                            print(f"         ‚Ä¢ {issue}")
                        self.http_timeout_issues.extend(timeout_issues)
                    else:
                        print("      ‚úÖ –ü—Ä–æ–±–ª–µ–º—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")

            # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ HTTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            await self._create_http_optimizations()

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ HTTP —Ç–∞–π–º–∞—É—Ç–æ–≤: {e}")
            self.errors_found.append(f"HTTP timeout analysis error: {e}")

    async def _create_http_optimizations(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö HTTP –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        print("   üîß –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö HTTP –Ω–∞—Å—Ç—Ä–æ–µ–∫...")

        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        http_optimizations = {
            "http_client_config": {
                "default_timeout": 30,
                "connect_timeout": 10,
                "read_timeout": 20,
                "retry_attempts": 3,
                "retry_delay": 1,
                "max_retry_delay": 60,
            },
            "rate_limiting": {
                "requests_per_minute": 60,
                "burst_limit": 10,
                "backoff_factor": 2,
            },
            "connection_pool": {
                "max_connections": 100,
                "max_connections_per_host": 10,
                "keepalive_timeout": 30,
            },
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        config_file = "config/http_optimizations.json"
        with open(config_file, "w", encoding="utf-8") as f:
            json.dump(http_optimizations, f, indent=2, ensure_ascii=False)

        print(f"   ‚úÖ HTTP –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {config_file}")
        self.fixes_applied.append("HTTP optimizations created")

    async def fix_async_operation_issues(self):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏"""
        print("\n‚ö° –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏...")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            async_files = [
                "core/system/process_manager.py",
                "trading/engine.py",
                "ml/ml_signal_processor.py",
            ]

            for file_path in async_files:
                if os.path.exists(file_path):
                    print(f"   üìÑ –ê–Ω–∞–ª–∏–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {file_path}")

                    with open(file_path, encoding="utf-8") as f:
                        content = f.read()

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
                    async_issues = []

                    # –ò—â–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç–∞–π–º–∞—É—Ç–æ–≤ –≤ asyncio.wait_for
                    if "asyncio.wait_for" in content:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–π–º–∞—É—Ç—ã
                        wait_for_pattern = r"asyncio\.wait_for\([^,]+\)"
                        matches = re.findall(wait_for_pattern, content)

                        for match in matches:
                            if "timeout=" not in match:
                                async_issues.append("asyncio.wait_for –±–µ–∑ —Ç–∞–π–º–∞—É—Ç–∞")

                    # –ò—â–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ü–∏–∫–ª—ã
                    if "while True:" in content and "asyncio.sleep" not in content:
                        async_issues.append("–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –±–µ–∑ sleep")

                    # –ò—â–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
                    if "async def" in content and "except" not in content:
                        async_issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π")

                    if async_issues:
                        print("      ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã –Ω–∞–π–¥–µ–Ω—ã:")
                        for issue in async_issues:
                            print(f"         ‚Ä¢ {issue}")
                        self.async_issues.extend(async_issues)
                    else:
                        print("      ‚úÖ –ü—Ä–æ–±–ª–µ–º—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")

            # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            await self._create_async_optimizations()

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")
            self.errors_found.append(f"Async operation analysis error: {e}")

    async def _create_async_optimizations(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        print("   üîß –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...")

        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        async_optimizations = {
            "async_operation_config": {
                "default_task_timeout": 60,
                "max_concurrent_tasks": 50,
                "task_cleanup_interval": 30,
                "deadlock_detection_timeout": 300,
            },
            "error_handling": {
                "retry_attempts": 3,
                "retry_delay": 1,
                "exponential_backoff": True,
                "max_retry_delay": 60,
            },
            "monitoring": {
                "task_monitoring_enabled": True,
                "memory_monitoring_enabled": True,
                "performance_monitoring_enabled": True,
            },
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        config_file = "config/async_optimizations.json"
        with open(config_file, "w", encoding="utf-8") as f:
            json.dump(async_optimizations, f, indent=2, ensure_ascii=False)

        print(f"   ‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {config_file}")
        self.fixes_applied.append("Async optimizations created")

    async def create_499_monitoring_system(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ 499 –æ—à–∏–±–æ–∫"""
        print("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ 499 –æ—à–∏–±–æ–∫...")

        try:
            # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            monitoring_script = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ 499 –æ—à–∏–±–æ–∫
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ 499 –æ—à–∏–±–∫–∞—Ö
"""

import asyncio
import os
import sys
import re
import time
from datetime import datetime, timedelta
from typing import Dict, List

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

class Error499Monitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ 499 –æ—à–∏–±–æ–∫"""

    def __init__(self):
        self.error_patterns = [
            r'499.*error',
            r'Client.*closed.*request',
            r'Connection.*closed.*prematurely',
            r'WebSocket.*closed',
            r'timeout.*error',
            r'Connection.*timeout'
        ]
        self.error_count = 0
        self.last_check = datetime.now()

    async def monitor_logs(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç 499 –æ—à–∏–±–æ–∫"""
        log_files = [
            "data/logs/trading.log",
            "data/logs/system.log",
            "logs/trading.log",
            "logs/system.log"
        ]

        for log_file in log_files:
            if os.path.exists(log_file):
                await self._check_log_file(log_file)

    async def _check_log_file(self, log_file: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–æ–≥ —Ñ–∞–π–ª–∞"""
        try:
            with open(log_file, 'r', encoding='utf-8') as f:
                content = f.read()

            for pattern in self.error_patterns:
                matches = re.findall(pattern, content, re.IGNORECASE)
                if matches:
                    self.error_count += len(matches)
                    print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(matches)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö 499 –æ—à–∏–±–æ–∫ –≤ {log_file}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∞ {log_file}: {e}")

    async def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        print(f"üìä –û—Ç—á–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ 499 –æ—à–∏–±–æ–∫")
        print(f"   –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {self.error_count}")
        print(f"   –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now()}")

        if self.error_count > 0:
            print("   ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã 499 –æ—à–∏–±–∫–∏! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å fix_system_issues.py")
        else:
            print("   ‚úÖ 499 –æ—à–∏–±–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    monitor = Error499Monitor()
    await monitor.monitor_logs()
    await monitor.generate_report()

if __name__ == "__main__":
    asyncio.run(main())
'''

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            monitoring_file = "scripts/monitor_499_errors.py"
            with open(monitoring_file, "w", encoding="utf-8") as f:
                f.write(monitoring_script)

            # –î–µ–ª–∞–µ–º —Ñ–∞–π–ª –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
            os.chmod(monitoring_file, 0o755)

            print(f"   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–∑–¥–∞–Ω–∞: {monitoring_file}")
            self.fixes_applied.append("499 error monitoring system created")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            self.errors_found.append(f"Monitoring system creation error: {e}")

    async def fix_database_issues(self):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüóÑÔ∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã signals
            result = await AsyncPGPool.fetch(
                """
                SELECT column_name, data_type, is_nullable
                FROM information_schema.columns
                WHERE table_name = 'signals'
                ORDER BY ordinal_position
            """
            )

            print("   üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã signals:")
            for row in result:
                print(
                    f"      {row['column_name']}: {row['data_type']} ({'NULL' if row['is_nullable'] == 'YES' else 'NOT NULL'})"
                )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ signals
            result = await AsyncPGPool.fetch(
                """
                SELECT id, symbol, side, created_at, updated_at
                FROM signals
                ORDER BY created_at DESC
                LIMIT 5
            """
            )

            print("   üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–∏–≥–Ω–∞–ª–æ–≤:")
            for row in result:
                print(f"      ID {row['id']}: {row['symbol']} {row['side']} ({row['created_at']})")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
            result = await AsyncPGPool.fetch(
                """
                SELECT COUNT(*) as count
                FROM signals
                WHERE symbol IS NULL OR side IS NULL
            """
            )

            null_count = result[0]["count"] if result else 0
            if null_count > 0:
                print(f"   ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {null_count} –∑–∞–ø–∏—Å–µ–π —Å NULL –∑–Ω–∞—á–µ–Ω–∏—è–º–∏")
                self.errors_found.append(f"Found {null_count} signals with NULL values")

            self.fixes_applied.append("Database structure analyzed")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
            self.errors_found.append(f"Database check error: {e}")

    async def fix_position_manager_issues(self):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º PositionManager"""
        print("\nüìä –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º PositionManager...")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª PositionManager
            position_manager_path = "trading/positions/position_manager.py"

            if os.path.exists(position_manager_path):
                with open(position_manager_path, encoding="utf-8") as f:
                    content = f.read()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–æ–≤
                missing_methods = []

                if "def sync_positions" not in content:
                    missing_methods.append("sync_positions")

                if "def calculate_total_pnl" not in content:
                    missing_methods.append("calculate_total_pnl")

                if missing_methods:
                    print(f"   ‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–µ—Ç–æ–¥—ã: {', '.join(missing_methods)}")
                    self.errors_found.append(f"Missing PositionManager methods: {missing_methods}")

                    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
                    backup_path = (
                        f"{position_manager_path}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                    )
                    with open(backup_path, "w", encoding="utf-8") as f:
                        f.write(content)
                    print(f"   üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")

                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–µ—Ç–æ–¥—ã
                    await self._add_missing_position_manager_methods(
                        position_manager_path, content, missing_methods
                    )
                else:
                    print("   ‚úÖ –í—Å–µ –º–µ—Ç–æ–¥—ã PositionManager –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            else:
                print(f"   ‚ùå –§–∞–π–ª {position_manager_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                self.errors_found.append(f"PositionManager file not found: {position_manager_path}")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ PositionManager: {e}")
            self.errors_found.append(f"PositionManager check error: {e}")

    async def _add_missing_position_manager_methods(
        self, file_path: str, content: str, missing_methods: list
    ):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –º–µ—Ç–æ–¥–æ–≤ –≤ PositionManager"""
        print("   üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –º–µ—Ç–æ–¥–æ–≤...")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        methods_to_add = []

        if "sync_positions" in missing_methods:
            methods_to_add.append(
                """
    async def sync_positions(self) -> None:
        \"\"\"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π —Å –±–∏—Ä–∂–µ–π\"\"\"
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            active_positions = await self.get_active_positions()

            for position in active_positions:
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –±–∏—Ä–∂–∏
                await self.update_position_from_exchange(position)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
            raise
"""
            )

        if "calculate_total_pnl" in missing_methods:
            methods_to_add.append(
                """
    async def calculate_total_pnl(self) -> float:
        \"\"\"–†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ P&L –ø–æ –≤—Å–µ–º –ø–æ–∑–∏—Ü–∏—è–º\"\"\"
        try:
            total_pnl = 0.0

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            active_positions = await self.get_active_positions()

            for position in active_positions:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º P&L –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
                position_pnl = await self.calculate_position_pnl(position)
                total_pnl += position_pnl

            return total_pnl

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –æ–±—â–µ–≥–æ P&L: {e}")
            return 0.0
"""
            )

        if methods_to_add:
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –≤ –∫–æ–Ω–µ—Ü –∫–ª–∞—Å—Å–∞
            for method in methods_to_add:
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É –∫–ª–∞—Å—Å–∞
                last_class_end = content.rfind("    def ")
                if last_class_end == -1:
                    last_class_end = content.rfind("\nclass ")

                if last_class_end != -1:
                    # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ—Ç–æ–¥–∞
                    lines = content.split("\n")
                    for i in range(len(lines) - 1, -1, -1):
                        if lines[i].strip() == "" or lines[i].strip().startswith("class "):
                            break

                    # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
                    insert_pos = "\n".join(lines[: i + 1])
                    new_content = (
                        insert_pos
                        + "\n"
                        + "\n".join(methods_to_add)
                        + "\n"
                        + "\n".join(lines[i + 1 :])
                    )

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    with open(file_path, "w", encoding="utf-8") as f:
                        f.write(new_content)

                    print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –º–µ—Ç–æ–¥—ã: {', '.join(missing_methods)}")
                    self.fixes_applied.append(f"Added PositionManager methods: {missing_methods}")
                else:
                    print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –º–µ—Ç–æ–¥–æ–≤")
                    self.errors_found.append(
                        "Could not find insertion point for PositionManager methods"
                    )

    async def fix_signal_processing_issues(self):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        print("\nüì° –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤...")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
            signal_processor_path = "core/signals/unified_signal_processor.py"

            if os.path.exists(signal_processor_path):
                with open(signal_processor_path, encoding="utf-8") as f:
                    content = f.read()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–µ—Å—Ç–∞
                issues_found = []

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
                if "Signal(" in content and "create_signal" in content:
                    print("   ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞–π–¥–µ–Ω")
                else:
                    print("   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–∏–≥–Ω–∞–ª–æ–≤")
                    issues_found.append("Signal processing issues detected")

                if issues_found:
                    self.errors_found.extend(issues_found)
                else:
                    print("   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

            else:
                print(f"   ‚ùå –§–∞–π–ª {signal_processor_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                self.errors_found.append(
                    f"Signal processor file not found: {signal_processor_path}"
                )

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            self.errors_found.append(f"Signal processing check error: {e}")

    async def run_migrations(self):
        """–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüîÑ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

        try:
            import subprocess

            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
            result = subprocess.run(
                ["alembic", "upgrade", "head"],
                capture_output=True,
                text=True,
                cwd=os.path.dirname(os.path.dirname(os.path.abspath(__file__))),
            )

            if result.returncode == 0:
                print("   ‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                self.fixes_applied.append("Database migrations applied")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π: {result.stderr}")
                self.errors_found.append(f"Migration error: {result.stderr}")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
            self.errors_found.append(f"Migration execution error: {e}")

    async def generate_fix_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö"""
        print("\nüìä –û—Ç—á–µ—Ç –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö")
        print("=" * 50)

        report = {
            "timestamp": datetime.now().isoformat(),
            "fixes_applied": self.fixes_applied,
            "errors_found": self.errors_found,
            "websocket_issues": self.websocket_issues,
            "http_timeout_issues": self.http_timeout_issues,
            "async_issues": self.async_issues,
            "fixes_count": len(self.fixes_applied),
            "errors_count": len(self.errors_found),
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_file = f"logs/fix_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_file, "w", encoding="utf-8") as f:
            json.dump(report, f, indent=2, ensure_ascii=False, default=str)

        print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")

        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:")
        print(f"   ‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {report['fixes_count']}")
        print(f"   ‚ùå –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {report['errors_count']}")
        print(f"   üîå WebSocket –ø—Ä–æ–±–ª–µ–º: {len(self.websocket_issues)}")
        print(f"   üåê HTTP —Ç–∞–π–º–∞—É—Ç –ø—Ä–æ–±–ª–µ–º: {len(self.http_timeout_issues)}")
        print(f"   ‚ö° –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º: {len(self.async_issues)}")

        if self.fixes_applied:
            print("\n‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
            for fix in self.fixes_applied:
                print(f"   ‚Ä¢ {fix}")

        if self.errors_found:
            print("\n‚ùå –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
            for error in self.errors_found:
                print(f"   ‚Ä¢ {error}")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if self.errors_found:
            print("\nüîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("   1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
            print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ 499 –æ—à–∏–±–æ–∫: python scripts/monitor_499_errors.py")
            print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –æ—à–∏–±–æ–∫")
            print("   4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã: python -m pytest tests/")
            print("   5. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º—É: python scripts/monitor_system_enhanced.py")
            print("   6. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")

    async def run_all_fixes(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º (–≤–∫–ª—é—á–∞—è 499 –æ—à–∏–±–∫–∏)")
        print("=" * 70)

        try:
            await self.initialize()
            await self.analyze_499_errors()
            await self.fix_websocket_issues()
            await self.fix_http_timeout_issues()
            await self.fix_async_operation_issues()
            await self.create_499_monitoring_system()
            await self.fix_database_issues()
            await self.fix_position_manager_issues()
            await self.fix_signal_processing_issues()
            await self.run_migrations()
            await self.generate_fix_report()

            print("\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

        except Exception as e:
            print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            self.errors_found.append(f"Critical error: {e}")
            await self.generate_fix_report()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    fixer = SystemIssueFixer()
    await fixer.run_all_fixes()


if __name__ == "__main__":
    asyncio.run(main())
