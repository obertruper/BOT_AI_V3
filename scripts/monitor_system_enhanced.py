#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã BOT Trading v3
–° –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º —Ä–∞–±–æ—Ç—ã —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ –∏ ML-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import asyncio
import json
import os
import sys
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.config.config_manager import ConfigManager
from risk_management.manager import RiskManager


class EnhancedSystemMonitor:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞"""

    def __init__(self):
        self.config_manager = None
        self.risk_manager = None
        self.monitoring_data = {
            "start_time": datetime.now(),
            "risk_checks": 0,
            "signals_processed": 0,
            "ml_predictions": 0,
            "errors": [],
            "warnings": [],
            "api_issues": [],
            "database_issues": [],
        }

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ConfigManager
        self.config_manager = ConfigManager("config/system.yaml")
        await self.config_manager.initialize()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RiskManager
        risk_config = self.config_manager.get_risk_management_config()
        self.risk_manager = RiskManager(risk_config)

        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    async def monitor_system_health(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        print("\nüè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã")
        print("=" * 50)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        await self._check_configuration()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π –∏ –±–∏—Ä–∂
        await self._check_api_keys_and_exchanges()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
        await self._check_risk_management()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ ML-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        await self._check_ml_integration()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await self._check_database()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
        await self._check_logs_detailed()

    async def _check_configuration(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            risk_config = self.config_manager.get_risk_management_config()
            ml_config = self.config_manager.get_ml_integration_config()
            monitoring_config = self.config_manager.get_monitoring_config()

            print(
                f"   ‚úÖ Risk Management: {'–í–∫–ª—é—á–µ–Ω' if risk_config.get('enabled') else '–û—Ç–∫–ª—é—á–µ–Ω'}"
            )
            print(
                f"   ‚úÖ ML Integration: {'–í–∫–ª—é—á–µ–Ω–∞' if ml_config.get('enabled') else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}"
            )
            print(
                f"   ‚úÖ Monitoring: {'–ù–∞—Å—Ç—Ä–æ–µ–Ω' if monitoring_config else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}"
            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π —Ä–∏—Å–∫–∞
            profiles = risk_config.get("risk_profiles", {})
            print(f"   üìä –ü—Ä–æ—Ñ–∏–ª–∏ —Ä–∏—Å–∫–∞: {list(profiles.keys())}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∞–∫—Ç–∏–≤–æ–≤
            categories = risk_config.get("asset_categories", {})
            print(f"   üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–∫—Ç–∏–≤–æ–≤: {list(categories.keys())}")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            self.monitoring_data["errors"].append(f"Configuration error: {e}")

    async def _check_api_keys_and_exchanges(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π –∏ –±–∏—Ä–∂"""
        print("\nüîë –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π –∏ –±–∏—Ä–∂...")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ config_manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if not self.config_manager:
                print("   ‚ùå ConfigManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                self.monitoring_data["api_issues"].append(
                    "ConfigManager not initialized"
                )
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–∏—Ä–∂
            exchanges_config = self.config_manager.get_exchange_config()

            if not exchanges_config:
                print("   ‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∏—Ä–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                self.monitoring_data["api_issues"].append("Exchanges config not found")
                return

            print("   üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ –±–∏—Ä–∂–∏:")

            for exchange_name, exchange_config in exchanges_config.items():
                print(f"      üîç {exchange_name.upper()}:")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π
                api_key = exchange_config.get("api_key")
                api_secret = exchange_config.get("api_secret")

                if not api_key or not api_secret:
                    print("         ‚ùå API –∫–ª—é—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                    self.monitoring_data["api_issues"].append(
                        f"{exchange_name}: Missing API keys"
                    )
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–µ–π
                    if len(api_key) < 10:
                        print("         ‚ö†Ô∏è API –∫–ª—é—á —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
                        self.monitoring_data["warnings"].append(
                            f"{exchange_name}: API key too short"
                        )
                    else:
                        print(
                            f"         ‚úÖ API –∫–ª—é—á: {'*' * (len(api_key) - 4) + api_key[-4:]}"
                        )

                    if len(api_secret) < 10:
                        print("         ‚ö†Ô∏è API —Å–µ–∫—Ä–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
                        self.monitoring_data["warnings"].append(
                            f"{exchange_name}: API secret too short"
                        )
                    else:
                        print(
                            f"         ‚úÖ API —Å–µ–∫—Ä–µ—Ç: {'*' * (len(api_secret) - 4) + api_secret[-4:]}"
                        )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                testnet = exchange_config.get("testnet", False)
                print(f"         üß™ Testnet: {'–î–∞' if testnet else '–ù–µ—Ç'}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∏
                signature_algorithm = exchange_config.get(
                    "signature_algorithm", "HMAC-SHA256"
                )
                print(f"         üîê –ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–¥–ø–∏—Å–∏: {signature_algorithm}")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–µ–π: {e}")
            self.monitoring_data["api_issues"].append(f"API keys check error: {e}")

    async def _check_risk_management(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏"""
        print("\nüõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏...")

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            if not self.risk_manager:
                print("   ‚ùå RiskManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return

            print(
                f"   ‚úÖ RiskManager: {'–í–∫–ª—é—á–µ–Ω' if self.risk_manager.enabled else '–û—Ç–∫–ª—é—á–µ–Ω'}"
            )
            print(f"   üìä –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å: {self.risk_manager.current_profile}")
            print(f"   üí∞ –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: {self.risk_manager.risk_per_trade:.2%}")
            print(f"   üéØ –ú–∞–∫—Å–∏–º—É–º –ø–æ–∑–∏—Ü–∏–π: {self.risk_manager.max_positions}")

            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏
            test_signal = {
                "symbol": "BTCUSDT",
                "side": "buy",
                "leverage": 5,
                "position_size": 100.0,
                "ml_predictions": {"profit_probability": 0.7, "loss_probability": 0.3},
            }

            position_size = self.risk_manager.calculate_position_size(test_signal)
            print(f"   üìä –¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏: ${position_size}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫–æ–≤
            risk_check = await self.risk_manager.check_signal_risk(test_signal)
            print(
                f"   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫–æ–≤: {'‚úÖ –ü—Ä–æ—à–ª–∞' if risk_check else '‚ùå –ù–µ –ø—Ä–æ—à–ª–∞'}"
            )

            self.monitoring_data["risk_checks"] += 1

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞: {e}")
            self.monitoring_data["errors"].append(f"Risk management error: {e}")

    async def _check_ml_integration(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ ML-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        print("\nü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ ML-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")

        try:
            ml_config = self.config_manager.get_ml_integration_config()

            if not ml_config.get("enabled"):
                print("   ‚ö†Ô∏è ML-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
                return

            print("   ‚úÖ ML-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–æ–≤
            thresholds = ml_config.get("thresholds", {})
            print("   üìä –ü–æ—Ä–æ–≥–∏ ML:")
            print(f"      –ü–æ–∫—É–ø–∫–∞ –ø—Ä–∏–±—ã–ª—å: {thresholds.get('buy_profit', 'N/A')}")
            print(f"      –ü–æ–∫—É–ø–∫–∞ —É–±—ã—Ç–æ–∫: {thresholds.get('buy_loss', 'N/A')}")
            print(f"      –ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–∏–±—ã–ª—å: {thresholds.get('sell_profit', 'N/A')}")
            print(f"      –ü—Ä–æ–¥–∞–∂–∞ —É–±—ã—Ç–æ–∫: {thresholds.get('sell_loss', 'N/A')}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π
            buy_model = ml_config.get("buy_model", {})
            sell_model = ml_config.get("sell_model", {})

            print("   üß† –ú–æ–¥–µ–ª–∏:")
            print(f"      –ü–æ–∫—É–ø–∫–∞: {list(buy_model.keys())}")
            print(f"      –ü—Ä–æ–¥–∞–∂–∞: {list(sell_model.keys())}")

            self.monitoring_data["ml_predictions"] += 1

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ML-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
            self.monitoring_data["errors"].append(f"ML integration error: {e}")

    async def _check_database(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

        try:
            from database.connections.postgres import AsyncPGPool

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            result = await AsyncPGPool.fetch("SELECT COUNT(*) as count FROM signals")
            signals_count = result[0]["count"] if result else 0

            result = await AsyncPGPool.fetch("SELECT COUNT(*) as count FROM trades")
            trades_count = result[0]["count"] if result else 0

            result = await AsyncPGPool.fetch("SELECT COUNT(*) as count FROM orders")
            orders_count = result[0]["count"] if result else 0

            print("   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: OK")
            print(f"   üìä –°–∏–≥–Ω–∞–ª–æ–≤: {signals_count}")
            print(f"   üìä –°–¥–µ–ª–æ–∫: {trades_count}")
            print(f"   üìä –û—Ä–¥–µ—Ä–æ–≤: {orders_count}")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            self.monitoring_data["database_issues"].append(
                f"Database connection error: {e}"
            )

    async def _check_logs_detailed(self):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ —Å –∞–Ω–∞–ª–∏–∑–æ–º –æ—à–∏–±–æ–∫"""
        print("\nüìù –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤...")

        log_files = [
            "logs/core.log",
            "logs/unified_launcher.log",
            "logs/risk_management.log",
            "logs/api.log",
        ]

        for log_file in log_files:
            if os.path.exists(log_file):
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                    size = os.path.getsize(log_file)
                    size_mb = size / (1024 * 1024)

                    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    mtime = os.path.getmtime(log_file)
                    last_modified = datetime.fromtimestamp(mtime)

                    print(f"   üìÑ {log_file}:")
                    print(f"      –†–∞–∑–º–µ—Ä: {size_mb:.2f} MB")
                    print(f"      –û–±–Ω–æ–≤–ª–µ–Ω: {last_modified.strftime('%H:%M:%S')}")

                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 200 —Å—Ç—Ä–æ–∫ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
                    with open(log_file, "r", encoding="utf-8") as f:
                        lines = f.readlines()
                        recent_lines = lines[-200:] if len(lines) > 200 else lines

                        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –ø–æ —Ç–∏–ø–∞–º
                        error_count = sum(1 for line in recent_lines if "ERROR" in line)
                        warning_count = sum(
                            1 for line in recent_lines if "WARNING" in line
                        )

                        print(f"      –û—à–∏–±–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 200 —Å—Ç—Ä–æ–∫): {error_count}")
                        print(
                            f"      –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 200 —Å—Ç—Ä–æ–∫): {warning_count}"
                        )

                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                        api_errors = [
                            line
                            for line in recent_lines
                            if "API" in line and "ERROR" in line
                        ]
                        signature_errors = [
                            line
                            for line in recent_lines
                            if "signature" in line.lower() and "ERROR" in line
                        ]
                        database_errors = [
                            line
                            for line in recent_lines
                            if "database" in line.lower() and "ERROR" in line
                        ]
                        signal_errors = [
                            line
                            for line in recent_lines
                            if "signal" in line.lower() and "ERROR" in line
                        ]

                        if api_errors:
                            print(f"      üîë API –æ—à–∏–±–∫–∏: {len(api_errors)}")
                            for error in api_errors[-3:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3
                                print(f"         ‚Ä¢ {error.strip()}")
                            self.monitoring_data["api_issues"].extend(api_errors[-3:])

                        if signature_errors:
                            print(f"      üîê –û—à–∏–±–∫–∏ –ø–æ–¥–ø–∏—Å–∏: {len(signature_errors)}")
                            for error in signature_errors[-3:]:
                                print(f"         ‚Ä¢ {error.strip()}")
                            self.monitoring_data["api_issues"].extend(
                                signature_errors[-3:]
                            )

                        if database_errors:
                            print(f"      üóÑÔ∏è –û—à–∏–±–∫–∏ –ë–î: {len(database_errors)}")
                            for error in database_errors[-3:]:
                                print(f"         ‚Ä¢ {error.strip()}")
                            self.monitoring_data["database_issues"].extend(
                                database_errors[-3:]
                            )

                        if signal_errors:
                            print(f"      üì° –û—à–∏–±–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signal_errors)}")
                            for error in signal_errors[-3:]:
                                print(f"         ‚Ä¢ {error.strip()}")
                            self.monitoring_data["errors"].extend(signal_errors[-3:])

                        if error_count > 0:
                            self.monitoring_data["warnings"].append(
                                f"Errors in {log_file}: {error_count}"
                            )

                except Exception as e:
                    print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {log_file}: {e}")
            else:
                print(f"   ‚ö†Ô∏è –§–∞–π–ª {log_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    async def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        print("=" * 50)

        report = {
            "timestamp": datetime.now().isoformat(),
            "monitoring_duration": (
                datetime.now() - self.monitoring_data["start_time"]
            ).total_seconds(),
            "risk_checks_performed": self.monitoring_data["risk_checks"],
            "ml_predictions_processed": self.monitoring_data["ml_predictions"],
            "errors_count": len(self.monitoring_data["errors"]),
            "warnings_count": len(self.monitoring_data["warnings"]),
            "api_issues_count": len(self.monitoring_data["api_issues"]),
            "database_issues_count": len(self.monitoring_data["database_issues"]),
            "errors": self.monitoring_data["errors"],
            "warnings": self.monitoring_data["warnings"],
            "api_issues": self.monitoring_data["api_issues"],
            "database_issues": self.monitoring_data["database_issues"],
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_file = (
            f"logs/monitoring_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        )
        with open(report_file, "w", encoding="utf-8") as f:
            json.dump(report, f, indent=2, ensure_ascii=False, default=str)

        print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")

        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
        print(f"   ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {report['monitoring_duration']:.1f} —Å–µ–∫")
        print(f"   üîç –ü—Ä–æ–≤–µ—Ä–æ–∫ —Ä–∏—Å–∫–∞: {report['risk_checks_performed']}")
        print(f"   ü§ñ ML-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {report['ml_predictions_processed']}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {report['errors_count']}")
        print(f"   ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {report['warnings_count']}")
        print(f"   üîë –ü—Ä–æ–±–ª–µ–º —Å API: {report['api_issues_count']}")
        print(f"   üóÑÔ∏è –ü—Ä–æ–±–ª–µ–º —Å –ë–î: {report['database_issues_count']}")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        if report["api_issues_count"] > 0:
            print("\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ API –ü–†–û–ë–õ–ï–ú:")
            print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–µ–π –≤ .env —Ñ–∞–π–ª–µ")
            print("   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API –∫–ª—é—á–∏ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞")
            print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–∏")
            print("   4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ IP –∞–¥—Ä–µ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω –Ω–∞ –±–∏—Ä–∂–µ")
            print("   5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ API –∫–ª—é—á–∏ –Ω–µ –∏—Å—Ç–µ–∫–ª–∏")

        if report["database_issues_count"] > 0:
            print("\nüóÑÔ∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ –ü–†–û–ë–õ–ï–ú –ë–î:")
            print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –Ω–∞ –ø–æ—Ä—Ç—É 5555")
            print("   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö bot_trading_v3 —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è obertruper")
            print("   4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏: alembic upgrade head")

        if report["errors_count"] > 0:
            print("\nüö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:")
            for error in report["errors"][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"   ‚Ä¢ {error}")

        if report["warnings_count"] > 0:
            print("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
            for warning in report["warnings"][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"   ‚Ä¢ {warning}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    monitor = EnhancedSystemMonitor()

    try:
        await monitor.initialize()
        await monitor.monitor_system_health()
        await monitor.generate_report()

        print("\n‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
