#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î –¥–ª—è ML —Å–∏—Å—Ç–µ–º—ã
"""

import os
from datetime import datetime

import psycopg2
from psycopg2.extras import RealDictCursor

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
DB_CONFIG = {
    "host": os.getenv("PGHOST", "localhost"),
    "port": int(os.getenv("PGPORT", "5555")),
    "database": os.getenv("PGDATABASE", "bot_trading_v3"),
    "user": os.getenv("PGUSER", "obertruper"),
    "password": os.getenv("PGPASSWORD", ""),
}


def check_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cur = conn.cursor()
        cur.execute("SELECT version()")
        version = cur.fetchone()[0]
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä PostgreSQL –≤–µ—Ä—Å–∏—è: {version}")
        cur.close()
        conn.close()
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False


def check_tables():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü ML —Å–∏—Å—Ç–µ–º—ã"""
    required_tables = [
        "raw_market_data",
        "processed_market_data",
        "signals",
        "technical_indicators",
        "market_data_snapshots",
    ]

    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cur = conn.cursor()

        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü ML —Å–∏—Å—Ç–µ–º—ã:")

        cur.execute(
            """
            SELECT table_name
            FROM information_schema.tables
            WHERE table_schema = 'public'
            AND table_name = ANY(%s)
            ORDER BY table_name;
        """,
            (required_tables,),
        )

        existing_tables = [row[0] for row in cur.fetchall()]

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(existing_tables)}/{len(required_tables)}")

        for table in required_tables:
            if table in existing_tables:
                print(f"  ‚úì {table}")
            else:
                print(f"  ‚ùå {table} - –ù–ï –ù–ê–ô–î–ï–ù–ê")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü:")
        for table in existing_tables:
            try:
                cur.execute(f"SELECT COUNT(*) FROM {table}")
                count = cur.fetchone()[0]
                print(f"  {table:25} | –ó–∞–ø–∏—Å–µ–π: {count:>10,}")
            except Exception as e:
                print(f"  {table:25} | –û—à–∏–±–∫–∞: {e}")

        cur.close()
        conn.close()

        return len(existing_tables) == len(required_tables)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        return False


def check_indexes():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤"""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cur = conn.cursor(cursor_factory=RealDictCursor)

        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤:")

        cur.execute(
            """
            SELECT
                schemaname,
                tablename,
                indexname,
                indexdef
            FROM pg_indexes
            WHERE schemaname = 'public'
            AND tablename IN ('raw_market_data', 'processed_market_data', 'signals')
            ORDER BY tablename, indexname;
        """
        )

        indexes = cur.fetchall()

        tables = {}
        for idx in indexes:
            table = idx["tablename"]
            if table not in tables:
                tables[table] = []
            tables[table].append(idx["indexname"])

        for table, indexes in tables.items():
            print(f"\n  –¢–∞–±–ª–∏—Ü–∞ {table}:")
            for idx in indexes:
                print(f"    ‚úì {idx}")

        cur.close()
        conn.close()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")


def create_scheduler_metrics_table():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã scheduler_metrics –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cur = conn.cursor()

        print("\nüõ†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã scheduler_metrics...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
        cur.execute(
            """
            SELECT EXISTS (
                SELECT FROM information_schema.tables
                WHERE table_schema = 'public'
                AND table_name = 'scheduler_metrics'
            );
        """
        )

        exists = cur.fetchone()[0]

        if not exists:
            print("  ‚ö†Ô∏è –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É scheduler_metrics...")

            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            cur.execute(
                """
                CREATE TABLE scheduler_metrics (
                    id BIGSERIAL PRIMARY KEY,
                    cycle_start TIMESTAMP WITH TIME ZONE NOT NULL,
                    cycle_end TIMESTAMP WITH TIME ZONE NOT NULL,
                    duration_seconds FLOAT NOT NULL,
                    symbols_processed INTEGER NOT NULL,
                    signals_generated INTEGER NOT NULL,
                    errors_count INTEGER DEFAULT 0,
                    avg_symbol_processing_time FLOAT,
                    memory_usage_mb FLOAT,
                    cpu_usage_percent FLOAT,
                    status VARCHAR(20) DEFAULT 'completed',
                    error_details JSONB,
                    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
                );
            """
            )

            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
            cur.execute(
                "CREATE INDEX idx_scheduler_metrics_cycle_start ON scheduler_metrics(cycle_start DESC);"
            )
            cur.execute("CREATE INDEX idx_scheduler_metrics_status ON scheduler_metrics(status);")

            conn.commit()
            print("  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ scheduler_metrics —Å–æ–∑–¥–∞–Ω–∞")
        else:
            print("  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ scheduler_metrics —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        cur.close()
        conn.close()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã scheduler_metrics: {e}")


def test_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cur = conn.cursor()

        print("\n‚ö° –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")

        # –¢–µ—Å—Ç 1: –í—ã–±–æ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        import time

        start = time.time()

        cur.execute(
            """
            SELECT symbol, datetime, close, volume
            FROM raw_market_data
            WHERE interval_minutes = 15
            ORDER BY timestamp DESC
            LIMIT 100;
        """
        )

        elapsed = (time.time() - start) * 1000
        print(f"  ‚úÖ –í—ã–±–æ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 100 –∑–∞–ø–∏—Å–µ–π: {elapsed:.2f} –º—Å")

        # –¢–µ—Å—Ç 2: –í—ã–±–æ—Ä–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª—É
        start = time.time()

        cur.execute(
            """
            SELECT COUNT(*)
            FROM raw_market_data
            WHERE symbol = 'BTCUSDT'
            AND interval_minutes = 15;
        """
        )

        count = cur.fetchone()[0]
        elapsed = (time.time() - start) * 1000
        print(f"  ‚úÖ –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π BTCUSDT: {count} –∑–∞–ø–∏—Å–µ–π –∑–∞ {elapsed:.2f} –º—Å")

        cur.close()
        conn.close()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î –¥–ª—è ML —Å–∏—Å—Ç–µ–º—ã BOT_AI_V3")
    print("=" * 60)
    print(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üîß –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DB_CONFIG['database']}")
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {DB_CONFIG['user']}")
    print(f"üîå –ü–æ—Ä—Ç: {DB_CONFIG['port']}")
    print("=" * 60)

    if check_connection():
        tables_ok = check_tables()
        check_indexes()
        create_scheduler_metrics_table()
        test_performance()

        print("\n" + "=" * 60)
        if tables_ok:
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –¥–ª—è ML —Å–∏—Å—Ç–µ–º—ã!")
        else:
            print("‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏: alembic upgrade head")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç—É—Å PostgreSQL")


if __name__ == "__main__":
    main()
