#!/usr/bin/env python3
"""–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ML —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""

import asyncio
import os
import sys
from datetime import datetime

from colorama import Fore, Style, init

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.logger import setup_logger
from database.connections.postgres import AsyncPGPool

init(autoreset=True)
logger = setup_logger(__name__)


async def monitor_system():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
    print(f"{Fore.CYAN}{'=' * 60}")
    print(f"{Fore.CYAN}ü§ñ ML TRADING SYSTEM MONITOR")
    print(f"{Fore.CYAN}{'=' * 60}\n")

    while True:
        try:
            # –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞
            os.system("clear" if os.name == "posix" else "cls")

            print(f"{Fore.YELLOW}‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"{Fore.CYAN}{'=' * 60}\n")

            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            print(f"{Fore.GREEN}üìä DATABASE STATUS:")
            try:
                query = (
                    "SELECT COUNT(*) FROM ml_signals WHERE created_at > NOW() - INTERVAL '1 hour'"
                )
                result = await AsyncPGPool.fetchval(query)
                print("  ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ü–û–î–ö–õ–Æ–ß–ï–ù–ê")
                print(f"  üìà ML —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ —á–∞—Å: {result}")
            except Exception as e:
                print(f"  ‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –û–®–ò–ë–ö–ê - {e}")

            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            print(f"\n{Fore.GREEN}üîî –ü–û–°–õ–ï–î–ù–ò–ï ML –°–ò–ì–ù–ê–õ–´:")
            try:
                query = """
                SELECT symbol, signal_type, confidence, strength, created_at
                FROM ml_signals
                ORDER BY created_at DESC
                LIMIT 5
                """
                signals = await AsyncPGPool.fetch(query)

                if signals:
                    for signal in signals:
                        signal_type = signal["signal_type"]
                        confidence = signal["confidence"]
                        strength = signal["strength"]

                        # –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
                        if signal_type == "LONG":
                            type_color = Fore.GREEN
                            emoji = "üü¢"
                        elif signal_type == "SHORT":
                            type_color = Fore.RED
                            emoji = "üî¥"
                        else:
                            type_color = Fore.YELLOW
                            emoji = "‚ö™"

                        print(
                            f"  {emoji} {signal['symbol']}: {type_color}{signal_type}{Style.RESET_ALL} "
                            f"| Conf: {confidence:.1%} | Str: {strength:.2f} "
                            f"| {signal['created_at'].strftime('%H:%M:%S')}"
                        )
                else:
                    print(f"  {Fore.YELLOW}‚ö†Ô∏è  –ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")

            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            print(f"\n{Fore.GREEN}üíº –¢–û–†–ì–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò:")
            try:
                # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
                query = """
                SELECT symbol, side, order_type, status, price, quantity, created_at
                FROM orders
                WHERE created_at > NOW() - INTERVAL '1 hour'
                ORDER BY created_at DESC
                LIMIT 5
                """
                orders = await AsyncPGPool.fetch(query)

                if orders:
                    for order in orders:
                        status_emoji = {
                            "pending": "‚è≥",
                            "open": "üìÇ",
                            "filled": "‚úÖ",
                            "cancelled": "‚ùå",
                        }.get(order["status"], "‚ùì")

                        side_color = Fore.GREEN if order["side"] == "BUY" else Fore.RED

                        print(
                            f"  {status_emoji} {order['symbol']}: {side_color}{order['side']}{Style.RESET_ALL} "
                            f"| {order['order_type']} | ${order['price']:.2f} x {order['quantity']:.4f} "
                            f"| {order['created_at'].strftime('%H:%M:%S')}"
                        )
                else:
                    print(f"  {Fore.YELLOW}‚ö†Ô∏è  –ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤")

            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤: {e}")

            # 4. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
            print(f"\n{Fore.GREEN}üìà –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:")
            try:
                # PnL –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                query = """
                SELECT
                    COUNT(*) as trades_count,
                    SUM(CASE WHEN pnl > 0 THEN 1 ELSE 0 END) as wins,
                    SUM(pnl) as total_pnl,
                    AVG(pnl) as avg_pnl
                FROM trades
                WHERE created_at > CURRENT_DATE
                """
                stats = await AsyncPGPool.fetchrow(query)

                if stats and stats["trades_count"] > 0:
                    win_rate = (stats["wins"] / stats["trades_count"]) * 100
                    total_pnl = stats["total_pnl"] or 0
                    avg_pnl = stats["avg_pnl"] or 0

                    pnl_color = Fore.GREEN if total_pnl >= 0 else Fore.RED

                    print(f"  üìä –°–¥–µ–ª–æ–∫ —Å–µ–≥–æ–¥–Ω—è: {stats['trades_count']}")
                    print(f"  üéØ Win Rate: {win_rate:.1f}%")
                    print(f"  üí∞ Total PnL: {pnl_color}${total_pnl:.2f}{Style.RESET_ALL}")
                    print(f"  üìà Avg PnL: ${avg_pnl:.2f}")
                else:
                    print(f"  {Fore.YELLOW}‚ö†Ô∏è  –ù–µ—Ç —Å–¥–µ–ª–æ–∫ —Å–µ–≥–æ–¥–Ω—è")

            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

            # 5. –°–æ—Å—Ç–æ—è–Ω–∏–µ ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            print(f"\n{Fore.GREEN}üß† ML –ö–û–ú–ü–û–ù–ï–ù–¢–´:")
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                query = """
                SELECT symbol, COUNT(*) as data_points
                FROM processed_market_data
                WHERE timestamp > NOW() - INTERVAL '1 hour'
                GROUP BY symbol
                ORDER BY symbol
                LIMIT 10
                """
                data_stats = await AsyncPGPool.fetch(query)

                if data_stats:
                    print("  üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–∞–Ω–Ω—ã—Ö –∑–∞ —á–∞—Å:")
                    for stat in data_stats:
                        print(f"     ‚Ä¢ {stat['symbol']}: {stat['data_points']} —Ç–æ—á–µ–∫")
                else:
                    print(f"  {Fore.YELLOW}‚ö†Ô∏è  –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ML: {e}")

            # 6. –ë–∞–ª–∞–Ω—Å –∏ –ø–æ–∑–∏—Ü–∏–∏
            print(f"\n{Fore.GREEN}üíµ –ë–ê–õ–ê–ù–°–´ –ò –ü–û–ó–ò–¶–ò–ò:")
            try:
                # –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
                query = """
                SELECT asset, exchange, free, used, total
                FROM balances
                WHERE asset = 'USDT'
                ORDER BY total DESC
                """
                balances = await AsyncPGPool.fetch(query)

                if balances:
                    for balance in balances:
                        print(
                            f"  üí∞ {balance['exchange']}: "
                            f"${balance['total']:.2f} USDT "
                            f"(Free: ${balance['free']:.2f}, Used: ${balance['used']:.2f})"
                        )
                else:
                    print(f"  {Fore.YELLOW}‚ö†Ô∏è  –ë–∞–ª–∞–Ω—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

                # –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                query = """
                SELECT symbol, side, entry_price, current_price, quantity, pnl
                FROM positions
                WHERE status = 'open'
                """
                positions = await AsyncPGPool.fetch(query)

                if positions:
                    print("\n  üìÇ –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:")
                    for pos in positions:
                        pnl_color = Fore.GREEN if pos["pnl"] >= 0 else Fore.RED
                        side_emoji = "üü¢" if pos["side"] == "LONG" else "üî¥"

                        print(
                            f"     {side_emoji} {pos['symbol']}: "
                            f"Entry: ${pos['entry_price']:.2f} ‚Üí Current: ${pos['current_price']:.2f} "
                            f"| Qty: {pos['quantity']:.4f} | PnL: {pnl_color}${pos['pnl']:.2f}{Style.RESET_ALL}"
                        )
                else:
                    print(f"\n  {Fore.CYAN}üì≠ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")

            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: {e}")

            print(f"\n{Fore.CYAN}{'=' * 60}")
            print(f"{Fore.YELLOW}–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥... (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)")

            # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(30)

        except KeyboardInterrupt:
            print(f"\n{Fore.YELLOW}üëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            await asyncio.sleep(5)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        await monitor_system()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await AsyncPGPool.close()


if __name__ == "__main__":
    asyncio.run(main())
