#!/usr/bin/env python3
"""–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–µ—Å—Ç–∫–æ –∑–∞—à–∏—Ç—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ë–î –≤ –ø—Ä–æ–µ–∫—Ç–µ."""

import re
from pathlib import Path


def fix_db_config():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∂–µ—Å—Ç–∫–æ –∑–∞—à–∏—Ç—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ë–î."""

    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ë–î...")

    # 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º database/connections/postgres.py
    postgres_file = Path("database/connections/postgres.py")
    if postgres_file.exists():
        content = postgres_file.read_text()

        # –£–±–∏—Ä–∞–µ–º –∂–µ—Å—Ç–∫–æ –∑–∞—à–∏—Ç—ã–π –ø–∞—Ä–æ–ª—å
        content = re.sub(
            r"DB_PASSWORD = os\.getenv\('PGPASSWORD', '.*?'\)",
            "DB_PASSWORD = os.getenv('PGPASSWORD')",
            content,
        )

        postgres_file.write_text(content)
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω database/connections/postgres.py")

    # 2. –°–æ–∑–¥–∞–µ–º alembic.ini.example –±–µ–∑ –ø–∞—Ä–æ–ª–µ–π
    alembic_file = Path("alembic.ini")
    alembic_example = Path("alembic.ini.example")

    if alembic_file.exists():
        content = alembic_file.read_text()

        # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —à–∞–±–ª–æ–Ω
        content = re.sub(
            r"sqlalchemy\.url = postgresql://.*",
            "sqlalchemy.url = postgresql://%(DB_USER)s:%(DB_PASSWORD)s@%(DB_HOST)s:%(DB_PORT)s/%(DB_NAME)s",
            content,
        )

        alembic_example.write_text(content)
        print("‚úÖ –°–æ–∑–¥–∞–Ω alembic.ini.example")

        # –û–±–Ω–æ–≤–ª—è–µ–º alembic.ini –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        alembic_env = """# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Alembic —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
[alembic]
script_location = database/migrations
prepend_sys_path = .
version_path_separator = os
file_template = %%(rev)s_%%(slug)s

[post_write_hooks]
hooks = black
black.type = console_scripts
black.entrypoint = black
black.options = -l 120

[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S

# Database URL will be loaded from environment in env.py
sqlalchemy.url = driver://user:pass@localhost/dbname
"""
        alembic_file.write_text(alembic_env)
        print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω alembic.ini")

    # 3. –û–±–Ω–æ–≤–ª—è–µ–º database/migrations/env.py –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_file = Path("database/migrations/env.py")
    if env_file.exists():
        content = env_file.read_text()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–º–ø–æ—Ä—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL
        if "from database.connections import get_database_url" not in content:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤
            import_section = """from logging.config import fileConfig

from sqlalchemy import engine_from_config
from sqlalchemy import pool

from alembic import context

# –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
import os
from database.connections import get_database_url
"""
            content = content.replace(
                "from logging.config import fileConfig\n\nfrom sqlalchemy import engine_from_config\nfrom sqlalchemy import pool\n\nfrom alembic import context",
                import_section,
            )

            # –ó–∞–º–µ–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ URL
            content = re.sub(
                r"config\.set_main_option\(\"sqlalchemy\.url\", get_database_url\(\)\)",
                'config.set_main_option("sqlalchemy.url", get_database_url())',
                content,
            )

            env_file.write_text(content)
            print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω database/migrations/env.py")

    # 4. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º config/system.yaml
    system_config = Path("config/system.yaml")
    if system_config.exists():
        content = system_config.read_text()

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Ä—Ç
        content = content.replace("port: 5432", "port: 5555")

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        content = content.replace("user: postgres", "user: obertruper")

        # –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–æ–ª—å –µ—Å–ª–∏ –µ—Å—Ç—å
        content = re.sub(r"password:.*", "password: ${PGPASSWORD}", content)

        system_config.write_text(content)
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω config/system.yaml")

    # 5. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    for script_path in [
        "scripts/sync_to_linux_server.sh",
        "scripts/sync_via_tailscale.sh",
    ]:
        script_file = Path(script_path)
        if script_file.exists():
            content = script_file.read_text()

            # –ó–∞–º–µ–Ω—è–µ–º –∂–µ—Å—Ç–∫–æ –∑–∞—à–∏—Ç—ã–π –ø–∞—Ä–æ–ª—å –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
            content = re.sub(
                r'PASSWORD=".*?"', 'PASSWORD="${SYNC_PASSWORD:-}"', content
            )

            script_file.write_text(content)
            print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω {script_path}")

    # 6. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º scripts/visualize_db.py
    visualize_file = Path("scripts/visualize_db.py")
    if visualize_file.exists():
        content = visualize_file.read_text()

        # –ó–∞–º–µ–Ω—è–µ–º –∂–µ—Å—Ç–∫–æ –∑–∞—à–∏—Ç—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        new_conn_params = """conn_params = {
    'dbname': os.getenv('PGDATABASE', 'bot_trading_v3'),
    'user': os.getenv('PGUSER', 'obertruper'),
    'port': os.getenv('PGPORT', '5555'),
    'password': os.getenv('PGPASSWORD'),
    'host': os.getenv('PGHOST', 'localhost')
}"""

        content = re.sub(
            r"conn_params = \{[^}]+\}", new_conn_params, content, flags=re.DOTALL
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç os –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if "import os" not in content:
            content = "import os\n" + content

        visualize_file.write_text(content)
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω scripts/visualize_db.py")

    # 7. –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º .env.example
    env_example = Path(".env.example")
    if not env_example.exists():
        env_content = """# PostgreSQL Configuration
PGHOST=localhost
PGPORT=5555
PGUSER=obertruper
PGPASSWORD=your_secure_password_here
PGDATABASE=bot_trading_v3

# Exchange API Keys
BYBIT_API_KEY=your_bybit_api_key
BYBIT_API_SECRET=your_bybit_api_secret

BINANCE_API_KEY=your_binance_api_key
BINANCE_API_SECRET=your_binance_api_secret

OKX_API_KEY=your_okx_api_key
OKX_API_SECRET=your_okx_api_secret
OKX_PASSPHRASE=your_okx_passphrase

BITGET_API_KEY=your_bitget_api_key
BITGET_API_SECRET=your_bitget_api_secret
BITGET_PASSPHRASE=your_bitget_passphrase

GATE_API_KEY=your_gate_api_key
GATE_API_SECRET=your_gate_api_secret

KUCOIN_API_KEY=your_kucoin_api_key
KUCOIN_API_SECRET=your_kucoin_api_secret
KUCOIN_PASSPHRASE=your_kucoin_passphrase

HUOBI_API_KEY=your_huobi_api_key
HUOBI_API_SECRET=your_huobi_api_secret

# AI Services
CLAUDE_API_KEY=your_claude_api_key
OPENAI_API_KEY=your_openai_api_key

# Telegram Bot
TELEGRAM_BOT_TOKEN=your_telegram_bot_token
TELEGRAM_CHAT_ID=your_telegram_chat_id

# GitHub
GITHUB_TOKEN=your_github_token

# System Settings
LOG_LEVEL=INFO
ENVIRONMENT=development
DEFAULT_LEVERAGE=1
MAX_POSITION_SIZE=1000
RISK_LIMIT_PERCENTAGE=2

# Redis (optional)
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=

# Sync Password (for scripts)
SYNC_PASSWORD=your_sync_password
"""
        env_example.write_text(env_content)
        print("‚úÖ –°–æ–∑–¥–∞–Ω .env.example")

    print("\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env: cp .env.example .env")
    print("2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ .env —Ñ–∞–π–ª–µ")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏: alembic upgrade head")
    print("\n‚ö†Ô∏è  –í–ê–ñ–ù–û: –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∫–æ–º–º–∏—Ç—å—Ç–µ .env —Ñ–∞–π–ª –≤ git!")


if __name__ == "__main__":
    fix_db_config()
