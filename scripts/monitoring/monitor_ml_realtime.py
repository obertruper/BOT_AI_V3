#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ML –º–æ–¥–µ–ª–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ª–æ–≥–∏–∫–æ–π –∏–∑ LLM TRANSFORM –ø—Ä–æ–µ–∫—Ç–∞
"""

import asyncio
import sys

import pandas as pd

sys.path.append("/mnt/SSD/PYCHARMPRODJECT/BOT_AI_V3")

from core.logger import setup_logger
from database.connections.postgres import AsyncPGPool
from ml.logic.feature_engineering import FeatureEngineer
from ml.ml_manager import MLManager
from ml.ml_signal_processor import MLSignalProcessor

logger = setup_logger("monitor_ml_realtime")


async def monitor_ml_pipeline():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ML pipeline –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏."""

    print("üîç –ú–û–ù–ò–¢–û–†–ò–ù–ì ML PIPELINE –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò\n")
    print("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ª–æ–≥–∏–∫–æ–π –∏–∑ LLM TRANSFORM –ø—Ä–æ–µ–∫—Ç–∞\n")

    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    config = {"ml": {"model": {"device": "cuda"}, "model_directory": "models/saved"}}

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    ml_manager = MLManager(config)
    await ml_manager.initialize()

    # MLSignalProcessor —Ç—Ä–µ–±—É–µ—Ç ml_manager –∫–∞–∫ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
    ml_processor = MLSignalProcessor(ml_manager, config)
    # await ml_processor.initialize()  # –£ –Ω–µ–≥–æ –Ω–µ—Ç –º–µ—Ç–æ–¥–∞ initialize

    feature_engineer = FeatureEngineer(config)

    # 2. –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä
    symbols = ["BTCUSDT", "ETHUSDT", "BNBUSDT", "SOLUSDT", "XRPUSDT"]

    for symbol in symbols[:3]:  # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–µ—Ä–≤—ã–µ 3 —Å–∏–º–≤–æ–ª–∞
        print(f"\n{'=' * 80}")
        print(f"üìä –ê–Ω–∞–ª–∏–∑ –¥–ª—è {symbol}")
        print(f"{'=' * 80}\n")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
        query = """
        SELECT * FROM raw_market_data
        WHERE symbol = $1
        ORDER BY datetime DESC
        LIMIT 100
        """

        raw_data = await AsyncPGPool.fetch(query, symbol)

        if not raw_data:
            print(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
            continue

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
        df_data = [dict(row) for row in raw_data]
        df = pd.DataFrame(df_data)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Decimal –≤ float
        for col in ["open", "high", "low", "close", "volume"]:
            df[col] = df[col].astype(float)

        df = df.sort_values("datetime")

        print(f"1Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(df)} —Å–≤–µ—á–µ–π")
        print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${df['close'].iloc[-1]:.2f}")
        print(f"   –í—Ä–µ–º—è: {df['datetime'].iloc[-1]}")

        # 3. Feature Engineering (–∫–∞–∫ –≤ LLM TRANSFORM)
        print("\n2Ô∏è‚É£ Feature Engineering:")

        features = feature_engineer.create_features(df)
        print(f"   –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {features.shape}")
        print(
            f"   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: min={features.min():.3f}, max={features.max():.3f}, mean={features.mean():.3f}"
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–∫–∞–∫ –≤ LLM TRANSFORM)
        if len(features) >= 96:
            last_features = features[-1]
            print("\n   üìà –ö–ª—é—á–µ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–ø–æ—Å–ª–µ–¥–Ω—è—è —Ç–æ—á–∫–∞):")

            # –ò–Ω–¥–µ–∫—Å—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ LLM TRANSFORM
            # RSI –æ–±—ã—á–Ω–æ –≤ –Ω–∞—á–∞–ª–µ –ø–æ—Å–ª–µ price features
            print(f"   ‚Ä¢ RSI(14): {last_features[10]:.2f}")
            print(f"   ‚Ä¢ MA(20): {last_features[20]:.2f}")
            print(f"   ‚Ä¢ Volume: {last_features[5]:.2f}")

        # 4. ML Prediction (–ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –º–æ–¥–µ–ª—å)
        print("\n3Ô∏è‚É£ ML Prediction:")

        if len(features) >= 96:
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 96 —Ç–æ—á–µ–∫
            features_window = features[-96:]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º scaler (–∫–∞–∫ –≤ LLM TRANSFORM)
            features_scaled = ml_manager.scaler.transform(features_window)

            print("   üìä –î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è:")
            print(f"   Shape: {features_scaled.shape}")
            print(f"   Range: [{features_scaled.min():.3f}, {features_scaled.max():.3f}]")

            # –ü—Ä—è–º–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —á–µ—Ä–µ–∑ ML Manager
            prediction = await ml_manager.predict(features_window)

            print("\n   üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:")
            print(f"   ‚Ä¢ Signal Type: {prediction['signal_type']}")
            print(f"   ‚Ä¢ Confidence: {prediction['confidence']:.1%}")
            print(f"   ‚Ä¢ Signal Strength: {prediction['signal_strength']:.3f}")
            print(f"   ‚Ä¢ Raw Directions: {prediction['predictions']['raw_directions']}")

        # 5. Signal Processing (–ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–∞)
        print("\n4Ô∏è‚É£ Signal Processing:")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        cache_key = f"ml_signal:{symbol}"

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª —á–µ—Ä–µ–∑ processor
        signal = await ml_processor.process_symbol(symbol)

        if signal:
            print("   ‚úÖ –°–∏–≥–Ω–∞–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:")
            print(f"   ‚Ä¢ Type: {signal.signal_type.value}")
            print(f"   ‚Ä¢ Entry Price: ${signal.suggested_price:.2f}")
            print(f"   ‚Ä¢ Stop Loss: ${signal.suggested_stop_loss:.2f}")
            print(f"   ‚Ä¢ Take Profit: ${signal.suggested_take_profit:.2f}")
            print(f"   ‚Ä¢ Confidence: {signal.confidence:.1%}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ —Å–∏–≥–Ω–∞–ª–µ
            if signal.indicators:
                print("\n   üìä –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤ —Å–∏–≥–Ω–∞–ª–µ:")
                indicators = signal.indicators

                if "ml_predictions" in indicators:
                    ml_pred = indicators["ml_predictions"]
                    print(f"   ‚Ä¢ Direction Score: {ml_pred.get('direction_score', 0):.3f}")
                    print(f"   ‚Ä¢ Raw Directions: {ml_pred.get('raw_directions', [])}")

                if "technical_indicators" in indicators:
                    tech = indicators["technical_indicators"]
                    print(f"   ‚Ä¢ RSI: {tech.get('rsi', 0):.2f}")
                    print(f"   ‚Ä¢ MA20: {tech.get('ma_20', 0):.2f}")
        else:
            print("   ‚ùå –°–∏–≥–Ω–∞–ª –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")

    # 6. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å LLM TRANSFORM
    print(f"\n{'=' * 80}")
    print("üìã –°–†–ê–í–ù–ï–ù–ò–ï –° LLM TRANSFORM:")
    print(f"{'=' * 80}\n")

    print("üîç –ö–ª—é—á–µ–≤—ã–µ –æ—Ç–ª–∏—á–∏—è –Ω–∞–π–¥–µ–Ω—ã:")
    print("\n1. –ü–†–û–ë–õ–ï–ú–ê –° DIRECTION HEAD:")
    print("   ‚Ä¢ LLM TRANSFORM: direction_head –≤—ã–¥–∞–µ—Ç 12 –∑–Ω–∞—á–µ–Ω–∏–π (3 –∫–ª–∞—Å—Å–∞ √ó 4 —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞)")
    print("   ‚Ä¢ BOT_AI_V3: –æ–∂–∏–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ 4 –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
    print("   ‚Ä¢ –ú–æ–¥–µ–ª—å –≤—ã–¥–∞–µ—Ç [2.0, 2.0, 2.0, 2.0] –∏–∑-–∑–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏")

    print("\n2. –ü–†–û–ë–õ–ï–ú–ê –° FEATURE SCALING:")
    print("   ‚Ä¢ LLM TRANSFORM: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç StandardScaler —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
    print("   ‚Ä¢ BOT_AI_V3: scaler –∑–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–æ features –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è")

    print("\n3. –ü–†–û–ë–õ–ï–ú–ê –° SIGNAL GENERATION:")
    print("   ‚Ä¢ Stop Loss/Take Profit —Å—á–∏—Ç–∞—é—Ç—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)")
    print("   ‚Ä¢ –ù—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∫–∞–∫ –±–∞–∑—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞")

    print("\nüõ†Ô∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é direction_head (–≤–∑—è—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã)")
    print("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –º–µ–∂–¥—É –ø—Ä–æ–µ–∫—Ç–∞–º–∏")
    print("3. –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—á–µ—Ç Stop Loss/Take Profit –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã")
    print("4. –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º")


if __name__ == "__main__":
    asyncio.run(monitor_ml_pipeline())
