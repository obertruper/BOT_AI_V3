#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç –±–∏—Ä–∂
"""

import asyncio
import sys
from datetime import UTC, datetime, timedelta
from pathlib import Path

import numpy as np
import pandas as pd

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–∞–ª–æ–≥ –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from core.logger import setup_logger
from ml.logic.archive_old_versions.feature_engineering import FeatureEngineer
from ml.ml_manager import MLManager

logger = setup_logger(__name__)


def create_test_data() -> pd.DataFrame:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ OHLCV –¥–∞–Ω–Ω—ã–µ"""

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 300 —Å–≤–µ—á–µ–π (–±–æ–ª—å—à–µ —á–µ–º –Ω—É–∂–Ω–æ –¥–ª—è –º–æ–¥–µ–ª–∏)
    n = 300
    timestamps = pd.date_range(
        start=datetime.now(UTC) - timedelta(hours=n / 4), periods=n, freq="15T"
    )

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ OHLCV –¥–∞–Ω–Ω—ã–µ
    np.random.seed(42)  # –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏

    base_price = 50000
    data = []
    current_price = base_price

    for i, ts in enumerate(timestamps):
        # –°–ª—É—á–∞–π–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
        change = np.random.normal(0, 0.01)  # 1% —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
        current_price *= 1 + change

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º OHLC –≤–æ–∫—Ä—É–≥ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
        volatility = 0.005  # 0.5% –≤–Ω—É—Ç—Ä–∏–¥–Ω–µ–≤–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        high = current_price * (1 + abs(np.random.normal(0, volatility)))
        low = current_price * (1 - abs(np.random.normal(0, volatility)))
        open_price = current_price * (1 + np.random.normal(0, volatility / 2))
        close = current_price
        volume = np.random.uniform(1000, 10000)

        data.append(
            {
                "timestamp": int(ts.timestamp() * 1000),
                "datetime": ts,
                "open": float(open_price),
                "high": float(max(open_price, high, close)),
                "low": float(min(open_price, low, close)),
                "close": float(close),
                "volume": float(volume),
                "turnover": float(volume * close),
            }
        )

    df = pd.DataFrame(data)
    df.set_index("datetime", inplace=True)
    return df


async def test_feature_engineering():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""

    logger.info("üß™ –¢–µ—Å—Ç Feature Engineering...")

    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = create_test_data()
        logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(test_data)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–≤–µ—á–µ–π")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º FeatureEngineer —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        config = {"features": {"technical": {"enabled": True}}}
        fe = FeatureEngineer(config)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É symbol –¥–ª—è FeatureEngineer –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
        test_data_with_symbol = test_data.copy().reset_index()
        test_data_with_symbol["symbol"] = "BTCUSDT"

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        features = fe.create_features(test_data_with_symbol)

        logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {features.shape[0]} —Å—Ç—Ä–æ–∫ –∏ {features.shape[1]} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        logger.info(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {list(features.columns)[-5:]}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç NaN –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö
        last_rows = features.tail(10)
        nan_count = last_rows.isnull().sum().sum()
        logger.info(f"   NaN –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —Å—Ç—Ä–æ–∫–∞—Ö: {nan_count}")

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ Feature Engineering: {e}")
        import traceback

        logger.error(traceback.format_exc())
        return False


async def test_ml_manager():
    """–¢–µ—Å—Ç ML Manager"""

    logger.info("üß™ –¢–µ—Å—Ç ML Manager...")

    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = {
            "ml": {
                "enabled": True,
                "model": {
                    "enabled": True,
                    "path": "models/saved/best_model_20250728_215703.pth",
                    "scaler_path": "models/saved/data_scaler.pkl",
                    "device": "cpu",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º CPU –¥–ª—è —Ç–µ—Å—Ç–æ–≤
                },
            }
        }

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ML Manager
        ml_manager = MLManager(config)
        await ml_manager.initialize()

        logger.info("‚úÖ ML Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (240 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç –º–æ–¥–µ–ª—å)
        features = np.random.randn(96, 240).astype(np.float32)  # 96 –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤, 240 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        logger.info(f"–°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {features.shape}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        prediction = await ml_manager.predict(features)

        logger.info("‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:")
        if isinstance(prediction, dict):
            for key, value in prediction.items():
                if isinstance(value, (list, np.ndarray)):
                    logger.info(f"   {key}: {len(value) if hasattr(value, '__len__') else value}")
                else:
                    logger.info(f"   {key}: {value}")
        else:
            logger.info(
                f"   –¢–∏–ø: {type(prediction)}, —Ä–∞–∑–º–µ—Ä: {prediction.shape if hasattr(prediction, 'shape') else len(prediction)}"
            )

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ ML Manager: {e}")
        import traceback

        logger.error(traceback.format_exc())
        return False


async def test_end_to_end():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞: –¥–∞–Ω–Ω—ã–µ -> –ø—Ä–∏–∑–Ω–∞–∫–∏ -> –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"""

    logger.info("üß™ –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ ML –ø–∞–π–ø–ª–∞–π–Ω–∞...")

    try:
        # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = create_test_data()
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(test_data)} —Å–≤–µ—á–µ–π")

        # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        config = {"features": {"technical": {"enabled": True}}}
        fe = FeatureEngineer(config)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É symbol –¥–ª—è FeatureEngineer –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
        test_data_with_symbol = test_data.copy().reset_index()
        test_data_with_symbol["symbol"] = "BTCUSDT"

        features_df = fe.create_features(test_data_with_symbol)
        logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {features_df.shape[1]} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

        # 3. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 96 –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤
        features_array = features_df.tail(96).values.astype(np.float32)

        if features_array.shape[1] != 240:
            logger.warning(
                f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {features_array.shape[1]}, –æ–∂–∏–¥–∞–ª–æ—Å—å 240"
            )
            # –î–æ–ø–æ–ª–Ω—è–µ–º –∏–ª–∏ –æ–±—Ä–µ–∑–∞–µ–º –¥–æ 240
            if features_array.shape[1] < 240:
                padding = np.zeros((features_array.shape[0], 240 - features_array.shape[1]))
                features_array = np.concatenate([features_array, padding], axis=1)
            else:
                features_array = features_array[:, :240]

        logger.info(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –º–∞—Å—Å–∏–≤ –¥–ª—è –º–æ–¥–µ–ª–∏: {features_array.shape}")

        # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ML Manager
        config = {
            "ml": {
                "enabled": True,
                "model": {
                    "enabled": True,
                    "path": "models/saved/best_model_20250728_215703.pth",
                    "scaler_path": "models/saved/data_scaler.pkl",
                    "device": "cpu",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º CPU –¥–ª—è —Ç–µ—Å—Ç–æ–≤
                },
            }
        }

        ml_manager = MLManager(config)
        await ml_manager.initialize()
        logger.info("‚úÖ ML Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # 5. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        prediction = await ml_manager.predict(features_array)
        logger.info("‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ")

        # 6. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if isinstance(prediction, dict):
            logger.info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:")
            for key, value in prediction.items():
                if isinstance(value, np.ndarray):
                    logger.info(f"   {key}: shape={value.shape}, mean={np.mean(value):.4f}")
                elif isinstance(value, list):
                    logger.info(
                        f"   {key}: length={len(value)}, sample={value[:3] if len(value) > 3 else value}"
                    )
                else:
                    logger.info(f"   {key}: {value}")

        logger.info("üéâ –ü–æ–ª–Ω—ã–π ML –ø–∞–π–ø–ª–∞–π–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ª–Ω–æ–º –ø–∞–π–ø–ª–∞–π–Ω–µ: {e}")
        import traceback

        logger.error(traceback.format_exc())
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")

    results = []

    # –¢–µ—Å—Ç 1: Feature Engineering
    results.append(await test_feature_engineering())

    # –¢–µ—Å—Ç 2: ML Manager
    results.append(await test_ml_manager())

    # –¢–µ—Å—Ç 3: –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω
    results.append(await test_end_to_end())

    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    passed = sum(results)
    total = len(results)

    if passed == total:
        logger.info(f"üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! ({passed}/{total})")
        return True
    else:
        logger.error(f"‚ùå –ù–µ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏: {passed}/{total}")
        return False


if __name__ == "__main__":
    result = asyncio.run(main())
    sys.exit(0 if result else 1)
