#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ML
–ó–∞–≥—Ä—É–∂–∞–µ—Ç OHLCV –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–∏ –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
"""

import asyncio
import sys
from datetime import datetime, timedelta
from pathlib import Path
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

import pandas as pd

from core.config.config_manager import ConfigManager
from core.logger import setup_logger
from data.data_loader import DataLoader

logger = setup_logger("load_historical")


async def load_symbol_data(
    data_loader: DataLoader,
    symbol: str,
    exchange: str = "bybit",
    days: int = 30,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö
) -> Optional[pd.DataFrame]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
    try:
        logger.info(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ {symbol} –∑–∞ {days} –¥–Ω–µ–π...")

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
        candles_per_day = 24 * 4  # 15-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏
        limit = candles_per_day * days

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = await data_loader.load_ohlcv(
            symbol=symbol,
            exchange=exchange,
            interval="15m",
            limit=min(limit, 1000),  # Bybit –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
            save_to_db=True,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        )

        if df is not None and not df.empty:
            logger.info(
                f"‚úÖ {symbol}: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π "
                f"({df.index[0]} - {df.index[-1]})"
            )
            return df
        else:
            logger.warning(f"‚ö†Ô∏è {symbol}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            return None

    except Exception as e:
        logger.error(f"‚ùå {symbol}: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ - {e}")
        return None


async def load_all_symbols(config_manager: ConfigManager, days: int = 30):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤
    ml_config = config_manager.get_ml_config()
    symbols = ml_config.get("data", {}).get("symbols", [])

    # –ë–µ—Ä–µ–º —Å–∏–º–≤–æ–ª—ã –∏–∑ system.yaml –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    system_config = config_manager.get_system_config()
    ml_symbols = system_config.get("ml", {}).get("symbols", [])

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º–≤–æ–ª—ã –∏–∑ system.yaml –µ—Å–ª–∏ –æ–Ω–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
    if ml_symbols:
        symbols = ml_symbols

    logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DataLoader
    data_loader = DataLoader(config_manager)
    await data_loader.initialize()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    results = {"success": [], "failed": [], "total_candles": 0}

    for i, symbol in enumerate(symbols, 1):
        logger.info(f"\n[{i}/{len(symbols)}] –û–±—Ä–∞–±–æ—Ç–∫–∞ {symbol}...")

        df = await load_symbol_data(data_loader, symbol, days=days)

        if df is not None:
            results["success"].append(symbol)
            results["total_candles"] += len(df)
        else:
            results["failed"].append(symbol)

        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        if i < len(symbols):
            await asyncio.sleep(0.5)

    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info("\n" + "=" * 50)
    logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ó–ê–ì–†–£–ó–ö–ò:")
    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(results['success'])} —Å–∏–º–≤–æ–ª–æ–≤")
    logger.info(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: {len(results['failed'])} —Å–∏–º–≤–æ–ª–æ–≤")
    logger.info(f"üìà –í—Å–µ–≥–æ —Å–≤–µ—á–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {results['total_candles']}")

    if results["success"]:
        logger.info(f"\n‚úÖ –£—Å–ø–µ—à–Ω—ã–µ: {', '.join(results['success'][:10])}")
        if len(results["success"]) > 10:
            logger.info(f"   –∏ –µ—â–µ {len(results['success']) - 10} —Å–∏–º–≤–æ–ª–æ–≤...")

    if results["failed"]:
        logger.info(f"\n‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ: {', '.join(results['failed'])}")

    return results


async def check_and_update_data(config_manager: ConfigManager):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...")

    data_loader = DataLoader(config_manager)
    await data_loader.initialize()

    # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª—ã
    system_config = config_manager.get_system_config()
    symbols = system_config.get("ml", {}).get("symbols", [])[:5]  # –ü–µ—Ä–≤—ã–µ 5 –¥–ª—è —Ç–µ—Å—Ç–∞

    for symbol in symbols:
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
            df = await data_loader.load_ohlcv(
                symbol=symbol,
                exchange="bybit",
                interval="15m",
                limit=100,
                save_to_db=True,
            )

            if df is not None and not df.empty:
                last_candle = df.index[-1]
                now = datetime.now()
                age = now - last_candle

                if age > timedelta(hours=1):
                    logger.warning(
                        f"‚ö†Ô∏è {symbol}: –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –Ω–∞ {age.total_seconds() / 3600:.1f} —á–∞—Å–æ–≤"
                    )
                else:
                    logger.info(
                        f"‚úÖ {symbol}: –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã (–æ–±–Ω–æ–≤–ª–µ–Ω—ã {age.total_seconds() / 60:.0f} –º–∏–Ω –Ω–∞–∑–∞–¥)"
                    )

        except Exception as e:
            logger.error(f"‚ùå {symbol}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ - {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        import argparse

        parser = argparse.ArgumentParser(
            description="–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ML"
        )
        parser.add_argument(
            "--days",
            type=int,
            default=30,
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)",
        )
        parser.add_argument(
            "--check-only",
            action="store_true",
            help="–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö",
        )
        parser.add_argument(
            "--symbols",
            nargs="+",
            help="–°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)",
        )

        args = parser.parse_args()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_manager = ConfigManager()
        await config_manager.initialize()

        if args.check_only:
            # –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞
            await check_and_update_data(config_manager)
        else:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            if args.symbols:
                # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã
                system_config = config_manager.get_system_config()
                system_config.setdefault("ml", {})["symbols"] = args.symbols

            results = await load_all_symbols(config_manager, days=args.days)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if results["success"]:
                logger.info("\nüü¢ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
                logger.info("üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å ML —Å–∏—Å—Ç–µ–º—É")
            else:
                logger.error("\nüî¥ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
