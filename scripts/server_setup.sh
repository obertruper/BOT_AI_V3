#!/bin/bash

# –°–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ BOT_AI_V3 –Ω–∞ production —Å–µ—Ä–≤–µ—Ä
# –ó–∞–ø—É—Å–∫–∞—Ç—å —Å –ø—Ä–∞–≤–∞–º–∏ sudo

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${GREEN}üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ BOT_AI_V3 –Ω–∞ —Å–µ—Ä–≤–µ—Ä${NC}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∑–∞–ø—É—â–µ–Ω–æ —Å sudo
if [ "$EUID" -ne 0 ]; then
    echo -e "${RED}–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å sudo${NC}"
    exit 1
fi

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
BOT_USER="bot_ai_v3"
BOT_DIR="/opt/bot_ai_v3"
POSTGRES_VERSION="15"
PYTHON_VERSION="3.8"

# 1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
echo -e "${YELLOW}üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...${NC}"
apt-get update && apt-get upgrade -y

# 2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
echo -e "${YELLOW}üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...${NC}"
apt-get install -y \
    python${PYTHON_VERSION} \
    python${PYTHON_VERSION}-venv \
    python${PYTHON_VERSION}-dev \
    postgresql-${POSTGRES_VERSION} \
    postgresql-contrib-${POSTGRES_VERSION} \
    redis-server \
    nginx \
    certbot \
    python3-certbot-nginx \
    git \
    htop \
    multitail \
    supervisor \
    build-essential \
    libpq-dev \
    libssl-dev \
    libffi-dev

# 3. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
echo -e "${YELLOW}üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${BOT_USER}...${NC}"
if ! id -u ${BOT_USER} > /dev/null 2>&1; then
    useradd -m -s /bin/bash ${BOT_USER}
    usermod -aG sudo ${BOT_USER}
fi

# 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL
echo -e "${YELLOW}üêò –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL...${NC}"
sudo -u postgres psql << EOF
CREATE USER obertruper WITH PASSWORD '${POSTGRES_PASSWORD}';
CREATE DATABASE bot_trading_v3 OWNER obertruper;
GRANT ALL PRIVILEGES ON DATABASE bot_trading_v3 TO obertruper;
EOF

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ PostgreSQL –Ω–∞ 5555
sed -i 's/port = 5432/port = 5555/g' /etc/postgresql/${POSTGRES_VERSION}/main/postgresql.conf
systemctl restart postgresql

# 5. –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
echo -e "${YELLOW}üì• –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...${NC}"
if [ ! -d "$BOT_DIR" ]; then
    git clone https://github.com/${GITHUB_USER}/bot_ai_v3.git $BOT_DIR
fi

cd $BOT_DIR
chown -R ${BOT_USER}:${BOT_USER} $BOT_DIR

# 6. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python –æ–∫—Ä—É–∂–µ–Ω–∏—è
echo -e "${YELLOW}üêç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python –æ–∫—Ä—É–∂–µ–Ω–∏—è...${NC}"
sudo -u ${BOT_USER} bash << EOF
cd $BOT_DIR
python${PYTHON_VERSION} -m venv venv
source venv/bin/activate
pip install --upgrade pip
pip install -r requirements.txt
EOF

# 7. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
echo -e "${YELLOW}‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...${NC}"
cat > $BOT_DIR/.env << EOF
# PostgreSQL
PGHOST=localhost
PGPORT=5555
PGUSER=obertruper
PGPASSWORD=${POSTGRES_PASSWORD}
PGDATABASE=bot_trading_v3

# Redis
REDIS_URL=redis://localhost:6379

# –†–µ–∂–∏–º
ENVIRONMENT=production
LOG_LEVEL=INFO

# –ë–∏—Ä–∂–∏ (–∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏)
BYBIT_API_KEY=
BYBIT_API_SECRET=

# AI (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
CLAUDE_API_KEY=
GITHUB_TOKEN=
EOF

chown ${BOT_USER}:${BOT_USER} $BOT_DIR/.env
chmod 600 $BOT_DIR/.env

# 8. Systemd —Å–µ—Ä–≤–∏—Å—ã
echo -e "${YELLOW}üîß –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"

# –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å
cat > /etc/systemd/system/bot-ai-v3.service << EOF
[Unit]
Description=BOT_AI_V3 Trading System
After=network.target postgresql.service redis.service
Wants=bot-ai-v3-monitor.timer

[Service]
Type=forking
User=${BOT_USER}
Group=${BOT_USER}
WorkingDirectory=$BOT_DIR
Environment="PATH=$BOT_DIR/venv/bin:/usr/local/bin:/usr/bin:/bin"
ExecStart=$BOT_DIR/venv/bin/python $BOT_DIR/unified_launcher.py --mode=ml --daemon
ExecStop=$BOT_DIR/venv/bin/python $BOT_DIR/unified_launcher.py --stop
ExecReload=/bin/kill -HUP \$MAINPID
Restart=on-failure
RestartSec=10
StandardOutput=append:$BOT_DIR/data/logs/systemd.log
StandardError=append:$BOT_DIR/data/logs/systemd_error.log

# –õ–∏–º–∏—Ç—ã
LimitNOFILE=65536
LimitNPROC=4096

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
NoNewPrivileges=true
PrivateTmp=true
ProtectSystem=strict
ProtectHome=true
ReadWritePaths=$BOT_DIR/data $BOT_DIR/logs

[Install]
WantedBy=multi-user.target
EOF

# –°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
cat > /etc/systemd/system/bot-ai-v3-monitor.service << EOF
[Unit]
Description=BOT_AI_V3 Health Monitor
After=bot-ai-v3.service

[Service]
Type=oneshot
User=${BOT_USER}
Group=${BOT_USER}
WorkingDirectory=$BOT_DIR
ExecStart=$BOT_DIR/venv/bin/python $BOT_DIR/scripts/health_check.py
EOF

# –¢–∞–π–º–µ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
cat > /etc/systemd/system/bot-ai-v3-monitor.timer << EOF
[Unit]
Description=Run BOT_AI_V3 Health Monitor every 5 minutes
Requires=bot-ai-v3-monitor.service

[Timer]
OnBootSec=5min
OnUnitActiveSec=5min

[Install]
WantedBy=timers.target
EOF

# 9. Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
echo -e "${YELLOW}üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx...${NC}"
cat > /etc/nginx/sites-available/bot-ai-v3 << EOF
server {
    listen 80;
    server_name ${DOMAIN_NAME};

    location / {
        proxy_pass http://localhost:5173;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_cache_bypass \$http_upgrade;
    }

    location /api {
        proxy_pass http://localhost:8080;
        proxy_http_version 1.1;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header Host \$host;
        proxy_set_header X-Forwarded-Proto \$scheme;

        # WebSocket support
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_read_timeout 86400;
    }
}
EOF

ln -sf /etc/nginx/sites-available/bot-ai-v3 /etc/nginx/sites-enabled/
nginx -t && systemctl reload nginx

# 10. –õ–æ–≥—Ä–æ—Ç–µ–π—Ç
echo -e "${YELLOW}üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥—Ä–æ—Ç–µ–π—Ç–∞...${NC}"
cat > /etc/logrotate.d/bot-ai-v3 << EOF
$BOT_DIR/data/logs/*.log {
    daily
    rotate 30
    compress
    delaycompress
    missingok
    notifempty
    create 0644 ${BOT_USER} ${BOT_USER}
    sharedscripts
    postrotate
        systemctl reload bot-ai-v3 > /dev/null 2>&1 || true
    endscript
}
EOF

# 11. Firewall
echo -e "${YELLOW}üî• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ firewall...${NC}"
ufw allow 22/tcp
ufw allow 80/tcp
ufw allow 443/tcp
ufw allow 5173/tcp  # Frontend (–∑–∞–∫—Ä—ã—Ç—å –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ nginx)
ufw allow 8080/tcp  # API (–∑–∞–∫—Ä—ã—Ç—å –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ nginx)
ufw --force enable

# 12. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
echo -e "${YELLOW}üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
systemctl daemon-reload
systemctl enable bot-ai-v3.service
systemctl enable bot-ai-v3-monitor.timer
systemctl start bot-ai-v3-monitor.timer
systemctl start bot-ai-v3.service

# 13. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
echo -e "${YELLOW}‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...${NC}"
sleep 5
systemctl status bot-ai-v3.service --no-pager
systemctl status bot-ai-v3-monitor.timer --no-pager

echo -e "${GREEN}‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${NC}"
echo -e "${GREEN}üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤: multitail -f $BOT_DIR/data/logs/*.log${NC}"
echo -e "${GREEN}üåê Frontend: http://${DOMAIN_NAME}${NC}"
echo -e "${GREEN}üìö API Docs: http://${DOMAIN_NAME}/api/docs${NC}"
