#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
–ó–∞–≥—Ä—É–∂–∞–µ—Ç OHLCV –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é —Å –±–∏—Ä–∂–∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import asyncio
import os
import sys
from datetime import datetime, timedelta
from pathlib import Path

import asyncpg
import ccxt.pro as ccxt
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
DB_USER = os.getenv("PGUSER", "obertruper")
DB_PASSWORD = os.getenv("PGPASSWORD", "")
DB_NAME = os.getenv("PGDATABASE", "bot_trading_v3")
DB_PORT = os.getenv("PGPORT", "5555")
DB_URL = f"postgresql://{DB_USER}:{DB_PASSWORD}@localhost:{DB_PORT}/{DB_NAME}"

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏
DEFAULT_SYMBOLS = ["BTCUSDT", "ETHUSDT", "BNBUSDT", "SOLUSDT", "XRPUSDT"]


async def create_tables(pool):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
    async with pool.acquire() as conn:
        await conn.execute(
            """
            CREATE TABLE IF NOT EXISTS raw_market_data (
                id SERIAL PRIMARY KEY,
                symbol VARCHAR(50) NOT NULL,
                exchange VARCHAR(50) NOT NULL,
                timestamp TIMESTAMP NOT NULL,
                open DECIMAL(20, 8) NOT NULL,
                high DECIMAL(20, 8) NOT NULL,
                low DECIMAL(20, 8) NOT NULL,
                close DECIMAL(20, 8) NOT NULL,
                volume DECIMAL(20, 8) NOT NULL,
                timeframe VARCHAR(10) NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(symbol, exchange, timestamp, timeframe)
            )
        """
        )

        await conn.execute(
            """
            CREATE INDEX IF NOT EXISTS idx_raw_market_data_symbol_timestamp
            ON raw_market_data(symbol, timestamp DESC)
        """
        )

        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")


async def load_symbol_data(exchange, symbol, timeframe, days, pool):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
    try:
        print(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ {symbol} –∑–∞ {days} –¥–Ω–µ–π...")

        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥
        end_time = datetime.now()
        start_time = end_time - timedelta(days=days)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        since = int(start_time.timestamp() * 1000)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–∏
        all_candles = []
        while since < int(end_time.timestamp() * 1000):
            candles = await exchange.fetch_ohlcv(
                symbol, timeframe=timeframe, since=since, limit=1000
            )

            if not candles:
                break

            all_candles.extend(candles)
            since = candles[-1][0] + 1  # –°–ª–µ–¥—É—é—â–∞—è —Å–≤–µ—á–∞

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å rate limit
            await asyncio.sleep(0.1)

        print(f"  üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_candles)} —Å–≤–µ—á–µ–π")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        if all_candles:
            async with pool.acquire() as conn:
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
                values = []
                for candle in all_candles:
                    timestamp = datetime.fromtimestamp(candle[0] / 1000)
                    values.append(
                        (
                            symbol,
                            "bybit",
                            timestamp,
                            float(candle[1]),  # open
                            float(candle[2]),  # high
                            float(candle[3]),  # low
                            float(candle[4]),  # close
                            float(candle[5]),  # volume
                            timeframe,
                        )
                    )

                # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                await conn.executemany(
                    """
                    INSERT INTO raw_market_data
                    (symbol, exchange, timestamp, open, high, low, close, volume, timeframe)
                    VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
                    ON CONFLICT (symbol, exchange, timestamp, timeframe) DO NOTHING
                """,
                    values,
                )

                print(f"  ‚úÖ {symbol} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {symbol}: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
    print(f"üìä –ë–î: {DB_NAME} –Ω–∞ –ø–æ—Ä—Ç—É {DB_PORT}")

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    days = 7
    symbols = DEFAULT_SYMBOLS
    timeframe = "15m"

    if len(sys.argv) > 1:
        days = int(sys.argv[1])
    if len(sys.argv) > 2:
        symbols = sys.argv[2].split(",")

    print(f"‚è∞ –ü–µ—Ä–∏–æ–¥: {days} –¥–Ω–µ–π")
    print(f"üìà –°–∏–º–≤–æ–ª—ã: {', '.join(symbols)}")
    print(f"‚è±Ô∏è –¢–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}")

    # –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î
    pool = await asyncpg.create_pool(DB_URL, min_size=5, max_size=10)

    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        await create_tables(pool)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏—Ä–∂—É
        exchange = ccxt.bybit(
            {
                "enableRateLimit": True,
                "options": {
                    "defaultType": "linear",  # USDT perpetual
                },
            }
        )

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        for symbol in symbols:
            await load_symbol_data(exchange, symbol, timeframe, days, pool)
            await asyncio.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å
        async with pool.acquire() as conn:
            result = await conn.fetchrow(
                "SELECT COUNT(*) as total, COUNT(DISTINCT symbol) as symbols FROM raw_market_data"
            )
            print("\nüìä –ò–¢–û–ì–û –í –ë–î:")
            print(f"  –ó–∞–ø–∏—Å–µ–π: {result['total']}")
            print(f"  –°–∏–º–≤–æ–ª–æ–≤: {result['symbols']}")

        await exchange.close()

    finally:
        await pool.close()

    print("\n‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


if __name__ == "__main__":
    asyncio.run(main())
