#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ML –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from sqlalchemy import text

from core.config.config_manager import ConfigManager
from core.logger import setup_logger
from data.data_loader import DataLoader
from database.connections import get_async_db

logger = setup_logger("check_data")


async def check_raw_data_availability():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ raw_market_data"""
    try:
        async with get_async_db() as session:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            result = await session.execute(text("SELECT COUNT(*) FROM raw_market_data"))
            total_records = result.scalar()

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ —Å–∏–º–≤–æ–ª–∞–º
            result = await session.execute(
                text(
                    """
                SELECT symbol, COUNT(*) as count,
                       MIN(timestamp) as min_date,
                       MAX(timestamp) as max_date
                FROM raw_market_data
                GROUP BY symbol
                ORDER BY count DESC
            """
                )
            )

            symbol_stats = result.fetchall()

            logger.info(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î: {total_records}")
            logger.info("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º:")

            for stat in symbol_stats[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-20
                logger.info(
                    f"  {stat.symbol}: {stat.count} –∑–∞–ø–∏—Å–µ–π "
                    f"({stat.min_date.strftime('%Y-%m-%d')} - "
                    f"{stat.max_date.strftime('%Y-%m-%d')})"
                )

            return symbol_stats

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î: {e}")
        return []


async def check_data_for_ml(config_manager: ConfigManager):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ML –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ML...")

    # –ü–æ–ª—É—á–∞–µ–º ML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    ml_config = config_manager.get_ml_config()
    ml_symbols = ml_config.get("symbols", [])
    min_candles = 240  # –ú–∏–Ω–∏–º—É–º –¥–ª—è ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è

    logger.info(f"üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º {len(ml_symbols)} —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ ml_config.yaml")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DataLoader
    data_loader = DataLoader(config_manager)
    await data_loader.initialize()

    results = {}
    missing_symbols = []
    ready_symbols = []

    for symbol in ml_symbols[:10]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 10
        try:
            logger.info(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {symbol}...")

            # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            df = await data_loader.load_ohlcv(
                symbol=symbol, exchange="bybit", interval="15m", limit=min_candles + 10
            )

            if df is not None and len(df) >= min_candles:
                logger.info(f"‚úÖ {symbol}: {len(df)} —Å–≤–µ—á–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ")
                ready_symbols.append(symbol)
                results[symbol] = {
                    "status": "ready",
                    "candles": len(df),
                    "first": df.index[0],
                    "last": df.index[-1],
                }
            else:
                candles = len(df) if df is not None else 0
                logger.warning(f"‚ö†Ô∏è {symbol}: —Ç–æ–ª—å–∫–æ {candles}/{min_candles} —Å–≤–µ—á–µ–π")
                missing_symbols.append(symbol)
                results[symbol] = {
                    "status": "insufficient",
                    "candles": candles,
                    "needed": min_candles,
                }

        except Exception as e:
            logger.error(f"‚ùå {symbol}: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ - {e}")
            missing_symbols.append(symbol)
            results[symbol] = {"status": "error", "error": str(e)}

    # –ò—Ç–æ–≥–∏
    logger.info("\nüìä –ò–¢–û–ì–ò –ü–†–û–í–ï–†–ö–ò:")
    logger.info(f"‚úÖ –ì–æ—Ç–æ–≤—ã –∫ ML: {len(ready_symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
    logger.info(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(missing_symbols)} —Å–∏–º–≤–æ–ª–æ–≤")

    if ready_symbols:
        logger.info(f"\nüü¢ –ì–æ—Ç–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã: {', '.join(ready_symbols)}")

    if missing_symbols:
        logger.info(f"\nüî¥ –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: {', '.join(missing_symbols)}")
        logger.info("\nüí° –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        logger.info("   python scripts/load_historical_data.py")

    return results


async def check_ml_system_readiness(config_manager: ConfigManager):
    """–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ ML —Å–∏—Å—Ç–µ–º—ã"""
    logger.info("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ ML —Å–∏—Å—Ç–µ–º—ã –∫ –∑–∞–ø—É—Å–∫—É...")

    checks = {
        "model": False,
        "scaler": False,
        "database": False,
        "data": False,
        "config": False,
    }

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏
    model_path = Path("models/saved/best_model_20250728_215703.pth")
    if model_path.exists():
        logger.info(f"‚úÖ ML –º–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
        checks["model"] = True
    else:
        logger.error(f"‚ùå ML –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ scaler
    scaler_path = Path("models/saved/data_scaler.pkl")
    if scaler_path.exists():
        logger.info(f"‚úÖ Data scaler –Ω–∞–π–¥–µ–Ω: {scaler_path}")
        checks["scaler"] = True
    else:
        logger.error(f"‚ùå Data scaler –Ω–µ –Ω–∞–π–¥–µ–Ω: {scaler_path}")

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
    try:
        async with get_async_db() as session:
            await session.execute(text("SELECT 1"))
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç")
            checks["database"] = True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")

    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    ml_config = config_manager.get_ml_config()
    if ml_config and ml_config.get("model", {}).get("enabled"):
        logger.info("‚úÖ ML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        checks["config"] = True
    else:
        logger.error("‚ùå ML –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data_results = await check_data_for_ml(config_manager)
    ready_count = sum(1 for r in data_results.values() if r["status"] == "ready")
    if ready_count > 0:
        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è {ready_count} —Å–∏–º–≤–æ–ª–æ–≤")
        checks["data"] = True
    else:
        logger.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ML")

    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    all_ready = all(checks.values())

    logger.info("\n" + "=" * 50)
    logger.info("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:")
    for check, status in checks.items():
        icon = "‚úÖ" if status else "‚ùå"
        logger.info(f"  {icon} {check.upper()}: {'OK' if status else 'FAILED'}")

    if all_ready:
        logger.info("\nüü¢ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ó–ê–ü–£–°–ö–£!")
        logger.info("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py")
    else:
        logger.info("\nüî¥ –°–ò–°–¢–ï–ú–ê –ù–ï –ì–û–¢–û–í–ê")
        logger.info("‚ùó –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –≤—ã—à–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")

    return all_ready


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_manager = ConfigManager()
        await config_manager.initialize()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        logger.info("=" * 50)
        logger.info("üìä –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –í –ë–ê–ó–ï")
        logger.info("=" * 50)
        await check_raw_data_availability()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å ML —Å–∏—Å—Ç–µ–º—ã
        logger.info("\n" + "=" * 50)
        logger.info("ü§ñ –ü–†–û–í–ï–†–ö–ê ML –°–ò–°–¢–ï–ú–´")
        logger.info("=" * 50)
        is_ready = await check_ml_system_readiness(config_manager)

        return is_ready

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()
        return False


if __name__ == "__main__":
    is_ready = asyncio.run(main())
    sys.exit(0 if is_ready else 1)
