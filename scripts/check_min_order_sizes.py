#!/usr/bin/env python3
"""–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è Bybit"""

import asyncio
import os
import sys
from pathlib import Path

sys.path.append(str(Path(__file__).parent.parent))

from dotenv import load_dotenv

from core.logger import setup_logger
from exchanges.bybit.client import BybitClient

logger = setup_logger("check_min_sizes")


async def check_min_order_sizes():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –æ—Ä–¥–µ—Ä–æ–≤"""
    load_dotenv()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    client = BybitClient(
        api_key=os.getenv("BYBIT_API_KEY"),
        api_secret=os.getenv("BYBIT_API_SECRET"),
        sandbox=False,
    )

    try:
        await client.connect()
        logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Bybit")

        # –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        symbols = [
            "BTCUSDT",
            "ETHUSDT",
            "BNBUSDT",
            "SOLUSDT",
            "XRPUSDT",
            "ADAUSDT",
            "DOGEUSDT",
            "DOTUSDT",
            "LINKUSDT",
        ]

        logger.info("\nüìä –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ï –†–ê–ó–ú–ï–†–´ –û–†–î–ï–†–û–í:")
        logger.info("=" * 60)

        for symbol in symbols:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
                instrument = await client.get_instrument_info(symbol)

                logger.info(f"\n{symbol}:")
                logger.info(f"  –ú–∏–Ω. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {instrument.min_order_qty}")
                logger.info(f"  –ú–∞–∫—Å. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {instrument.max_order_qty}")
                logger.info(f"  –®–∞–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {instrument.qty_step}")
                logger.info(f"  –ú–∏–Ω. —Ü–µ–Ω–∞: {instrument.min_price}")
                logger.info(f"  –ú–∞–∫—Å. —Ü–µ–Ω–∞: {instrument.max_price}")
                logger.info(f"  –®–∞–≥ —Ü–µ–Ω—ã: {instrument.price_step}")

                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                ticker = await client.get_ticker(symbol)
                current_price = float(ticker.last_price)

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞
                min_value = float(instrument.min_order_qty) * current_price
                logger.info(f"  –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.2f}")
                logger.info(f"  –ú–∏–Ω. —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞: ${min_value:.2f}")

            except Exception as e:
                logger.error(f"  –û—à–∏–±–∫–∞ –¥–ª—è {symbol}: {e}")

        # –¢–µ—Å—Ç–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å —É—á–µ—Ç–æ–º –±–∞–ª–∞–Ω—Å–∞ 167 USDT
        logger.info("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ë–ê–õ–ê–ù–°–ê 167 USDT:")
        logger.info("=" * 60)
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 1-2% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é: $1.67 - $3.34")
        logger.info("–≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–π")
        logger.info("\n–ü—Ä–∏–º–µ—Ä—ã —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–æ–∑–∏—Ü–∏–π:")

        # –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–Ω–µ—Ç
        test_positions = {
            "BTCUSDT": 0.00001,  # ~$1 –ø—Ä–∏ —Ü–µ–Ω–µ $100k
            "ETHUSDT": 0.0001,  # ~$0.4 –ø—Ä–∏ —Ü–µ–Ω–µ $4k
            "XRPUSDT": 10.0,  # ~$33 –ø—Ä–∏ —Ü–µ–Ω–µ $3.3
            "DOGEUSDT": 10.0,  # ~$5 –ø—Ä–∏ —Ü–µ–Ω–µ $0.5
        }

        for symbol, qty in test_positions.items():
            try:
                ticker = await client.get_ticker(symbol)
                value = qty * float(ticker.last_price)
                logger.info(f"  {symbol}: {qty} ({value:.2f} USDT)")
            except:
                pass

    finally:
        await client.disconnect()
        logger.info("\nüîå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç Bybit")


if __name__ == "__main__":
    asyncio.run(check_min_order_sizes())
