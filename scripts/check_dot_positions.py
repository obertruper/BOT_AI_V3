#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–π DOT –∏ –¥—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–æ–≤
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from core.logger import setup_logger
from database.connections.postgres import AsyncPGPool

logger = setup_logger("check_positions")


async def check_dot_positions():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–π DOT –∏ –¥—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–æ–≤"""

    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–π DOT –∏ –¥—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–æ–≤...")

    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await AsyncPGPool.get_pool()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–¥–µ—Ä–∞ (–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏)
        orders_query = """
        SELECT
            symbol,
            side,
            order_type,
            status,
            quantity,
            price,
            created_at
        FROM orders
        WHERE symbol LIKE '%DOT%' OR symbol IN ('BTCUSDT', 'ETHUSDT', 'SOLUSDT')
        ORDER BY created_at DESC
        LIMIT 10
        """

        orders = await AsyncPGPool.fetch(orders_query)

        if orders:
            logger.info(f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(orders)} –æ—Ä–¥–µ—Ä–æ–≤:")
            for order in orders:
                logger.info(
                    f"  {order['symbol']}: {order['side']} {order['order_type']} {order['status']} {order['quantity']} @ {order['price']}"
                )
        else:
            logger.info("‚úÖ –û—Ä–¥–µ—Ä–æ–≤ DOT –∏ –¥—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
        trades_query = """
        SELECT
            symbol,
            side,
            price,
            quantity,
            commission,
            created_at
        FROM trades
        WHERE symbol LIKE '%DOT%' OR symbol IN ('BTCUSDT', 'ETHUSDT', 'SOLUSDT')
        ORDER BY created_at DESC
        LIMIT 10
        """

        trades = await AsyncPGPool.fetch(trades_query)

        if trades:
            logger.info(f"üí∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(trades)} —Å–¥–µ–ª–æ–∫:")
            for trade in trades:
                logger.info(
                    f"  {trade['symbol']}: {trade['side']} {trade['quantity']} @ {trade['price']} (–∫–æ–º–∏—Å—Å–∏—è: {trade['commission']})"
                )
        else:
            logger.info("‚úÖ –°–¥–µ–ª–æ–∫ DOT –∏ –¥—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—ã
        signals_query = """
        SELECT
            symbol,
            signal_type,
            strength,
            confidence,
            created_at
        FROM signals
        WHERE symbol LIKE '%DOT%' OR symbol IN ('BTCUSDT', 'ETHUSDT', 'SOLUSDT')
        ORDER BY created_at DESC
        LIMIT 10
        """

        signals = await AsyncPGPool.fetch(signals_query)

        if signals:
            logger.info(f"üéØ –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤:")
            for signal in signals:
                logger.info(
                    f"  {signal['symbol']}: {signal['signal_type']} strength={signal['strength']} confidence={signal['confidence']}"
                )
        else:
            logger.info("‚úÖ –°–∏–≥–Ω–∞–ª–æ–≤ DOT –∏ –¥—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        # –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        duplicate_signals_query = """
        SELECT
            symbol,
            signal_type,
            strength,
            confidence,
            COUNT(*) as count,
            MIN(created_at) as first_seen,
            MAX(created_at) as last_seen
        FROM signals
        WHERE created_at > NOW() - INTERVAL '24 hours'
        GROUP BY symbol, signal_type, strength, confidence
        HAVING COUNT(*) > 1
        ORDER BY count DESC
        """

        duplicate_signals = await AsyncPGPool.fetch(duplicate_signals_query)

        if duplicate_signals:
            logger.info(
                f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(duplicate_signals)} —Ç–∏–ø–æ–≤ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤:"
            )
            for signal in duplicate_signals:
                logger.info(
                    f"  {signal['symbol']}: {signal['signal_type']} strength={signal['strength']} confidence={signal['confidence']} (count={signal['count']})"
                )
        else:
            logger.info("‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")

    finally:
        await AsyncPGPool.close_pool()


if __name__ == "__main__":
    asyncio.run(check_dot_positions())
