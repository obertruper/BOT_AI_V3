#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è BOT_AI_V3
–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫–∞–∫–æ–π –∫–æ–¥ —Ä–µ–∞–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
"""
import ast
import json
import sqlite3
import sys
import threading
import time
from collections import defaultdict, deque
from dataclasses import asdict, dataclass
from datetime import datetime, timedelta
from pathlib import Path
from typing import Any

import coverage

PROJECT_ROOT = Path(__file__).parent.parent
sys.path.insert(0, str(PROJECT_ROOT))


@dataclass
class ExecutionTrace:
    """–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏"""

    function_name: str
    file_path: str
    line_number: int
    timestamp: datetime
    execution_time: float
    call_count: int
    arguments: dict[str, Any]
    return_value_type: str
    caller_function: str | None = None


@dataclass
class CoverageMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞"""

    total_functions: int
    executed_functions: int
    coverage_percentage: float
    uncovered_functions: list[str]
    hot_functions: list[str]  # –ß–∞—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º—ã–µ
    cold_functions: list[str]  # –†–µ–¥–∫–æ –≤—ã–∑—ã–≤–∞–µ–º—ã–µ
    performance_data: dict[str, float]
    last_updated: datetime


class RealTimeCoverageTracer:
    """–¢—Ä–∞—Å—Å–∏—Ä–æ–≤—â–∏–∫ –ø–æ–∫—Ä—ã—Ç–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""

    def __init__(self, project_root: Path):
        self.project_root = project_root
        self.execution_traces: dict[str, ExecutionTrace] = {}
        self.function_call_counts: dict[str, int] = defaultdict(int)
        self.function_timings: dict[str, deque] = defaultdict(lambda: deque(maxlen=100))
        self.last_execution_times: dict[str, datetime] = {}

        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–æ–∫
        self.db_path = project_root / "analysis_results" / "coverage_trace.db"
        self.db_path.parent.mkdir(exist_ok=True)
        self._init_database()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.is_monitoring = False
        self.monitoring_thread = None
        self.coverage_obj = None

    def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–æ–∫"""
        with sqlite3.connect(self.db_path) as conn:
            conn.execute(
                """
                CREATE TABLE IF NOT EXISTS execution_traces (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    function_name TEXT NOT NULL,
                    file_path TEXT NOT NULL,
                    line_number INTEGER,
                    timestamp TEXT NOT NULL,
                    execution_time REAL,
                    call_count INTEGER,
                    arguments TEXT,
                    return_value_type TEXT,
                    caller_function TEXT
                )
            """
            )

            conn.execute(
                """
                CREATE TABLE IF NOT EXISTS coverage_snapshots (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    timestamp TEXT NOT NULL,
                    total_functions INTEGER,
                    executed_functions INTEGER,
                    coverage_percentage REAL,
                    uncovered_functions TEXT,
                    hot_functions TEXT,
                    cold_functions TEXT,
                    performance_data TEXT
                )
            """
            )

            conn.execute(
                """
                CREATE INDEX IF NOT EXISTS idx_function_name 
                ON execution_traces(function_name)
            """
            )

            conn.execute(
                """
                CREATE INDEX IF NOT EXISTS idx_timestamp 
                ON execution_traces(timestamp)
            """
            )

    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∫—Ä—ã—Ç–∏—è"""
        if self.is_monitoring:
            print("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        print("üîç –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∫—Ä—ã—Ç–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º coverage.py
        self.coverage_obj = coverage.Coverage(
            source=[str(self.project_root)],
            omit=["*/tests/*", "*/test_*", "*/__pycache__/*", "*/venv/*", "*/env/*"],
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤—â–∏–∫
        sys.settrace(self._trace_function_calls)

        # –ó–∞–ø—É—Å–∫–∞–µ–º coverage
        self.coverage_obj.start()

        self.is_monitoring = True

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.monitoring_thread = threading.Thread(target=self._monitoring_loop, daemon=True)
        self.monitoring_thread.start()

        print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∫—Ä—ã—Ç–∏—è –∑–∞–ø—É—â–µ–Ω")

    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∫—Ä—ã—Ç–∏—è"""
        if not self.is_monitoring:
            print("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return

        print("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∫—Ä—ã—Ç–∏—è...")

        self.is_monitoring = False

        # –û—Ç–∫–ª—é—á–∞–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤—â–∏–∫
        sys.settrace(None)

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º coverage
        if self.coverage_obj:
            self.coverage_obj.stop()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self._save_coverage_snapshot()

        print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∫—Ä—ã—Ç–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def _trace_function_calls(self, frame, event, arg):
        """–¢—Ä–∞—Å—Å–∏—Ä—É–µ—Ç –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π"""
        if event != "call":
            return self._trace_function_calls

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ—É–Ω–∫—Ü–∏–∏
        code = frame.f_code
        filename = code.co_filename

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
        if not str(filename).startswith(str(self.project_root)):
            return self._trace_function_calls

        # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
        if any(exclude in filename for exclude in ["__pycache__", "site-packages", "venv"]):
            return self._trace_function_calls

        function_name = code.co_name
        line_number = frame.f_lineno
        file_path = Path(filename).relative_to(self.project_root)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–∑—ã–≤–∞—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
        caller_function = None
        if frame.f_back:
            caller_code = frame.f_back.f_code
            caller_function = f"{caller_code.co_filename}:{caller_code.co_name}"

        # –°–æ–∑–¥–∞—ë–º –∫–ª—é—á —Ñ—É–Ω–∫—Ü–∏–∏
        func_key = f"{file_path}:{function_name}:{line_number}"

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫–∏
        self.function_call_counts[func_key] += 1
        self.last_execution_times[func_key] = datetime.now()

        # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
        start_time = time.perf_counter()

        def trace_return(frame, event, arg):
            if event == "return":
                execution_time = time.perf_counter() - start_time
                self.function_timings[func_key].append(execution_time)

                # –°–æ–∑–¥–∞—ë–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
                    arguments = self._extract_function_arguments(frame)

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
                    return_type = type(arg).__name__ if arg is not None else "NoneType"

                    trace = ExecutionTrace(
                        function_name=function_name,
                        file_path=str(file_path),
                        line_number=line_number,
                        timestamp=datetime.now(),
                        execution_time=execution_time,
                        call_count=self.function_call_counts[func_key],
                        arguments=arguments,
                        return_value_type=return_type,
                        caller_function=caller_function,
                    )

                    self.execution_traces[func_key] = trace

                except Exception as e:
                    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ {func_key}: {e}")

            return None

        return trace_return

    def _extract_function_arguments(self, frame) -> dict[str, str]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏"""
        try:
            arguments = {}
            local_vars = frame.f_locals

            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã–µ —Ç–∏–ø—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            for name, value in local_vars.items():
                if name.startswith("_"):
                    continue

                try:
                    if isinstance(value, (str, int, float, bool, type(None))):
                        arguments[name] = str(value)
                    elif isinstance(value, (list, dict, tuple)):
                        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                        if len(str(value)) < 100:
                            arguments[name] = str(value)[:100]
                        else:
                            arguments[name] = f"<{type(value).__name__} size={len(value)}>"
                    else:
                        arguments[name] = f"<{type(value).__name__}>"
                except:
                    arguments[name] = "<unprintable>"

            return arguments

        except Exception:
            return {}

    def _monitoring_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.is_monitoring:
            try:
                time.sleep(30)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

                if self.is_monitoring:
                    self._save_traces_to_db()
                    self._save_coverage_snapshot()

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

    def _save_traces_to_db(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        if not self.execution_traces:
            return

        try:
            with sqlite3.connect(self.db_path) as conn:
                for trace in self.execution_traces.values():
                    conn.execute(
                        """
                        INSERT OR REPLACE INTO execution_traces
                        (function_name, file_path, line_number, timestamp, 
                         execution_time, call_count, arguments, return_value_type, caller_function)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                    """,
                        (
                            trace.function_name,
                            trace.file_path,
                            trace.line_number,
                            trace.timestamp.isoformat(),
                            trace.execution_time,
                            trace.call_count,
                            json.dumps(trace.arguments),
                            trace.return_value_type,
                            trace.caller_function,
                        ),
                    )

                conn.commit()

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–æ–∫: {e}")

    def _save_coverage_snapshot(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–Ω–∏–º–æ–∫ –ø–æ–∫—Ä—ã—Ç–∏—è"""
        try:
            metrics = self.get_current_metrics()

            with sqlite3.connect(self.db_path) as conn:
                conn.execute(
                    """
                    INSERT INTO coverage_snapshots
                    (timestamp, total_functions, executed_functions, coverage_percentage,
                     uncovered_functions, hot_functions, cold_functions, performance_data)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                """,
                    (
                        metrics.last_updated.isoformat(),
                        metrics.total_functions,
                        metrics.executed_functions,
                        metrics.coverage_percentage,
                        json.dumps(metrics.uncovered_functions),
                        json.dumps(metrics.hot_functions),
                        json.dumps(metrics.cold_functions),
                        json.dumps(metrics.performance_data),
                    ),
                )

                conn.commit()

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–Ω–∏–º–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è: {e}")

    def get_current_metrics(self) -> CoverageMetrics:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–∫—Ä—ã—Ç–∏—è"""
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ
        total_functions = self._count_total_functions()
        executed_functions = len(self.execution_traces)

        coverage_percentage = (
            (executed_functions / total_functions * 100) if total_functions > 0 else 0
        )

        # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–ø–æ–∫—Ä—ã—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        all_function_keys = self._get_all_function_keys()
        executed_keys = set(self.execution_traces.keys())
        uncovered_functions = list(all_function_keys - executed_keys)

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–æ—Ä—è—á–∏–µ –∏ —Ö–æ–ª–æ–¥–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        hot_functions = self._find_hot_functions()
        cold_functions = self._find_cold_functions()

        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance_data = self._calculate_performance_data()

        return CoverageMetrics(
            total_functions=total_functions,
            executed_functions=executed_functions,
            coverage_percentage=coverage_percentage,
            uncovered_functions=uncovered_functions,
            hot_functions=hot_functions,
            cold_functions=cold_functions,
            performance_data=performance_data,
            last_updated=datetime.now(),
        )

    def _count_total_functions(self) -> int:
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π –≤ –ø—Ä–æ–µ–∫—Ç–µ"""
        total = 0

        for py_file in self.project_root.rglob("*.py"):
            if any(exclude in str(py_file) for exclude in ["__pycache__", "venv", "test"]):
                continue

            try:
                with open(py_file, encoding="utf-8") as f:
                    tree = ast.parse(f.read())

                for node in ast.walk(tree):
                    if isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef)):
                        if not node.name.startswith("_"):  # –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ
                            total += 1

            except Exception:
                continue

        return total

    def _get_all_function_keys(self) -> set[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–ª—é—á–∏ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ –ø—Ä–æ–µ–∫—Ç–µ"""
        function_keys = set()

        for py_file in self.project_root.rglob("*.py"):
            if any(exclude in str(py_file) for exclude in ["__pycache__", "venv", "test"]):
                continue

            try:
                rel_path = py_file.relative_to(self.project_root)

                with open(py_file, encoding="utf-8") as f:
                    tree = ast.parse(f.read())

                for node in ast.walk(tree):
                    if isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef)):
                        if not node.name.startswith("_"):
                            func_key = f"{rel_path}:{node.name}:{node.lineno}"
                            function_keys.add(func_key)

            except Exception:
                continue

        return function_keys

    def _find_hot_functions(self, min_calls: int = 10) -> list[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç —á–∞—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
        hot_functions = []

        for func_key, call_count in self.function_call_counts.items():
            if call_count >= min_calls:
                hot_functions.append(f"{func_key} ({call_count} calls)")

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤—ã–∑–æ–≤–æ–≤
        hot_functions.sort(key=lambda x: int(x.split("(")[1].split(" ")[0]), reverse=True)

        return hot_functions[:20]  # –¢–æ–ø 20

    def _find_cold_functions(self, max_age_hours: int = 24) -> list[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Ä–µ–¥–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
        cold_functions = []
        threshold = datetime.now() - timedelta(hours=max_age_hours)

        for func_key, last_execution in self.last_execution_times.items():
            if last_execution < threshold:
                call_count = self.function_call_counts.get(func_key, 0)
                cold_functions.append(
                    f"{func_key} (last: {last_execution.strftime('%Y-%m-%d %H:%M')}, calls: {call_count})"
                )

        return cold_functions

    def _calculate_performance_data(self) -> dict[str, float]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        performance_data = {}

        for func_key, timings in self.function_timings.items():
            if timings:
                performance_data[func_key] = {
                    "avg_time": sum(timings) / len(timings),
                    "max_time": max(timings),
                    "min_time": min(timings),
                    "total_time": sum(timings),
                    "call_count": len(timings),
                }

        return performance_data

    def generate_report(self) -> dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏"""
        metrics = self.get_current_metrics()

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        trends = self._analyze_trends()

        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
        issues = self._identify_issues()

        report = {
            "timestamp": datetime.now().isoformat(),
            "current_metrics": asdict(metrics),
            "trends": trends,
            "issues": issues,
            "recommendations": self._generate_recommendations(metrics, issues),
            "top_performers": self._find_top_performers(),
            "bottlenecks": self._find_bottlenecks(),
        }

        return report

    def _analyze_trends(self) -> dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –ø–æ–∫—Ä—ã—Ç–∏—è"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.execute(
                    """
                    SELECT timestamp, coverage_percentage 
                    FROM coverage_snapshots 
                    ORDER BY timestamp DESC 
                    LIMIT 100
                """
                )

                snapshots = cursor.fetchall()

            if len(snapshots) < 2:
                return {"trend": "insufficient_data"}

            # –í—ã—á–∏—Å–ª—è–µ–º —Ç—Ä–µ–Ω–¥
            recent_coverage = snapshots[0][1]
            older_coverage = snapshots[-1][1]
            trend = recent_coverage - older_coverage

            return {
                "trend_direction": (
                    "improving" if trend > 0 else "declining" if trend < 0 else "stable"
                ),
                "trend_value": trend,
                "recent_coverage": recent_coverage,
                "data_points": len(snapshots),
            }

        except Exception as e:
            return {"error": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {e}"}

    def _identify_issues(self) -> list[dict[str, Any]]:
        """–í—ã—è–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–¥–µ"""
        issues = []

        # –§—É–Ω–∫—Ü–∏–∏ —Å –¥–æ–ª–≥–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        for func_key, timings in self.function_timings.items():
            if timings:
                avg_time = sum(timings) / len(timings)
                if avg_time > 1.0:  # –ú–µ–¥–ª–µ–Ω–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã
                    issues.append(
                        {
                            "type": "performance",
                            "severity": "high" if avg_time > 5.0 else "medium",
                            "function": func_key,
                            "description": f"–ú–µ–¥–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {avg_time:.3f}—Å –≤ —Å—Ä–µ–¥–Ω–µ–º",
                            "avg_time": avg_time,
                        }
                    )

        # –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        metrics = self.get_current_metrics()
        if metrics.uncovered_functions:
            issues.append(
                {
                    "type": "coverage",
                    "severity": "medium",
                    "description": f"–ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {len(metrics.uncovered_functions)}",
                    "count": len(metrics.uncovered_functions),
                }
            )

        # –ì–æ—Ä—è—á–∏–µ —Ç–æ—á–∫–∏ (—Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –≤—ã–∑–æ–≤—ã)
        for func_key, call_count in self.function_call_counts.items():
            if call_count > 1000:  # –ë–æ–ª–µ–µ 1000 –≤—ã–∑–æ–≤–æ–≤
                issues.append(
                    {
                        "type": "hotspot",
                        "severity": "low",
                        "function": func_key,
                        "description": f"–ì–æ—Ä—è—á–∞—è —Ç–æ—á–∫–∞: {call_count} –≤—ã–∑–æ–≤–æ–≤",
                        "call_count": call_count,
                    }
                )

        return issues

    def _generate_recommendations(
        self, metrics: CoverageMetrics, issues: list[dict[str, Any]]
    ) -> list[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"""
        recommendations = []

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–∫—Ä—ã—Ç–∏—é
        if metrics.coverage_percentage < 50:
            recommendations.append("üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã.")
        elif metrics.coverage_percentage < 80:
            recommendations.append(
                "üü° –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞ –Ω–∏–∂–µ —Ü–µ–ª–µ–≤–æ–≥–æ (80%). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã."
            )

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        perf_issues = [i for i in issues if i["type"] == "performance" and i["severity"] == "high"]
        if perf_issues:
            recommendations.append(
                f"‚ö° –ù–∞–π–¥–µ–Ω–æ {len(perf_issues)} –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π. –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è."
            )

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–º—É –∫–æ–¥—É
        if len(metrics.uncovered_functions) > 50:
            recommendations.append(
                "üóëÔ∏è –ú–Ω–æ–≥–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è."
            )

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≥–æ—Ä—è—á–∏–º —Ç–æ—á–∫–∞–º
        hotspot_issues = [i for i in issues if i["type"] == "hotspot"]
        if hotspot_issues:
            recommendations.append(
                f"üî• –ù–∞–π–¥–µ–Ω–æ {len(hotspot_issues)} –≥–æ—Ä—è—á–∏—Ö —Ç–æ—á–µ–∫. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é."
            )

        return recommendations

    def _find_top_performers(self) -> list[dict[str, Any]]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Å–∞–º—ã–µ –±—ã—Å—Ç—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
        performers = []

        for func_key, timings in self.function_timings.items():
            if timings and len(timings) > 10:  # –ú–∏–Ω–∏–º—É–º 10 –≤—ã–∑–æ–≤–æ–≤
                avg_time = sum(timings) / len(timings)
                call_count = self.function_call_counts.get(func_key, 0)

                performers.append(
                    {
                        "function": func_key,
                        "avg_time": avg_time,
                        "call_count": call_count,
                        "efficiency_score": call_count / (avg_time + 0.001),  # –í—ã–∑–æ–≤—ã/–≤—Ä–µ–º—è
                    }
                )

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        performers.sort(key=lambda x: x["efficiency_score"], reverse=True)

        return performers[:10]  # –¢–æ–ø 10

    def _find_bottlenecks(self) -> list[dict[str, Any]]:
        """–ù–∞—Ö–æ–¥–∏—Ç —É–∑–∫–∏–µ –º–µ—Å—Ç–∞"""
        bottlenecks = []

        for func_key, timings in self.function_timings.items():
            if timings:
                total_time = sum(timings)
                call_count = self.function_call_counts.get(func_key, 0)
                avg_time = total_time / len(timings)

                # –§—É–Ω–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–Ω–∏–º–∞—é—Ç –º–Ω–æ–≥–æ –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                if total_time > 10.0:  # –ë–æ–ª–µ–µ 10 —Å–µ–∫—É–Ω–¥ –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                    bottlenecks.append(
                        {
                            "function": func_key,
                            "total_time": total_time,
                            "avg_time": avg_time,
                            "call_count": call_count,
                            "impact_score": total_time,  # –í–ª–∏—è–Ω–∏–µ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                        }
                    )

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–ª–∏—è–Ω–∏—é
        bottlenecks.sort(key=lambda x: x["impact_score"], reverse=True)

        return bottlenecks[:10]  # –¢–æ–ø 10


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    project_root = Path(__file__).parent.parent
    tracer = RealTimeCoverageTracer(project_root)

    print("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ BOT_AI_V3")
    print("=" * 60)

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        tracer.start_monitoring()

        print("üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        print("üìà –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥...")

        # –ñ–¥—ë–º —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        while True:
            time.sleep(10)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
            metrics = tracer.get_current_metrics()
            print(
                f"\rüìä –ü–æ–∫—Ä—ã—Ç–∏–µ: {metrics.coverage_percentage:.1f}% "
                f"({metrics.executed_functions}/{metrics.total_functions}), "
                f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–æ–∫: {len(tracer.execution_traces)}",
                end="",
            )

    except KeyboardInterrupt:
        print("\n\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")

    finally:
        tracer.stop_monitoring()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç
        print("üìÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç...")
        report = tracer.generate_report()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
        output_file = project_root / "analysis_results" / "coverage_monitoring_report.json"
        with open(output_file, "w", encoding="utf-8") as f:
            json.dump(report, f, indent=2, ensure_ascii=False, default=str)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
        print("\nüìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–Å–¢:")
        print(f"  –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞: {report['current_metrics']['coverage_percentage']:.1f}%")
        print(f"  –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {report['current_metrics']['executed_functions']}")
        print(f"  –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {report['current_metrics']['total_functions']}")
        print(f"  –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {len(report['current_metrics']['uncovered_functions'])}")

        if report["issues"]:
            print(f"  ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(report['issues'])}")

        if report["recommendations"]:
            print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            for rec in report["recommendations"]:
                print(f"    {rec}")

        print(f"\nüìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç: {output_file}")
        print(f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {tracer.db_path}")


if __name__ == "__main__":
    main()
