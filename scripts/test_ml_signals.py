#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ML —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from core.config.config_manager import ConfigManager
from core.logger import setup_logger
from ml.ml_manager import MLManager
from ml.ml_signal_processor import MLSignalProcessor
from ml.signal_scheduler import SignalScheduler

logger = setup_logger(__name__)


async def test_signal_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        config_manager = ConfigManager()
        config = config_manager.get_config()

        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")

        # ML Manager
        ml_manager = MLManager(config)
        await ml_manager.initialize()
        logger.info("‚úÖ ML Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # Signal Processor
        signal_processor = MLSignalProcessor(
            ml_manager=ml_manager, config=config, config_manager=config_manager
        )
        await signal_processor.initialize()
        logger.info("‚úÖ Signal Processor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        symbol = "BTCUSDT"
        exchange = "bybit"

        logger.info(f"üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}...")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
        signal = await signal_processor.process_realtime_signal(
            symbol=symbol, exchange=exchange
        )

        if signal:
            logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω {signal.signal_type.value} —Å–∏–≥–Ω–∞–ª:")
            logger.info(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.2%}")
            logger.info(f"   –°–∏–ª–∞: {signal.strength:.2f}")
            logger.info(f"   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${signal.suggested_price:.2f}")
            logger.info(f"   Stop Loss: ${signal.suggested_stop_loss:.2f}")
            logger.info(f"   Take Profit: ${signal.suggested_take_profit:.2f}")
        else:
            logger.info("‚ùå –°–∏–≥–Ω–∞–ª –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (–Ω–µ—Ç —á–µ—Ç–∫–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è)")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics = await signal_processor.get_metrics()
        logger.info("\nüìà –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞:")
        logger.info(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {metrics['total_processed']}")
        logger.info(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {metrics['success_rate']:.1%}")
        logger.info(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {metrics['save_rate']:.1%}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()


async def test_scheduler():
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    try:
        config_manager = ConfigManager()

        logger.info("üöÄ –¢–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤...")

        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler = SignalScheduler(config_manager)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        await scheduler.initialize()
        logger.info("‚úÖ Scheduler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
        status = await scheduler.get_status()
        logger.info("\nüìä –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:")
        logger.info(f"   –í–∫–ª—é—á–µ–Ω: {status['enabled']}")
        logger.info(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª: {status['interval_seconds']}—Å")
        logger.info(f"   –°–∏–º–≤–æ–ª–æ–≤: {len(status['symbols'])}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞ 2 –º–∏–Ω—É—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∞
        logger.info("\nüîÑ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞ 2 –º–∏–Ω—É—Ç—ã...")
        await scheduler.start()

        # –ñ–¥–µ–º 2 –º–∏–Ω—É—Ç—ã
        await asyncio.sleep(120)

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        await scheduler.stop()
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        final_status = await scheduler.get_status()
        logger.info("\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        for symbol, data in final_status["symbols"].items():
            logger.info(
                f"   {symbol}: –∞–∫—Ç–∏–≤–µ–Ω={data['active']}, –æ—à–∏–±–æ–∫={data['errors']}"
            )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("=" * 60)
    logger.info("ü§ñ –¢–µ—Å—Ç ML Signal Generation System")
    logger.info("=" * 60)

    # –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    logger.info("\nüìå –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞")
    await test_signal_generation()

    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    await asyncio.sleep(5)

    # –¢–µ—Å—Ç 2: –†–∞–±–æ—Ç–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    logger.info("\nüìå –¢–µ—Å—Ç 2: –†–∞–±–æ—Ç–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
    await test_scheduler()

    logger.info("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã")


if __name__ == "__main__":
    asyncio.run(main())
