#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ real-time –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ML —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import asyncio
import sys
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.insert(0, str(Path(__file__).parent.parent))

from core.config.config_manager import ConfigManager
from core.logger import setup_logger
from data.data_loader import DataLoader
from ml.ml_manager import MLManager
from ml.ml_signal_processor import MLSignalProcessor
from ml.signal_scheduler import SignalScheduler

logger = setup_logger(__name__)


async def test_data_loader():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("=" * 50)
    logger.info("–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ DataLoader")
    logger.info("=" * 50)

    loader = DataLoader()

    try:
        await loader.initialize()

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
        symbols = ["BTCUSDT", "ETHUSDT"]
        results = await loader.update_latest_data(symbols=symbols)

        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {results}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è ML
        df = await loader.get_data_for_ml("BTCUSDT", limit=300)
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π –¥–ª—è BTCUSDT")
        logger.info(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞: {df.index[-1]}")
        logger.info(f"   –¶–µ–Ω–∞ close: {df['close'].iloc[-1]}")

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ DataLoader: {e}")
        return False
    finally:
        await loader.cleanup()


async def test_indicator_calculation():
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    logger.info("=" * 50)
    logger.info("–¢–µ—Å—Ç 2: –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ real-time")
    logger.info("=" * 50)

    from ml.realtime_indicator_calculator import RealTimeIndicatorCalculator

    loader = DataLoader()
    calculator = RealTimeIndicatorCalculator()

    try:
        await loader.initialize()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = await loader.get_data_for_ml("BTCUSDT", limit=300)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        indicators = await calculator.calculate_indicators(
            symbol="BTCUSDT",
            ohlcv_df=df,
            save_to_db=False,  # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–µ—Å—Ç–µ
        )

        logger.info("‚úÖ –†–∞—Å—Å—á–∏—Ç–∞–Ω–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:")
        logger.info(f"   –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö: {len(indicators.get('technical_indicators', {}))}")
        logger.info(f"   ML –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(indicators.get('ml_features', {}))}")
        logger.info(f"   –ú–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {len(indicators.get('microstructure_features', {}))}")

        # –ü—Ä–∏–º–µ—Ä—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        tech = indicators.get("technical_indicators", {})
        if tech:
            logger.info("   –ü—Ä–∏–º–µ—Ä—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:")
            for key in list(tech.keys())[:5]:
                logger.info(f"     {key}: {tech[key]:.4f}")

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
        return False
    finally:
        await loader.cleanup()


async def test_ml_prediction():
    """–¢–µ—Å—Ç ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
    logger.info("=" * 50)
    logger.info("–¢–µ—Å—Ç 3: ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")
    logger.info("=" * 50)

    config_manager = ConfigManager()
    config = config_manager.get_config()

    ml_manager = MLManager(config)

    try:
        await ml_manager.initialize()

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        import numpy as np

        # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ [batch=1, seq_len=96, features=240]
        test_input = np.random.randn(1, 96, 240).astype(np.float32)

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        prediction = await ml_manager.predict(test_input)

        logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:")
        logger.info(f"   –§–æ—Ä–º–∞ –≤—ã—Ö–æ–¥–∞: {prediction.shape}")
        logger.info(f"   –ü—Ä–∏–º–µ—Ä –≤—ã—Ö–æ–¥–æ–≤: {prediction[0, :5]}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–∞–ø—Ç–µ—Ä
        from ml.model_adapter import ModelOutputAdapter

        adapter = ModelOutputAdapter()
        adapted = adapter.adapt_model_outputs(prediction, symbols=["BTCUSDT"])

        btc_pred = adapted.get("BTCUSDT", {})
        logger.info("\n   –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è BTCUSDT:")
        logger.info(f"   –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞: {btc_pred.get('signal_type')}")
        logger.info(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {btc_pred.get('confidence', 0):.2%}")
        logger.info(f"   –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {btc_pred.get('signal_strength', 0):.2f}")
        logger.info(f"   –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {btc_pred.get('risk_level')}")

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
        return False
    finally:
        await ml_manager.cleanup()


async def test_signal_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞"""
    logger.info("=" * 50)
    logger.info("–¢–µ—Å—Ç 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞")
    logger.info("=" * 50)

    config_manager = ConfigManager()
    config = config_manager.get_config()

    ml_manager = MLManager(config)
    signal_processor = MLSignalProcessor(ml_manager, config)

    try:
        await ml_manager.initialize()
        await signal_processor.initialize()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
        signal = await signal_processor.process_realtime_signal(symbol="BTCUSDT", exchange="bybit")

        if signal:
            logger.info("‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–∏–≥–Ω–∞–ª:")
            logger.info(f"   –°–∏–º–≤–æ–ª: {signal.symbol}")
            logger.info(f"   –¢–∏–ø: {signal.signal_type.value}")
            logger.info(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.2f}")
            logger.info(f"   –°–∏–ª–∞: {signal.strength:.2f}")
            logger.info(f"   Stop Loss: {signal.stop_loss}")
            logger.info(f"   Take Profit: {signal.take_profit}")
        else:
            logger.warning("‚ö†Ô∏è –°–∏–≥–Ω–∞–ª –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, —Å–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª)")

        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics = await signal_processor.get_metrics()
        logger.info("\nüìä –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞:")
        logger.info(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {metrics.get('total_processed')}")
        logger.info(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {metrics.get('success_rate', 0):.1%}")

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
        return False
    finally:
        await signal_processor.shutdown()
        await ml_manager.cleanup()


async def test_signal_scheduler():
    """–¢–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    logger.info("=" * 50)
    logger.info("–¢–µ—Å—Ç 5: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ (10 —Å–µ–∫—É–Ω–¥)")
    logger.info("=" * 50)

    scheduler = SignalScheduler()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Ç–µ—Å—Ç–∞
    scheduler.interval_seconds = 5
    scheduler.symbols = ["BTCUSDT"]  # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –¥–ª—è —Ç–µ—Å—Ç–∞

    try:
        await scheduler.initialize()
        await scheduler.start()

        logger.info("‚è±Ô∏è –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤...")
        await asyncio.sleep(10)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
        status = await scheduler.get_status()
        logger.info("\nüìä –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:")
        logger.info(f"   –ó–∞–ø—É—â–µ–Ω: {status['running']}")

        for symbol, data in status["symbols"].items():
            logger.info(f"   {symbol}:")
            logger.info(f"     –ê–∫—Ç–∏–≤–µ–Ω: {data['active']}")
            logger.info(f"     –û—à–∏–±–æ–∫: {data['errors']}")

            last_signal = data.get("last_signal", {})
            if last_signal:
                logger.info(f"     –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª: {last_signal.get('timestamp')}")

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
        return False
    finally:
        await scheduler.stop()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ real-time ML —Å–∏—Å—Ç–µ–º—ã")
    logger.info(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now()}")

    tests = [
        ("DataLoader", test_data_loader),
        ("Indicator Calculator", test_indicator_calculation),
        ("ML Prediction", test_ml_prediction),
        ("Signal Generation", test_signal_generation),
        ("Signal Scheduler", test_signal_scheduler),
    ]

    results = []

    for test_name, test_func in tests:
        try:
            logger.info(f"\nüîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
            success = await test_func()
            results.append((test_name, success))
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info("\n" + "=" * 50)
    logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    logger.info("=" * 50)

    passed = sum(1 for _, success in results if success)
    total = len(results)

    for test_name, success in results:
        status = "‚úÖ PASSED" if success else "‚ùå FAILED"
        logger.info(f"{test_name}: {status}")

    logger.info(f"\n–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
    logger.info(f"–£—Å–ø–µ—à–Ω–æ: {passed}")
    logger.info(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}")
    logger.info(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed / total * 100:.1f}%")

    return passed == total


if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        logger.info("\n‚ö†Ô∏è –¢–µ—Å—Ç—ã –ø—Ä–µ—Ä–≤–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        logger.error(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
