#!/usr/bin/env python3
"""–ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ BOT Trading v2 –≤ v3."""

import os
from datetime import datetime
from pathlib import Path

import yaml


def migrate_config():
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ v2 –≤ v3."""

    print("üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ v2 –≤ v3...")

    # –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ v2
    v2_config_path = Path("BOT_AI_V2/BOT_Trading/BOT_Trading/config.yaml")

    if not v2_config_path.exists():
        print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è v2 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print(f"–û–∂–∏–¥–∞–ª—Å—è —Ñ–∞–π–ª: {v2_config_path}")
        return False

    # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é v2
    with open(v2_config_path) as f:
        v2_config = yaml.safe_load(f)

    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è v2 –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

    # 1. –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª
    env_path = Path(".env")
    env_lines = []

    if env_path.exists():
        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .env
        with open(env_path) as f:
            env_lines = f.readlines()

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    def update_env_var(name: str, value: str):
        for i, line in enumerate(env_lines):
            if line.startswith(f"{name}="):
                env_lines[i] = f"{name}={value}\n"
                return
        env_lines.append(f"{name}={value}\n")

    # –ú–∏–≥—Ä–∏—Ä—É–µ–º API –∫–ª—é—á–∏
    if "BYBIT_API_KEY" in v2_config:
        update_env_var("BYBIT_API_KEY", v2_config["BYBIT_API_KEY"])
        update_env_var("BYBIT_API_SECRET", v2_config["BYBIT_API_SECRET"])
        print("‚úÖ API –∫–ª—é—á–∏ Bybit –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    # Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    if "telegram_bot_token" in v2_config:
        update_env_var("TELEGRAM_BOT_TOKEN", v2_config["telegram_bot_token"])
        update_env_var("TELEGRAM_CHAT_ID", v2_config.get("telegram_chat_id", ""))
        print("‚úÖ Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞")

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫–∞
    update_env_var("DEFAULT_LEVERAGE", str(v2_config.get("leverage", 5)))
    update_env_var("MAX_POSITION_SIZE", str(v2_config.get("position_size", 100)))
    update_env_var("RISK_LIMIT_PERCENTAGE", str(v2_config.get("risk_per_trade", 2)))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º .env
    with open(env_path, "w") as f:
        f.writelines(env_lines)

    print("‚úÖ –§–∞–π–ª .env –æ–±–Ω–æ–≤–ª–µ–Ω")

    # 2. –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç—Ä–µ–π–¥–µ—Ä–∞ –¥–ª—è v3
    trader_config = {
        "trader_id": "main_trader",
        "name": "Main Trader (migrated from v2)",
        "exchange": "bybit",
        "trading_pairs": v2_config.get("symbols", ["BTCUSDT"]),
        "strategies": [],
        "risk_management": {
            "max_position_size": v2_config.get("position_size", 100),
            "max_daily_loss": v2_config.get("max_daily_loss", 500),
            "max_open_positions": v2_config.get("max_positions", 3),
            "leverage": v2_config.get("leverage", 5),
            "position_sizing": {
                "type": "fixed",
                "value": v2_config.get("position_size", 100),
            },
        },
        "order_management": {
            "default_order_type": "market",
            "slippage_tolerance": 0.001,
            "retry_attempts": 3,
            "retry_delay": 1,
        },
    }

    # –î–æ–±–∞–≤–ª—è–µ–º ML —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –µ—Å–ª–∏ –±—ã–ª–∏ ML –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ v2
    if "ml_model" in v2_config or "ml_settings" in v2_config:
        ml_strategy = {
            "name": "ml_strategy",
            "type": "ml_strategy.patchtst_strategy.PatchTSTStrategy",
            "enabled": True,
            "params": {
                "model_path": "models/saved/best_model_unified.pth",
                "lookback_window": 96,
                "prediction_horizon": 20,
                "confidence_threshold": 0.6,
                "use_xgboost_fallback": True,  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å v2
                "xgboost_model_path": "models/xgboost/",
            },
        }
        trader_config["strategies"].append(ml_strategy)
        print("‚úÖ ML —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π XGBoost")

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã SL/TP –∏–∑ v2
    if "enhanced_sl_tp" in v2_config:
        sl_tp = v2_config["enhanced_sl_tp"]
        trader_config["risk_management"]["stop_loss"] = {
            "enabled": sl_tp.get("enabled", True),
            "type": "trailing" if sl_tp.get("trailing_stop", {}).get("enabled") else "fixed",
            "value": sl_tp.get("stop_loss_percent", 2.0),
            "trailing_distance": sl_tp.get("trailing_stop", {}).get("callback_rate", 1.0),
        }

        trader_config["risk_management"]["take_profit"] = {
            "enabled": sl_tp.get("enabled", True),
            "type": "partial" if sl_tp.get("partial_take_profit", {}).get("enabled") else "fixed",
            "levels": [],
        }

        # –ú–∏–≥—Ä–∏—Ä—É–µ–º partial take profit —É—Ä–æ–≤–Ω–∏
        if sl_tp.get("partial_take_profit", {}).get("enabled"):
            ptp = sl_tp["partial_take_profit"]
            for i, (level, percent) in enumerate(
                zip(
                    ptp.get("profit_levels", [2.0, 3.0, 5.0]),
                    ptp.get("close_percentages", [20, 30, 30]),
                    strict=False,
                )
            ):
                trader_config["risk_management"]["take_profit"]["levels"].append(
                    {"price_percent": level, "quantity_percent": percent}
                )

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ v2 config
    trader_config["metadata"] = {
        "migrated_from": "v2",
        "migration_date": datetime.now().isoformat(),
        "original_config": "BOT_AI_V2/BOT_Trading/BOT_Trading/config.yaml",
        "v2_settings": {
            "mode": v2_config.get("mode", "paper"),
            "base_currency": v2_config.get("base_currency", "USDT"),
            "fixed_usdt_balance": v2_config.get("fixed_usdt_balance", 500),
            "hedge_mode": v2_config.get("hedge_mode", True),
        },
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç—Ä–µ–π–¥–µ—Ä–∞
    trader_config_path = Path("config/traders/main_trader.yaml")
    trader_config_path.parent.mkdir(parents=True, exist_ok=True)

    with open(trader_config_path, "w") as f:
        yaml.dump(trader_config, f, default_flow_style=False, sort_keys=False)

    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–π–¥–µ—Ä–∞: {trader_config_path}")

    # 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    system_config_path = Path("config/system.yaml")
    if system_config_path.exists():
        with open(system_config_path) as f:
            system_config = yaml.safe_load(f)

        # –î–æ–±–∞–≤–ª—è–µ–º Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        system_config["telegram"] = {
            "enabled": v2_config.get("telegram_notifications", True),
            "bot_token": "${TELEGRAM_BOT_TOKEN}",
            "chat_id": "${TELEGRAM_CHAT_ID}",
            "notifications": {"trades": True, "errors": True, "daily_summary": True},
            "error_threshold": v2_config.get("error_monitor", {}).get("threshold", 10),
            "error_window": v2_config.get("error_monitor", {}).get("window_minutes", 60),
        }

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é
        system_config["bot_version"] = v2_config.get("bot_version", "3.0.0-alpha")

        with open(system_config_path, "w") as f:
            yaml.dump(system_config, f, default_flow_style=False, sort_keys=False)

        print("‚úÖ –°–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

    # 4. –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
    check_script = """#!/usr/bin/env python3
\"\"\"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.\"\"\"

import os
import yaml
from pathlib import Path

def check_migration():
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env
    if Path(".env").exists():
        print("‚úÖ .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω")

        required_vars = ["BYBIT_API_KEY", "TELEGRAM_BOT_TOKEN", "DEFAULT_LEVERAGE"]
        for var in required_vars:
            if os.getenv(var):
                print(f"  ‚úÖ {var} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                print(f"  ‚ö†Ô∏è  {var} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        print("‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç—Ä–µ–π–¥–µ—Ä–∞
    trader_config = Path("config/traders/main_trader.yaml")
    if trader_config.exists():
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç—Ä–µ–π–¥–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞")

        with open(trader_config) as f:
            config = yaml.safe_load(f)

        print(f"  - –¢—Ä–µ–π–¥–µ—Ä ID: {config['trader_id']}")
        print(f"  - –ë–∏—Ä–∂–∞: {config['exchange']}")
        print(f"  - –ü–∞—Ä—ã: {', '.join(config['trading_pairs'])}")
        print(f"  - –°—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(config['strategies'])}")
    else:
        print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç—Ä–µ–π–¥–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

if __name__ == "__main__":
    check_migration()
"""

    check_path = Path("scripts/check_migration.py")
    check_path.write_text(check_script)
    os.chmod(check_path, 0o755)
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: scripts/check_migration.py")

    print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–ª—é—á–∏")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É: python scripts/check_migration.py")
    print("3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ config/traders/main_trader.yaml")

    return True


if __name__ == "__main__":
    migrate_config()
