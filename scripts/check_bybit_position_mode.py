#!/usr/bin/env python3
"""–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∂–∏–º–∞ –ø–æ–∑–∏—Ü–∏–π Bybit"""

import asyncio
import os
import sys
from pathlib import Path

sys.path.append(str(Path(__file__).parent.parent))

from dotenv import load_dotenv

from core.logger import setup_logger
from exchanges.bybit.client import BybitClient

logger = setup_logger("check_position_mode")


async def check_and_set_position_mode():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º –ø–æ–∑–∏—Ü–∏–π Bybit"""
    load_dotenv()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    client = BybitClient(
        api_key=os.getenv("BYBIT_API_KEY"),
        api_secret=os.getenv("BYBIT_API_SECRET"),
        sandbox=False,
    )

    try:
        await client.connect()
        logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Bybit")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —á–µ—Ä–µ–∑ API
        response = await client._make_request(
            method="GET",
            endpoint="/v5/position/switch-mode",
            params={"category": "linear"},
            auth=True,
        )

        result = response.get("result", {})
        mode = result.get("mode", 0)

        logger.info(
            f"üìä –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –ø–æ–∑–∏—Ü–∏–π: {'Hedge' if mode == 3 else 'One-way'} (mode={mode})"
        )

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_hedge_mode = client.hedge_mode
        logger.info(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: hedge_mode={config_hedge_mode}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        actual_hedge = mode == 3
        if actual_hedge != config_hedge_mode:
            logger.warning(
                f"‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–µ–∂–∏–º–æ–≤! –ê–∫–∫–∞—É–Ω—Ç: {actual_hedge}, –ö–æ–Ω—Ñ–∏–≥: {config_hedge_mode}"
            )

            # –ü—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            logger.info(
                f"üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º: {'Hedge' if config_hedge_mode else 'One-way'}"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            positions = await client.get_positions()
            if positions:
                logger.error("‚ùå –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö!")
                logger.info("–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:")
                for pos in positions:
                    if pos.size != 0:
                        logger.info(f"  - {pos.symbol}: {pos.side} {pos.size}")
                return

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            symbols = ["BTCUSDT", "ETHUSDT", "BNBUSDT", "SOLUSDT", "XRPUSDT"]

            for symbol in symbols:
                try:
                    success = await client.set_position_mode(symbol, config_hedge_mode)
                    if success:
                        logger.info(f"‚úÖ {symbol}: —Ä–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    else:
                        logger.warning(f"‚ö†Ô∏è {symbol}: –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º")
                except Exception as e:
                    logger.error(f"‚ùå {symbol}: –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞: {e}")
        else:
            logger.info("‚úÖ –†–µ–∂–∏–º—ã –ø–æ–∑–∏—Ü–∏–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç!")

        # –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º positionIdx
        logger.info("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞...")

        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä
        from exchanges.base.order_types import OrderRequest, OrderSide, OrderType

        test_order = OrderRequest(
            symbol="XRPUSDT",
            side=OrderSide.BUY,
            order_type=OrderType.LIMIT,
            quantity=10.0,  # –ú–∏–Ω–∏–º—É–º –¥–ª—è XRP
            price=3.30,  # –ù–∏–∂–µ —Ä—ã–Ω–∫–∞
            client_order_id=f"test_position_mode_{int(asyncio.get_event_loop().time())}",
        )

        # –ü–æ–ª—É—á–∞–µ–º positionIdx
        position_idx = client._get_position_idx(test_order.side.value)
        logger.info(f"üìç Position index –¥–ª—è {test_order.side.value}: {position_idx}")

        # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä
        try:
            response = await client.place_order(test_order)
            if response.success:
                logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω: {response.order_id}")

                # –°—Ä–∞–∑—É –æ—Ç–º–µ–Ω—è–µ–º
                await asyncio.sleep(1)
                cancel_response = await client.cancel_order(
                    "XRPUSDT", response.order_id
                )
                if cancel_response.success:
                    logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {response.error}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ position idx - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
            if "position idx not match" in str(e):
                logger.info("\nüí° –†–ï–®–ï–ù–ò–ï:")
                logger.info("1. –ò–∑–º–µ–Ω–∏—Ç–µ hedge_mode –≤ config/system.yaml –Ω–∞ false")
                logger.info("2. –ò–õ–ò –≤–∫–ª—é—á–∏—Ç–µ Hedge Mode –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Bybit:")
                logger.info("   - –ó–∞–π–¥–∏—Ç–µ –Ω–∞ bybit.com")
                logger.info("   - Derivatives ‚Üí Settings ‚Üí Position Mode")
                logger.info("   - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ –Ω–∞ 'Hedge Mode'")
                logger.info("3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π")

    finally:
        await client.disconnect()
        logger.info("\nüîå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç Bybit")


if __name__ == "__main__":
    asyncio.run(check_and_set_position_mode())
