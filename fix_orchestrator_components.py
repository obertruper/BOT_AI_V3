#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ orchestrator
"""

import sys
from pathlib import Path

sys.path.append(str(Path(__file__).parent))


def patch_orchestrator():
    """–ü–∞—Ç—á–∏–º orchestrator –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""

    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    orchestrator_path = Path("core/system/orchestrator.py")
    content = orchestrator_path.read_text()

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç exchange registry
    if "from exchanges.registry import ExchangeRegistry" not in content:
        import_section = content.find("from core.traders.trader_manager import")
        if import_section > 0:
            content = (
                content[:import_section]
                + "from exchanges.registry import ExchangeRegistry\n"
                + content[import_section:]
            )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç trading engine
    if "from trading.engine import TradingEngine" not in content:
        import_section = content.find("from core.traders.trader_manager import")
        if import_section > 0:
            content = (
                content[:import_section]
                + "from trading.engine import TradingEngine\n"
                + content[import_section:]
            )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é exchange_registry –ø–æ—Å–ª–µ trader_factory
    init_section = """
    async def _initialize_exchange_registry(self) -> None:
        \"\"\"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–µ—Å—Ç—Ä–∞ –±–∏—Ä–∂\"\"\"
        try:
            from exchanges.registry import ExchangeRegistry
            self.exchange_registry = ExchangeRegistry(self.config_manager)
            await self.exchange_registry.initialize()
            self.active_components.add("exchange_registry")
            self.logger.info("‚úÖ Exchange Registry –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            self.failed_components.add("exchange_registry")
            self.logger.warning(f"‚ö†Ô∏è Exchange Registry –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {e}")

    async def _initialize_trading_engine(self) -> None:
        \"\"\"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞\"\"\"
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            if not self.exchange_registry:
                self.logger.warning("‚ö†Ô∏è Trading Engine —Ç—Ä–µ–±—É–µ—Ç Exchange Registry")
                return

            from trading.engine import TradingEngine
            self.trading_engine = TradingEngine(
                orchestrator=self,
                exchange_registry=self.exchange_registry,
                trader_manager=self.trader_manager,
                config_manager=self.config_manager
            )
            await self.trading_engine.initialize()
            self.active_components.add("trading_engine")
            self.logger.info("‚úÖ Trading Engine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            self.failed_components.add("trading_engine")
            self.logger.warning(f"‚ö†Ô∏è Trading Engine –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {e}")
"""

    # –ò—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    health_checker_pos = content.find("async def _initialize_health_checker")
    if health_checker_pos > 0:
        content = (
            content[:health_checker_pos]
            + init_section
            + "\n    "
            + content[health_checker_pos:]
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ trader_manager
    init_calls = """
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Exchange Registry
            await self._initialize_exchange_registry()

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Trading Engine
            await self._initialize_trading_engine()
"""

    trader_manager_init = "await self._initialize_trader_manager()"
    pos = content.find(trader_manager_init)
    if pos > 0:
        end_pos = pos + len(trader_manager_init)
        content = content[:end_pos] + "\n" + init_calls + content[end_pos:]

    # –î–æ–±–∞–≤–ª—è–µ–º trading_engine –≤ –∞—Ç—Ä–∏–±—É—Ç—ã –∫–ª–∞—Å—Å–∞
    if "self.trading_engine = None" not in content:
        attrs_section = content.find("self.exchange_registry = None")
        if attrs_section > 0:
            end_pos = content.find("\n", attrs_section)
            content = (
                content[:end_pos]
                + "\n        self.trading_engine = None  # –¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫"
                + content[end_pos:]
            )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    orchestrator_path.write_text(content)
    print("‚úÖ Orchestrator –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")


def fix_trading_engine_imports():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤ trading engine"""

    engine_path = Path("trading/engine.py")
    if not engine_path.exists():
        print("‚ö†Ô∏è  Trading engine –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    content = engine_path.read_text()

    # –£–±–∏—Ä–∞–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–º–ø–æ—Ä—Ç—ã
    content = content.replace(
        "from database.repositories.signal_repository import SignalRepository",
        "# from database.repositories.signal_repository import SignalRepository",
    )
    content = content.replace(
        "from database.repositories.trade_repository import TradeRepository",
        "# from database.repositories.trade_repository import TradeRepository",
    )

    # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø—Ä—è–º—É—é —Ä–∞–±–æ—Ç—É —Å –ë–î
    content = content.replace(
        "from risk_management.manager import RiskManager",
        "# from risk_management.manager import RiskManager",
    )

    engine_path.write_text(content)
    print("‚úÖ Trading Engine –∏–º–ø–æ—Ä—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ orchestrator...")

    # –ü–∞—Ç—á–∏–º orchestrator
    patch_orchestrator()

    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤ trading engine
    fix_trading_engine_imports()

    print("\n‚úÖ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")
    print("\nüìã –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ:")
    print("1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É: pkill -f unified_launcher")
    print("2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å: python3 unified_launcher.py --mode=ml")


if __name__ == "__main__":
    main()
