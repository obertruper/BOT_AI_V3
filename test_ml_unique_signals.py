#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ML —Å–∏–≥–Ω–∞–ª–æ–≤
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Ä–∞–∑–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –ø–æ–ª—É—á–∞—é—Ç —Ä–∞–∑–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
"""

import asyncio
import hashlib
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from core.config.config_manager import ConfigManager
from core.logger import setup_logger
from data.data_loader import DataLoader
from ml.ml_manager import MLManager
from ml.ml_signal_processor import MLSignalProcessor

logger = setup_logger(__name__)


async def test_ml_unique_signals():
    """–¢–µ—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ML —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
    try:
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ML —Å–∏–≥–Ω–∞–ª–æ–≤...")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        config_manager = ConfigManager()
        ml_manager = MLManager(config_manager._config)
        ml_processor = MLSignalProcessor(
            ml_manager=ml_manager,
            config=config_manager._config,
            config_manager=config_manager,
        )
        data_loader = DataLoader(config_manager)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        await ml_manager.initialize()
        await ml_processor.initialize()

        # –°–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_symbols = ["BTCUSDT", "ETHUSDT", "SOLUSDT", "XRPUSDT", "BNBUSDT"]

        predictions = {}
        input_hashes = {}

        for symbol in test_symbols:
            logger.info(f"üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º {symbol}...")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            ohlcv_data = await data_loader.get_data_for_ml(symbol, limit=500)

            if ohlcv_data is None or len(ohlcv_data) < 240:
                logger.warning(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                continue

            # –î–æ–±–∞–≤–ª—è–µ–º symbol –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            ohlcv_data = ohlcv_data.copy()
            ohlcv_data["symbol"] = symbol

            # –í—ã—á–∏—Å–ª—è–µ–º —Ö—ç—à –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            last_100_candles = ohlcv_data.tail(100)
            input_hash = hashlib.md5(
                str(
                    last_100_candles[
                        ["open", "high", "low", "close", "volume", "symbol"]
                    ].values
                ).encode()
            ).hexdigest()
            input_hashes[symbol] = input_hash

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            prediction = await ml_manager.predict(ohlcv_data)

            if prediction:
                predictions[symbol] = prediction

                logger.info(
                    f"‚úÖ {symbol} - –°–∏–≥–Ω–∞–ª: {prediction.get('signal_type', 'UNKNOWN')}"
                )
                logger.info(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction.get('confidence', 0):.3f}")
                logger.info(
                    f"   15m returns: {prediction.get('predictions', {}).get('returns_15m', 0):.6f}"
                )
                logger.info(f"   Input hash: {input_hash[:8]}...")
            else:
                logger.warning(f"‚ùå –ù–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è {symbol}")

        # –ê–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        logger.info("\n" + "=" * 60)
        logger.info("üìä –ê–ù–ê–õ–ò–ó –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò –°–ò–ì–ù–ê–õ–û–í")
        logger.info("=" * 60)

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        unique_input_hashes = set(input_hashes.values())
        logger.info(
            f"üîç –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {len(unique_input_hashes)}/{len(input_hashes)}"
        )

        if len(unique_input_hashes) < len(input_hashes):
            logger.warning("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
            for symbol, hash_val in input_hashes.items():
                duplicates = [
                    s for s, h in input_hashes.items() if h == hash_val and s != symbol
                ]
                if duplicates:
                    logger.warning(
                        f"   {symbol} –∏–º–µ–µ—Ç —Ç–∞–∫–∏–µ –∂–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫: {duplicates}"
                    )
        else:
            logger.info("‚úÖ –í—Å–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã")

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        signal_types = [p.get("signal_type", "UNKNOWN") for p in predictions.values()]
        unique_signals = set(signal_types)
        logger.info(f"üéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(unique_signals)}")
        logger.info(f"   –¢–∏–ø—ã —Å–∏–≥–Ω–∞–ª–æ–≤: {list(unique_signals)}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º
        from collections import Counter

        signal_counts = Counter(signal_types)
        logger.info("üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤:")
        for signal_type, count in signal_counts.items():
            logger.info(
                f"   {signal_type}: {count} ({count / len(signal_types) * 100:.1f}%)"
            )

        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π
        returns_15m = [
            p.get("predictions", {}).get("returns_15m", 0) for p in predictions.values()
        ]
        unique_returns = len(set(returns_15m))
        logger.info(f"üí∞ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö 15m returns: {unique_returns}/{len(returns_15m)}")

        if unique_returns < len(returns_15m):
            logger.warning("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏!")
            return_counts = Counter(returns_15m)
            for return_val, count in return_counts.items():
                if count > 1:
                    symbols_with_return = [
                        s
                        for s, p in predictions.items()
                        if p.get("predictions", {}).get("returns_15m", 0) == return_val
                    ]
                    logger.warning(f"   Return {return_val:.6f}: {symbols_with_return}")
        else:
            logger.info("‚úÖ –í—Å–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã")

        # 4. –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–ª–∏—á–∏–π
        logger.info("\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø:")
        for symbol, prediction in predictions.items():
            pred_data = prediction.get("predictions", {})
            logger.info(f"ü™ô {symbol}:")
            logger.info(f"   Signal: {prediction.get('signal_type', 'UNKNOWN')}")
            logger.info(f"   Confidence: {prediction.get('confidence', 0):.3f}")
            logger.info(
                f"   Returns: 15m={pred_data.get('returns_15m', 0):.6f}, 1h={pred_data.get('returns_1h', 0):.6f}"
            )
            logger.info(
                f"   Direction score: {pred_data.get('direction_score', 0):.3f}"
            )
            logger.info(f"   Stop Loss %: {prediction.get('stop_loss_pct', 0)}")
            logger.info(f"   Take Profit %: {prediction.get('take_profit_pct', 0)}")

        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        logger.info("\nüóÑÔ∏è  –ü–†–û–í–ï–†–ö–ê –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø:")
        logger.info(f"–†–∞–∑–º–µ—Ä –∫—ç—à–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {len(ml_processor.prediction_cache)}")
        logger.info(f"–ö–ª—é—á–∏ –∫—ç—à–∞: {list(ml_processor.prediction_cache.keys())}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        logger.info("\nüîÑ –¢–ï–°–¢ –ü–û–í–¢–û–†–ù–û–ì–û –í–´–ó–û–í–ê (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞):")
        prediction_btc_2 = await ml_manager.predict(
            ohlcv_data
        )  # –ü–æ—Å–ª–µ–¥–Ω–∏–π symbol (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ BTC)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –∫—ç—à –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        cache_keys_after = list(ml_processor.prediction_cache.keys())
        logger.info(f"–ö–ª—é—á–∏ –∫—ç—à–∞ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞: {cache_keys_after}")

        return {
            "total_symbols": len(test_symbols),
            "successful_predictions": len(predictions),
            "unique_signal_types": len(unique_signals),
            "unique_returns": unique_returns,
            "cache_size": len(ml_processor.prediction_cache),
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", exc_info=True)
        return None


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    results = await test_ml_unique_signals()

    if results:
        logger.info("\n" + "=" * 60)
        logger.info("‚úÖ –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
        logger.info("=" * 60)
        logger.info(f"–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {results['total_symbols']}")
        logger.info(f"–£—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {results['successful_predictions']}")
        logger.info(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤: {results['unique_signal_types']}")
        logger.info(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π: {results['unique_returns']}")
        logger.info(f"–†–∞–∑–º–µ—Ä –∫—ç—à–∞: {results['cache_size']}")

        if results["unique_signal_types"] > 1:
            logger.info("üéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –°–∏–≥–Ω–∞–ª—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã!")
        else:
            logger.warning("‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –í—Å–µ —Å–∏–≥–Ω–∞–ª—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã")
    else:
        logger.error("‚ùå –¢–µ—Å—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫")


if __name__ == "__main__":
    asyncio.run(main())
