#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª BOT_AI_V3
–ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import asyncio
import os
import signal
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from dotenv import load_dotenv

load_dotenv()

from core.config.config_manager import ConfigManager
from core.logger import setup_logger
from core.system.orchestrator import SystemOrchestrator

logger = setup_logger("interactive_trading")


class InteractiveTradingTerminal:
    def __init__(self):
        self.orchestrator = None
        self.running = False
        self.config_manager = ConfigManager()

    async def check_system_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        try:
            config = self.config_manager.load_config()
            logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
        bybit_key = os.getenv("BYBIT_API_KEY")
        bybit_secret = os.getenv("BYBIT_API_SECRET")

        if not bybit_key or not bybit_secret:
            logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API –∫–ª—é—á–∏ Bybit")
            return False

        logger.info("‚úÖ API –∫–ª—é—á–∏ –Ω–∞–π–¥–µ–Ω—ã")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        pg_user = os.getenv("PGUSER")
        pg_db = os.getenv("PGDATABASE")

        if not pg_user or not pg_db:
            logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL")
            return False

        logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL –Ω–∞–π–¥–µ–Ω—ã")

        return True

    async def start_trading_system(self):
        """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")

        try:
            # –°–æ–∑–¥–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
            self.orchestrator = SystemOrchestrator()

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
            await self.orchestrator.initialize()
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
            await self.orchestrator.start()
            logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")

            self.running = True
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
            return False

    async def stop_trading_system(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        if self.orchestrator and self.running:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")
            await self.orchestrator.stop()
            self.running = False
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    async def show_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        if not self.orchestrator:
            logger.info("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            status = await self.orchestrator.get_system_status()

            logger.info("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:")
            logger.info(f"   üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {status.get('connections', 'N/A')}")
            logger.info(f"   ü§ñ ML –º–æ–¥–µ–ª—å: {status.get('ml_status', 'N/A')}")
            logger.info(f"   üìà –°—Ç—Ä–∞—Ç–µ–≥–∏–∏: {status.get('strategies', 'N/A')}")
            logger.info(f"   ‚ö° –°–∏–≥–Ω–∞–ª—ã: {status.get('signals', 'N/A')}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

    async def test_bybit_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit"""
        logger.info("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit...")

        try:
            from exchanges.factory import ExchangeFactory, ExchangeType

            factory = ExchangeFactory()
            client = factory.create_client(
                exchange_type=ExchangeType.BYBIT,
                api_key=os.getenv("BYBIT_API_KEY"),
                api_secret=os.getenv("BYBIT_API_SECRET"),
                sandbox=False,
            )

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            connected = await client.connect()
            if connected:
                logger.info("‚úÖ Bybit –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
                try:
                    account_info = await client.get_account_info()
                    logger.info("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –ø–æ–ª—É—á–µ–Ω–∞")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ: {e}")

                # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä BTCUSDT
                try:
                    ticker = await client.get_ticker("BTCUSDT")
                    logger.info(f"‚úÖ BTCUSDT —Ç–∏–∫–µ—Ä: {ticker.last_price}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∏–∫–µ—Ä: {e}")

                await client.disconnect()
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Bybit")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Bybit: {e}")

    async def run_interactive_mode(self):
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        logger.info("üéØ BOT_AI_V3 - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª")
        logger.info("=" * 60)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        if not await self.check_system_health():
            logger.error("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
            return

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Bybit
        await self.test_bybit_connection()

        # –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥
        while True:
            print("\n" + "=" * 40)
            print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
            print("1. start   - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É")
            print("2. stop    - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É")
            print("3. status  - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å")
            print("4. test    - –¢–µ—Å—Ç Bybit –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            print("5. exit    - –í—ã—Ö–æ–¥")
            print("=" * 40)

            try:
                choice = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (1-5): ").strip()

                if choice == "1" or choice.lower() == "start":
                    if not self.running:
                        await self.start_trading_system()
                    else:
                        logger.info("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")

                elif choice == "2" or choice.lower() == "stop":
                    await self.stop_trading_system()

                elif choice == "3" or choice.lower() == "status":
                    await self.show_status()

                elif choice == "4" or choice.lower() == "test":
                    await self.test_bybit_connection()

                elif choice == "5" or choice.lower() == "exit":
                    break

                else:
                    print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

            except KeyboardInterrupt:
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        await self.stop_trading_system()
        logger.info("üëã –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω")


async def main():
    terminal = InteractiveTradingTerminal()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
    def signal_handler(signum, frame):
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        asyncio.create_task(terminal.stop_trading_system())

    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    await terminal.run_interactive_mode()


if __name__ == "__main__":
    asyncio.run(main())
