#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã Claude Code SDK - –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ SDK –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
"""
import asyncio
from pathlib import Path
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent.parent))

from ai_agents import ClaudeCodeSDK, ClaudeCodeOptions, ThinkingMode


async def simple_example():
    """–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä: Claude –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–¥ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è"""
    print("üéØ –ü–†–û–°–¢–û–ô –ü–†–ò–ú–ï–†: –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞\n")
    
    # 1. –°–æ–∑–¥–∞–µ–º SDK - —ç—Ç–æ –Ω–∞—à "–ø—É–ª—å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
    sdk = ClaudeCodeSDK()
    
    # 2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - —á—Ç–æ Claude –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å
    options = ClaudeCodeOptions(
        model="sonnet",                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å Sonnet
        thinking_mode=ThinkingMode.NORMAL, # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º –º—ã—à–ª–µ–Ω–∏—è
        allowed_tools=["Read", "Grep"],    # –ú–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª—ã –∏ –∏—Å–∫–∞—Ç—å
        max_turns=3                        # –ú–∞–∫—Å–∏–º—É–º 3 –¥–µ–π—Å—Ç–≤–∏—è
    )
    
    # 3. –î–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
    task = """
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–∞–π–ª trading/engine.py –∏ —Å–∫–∞–∂–∏:
    1. –ö–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–Ω –≤—ã–ø–æ–ª–Ω—è–µ—Ç?
    2. –ï—Å—Ç—å –ª–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã?
    3. –ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?
    
    –ë—É–¥—å –∫—Ä–∞—Ç–æ–∫ - 3-5 –ø—É–Ω–∫—Ç–æ–≤.
    """
    
    # 4. Claude –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ
    print("ü§ñ Claude –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–¥...")
    result = await sdk.query(task, options)
    
    print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
    print(result)
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
    usage = sdk.get_token_usage()
    print(f"\nüí∞ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {usage.get('total_tokens', 0):,}")


async def thinking_example():
    """–ü—Ä–∏–º–µ—Ä —Å –ø–æ—à–∞–≥–æ–≤—ã–º –º—ã—à–ª–µ–Ω–∏–µ–º –¥–ª—è —Å–ª–æ–∂–Ω–æ–π –∑–∞–¥–∞—á–∏"""
    print("\n\nüß† –ü–†–ò–ú–ï–† –° –ú–´–®–õ–ï–ù–ò–ï–ú: –†–µ—à–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–π –∑–∞–¥–∞—á–∏\n")
    
    sdk = ClaudeCodeSDK()
    
    # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º "–¥—É–º–∞—Ç—å –≤—Å–ª—É—Ö"
    options = ClaudeCodeOptions(
        model="sonnet",
        thinking_mode=ThinkingMode.THINK_HARD,  # –ì–ª—É–±–æ–∫–æ–µ –æ–±–¥—É–º—ã–≤–∞–Ω–∏–µ
        allowed_tools=["Read", "Write", "Edit", "Bash"],
        max_turns=10
    )
    
    task = """
    –°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ–ª—å–∑—è—â–µ–π —Å—Ä–µ–¥–Ω–µ–π (moving average) 
    –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞:
    1. –ü—Ä–∏–Ω–∏–º–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ü–µ–Ω –∏ –ø–µ—Ä–∏–æ–¥
    2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å edge cases
    3. –ë—ã—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π
    4. –ò–º–µ—Ç—å docstring –∏ type hints
    
    –°–æ—Ö—Ä–∞–Ω–∏ –≤ —Ñ–∞–π–ª examples/moving_average.py
    """
    
    print("ü§ñ Claude –¥—É–º–∞–µ—Ç –Ω–∞–¥ –∑–∞–¥–∞—á–µ–π...")
    print("(–í —Ä–µ–∂–∏–º–µ THINK_HARD –æ–Ω –±—É–¥–µ—Ç —Ä–∞–∑–º—ã—à–ª—è—Ç—å –ø–æ—à–∞–≥–æ–≤–æ)\n")
    
    result = await sdk.query(task, options)
    
    print("\n‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
    print("üìÑ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: examples/moving_average.py")


async def mcp_sequential_thinking_example():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è MCP Sequential Thinking –¥–ª—è —Å–ª–æ–∂–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    print("\n\nüîÆ MCP SEQUENTIAL THINKING: –ü–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ\n")
    
    sdk = ClaudeCodeSDK()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Sequential Thinking —á–µ—Ä–µ–∑ MCP
    options = ClaudeCodeOptions(
        model="opus",  # –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á –ª—É—á—à–µ Opus
        thinking_mode=ThinkingMode.NORMAL,
        allowed_tools=[
            "Read", "Grep", "Task",
            "mcp__sequential-thinking__sequentialthinking"  # MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        ],
        max_turns=15
    )
    
    task = """
    –ò—Å–ø–æ–ª—å–∑—É–π Sequential Thinking —á—Ç–æ–±—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É 
    —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –≤ —ç—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–µ:
    
    1. –ù–∞—á–Ω–∏ —Å –∏–∑—É—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    2. –ù–∞–π–¥–∏ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –Ω–∏–º–∏
    3. –û–ø—Ä–µ–¥–µ–ª–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —É–∑–∫–∏–µ –º–µ—Å—Ç–∞
    4. –ü—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    
    –î—É–º–∞–π –ø–æ—à–∞–≥–æ–≤–æ, –ø–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞–π —Å–≤–æ–∏ –≤—ã–≤–æ–¥—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.
    """
    
    print("üß© Claude –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Sequential Thinking MCP...")
    print("–≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –µ–º—É:")
    print("- –î—É–º–∞—Ç—å –ø–æ—à–∞–≥–æ–≤–æ")
    print("- –ü–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º—ã—Å–ª–∏")
    print("- –°—Ç—Ä–æ–∏—Ç—å –≥–∏–ø–æ—Ç–µ–∑—ã –∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏—Ö")
    print("- –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω –ø–æ —Ö–æ–¥—É –∞–Ω–∞–ª–∏–∑–∞\n")
    
    result = await sdk.query(task, options)
    
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å Sequential Thinking:")
    print(result[:500] + "..." if len(result) > 500 else result)


async def autonomous_development_example():
    """–ü—Ä–∏–º–µ—Ä –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - Claude —Å–∞–º –≤—Å–µ –¥–µ–ª–∞–µ—Ç"""
    print("\n\nüöÄ –ê–í–¢–û–ù–û–ú–ù–ê–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ê: Claude –≤—Å–µ –¥–µ–ª–∞–µ—Ç —Å–∞–º\n")
    
    from ai_agents import autonomous_development
    
    task = """
    –°–æ–∑–¥–∞–π —É—Ç–∏–ª–∏—Ç—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:
    
    1. –ö–ª–∞—Å—Å PerformanceMonitor –≤ —Ñ–∞–π–ª–µ monitoring/performance.py
    2. –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:
       - –ü—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫ (PnL)
       - –í–∏–Ω—Ä–µ–π—Ç (–ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫)
       - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
       - –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞
    3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ JSON
    4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
    5. –ù–∞–ø–∏—à–∏ —Ç–µ—Å—Ç—ã
    
    –†–∞–±–æ—Ç–∞–π –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω–æ.
    """
    
    print("ü§ñ Claude —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ...")
    print("–û–Ω –±—É–¥–µ—Ç:")
    print("1. EXPLORE - –ò–∑—É—á–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥")
    print("2. PLAN - –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é")
    print("3. IMPLEMENT - –ü–∏—Å–∞—Ç—å –∫–æ–¥")
    print("4. TEST - –°–æ–∑–¥–∞–≤–∞—Ç—å –∏ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–µ—Å—Ç—ã")
    print("5. REFINE - –£–ª—É—á—à–∞—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n")
    
    result = await autonomous_development(task)
    
    print("\n‚úÖ –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result.summary}")


async def collaborative_example():
    """–ü—Ä–∏–º–µ—Ä —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    print("\n\nüë• –ö–û–õ–õ–ê–ë–û–†–ê–¶–ò–Ø: –ù–µ—Å–∫–æ–ª—å–∫–æ –∞–≥–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç –≤–º–µ—Å—Ç–µ\n")
    
    from ai_agents import MultiModelOrchestrator, AgentConfig
    
    orchestrator = MultiModelOrchestrator()
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
    architect = orchestrator.create_agent("claude", AgentConfig(
        name="architect",
        role="–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã",
        system_prompt="–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä. –ü—Ä–æ–µ–∫—Ç–∏—Ä—É–π —á–∏—Å—Ç—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É.",
        allowed_tools=["Read", "Write"],
        thinking_mode=ThinkingMode.THINK
    ))
    
    developer = orchestrator.create_agent("claude", AgentConfig(
        name="developer", 
        role="–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
        system_prompt="–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫. –ü–∏—à–∏ —á–∏—Å—Ç—ã–π, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∫–æ–¥.",
        allowed_tools=["Read", "Write", "Edit", "Bash"],
        thinking_mode=ThinkingMode.NORMAL
    ))
    
    tester = orchestrator.create_agent("claude", AgentConfig(
        name="tester",
        role="QA –∏–Ω–∂–µ–Ω–µ—Ä", 
        system_prompt="–¢—ã QA –∏–Ω–∂–µ–Ω–µ—Ä. –ù–∞—Ö–æ–¥–∏ –±–∞–≥–∏ –∏ –ø–∏—à–∏ —Ç–µ—Å—Ç—ã.",
        allowed_tools=["Read", "Write", "Bash"],
        thinking_mode=ThinkingMode.NORMAL
    ))
    
    print("üë• –ê–≥–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã:")
    print("- üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä - –ø—Ä–æ–µ–∫—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
    print("- üíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ - –ø–∏—à–µ—Ç –∫–æ–¥")
    print("- üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ\n")
    
    # –û–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –ø–æ –æ—á–µ—Ä–µ–¥–∏
    task = "–°–æ–∑–¥–∞—Ç—å –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å WebSocket –¥–ª—è real-time –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂"
    
    print(f"üìã –ó–∞–¥–∞—á–∞: {task}\n")
    
    # 1. –ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∏—Ä—É–µ—Ç
    print("1Ô∏è‚É£ –ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É...")
    design = await architect.execute_task(f"–°–ø—Ä–æ–µ–∫—Ç–∏—Ä—É–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –¥–ª—è: {task}")
    
    # 2. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∞–ª–∏–∑—É–µ—Ç
    print("2Ô∏è‚É£ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∏—à–µ—Ç –∫–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∑–∞–π–Ω–∞...")
    code = await developer.execute_task(
        f"–†–µ–∞–ª–∏–∑—É–π —Å–ª–µ–¥—É—é—â–∏–π –¥–∏–∑–∞–π–Ω: {design[:200]}...",
        context={"design": design}
    )
    
    # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç
    print("3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ —Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç—ã...")
    tests = await tester.execute_task(
        "–ù–∞–ø–∏—à–∏ unit —Ç–µ—Å—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ WebSocket –º–æ–¥—É–ª—è",
        context={"implementation": code}
    )
    
    print("\n‚úÖ –ö–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("–í—Å–µ –∞–≥–µ–Ω—Ç—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —Å–≤–æ–∏ —Ä–æ–ª–∏")


async def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤"""
    print("=" * 60)
    print("üéì –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø CLAUDE CODE SDK")
    print("=" * 60)
    
    examples = [
        ("–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä", simple_example),
        ("–ü—Ä–∏–º–µ—Ä —Å –º—ã—à–ª–µ–Ω–∏–µ–º", thinking_example),
        ("MCP Sequential Thinking", mcp_sequential_thinking_example),
        ("–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", autonomous_development_example),
        ("–ö–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤", collaborative_example)
    ]
    
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞:")
    for i, (name, _) in enumerate(examples, 1):
        print(f"{i}. {name}")
    print("0. –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã")
    
    choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (0-5): ")
    
    try:
        choice = int(choice)
        if choice == 0:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ
            for name, func in examples:
                await func()
        elif 1 <= choice <= len(examples):
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π
            await examples[choice-1][1]()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    except ValueError:
        print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")


if __name__ == "__main__":
    print("\nüöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ Claude Code SDK...")
    print("‚ÑπÔ∏è  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Claude CLI –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω\n")
    
    asyncio.run(main())