#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit API
"""

import asyncio
import os
import sys
from datetime import datetime

import ccxt
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


async def test_bybit_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit"""

    print("=" * 60)
    print("  –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö BYBIT")
    print("=" * 60)

    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏
    api_key = os.getenv("BYBIT_API_KEY")
    api_secret = os.getenv("BYBIT_API_SECRET")
    testnet = os.getenv("BYBIT_TESTNET", "false").lower() == "true"

    if not api_key or not api_secret:
        print("‚ùå –û–®–ò–ë–ö–ê: API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ!")
        return False

    print(f"üîë API –∫–ª—é—á: {api_key[:10]}...")
    print(f"üåê –†–µ–∂–∏–º: {'Testnet' if testnet else 'Mainnet'}")
    print("-" * 50)

    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit
        exchange = ccxt.bybit(
            {
                "apiKey": api_key,
                "secret": api_secret,
                "enableRateLimit": True,
                "options": {
                    "defaultType": "linear",  # USDT perpetual
                    "recvWindow": 10000,
                },
            }
        )

        if testnet:
            exchange.set_sandbox_mode(True)

        print("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Bybit...")

        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞:")
        balance = exchange.fetch_balance()
        usdt_balance = balance.get("USDT", {})

        print("üí∞ USDT –±–∞–ª–∞–Ω—Å:")
        print(f"   –í—Å–µ–≥–æ: {usdt_balance.get('total', 0):.2f}")
        print(f"   –°–≤–æ–±–æ–¥–Ω–æ: {usdt_balance.get('free', 0):.2f}")
        print(f"   –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {usdt_balance.get('used', 0):.2f}")

        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä—ã–Ω–∫–æ–≤
        print("\nüìà –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤:")
        markets = exchange.load_markets()
        perp_markets = [
            m for m in markets.values() if m["type"] == "swap" and m["quote"] == "USDT"
        ]
        print(f"   –ù–∞–π–¥–µ–Ω–æ {len(perp_markets)} USDT perpetual —Ä—ã–Ω–∫–æ–≤")

        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –¥–ª—è 10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        print("\nüíπ –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã (10 –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç):")
        symbols = [
            "BTC/USDT:USDT",
            "ETH/USDT:USDT",
            "BNB/USDT:USDT",
            "SOL/USDT:USDT",
            "XRP/USDT:USDT",
            "ADA/USDT:USDT",
            "DOGE/USDT:USDT",
            "DOT/USDT:USDT",
            "LINK/USDT:USDT",
            "MATIC/USDT:USDT",
        ]

        for symbol in symbols:
            try:
                ticker = exchange.fetch_ticker(symbol)
                print(f"   {symbol.split('/')[0]}: ${ticker['last']:.4f}")
            except Exception:
                print(f"   {symbol.split('/')[0]}: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

        # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        print("\nüìã –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:")
        positions = exchange.fetch_positions()
        open_positions = [p for p in positions if p["contracts"] > 0]

        if open_positions:
            for pos in open_positions:
                print(
                    f"   {pos['symbol']}: {pos['side']} {pos['contracts']} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤"
                )
        else:
            print("   –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")

        # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è
        print("\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:")
        try:
            # –î–ª—è Bybit v5 API
            account_info = exchange.private_get_v5_account_info()
            print(
                f"   –†–µ–∂–∏–º –º–∞—Ä–∂–∏: {account_info.get('result', {}).get('marginMode', 'N/A')}"
            )
        except:
            print("   –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ")

        print("\n‚úÖ –£–°–ü–ï–•! –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        return True

    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
        return False

    finally:
        if "exchange" in locals():
            exchange.close()


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    result = asyncio.run(test_bybit_connection())
    sys.exit(0 if result else 1)
