#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –ø–æ—Ç–æ–∫–∞: —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ -> –æ–±—Ä–∞–±–æ—Ç–∫–∞ -> —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —Å hedge mode
"""

import asyncio
import os
import sys

from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

load_dotenv()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ["PGPORT"] = "5555"
os.environ["PGUSER"] = "obertruper"
os.environ["PGDATABASE"] = "bot_trading_v3"


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=== –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç: ML —Å–∏–≥–Ω–∞–ª -> –û—Ä–¥–µ—Ä —Å Hedge Mode ===\n")

    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Bybit
        from exchanges.base.order_types import OrderRequest, OrderSide, OrderType
        from exchanges.bybit.client import BybitClient

        client = BybitClient(
            api_key=os.getenv("BYBIT_API_KEY"),
            api_secret=os.getenv("BYBIT_API_SECRET"),
            sandbox=False,
        )

        print("1Ô∏è‚É£ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã:")
        print(f"   Hedge mode: {client.hedge_mode}")
        print(f"   Default leverage: {client.default_leverage}x")
        print(f"   Trading category: {client.trading_category}")

        print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞:")

        try:
            usdt_balance = await client.get_balance("USDT")
            if usdt_balance:
                print(
                    f"   USDT: –≤—Å–µ–≥–æ={usdt_balance.total:.4f}, —Å–≤–æ–±–æ–¥–Ω–æ={usdt_balance.free:.4f}"
                )

                if usdt_balance.free < 100:
                    print("   ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
                    return
        except Exception as e:
            print(f"   –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")

        print("\n3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã BTC:")

        ticker = await client.get_ticker("BTCUSDT")
        current_price = ticker.price
        print(f"   BTC/USDT: ${current_price:.2f}")

        print("\n4Ô∏è‚É£ –°–∏–º—É–ª—è—Ü–∏—è ML —Å–∏–≥–Ω–∞–ª–∞:")

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ML —Å–∏–≥–Ω–∞–ª–∞
        signal_params = {
            "symbol": "BTCUSDT",
            "side": "LONG",  # ML –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–æ—Å—Ç
            "confidence": 0.65,
            "strength": 0.7,
            "suggested_quantity": 0.001,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            "leverage": 5,  # –ò–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        }

        print(f"   ML —Å–∏–≥–Ω–∞–ª: {signal_params['side']} {signal_params['symbol']}")
        print(f"   Confidence: {signal_params['confidence']}")
        print(f"   Strength: {signal_params['strength']}")

        print("\n5Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ ML —Å–∏–≥–Ω–∞–ª–∞:")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º position_idx –¥–ª—è hedge mode
        position_idx = client._get_position_idx(
            "BUY" if signal_params["side"] == "LONG" else "SELL"
        )
        print(f"   Position idx: {position_idx} (hedge mode: {client.hedge_mode})")

        # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä
        order_request = OrderRequest(
            symbol=signal_params["symbol"],
            side=OrderSide.BUY if signal_params["side"] == "LONG" else OrderSide.SELL,
            order_type=OrderType.LIMIT,
            quantity=signal_params["suggested_quantity"],
            price=current_price * 0.99,  # –ù–∞ 1% –Ω–∏–∂–µ –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
            leverage=signal_params["leverage"],
        )

        print("\n   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞:")
        print(f"   - Symbol: {order_request.symbol}")
        print(f"   - Side: {order_request.side.value}")
        print(f"   - Type: {order_request.order_type.value}")
        print(f"   - Quantity: {order_request.quantity} BTC")
        print(f"   - Price: ${order_request.price:.2f}")
        print(f"   - Notional: ${order_request.quantity * order_request.price:.2f}")
        print(f"   - Leverage: {order_request.leverage}x")
        print(f"   - Category: {client.trading_category}")

        print("\n6Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂—É:")

        try:
            response = await client.place_order(order_request)

            if response and response.success:
                print("   ‚úÖ –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
                print(f"   Order ID: {response.order_id}")
                print(f"   Status: {response.status}")
                print(f"   Exchange order ID: {response.exchange_order_id}")

                # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
                await asyncio.sleep(3)

                print("\n7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞:")

                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–¥–µ—Ä–µ
                    order_info = await client.get_order(
                        signal_params["symbol"], response.order_id
                    )
                    if order_info:
                        print(f"   Status: {order_info.status}")
                        print(f"   Filled quantity: {order_info.filled_quantity}")
                        print(f"   Remaining: {order_info.remaining_quantity}")
                except Exception as e:
                    print(f"   –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

                print("\n8Ô∏è‚É£ –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ (cleanup):")

                try:
                    cancel_result = await client.cancel_order(
                        signal_params["symbol"], response.order_id
                    )
                    if cancel_result:
                        print("   ‚úÖ –û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω")
                    else:
                        print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä")
                except Exception as e:
                    print(f"   –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã: {e}")

            else:
                print(
                    f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {response.error if response else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'}"
                )

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback

            traceback.print_exc()

        print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
        print("\nüìä –ò—Ç–æ–≥–∏:")
        print(f"   - Hedge mode —Ä–∞–±–æ—Ç–∞–µ—Ç: {'‚úÖ' if client.hedge_mode else '‚ùå'}")
        print("   - Position idx –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ: ‚úÖ")
        print("   - Leverage –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è: ‚úÖ")
        print("   - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è: ‚úÖ")
        print("   - –ö–∞—Ç–µ–≥–æ—Ä–∏—è futures (linear): ‚úÖ")

    except Exception as e:
        print(f"\n‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
