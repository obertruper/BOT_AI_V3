"""
Risk Manager –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
"""

from dataclasses import dataclass
from decimal import Decimal
from typing import Any

from core.logger import setup_risk_management_logger


@dataclass
class RiskStatus:
    """–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∏—Å–∫–æ–≤"""

    def __init__(
        self,
        requires_action: bool = False,
        action: str | None = None,
        message: str | None = None,
    ):
        self.requires_action = requires_action
        self.action = action
        self.message = message


class RiskManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ—Ñ–∏–ª–µ–π –∏ ML-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""

    def __init__(self, config: dict[str, Any], position_manager=None, exchange_registry=None):
        self.config = config
        self.position_manager = position_manager
        self.exchange_registry = exchange_registry
        self.logger = setup_risk_management_logger()

        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫–∞
        self.enabled = config.get("enabled", True)
        self.risk_per_trade = Decimal(str(config.get("risk_per_trade", 0.02)))
        self.fixed_risk_balance = Decimal(str(config.get("fixed_risk_balance", 500)))
        self.max_total_risk = Decimal(str(config.get("max_total_risk", 0.10)))
        self.max_positions = config.get("max_positions", 10)

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–µ—á–∞
        self.default_leverage = config.get("default_leverage", 5)
        self.max_leverage = config.get("max_leverage", 20)
        self.min_notional = Decimal(str(config.get("min_notional", 5.0)))

        # –ü—Ä–æ—Ñ–∏–ª–∏ —Ä–∏—Å–∫–∞
        self.risk_profiles = config.get("risk_profiles", {})
        self.current_profile = "standard"

        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–∫—Ç–∏–≤–æ–≤
        self.asset_categories = config.get("asset_categories", {})

        # ML-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
        self.ml_integration = config.get("ml_integration", {})
        self.ml_enabled = self.ml_integration.get("enabled", False)

        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.monitoring = config.get("monitoring", {})

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.logger.info("üõ°Ô∏è RiskManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        self.logger.info(f"   üìä –ü—Ä–æ—Ñ–∏–ª—å —Ä–∏—Å–∫–∞: {self.current_profile}")
        self.logger.info(f"   üí∞ –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: {self.risk_per_trade:.2%}")
        self.logger.info(f"   üéØ –ú–∞–∫—Å–∏–º—É–º –ø–æ–∑–∏—Ü–∏–π: {self.max_positions}")
        self.logger.info(
            f"   üîß ML-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if self.ml_enabled else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}"
        )
        self.logger.info(f"   üìà –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏: {list(self.risk_profiles.keys())}")
        self.logger.info(f"   üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–∫—Ç–∏–≤–æ–≤: {list(self.asset_categories.keys())}")

    def get_risk_profile(self, profile_name: str | None = None) -> dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Ä–∏—Å–∫–∞"""
        if profile_name is None:
            profile_name = self.current_profile

        result = self.risk_profiles.get(profile_name, self.risk_profiles.get("standard", {}))
        return result if isinstance(result, dict) else {}

    def get_asset_category(self, symbol: str) -> dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–∫—Ç–∏–≤–∞ –ø–æ —Å–∏–º–≤–æ–ª—É"""
        for category_name, category_config in self.asset_categories.items():
            symbols = category_config.get("symbols", [])
            if symbol in symbols:
                return category_config

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        result = self.asset_categories.get("stable_coins", {})
        return result if isinstance(result, dict) else {}

    def calculate_position_size(
        self,
        signal: dict[str, Any],
        balance: Decimal | None = None,
        profile_name: str | None = None,
    ) -> Decimal:
        """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ—Ñ–∏–ª—è —Ä–∏—Å–∫–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–∫—Ç–∏–≤–∞"""
        if not self.enabled:
            self.logger.debug("üõë RiskManager –æ—Ç–∫–ª—é—á–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0")
            return Decimal("0")

        symbol = signal.get("symbol", "UNKNOWN")
        side = signal.get("side", "UNKNOWN")

        self.logger.info(f"üìä –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {symbol} ({side})")
        self.logger.debug(f"   üìã –ü—Ä–æ—Ñ–∏–ª—å: {profile_name or self.current_profile}")
        self.logger.debug(f"   üí∞ –ë–∞–ª–∞–Ω—Å: {balance or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ä–∏—Å–∫–∞
        profile = self.get_risk_profile(profile_name)
        risk_multiplier = Decimal(str(profile.get("risk_multiplier", 1.0)))

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–∫—Ç–∏–≤–∞
        asset_category = self.get_asset_category(symbol)
        asset_risk_multiplier = Decimal(str(asset_category.get("risk_multiplier", 1.0)))

        # –ë–∞–∑–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç
        base_risk_amount = self.fixed_risk_balance * self.risk_per_trade

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª–∏
        adjusted_risk = base_risk_amount * risk_multiplier * asset_risk_multiplier

        self.logger.debug(f"   üßÆ –ë–∞–∑–æ–≤—ã–π —Ä–∏—Å–∫: ${base_risk_amount}")
        self.logger.debug(f"   üìà –ú–Ω–æ–∂–∏—Ç–µ–ª—å –ø—Ä–æ—Ñ–∏–ª—è: {risk_multiplier}")
        self.logger.debug(f"   üè∑Ô∏è –ú–Ω–æ–∂–∏—Ç–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {asset_risk_multiplier}")
        self.logger.debug(f"   üìä –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∏—Å–∫: ${adjusted_risk}")

        # ML-–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
        if self.ml_enabled:
            ml_adjustment = self._calculate_ml_adjustment(signal)
            adjusted_risk *= ml_adjustment
            self.logger.debug(f"   ü§ñ ML-–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞: {ml_adjustment}")
            self.logger.debug(f"   üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ —Å ML: ${adjusted_risk}")

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º –ø–æ–∑–∏—Ü–∏–∏
        max_position_size = Decimal(str(profile.get("max_position_size", 1000)))
        if adjusted_risk > max_position_size:
            self.logger.warning(
                f"   ‚ö†Ô∏è –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω: ${adjusted_risk} ‚Üí ${max_position_size}"
            )
            adjusted_risk = max_position_size

        self.logger.info(f"   ‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${adjusted_risk}")
        return adjusted_risk

    def _calculate_ml_adjustment(self, signal: dict[str, Any]) -> Decimal:
        """–†–∞—Å—á–µ—Ç ML-–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Ä–∏—Å–∫–∞"""
        if not self.ml_enabled:
            return Decimal("1.0")

        try:
            # –ü–æ–ª—É—á–∞–µ–º ML-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏–∑ —Å–∏–≥–Ω–∞–ª–∞
            ml_predictions = signal.get("ml_predictions", {})
            if not ml_predictions:
                return Decimal("1.0")

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä–æ–≥–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            thresholds = self.ml_integration.get("thresholds", {})
            buy_profit_threshold = Decimal(str(thresholds.get("buy_profit", 0.65)))
            buy_loss_threshold = Decimal(str(thresholds.get("buy_loss", 0.35)))

            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
            profit_probability = Decimal(str(ml_predictions.get("profit_probability", 0.5)))
            loss_probability = Decimal(str(ml_predictions.get("loss_probability", 0.5)))

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É
            if signal.get("side") == "buy":
                if profit_probability > buy_profit_threshold:
                    return Decimal("1.2")  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∏—Å–∫ –Ω–∞ 20%
                elif loss_probability > buy_loss_threshold:
                    return Decimal("0.8")  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∏—Å–∫ –Ω–∞ 20%

            return Decimal("1.0")

        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ ML-–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏: {e}")
            return Decimal("1.0")

    async def check_signal_risk(self, signal: dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∏—Å–∫–∏ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ—Ñ–∏–ª–µ–π –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        if not self.enabled:
            self.logger.debug("üõë RiskManager –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
            return True

        symbol = signal.get("symbol", "UNKNOWN")
        side = signal.get("side", "UNKNOWN")

        self.logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫–æ–≤ –¥–ª—è {symbol} ({side})")

        try:
            # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            if not signal:
                self.logger.warning("‚ùå –°–∏–≥–Ω–∞–ª –ø—É—Å—Ç–æ–π")
                return False

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            profile = self.get_risk_profile()
            asset_category = self.get_asset_category(symbol)

            self.logger.debug(f"   üìä –ü—Ä–æ—Ñ–∏–ª—å: {self.current_profile}")
            self.logger.debug(f"   üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {list(self.asset_categories.keys())}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ leverage
            leverage = signal.get("leverage", self.default_leverage)
            max_leverage = min(
                self.max_leverage, asset_category.get("max_leverage", self.max_leverage)
            )

            if leverage > max_leverage:
                self.logger.warning(
                    f"‚ùå –ü–ª–µ—á–æ {leverage}x –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º {max_leverage}x –¥–ª—è {symbol}"
                )
                return False
            else:
                self.logger.debug(f"   ‚úÖ –ü–ª–µ—á–æ {leverage}x –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞ {max_leverage}x")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            position_size = signal.get("position_size", 0)
            if position_size <= 0:
                self.logger.warning("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏")
                return False
            else:
                self.logger.debug(f"   ‚úÖ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {position_size}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            if self.position_manager:
                try:
                    positions = await self.position_manager.get_all_positions()
                    active_positions = [p for p in positions if p.size != 0]
                    if len(active_positions) >= self.max_positions:
                        self.logger.warning(
                            f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–π: {len(active_positions)}/{self.max_positions}"
                        )
                        return False
                    else:
                        self.logger.debug(
                            f"   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(active_positions)}/{self.max_positions}"
                        )
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏: {e}")

            # ML-–ø—Ä–æ–≤–µ—Ä–∫–∏ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã
            if self.ml_enabled:
                if not self._check_ml_requirements(signal, side):
                    self.logger.warning("‚ùå –°–∏–≥–Ω–∞–ª –Ω–µ –ø—Ä–æ—à–µ–ª ML-–ø—Ä–æ–≤–µ—Ä–∫—É")
                    return False
                else:
                    self.logger.debug("   ‚úÖ ML-—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")

            self.logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª {symbol} –ø—Ä–æ—à–µ–ª –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∏—Å–∫–æ–≤")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∏—Å–∫–æ–≤ –¥–ª—è {symbol}: {e}")
            return False

    def _check_ml_requirements(self, signal: dict[str, Any], side: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ ML-—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            ml_predictions = signal.get("ml_predictions", {})
            if not ml_predictions:
                self.logger.warning("ML predictions not found in signal")
                return False

            # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è —Å—Ç–æ—Ä–æ–Ω—ã
            model_config = self.ml_integration.get(f"{side}_model", {})
            profile_model = model_config.get(self.current_profile, {})

            if not profile_model:
                return True  # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏
            profit_probability = ml_predictions.get("profit_probability", 0)
            loss_probability = ml_predictions.get("loss_probability", 0)

            profit_min = profile_model.get("profit_probability_min", 0)
            profit_max = profile_model.get("profit_probability_max", 1)
            loss_min = profile_model.get("loss_probability_min", 0)
            loss_max = profile_model.get("loss_probability_max", 1)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ—Ä–æ–≥–∞–º
            if not (profit_min <= profit_probability <= profit_max):
                self.logger.warning(
                    f"Profit probability {profit_probability} outside range [{profit_min}, {profit_max}]"
                )
                return False

            if not (loss_min <= loss_probability <= loss_max):
                self.logger.warning(
                    f"Loss probability {loss_probability} outside range [{loss_min}, {loss_max}]"
                )
                return False

            return True

        except Exception as e:
            self.logger.error(f"Error checking ML requirements: {e}")
            return False

    async def check_global_risks(self) -> RiskStatus:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        if not self.enabled:
            return RiskStatus(requires_action=False)

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ —Ä–∏—Å–∫–∞
            if self.position_manager:
                total_risk = await self._calculate_total_risk()
                if total_risk > self.max_total_risk:
                    return RiskStatus(
                        requires_action=True,
                        action="reduce_positions",
                        message=f"Total risk {total_risk:.2%} exceeds limit {self.max_total_risk:.2%}",
                    )

            # ML-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
            if self.ml_enabled:
                ml_status = await self._check_ml_performance()
                if ml_status.requires_action:
                    return ml_status

            return RiskStatus(requires_action=False)

        except Exception as e:
            self.logger.error(f"Error checking global risks: {e}")
            return RiskStatus(
                requires_action=True, action="pause", message=f"Risk check error: {e}"
            )

    async def _check_ml_performance(self) -> RiskStatus:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ML-–º–æ–¥–µ–ª–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä–æ–≥–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            accuracy_threshold = self.monitoring.get("accuracy_alert_threshold", 5.0)
            expected_buy_accuracy = self.monitoring.get("expected_buy_accuracy", 63.04)
            expected_sell_accuracy = self.monitoring.get("expected_sell_accuracy", 60.0)

            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏–π
            return RiskStatus(requires_action=False)

        except Exception as e:
            self.logger.error(f"Error checking ML performance: {e}")
            return RiskStatus(requires_action=False)

    async def _calculate_total_risk(self) -> Decimal:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â–∏–π —Ä–∏—Å–∫ –ø–æ –≤—Å–µ–º –ø–æ–∑–∏—Ü–∏—è–º"""
        if not self.position_manager:
            return Decimal("0")

        try:
            positions = await self.position_manager.get_all_positions()
            total_risk = Decimal("0")

            for position in positions:
                if position.size != 0:
                    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–∫—Ç–∏–≤–∞ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏
                    asset_category = self.get_asset_category(position.symbol)
                    asset_risk_multiplier = Decimal(str(asset_category.get("risk_multiplier", 1.0)))

                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∏—Å–∫ —Å —É—á–µ—Ç–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    position_risk = abs(position.size) * self.risk_per_trade * asset_risk_multiplier
                    total_risk += position_risk

            return total_risk

        except Exception as e:
            self.logger.error(f"Error calculating total risk: {e}")
            return Decimal("0")

    def set_risk_profile(self, profile_name: str) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è —Ä–∏—Å–∫–∞"""
        if profile_name in self.risk_profiles:
            self.current_profile = profile_name
            self.logger.info(f"Risk profile changed to: {profile_name}")
        else:
            self.logger.warning(f"Unknown risk profile: {profile_name}")

    async def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        return bool(self.enabled)

    def is_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        return bool(self.enabled)
