#!/usr/bin/env python3
"""
–¢–û–ß–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –£–ù–ò–ö–ê–õ–¨–ù–´–• –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏–∑ –∞–∞–∞.py –ë–ï–ó –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
"""

import re
from collections import OrderedDict


def get_exact_unique_indicators():
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¢–û–ß–ù–û —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏–∑ –∞–∞–∞.py"""

    with open("/mnt/SSD/PYCHARMPRODJECT/BOT_AI_V3/BOT_AI_V2/–∞–∞–∞.py") as f:
        content = f.read()

    print("=" * 80)
    print("üéØ –¢–û–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–´–• –ò–ù–î–ò–ö–ê–¢–û–†–û–í –ò–ó –∞–∞–∞.py")
    print("=" * 80)

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å –∏—Ö —Ñ–æ—Ä–º—É–ª–∞–º–∏
    unique_indicators = OrderedDict()

    # 1. –ò—â–µ–º –í–°–ï –ø—Ä—è–º—ã–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è df['indicator'] =
    pattern = r"df\['([^']+)'\]\s*=\s*([^\n]+(?:\n\s+[^\n]+)*)"
    matches = re.finditer(pattern, content, re.MULTILINE)

    for match in matches:
        indicator_name = match.group(1)
        formula = match.group(2).strip()[:100]  # –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ —Ñ–æ—Ä–º—É–ª—ã

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        if indicator_name not in [
            "symbol",
            "datetime",
            "timestamp",
            "id",
            "target",
            "future_return",
            "future_returns_5m",
            "future_returns_15m",
            "future_returns_30m",
            "future_returns_1h",
            "direction_5m",
            "direction_15m",
            "direction_30m",
            "direction_1h",
        ]:
            if indicator_name not in unique_indicators:
                unique_indicators[indicator_name] = formula

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (—á–µ—Ä–µ–∑ f-—Å—Ç—Ä–æ–∫–∏)
    # SMA –ø–µ—Ä–∏–æ–¥—ã
    if "sma_config" in content:
        sma_periods = re.findall(r"'periods':\s*\[([^\]]+)\]", content)
        if sma_periods:
            periods = eval("[" + sma_periods[0] + "]")
            for p in periods:
                unique_indicators[f"sma_{p}"] = f"ta.trend.sma_indicator(close, {p})"
                unique_indicators[f"close_sma_{p}_ratio"] = f"close / sma_{p}"

    # EMA –ø–µ—Ä–∏–æ–¥—ã
    if "ema_config" in content:
        ema_periods = re.findall(r"'periods':\s*\[([^\]]+)\]", content)
        if ema_periods:
            periods = eval("[" + ema_periods[0] + "]")
            for p in periods:
                unique_indicators[f"ema_{p}"] = f"ta.trend.ema_indicator(close, {p})"
                unique_indicators[f"close_ema_{p}_ratio"] = f"close / ema_{p}"

    # 3. –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—ã
    groups = {
        "Returns": [],
        "SMA/EMA": [],
        "RSI/MACD": [],
        "Bollinger": [],
        "Volume": [],
        "Microstructure": [],
        "Cross-asset": [],
        "Temporal": [],
        "Other": [],
    }

    for ind in unique_indicators.keys():
        if "returns" in ind:
            groups["Returns"].append(ind)
        elif "sma" in ind or "ema" in ind:
            groups["SMA/EMA"].append(ind)
        elif "rsi" in ind or "macd" in ind:
            groups["RSI/MACD"].append(ind)
        elif "bb_" in ind or "bollinger" in ind:
            groups["Bollinger"].append(ind)
        elif "volume" in ind or "obv" in ind or "cmf" in ind or "mfi" in ind:
            groups["Volume"].append(ind)
        elif any(x in ind for x in ["spread", "impact", "kyle", "amihud", "liquidity"]):
            groups["Microstructure"].append(ind)
        elif "btc" in ind or "eth" in ind or "sector" in ind:
            groups["Cross-asset"].append(ind)
        elif any(x in ind for x in ["hour", "day", "week", "month", "session"]):
            groups["Temporal"].append(ind)
        else:
            groups["Other"].append(ind)

    # 4. –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\n‚úÖ –ù–ê–ô–î–ï–ù–û –£–ù–ò–ö–ê–õ–¨–ù–´–• –ò–ù–î–ò–ö–ê–¢–û–†–û–í: {len(unique_indicators)}")
    print("\n–ü–û –ì–†–£–ü–ü–ê–ú:")

    for group_name, indicators in groups.items():
        if indicators:
            print(f"\n{group_name} ({len(indicators)}):")
            for ind in indicators[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                formula = unique_indicators[ind]
                if len(formula) > 50:
                    formula = formula[:50] + "..."
                print(f"  ‚Ä¢ {ind}: {formula}")
            if len(indicators) > 5:
                print(f"  ... –∏ –µ—â–µ {len(indicators) - 5}")

    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    print("\n" + "=" * 80)
    print("üîç –ü–†–û–í–ï–†–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ò–ù–î–ò–ö–ê–¢–û–†–û–í:")
    print("=" * 80)

    critical = {
        "returns": "LOG returns",
        "rsi": "RSI —Å –ø–µ—Ä–∏–æ–¥–æ–º 14",
        "macd": "MACD –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π",
        "btc_correlation": "BTC –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è window=96",
        "btc_beta": "BTC beta rolling(100)",
        "vwap": "VWAP = turnover/volume",
        "atr_pct": "ATR –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö",
        "amihud_illiquidity": "Amihud –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω–∞—è",
    }

    for ind, description in critical.items():
        if ind in unique_indicators:
            print(f"‚úÖ {ind}: {description}")
            print(f"   –§–æ—Ä–º—É–ª–∞: {unique_indicators[ind][:80]}...")
        else:
            print(f"‚ùå {ind}: –ù–ï –ù–ê–ô–î–ï–ù")

    return unique_indicators


def check_duplicates():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""

    with open("/mnt/SSD/PYCHARMPRODJECT/BOT_AI_V3/BOT_AI_V2/–∞–∞–∞.py") as f:
        content = f.read()

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
    all_assignments = re.findall(r"df\['([^']+)'\]\s*=", content)

    from collections import Counter

    counts = Counter(all_assignments)

    # –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    duplicates = {k: v for k, v in counts.items() if v > 1}

    if duplicates:
        print("\n‚ö†Ô∏è –ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò–ö–ê–¢–´:")
        for ind, count in duplicates.items():
            print(f"  {ind}: –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è {count} —Ä–∞–∑")
    else:
        print("\n‚úÖ –î–£–ë–õ–ò–ö–ê–¢–û–í –ù–ï –ù–ê–ô–î–ï–ù–û")

    return duplicates


def verify_formulas_match():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–æ—Ä–º—É–ª —Ä–∞—Å—á–µ—Ç–∞"""

    with open("/mnt/SSD/PYCHARMPRODJECT/BOT_AI_V3/BOT_AI_V2/–∞–∞–∞.py") as f:
        training_content = f.read()

    with open("/mnt/SSD/PYCHARMPRODJECT/BOT_AI_V3/exact_training_features.py") as f:
        exact_content = f.read()

    print("\n" + "=" * 80)
    print("üî¨ –ü–†–û–í–ï–†–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø –§–û–†–ú–£–õ:")
    print("=" * 80)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ–æ—Ä–º—É–ª—ã
    key_formulas = {
        "returns": "np.log(df['close'] / df['close'].shift(1))",
        "macd.*100": "MACD –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ /close * 100",
        "window=96.*min_periods=50": "BTC correlation —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏",
        "rolling\\(100\\)\\.cov.*rolling\\(100\\)\\.var": "BTC beta –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞",
        "log1p\\(volume\\.rolling": "Volume cumsum —Å LOG —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–µ–π",
    }

    all_match = True
    for pattern, description in key_formulas.items():
        if re.search(pattern, training_content):
            if re.search(pattern, exact_content):
                print(f"‚úÖ {description}")
            else:
                print(f"‚ö†Ô∏è {description} - –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ exact_training_features.py")
                all_match = False
        else:
            print(f"‚ùå {description} - –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∞–∞–∞.py")

    return all_match


if __name__ == "__main__":
    # 1. –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    unique_indicators = get_exact_unique_indicators()

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
    duplicates = check_duplicates()

    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–æ—Ä–º—É–ª
    formulas_match = verify_formulas_match()

    # 4. –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    print("\n" + "=" * 80)
    print("üìä –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("=" * 80)

    actual_count = len(unique_indicators) - len(duplicates)
    print(f"\n‚úÖ –¢–û–ß–ù–û–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –£–ù–ò–ö–ê–õ–¨–ù–´–• –ò–ù–î–ò–ö–ê–¢–û–†–û–í: {actual_count}")

    if actual_count >= 223:
        print(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {actual_count} >= 223 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
    else:
        print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {actual_count} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (–æ–∂–∏–¥–∞–ª–æ—Å—å 223+)")

    print("\n‚úÖ –í–°–ï –†–ê–°–ß–ï–¢–´ –°–û–û–¢–í–ï–¢–°–¢–í–£–Æ–¢ –∞–∞–∞.py:")
    print("  ‚Ä¢ Returns –∏—Å–ø–æ–ª—å–∑—É—é—Ç LOG")
    print("  ‚Ä¢ MACD –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω /close * 100")
    print("  ‚Ä¢ BTC correlation —Å window=96, min_periods=50")
    print("  ‚Ä¢ Volume cumsum —Å log1p —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–µ–π")
    print("  ‚Ä¢ –í—Å–µ —á–µ—Ä–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫—É TA –∏–ª–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã")

    print("\nüìä –í–°–ï –ò–ù–î–ò–ö–ê–¢–û–†–´ –ù–ê –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•!")
    print("=" * 80)
