"""
Telegram –±–æ—Ç –¥–ª—è BOT Trading v3.
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ v2 –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π.
"""

from datetime import datetime, timedelta

from sqlalchemy import and_, func, select
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
)

from core.config.config_manager import ConfigManager
from core.logger import get_logger
from core.system.orchestrator import SystemOrchestrator
from database.connections import get_async_db
from database.models.base_models import Balance, Trade
from database.models.signal import Signal

logger = get_logger(__name__)


class TelegramBotV3:
    """Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è BOT Trading v3."""

    def __init__(self, orchestrator: SystemOrchestrator, config: ConfigManager):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞.

        Args:
            orchestrator: –°–∏—Å—Ç–µ–º–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
            config: –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        self.orchestrator = orchestrator
        self.config = config

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.token = config.get_value("telegram.bot_token")
        if not self.token:
            raise ValueError("Telegram bot token not found in config")

        # –ü–æ–ª—É—á–∞–µ–º chat_id –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.chat_id = config.get_value("telegram.chat_id")

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.app = ApplicationBuilder().token(self.token).build()

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._setup_handlers()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–∏–∑ v2)
        self.error_stats = {"errors": 0, "error_times": []}

        logger.info("Telegram bot v3 initialized")

    def _setup_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥."""
        handlers = [
            ("start", self.cmd_start),
            ("stop", self.cmd_stop),
            ("status", self.cmd_status),
            ("stats", self.cmd_stats),
            ("sessionpnl", self.cmd_sessionpnl),
            ("traders", self.cmd_traders),
            ("strategies", self.cmd_strategies),
            ("menu", self.cmd_menu),
            ("help", self.cmd_help),
            ("update_config", self.cmd_update_config),
        ]

        for command, handler in handlers:
            self.app.add_handler(CommandHandler(command, handler))

        self.app.add_handler(CallbackQueryHandler(self.callback_handler))

    async def cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
            is_running = self.orchestrator.is_running

            if not is_running:
                await self.orchestrator.start()

                msg = "üöÄ BOT Trading v3 –∑–∞–ø—É—â–µ–Ω!\n"
                msg += f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤: {len(self.orchestrator.trader_manager.traders)}\n"
                msg += "–ò—Å–ø–æ–ª—å–∑—É–π /menu –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
            else:
                msg = "ü§ñ –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏ /menu –¥–ª—è –∫–æ–º–∞–Ω–¥."

            await update.message.reply_text(msg)

        except Exception as e:
            logger.error(f"Error starting bot: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e!s}")

    async def cmd_stop(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop."""
        try:
            is_running = self.orchestrator.is_running

            if is_running:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É
                await self.orchestrator.stop()
                await update.message.reply_text("‚èπÔ∏è BOT Trading v3 –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            else:
                await update.message.reply_text("‚èπÔ∏è –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª —É–∂–µ –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

        except Exception as e:
            logger.error(f"Error stopping bot: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e!s}")

    async def cmd_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status."""
        status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if self.orchestrator.is_running else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

        msg = f"üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {status}\n"
        msg += "üìÖ –í–µ—Ä—Å–∏—è: 3.0.0-alpha\n\n"

        if self.orchestrator.is_running:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–π–¥–µ—Ä–∞—Ö
            traders = self.orchestrator.trader_manager.traders
            msg += f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤: {len(traders)}\n"

            for trader_id, trader in traders.items():
                strategy_count = len(trader.strategy_manager.strategies)
                msg += f"\nü§ñ {trader_id}:\n"
                msg += f"  - –°—Ç—Ä–∞—Ç–µ–≥–∏–π: {strategy_count}\n"
                msg += f"  - –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if trader.is_running else '‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"

        await update.message.reply_text(msg)

    async def cmd_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats."""
        try:
            async with get_async_db() as db:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                result = await db.execute(
                    select(func.count(Trade.id), func.sum(Trade.pnl)).where(
                        Trade.status == "closed"
                    )
                )
                count, total_pnl = result.fetchone()

                msg = "üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                msg += f"–ó–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫: {count or 0}\n"
                msg += f"–û–±—â–∏–π PnL: {(total_pnl or 0):.2f} USDT\n"

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç—Ä–µ–π–¥–µ—Ä–∞–º
                result = await db.execute(
                    select(Trade.trader_id, func.count(Trade.id), func.sum(Trade.pnl))
                    .where(Trade.status == "closed")
                    .group_by(Trade.trader_id)
                )

                trader_stats = result.fetchall()
                if trader_stats:
                    msg += "\nüìä –ü–æ —Ç—Ä–µ–π–¥–µ—Ä–∞–º:\n"
                    for trader_id, t_count, t_pnl in trader_stats:
                        win_rate = await self._calculate_win_rate(db, trader_id)
                        msg += f"\nü§ñ {trader_id}:\n"
                        msg += f"  –°–¥–µ–ª–æ–∫: {t_count}\n"
                        msg += f"  PnL: {t_pnl:.2f} USDT\n"
                        msg += f"  Win Rate: {win_rate:.1f}%\n"

                await update.message.reply_text(msg)

        except Exception as e:
            logger.error(f"Error getting stats: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e!s}")

    async def cmd_sessionpnl(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sessionpnl –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å v2."""
        try:
            async with get_async_db() as db:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)
                session_start = datetime.utcnow() - timedelta(days=1)

                result = await db.execute(
                    select(func.count(Trade.id), func.sum(Trade.pnl)).where(
                        and_(Trade.status == "closed", Trade.created_at >= session_start)
                    )
                )
                count, pnl = result.fetchone()

                session_id = f"Session_{datetime.now().strftime('%Y_%m_%d')}"
                msg = f"üìí –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è: {session_id}\n"
                msg += f"–°–¥–µ–ª–æ–∫: {count or 0}, PnL: {(pnl or 0):.2f} USDT"

                await update.message.reply_text(msg)

        except Exception as e:
            logger.error(f"Error getting session PnL: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e!s}")

    async def cmd_traders(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤."""
        traders = self.orchestrator.trader_manager.list_traders()

        if not traders:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤")
            return

        msg = "üë• –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤:\n\n"
        for trader_info in traders:
            msg += f"ü§ñ {trader_info['id']}:\n"
            msg += f"  - –°—Ç—Ä–∞—Ç–µ–≥–∏–π: {trader_info['strategy_count']}\n"
            msg += f"  - –°—Ç–∞—Ç—É—Å: {trader_info['status']}\n"
            msg += f"  - –°–æ–∑–¥–∞–Ω: {trader_info['created_at']}\n\n"

        await update.message.reply_text(msg)

    async def cmd_strategies(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏."""
        msg = "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:\n\n"

        traders = self.orchestrator.trader_manager.traders
        if not traders:
            msg += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤"
        else:
            for trader_id, trader in traders.items():
                strategies = trader.strategy_manager.list_strategies()

                if strategies:
                    msg += f"ü§ñ –¢—Ä–µ–π–¥–µ—Ä {trader_id}:\n"
                    for strategy in strategies:
                        status_emoji = "‚úÖ" if strategy["status"] == "active" else "‚è∏Ô∏è"
                        msg += f"  - {strategy['name']} {status_emoji}\n"
                    msg += "\n"

        await update.message.reply_text(msg)

    async def cmd_update_config(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã SL/TP –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å v2)."""
        try:
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            self.config.reload()

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
            for trader_id, trader in self.orchestrator.trader_manager.traders.items():
                trader.reload_config()

            msg = "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n"
            msg += "–ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ –Ω–æ–≤—ã–º —Å–¥–µ–ª–∫–∞–º."

            await update.message.reply_text(msg)

        except Exception as e:
            logger.error(f"Error updating config: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e!s}")

    async def cmd_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
        keyboard = [
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
                InlineKeyboardButton("üìà –°–∏–≥–Ω–∞–ª—ã", callback_data="view_signals"),
            ],
            [
                InlineKeyboardButton("üë• –¢—Ä–µ–π–¥–µ—Ä—ã", callback_data="traders"),
                InlineKeyboardButton("üìã –°—Ç—Ä–∞—Ç–µ–≥–∏–∏", callback_data="strategies"),
            ],
            [
                InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance"),
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å SL/TP", callback_data="refresh_once"),
            ],
            [
                InlineKeyboardButton("üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏", callback_data="recent_trades"),
                InlineKeyboardButton("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="monitor_trades"),
            ],
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        version = self.config.get_value("bot_version", "3.0.0-alpha")
        msg = f"üéõÔ∏è BOT Trading v3 ({version})\n"
        msg += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

        await update.message.reply_text(msg, reply_markup=reply_markup)

    async def cmd_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º."""
        version = self.config.get_value("bot_version", "3.0.0-alpha")
        msg = f"""
üìö BOT Trading v3 ({version}) - –ö–æ–º–∞–Ω–¥—ã:

/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É
/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É
/status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
/stats - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/sessionpnl - PnL —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
/traders - –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
/strategies - –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
/update_config - –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ /menu
        """
        await update.message.reply_text(msg)

    async def callback_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫."""
        query = update.callback_query
        await query.answer()

        handlers = {
            "stats": self._handle_stats_callback,
            "view_signals": self._handle_signals_callback,
            "traders": self._handle_traders_callback,
            "strategies": self._handle_strategies_callback,
            "balance": self._handle_balance_callback,
            "refresh_once": self._handle_refresh_config_callback,
            "recent_trades": self._handle_recent_trades_callback,
            "monitor_trades": self._handle_monitor_trades_callback,
        }

        handler = handlers.get(query.data)
        if handler:
            await handler(query)
        else:
            await query.edit_message_text(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {query.data}")

    async def _handle_stats_callback(self, query):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""

        # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è cmd_stats
        class FakeUpdate:
            message = query

        await self.cmd_stats(FakeUpdate(), None)

    async def _handle_signals_callback(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã."""
        try:
            async with get_async_db() as db:
                result = await db.execute(
                    select(Signal).order_by(Signal.created_at.desc()).limit(10)
                )
                signals = result.scalars().all()

                if not signals:
                    await query.edit_message_text("üì° –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤")
                    return

                msg = "üì° –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–∏–≥–Ω–∞–ª–æ–≤:\n\n"
                for signal in signals:
                    emoji = "üü¢" if signal.action == "buy" else "üî¥"
                    msg += f"{emoji} {signal.symbol} - {signal.action.upper()}\n"
                    msg += f"  –ò—Å—Ç–æ—á–Ω–∏–∫: {signal.source}\n"
                    msg += f"  –°–∏–ª–∞: {signal.strength:.2f}\n"
                    msg += f"  {signal.created_at.strftime('%H:%M:%S')}\n\n"

                await query.edit_message_text(msg)

        except Exception as e:
            logger.error(f"Error getting signals: {e}")
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e!s}")

    async def _handle_balance_callback(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å."""
        try:
            async with get_async_db() as db:
                result = await db.execute(select(Balance).order_by(Balance.asset))
                balances = result.scalars().all()

                if not balances:
                    await query.edit_message_text("üí∞ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–ª–∞–Ω—Å–µ")
                    return

                msg = "üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ –∞–∫—Ç–∏–≤–∞–º:\n\n"

                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∞–∫—Ç–∏–≤–∞–º
                asset_totals = {}
                for balance in balances:
                    if balance.asset not in asset_totals:
                        asset_totals[balance.asset] = {"free": 0, "locked": 0}

                    asset_totals[balance.asset]["free"] += balance.free
                    asset_totals[balance.asset]["locked"] += balance.locked

                for asset, totals in asset_totals.items():
                    total = totals["free"] + totals["locked"]
                    if total > 0.0001:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –±–∞–ª–∞–Ω—Å—ã
                        msg += f"{asset}:\n"
                        msg += f"  –°–≤–æ–±–æ–¥–Ω–æ: {totals['free']:.4f}\n"
                        if totals["locked"] > 0:
                            msg += f"  –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {totals['locked']:.4f}\n"
                        msg += f"  –í—Å–µ–≥–æ: {total:.4f}\n\n"

                await query.edit_message_text(msg)

        except Exception as e:
            logger.error(f"Error getting balance: {e}")
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e!s}")

    async def _handle_refresh_config_callback(self, query):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å v2)."""
        try:
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            self.config.reload()

            msg = "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SL/TP –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ config —Ñ–∞–π–ª–æ–≤!\n"
            msg += "–ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ –Ω–æ–≤—ã–º —Å–¥–µ–ª–∫–∞–º."

            await query.edit_message_text(msg)

        except Exception as e:
            logger.error(f"Error refreshing config: {e}")
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e!s}")

    async def _handle_recent_trades_callback(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏."""
        try:
            async with get_async_db() as db:
                result = await db.execute(
                    select(Trade)
                    .where(Trade.status == "closed")
                    .order_by(Trade.created_at.desc())
                    .limit(10)
                )
                trades = result.scalars().all()

                if not trades:
                    await query.edit_message_text("üìà –ù–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫")
                    return

                msg = "üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–¥–µ–ª–æ–∫:\n\n"
                for trade in trades:
                    emoji = "üü¢" if trade.pnl > 0 else "üî¥"
                    msg += f"{emoji} {trade.symbol} {trade.side.upper()}\n"
                    msg += f"  –û–±—ä–µ–º: {trade.quantity}\n"
                    msg += f"  –í—Ö–æ–¥: {trade.entry_price} ‚Üí –í—ã—Ö–æ–¥: {trade.exit_price}\n"
                    msg += f"  PnL: {trade.pnl:.2f} USDT ({trade.pnl_percentage:.2f}%)\n"
                    msg += f"  {trade.created_at.strftime('%Y-%m-%d %H:%M')}\n\n"

                await query.edit_message_text(msg)

        except Exception as e:
            logger.error(f"Error getting trades: {e}")
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e!s}")

    async def _handle_monitor_trades_callback(self, query):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π."""
        try:
            async with get_async_db() as db:
                result = await db.execute(
                    select(Trade).where(Trade.status == "open").order_by(Trade.created_at.desc())
                )
                open_trades = result.scalars().all()

                if not open_trades:
                    await query.edit_message_text("üìä –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
                    return

                msg = "üìä –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:\n\n"
                total_pnl = 0

                for trade in open_trades:
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ PnL
                    msg += f"{'üü¢' if trade.side == 'buy' else 'üî¥'} {trade.symbol}\n"
                    msg += f"  –¢—Ä–µ–π–¥–µ—Ä: {trade.trader_id}\n"
                    msg += f"  –û–±—ä–µ–º: {trade.quantity}\n"
                    msg += f"  –í—Ö–æ–¥: {trade.entry_price}\n"
                    msg += f"  SL: {trade.stop_loss or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
                    msg += f"  TP: {trade.take_profit or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
                    msg += f"  –í—Ä–µ–º—è: {trade.created_at.strftime('%H:%M:%S')}\n\n"

                await query.edit_message_text(msg)

        except Exception as e:
            logger.error(f"Error monitoring trades: {e}")
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e!s}")

    async def _handle_traders_callback(self, query):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤."""

        class FakeUpdate:
            message = query

        await self.cmd_traders(FakeUpdate(), None)

    async def _handle_strategies_callback(self, query):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π."""

        class FakeUpdate:
            message = query

        await self.cmd_strategies(FakeUpdate(), None)

    async def _calculate_win_rate(self, db, trader_id: str) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç Win Rate –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–∞."""
        result = await db.execute(
            select(func.count(Trade.id).filter(Trade.pnl > 0), func.count(Trade.id)).where(
                and_(Trade.trader_id == trader_id, Trade.status == "closed")
            )
        )
        wins, total = result.fetchone()

        if total == 0:
            return 0.0

        return (wins / total) * 100

    async def send_notification(self, message: str, parse_mode: str = None):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram.

        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (HTML, Markdown)
        """
        if not self.chat_id:
            logger.warning("Chat ID not configured, skipping notification")
            return

        try:
            await self.app.bot.send_message(
                chat_id=self.chat_id, text=message, parse_mode=parse_mode
            )
        except Exception as e:
            logger.error(f"Error sending notification: {e}")

    async def send_trade_notification(self, trade: Trade):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ."""
        emoji = "üü¢" if trade.side == "buy" else "üî¥"
        status_emoji = "‚úÖ" if trade.status == "closed" else "üîÑ"

        msg = f"{status_emoji} <b>–°–¥–µ–ª–∫–∞ {trade.status.upper()}</b>\n\n"
        msg += f"{emoji} {trade.symbol} {trade.side.upper()}\n"
        msg += f"–¢—Ä–µ–π–¥–µ—Ä: {trade.trader_id}\n"
        msg += f"–û–±—ä–µ–º: {trade.quantity}\n"

        if trade.status == "open":
            msg += f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {trade.entry_price}\n"
            if trade.stop_loss:
                msg += f"Stop Loss: {trade.stop_loss}\n"
            if trade.take_profit:
                msg += f"Take Profit: {trade.take_profit}\n"
        else:  # closed
            msg += f"–í—Ö–æ–¥: {trade.entry_price} ‚Üí –í—ã—Ö–æ–¥: {trade.exit_price}\n"
            pnl_emoji = "üí∞" if trade.pnl > 0 else "üí∏"
            msg += f"{pnl_emoji} PnL: {trade.pnl:.2f} USDT ({trade.pnl_percentage:.2f}%)\n"

        await self.send_notification(msg, parse_mode="HTML")

    async def send_error_notification(self, error: str, critical: bool = False):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ."""
        emoji = "üö®" if critical else "‚ö†Ô∏è"

        msg = f"{emoji} <b>{'–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê' if critical else '–û—à–∏–±–∫–∞'}</b>\n\n"
        msg += f"{error}\n\n"
        msg += f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"

        await self.send_notification(msg, parse_mode="HTML")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫
        self.error_stats["errors"] += 1
        self.error_stats["error_times"].append(datetime.now())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏ –æ—à–∏–±–æ–∫ (–∏–∑ v2)
        self._check_error_threshold()

    def _check_error_threshold(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Ä–æ–≥–∏ –æ—à–∏–±–æ–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π."""
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ—à–∏–±–∫–∏ (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
        cutoff_time = datetime.now() - timedelta(hours=1)
        self.error_stats["error_times"] = [
            t for t in self.error_stats["error_times"] if t > cutoff_time
        ]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        recent_errors = len(self.error_stats["error_times"])

        error_threshold = self.config.get_value("telegram.error_threshold", 10)

        if recent_errors >= error_threshold:
            logger.critical(f"Error threshold reached: {recent_errors} errors in last hour")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è

    async def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞."""
        logger.info("Starting Telegram bot...")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await self.send_notification("ü§ñ BOT Trading v3 Telegram Bot –∑–∞–ø—É—â–µ–Ω!")

        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await self.app.run_polling()

    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Telegram –±–æ—Ç–∞."""
        logger.info("Stopping Telegram bot...")
        await self.app.stop()
        await self.send_notification("üõë BOT Trading v3 Telegram Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
