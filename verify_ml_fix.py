#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ ML —Å–∏—Å—Ç–µ–º–µ.
"""

import sys
import traceback
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent))


def test_feature_config():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
    try:
        from ml.config.features_240 import get_feature_count, get_required_features_list

        features = get_required_features_list()
        count = get_feature_count()

        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {count} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        print(f"   –ü–µ—Ä–≤—ã–µ 5: {features[:5]}")
        print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5: {features[-5:]}")

        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
        traceback.print_exc()
        return False


def test_training_exact_features():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–ª–∞—Å—Å —Ç–æ—á–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
    try:
        from ml.logic.training_exact_features import TrainingExactFeatures

        config = {"features": {}}
        engineer = TrainingExactFeatures(config)

        print("‚úÖ TrainingExactFeatures –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"   –û–∂–∏–¥–∞–µ—Ç—Å—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {engineer.expected_feature_count}")

        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ TrainingExactFeatures: {e}")
        traceback.print_exc()
        return False


def test_production_config():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    try:
        from production_features_config import CRITICAL_FORMULAS, PRODUCTION_FEATURES

        print(f"‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {len(PRODUCTION_FEATURES)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        print(f"   –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º—É–ª: {len(CRITICAL_FORMULAS)}")

        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        traceback.print_exc()
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ML –°–ò–°–¢–ï–ú–´")
    print("=" * 40)

    tests = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤", test_feature_config),
        ("–¢–æ—á–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –æ–±—É—á–µ–Ω–∏—è", test_training_exact_features),
        ("–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_production_config),
    ]

    passed = 0
    total = len(tests)

    for test_name, test_func in tests:
        print(f"\nüß™ –¢–µ—Å—Ç: {test_name}")
        if test_func():
            passed += 1
        else:
            print(f"‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {test_name}")

    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")

    if passed == total:
        print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! ML —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.")
        return True
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
