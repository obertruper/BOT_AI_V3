#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ML –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""

import asyncio

from core.logger import setup_logger
from database.connections.postgres import AsyncPGPool

logger = setup_logger(__name__)


async def check_ml_data():
    print("=" * 80)
    print("–§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ML –î–ê–ù–ù–´–• –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
    print("=" * 80)

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ ML predictions
    print("\n1. –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 ML predictions —Å –ø–æ–ª–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏:")
    predictions = await AsyncPGPool.fetch(
        """
        SELECT
            symbol,
            datetime,
            features_count,
            signal_type,
            signal_confidence,
            predicted_return_15m,
            direction_15m,
            direction_15m_confidence,
            CASE WHEN features_array IS NOT NULL THEN '–î–ê' ELSE '–ù–ï–¢' END as has_array,
            CASE WHEN features_array IS NOT NULL
                 THEN jsonb_array_length(features_array::jsonb)
                 ELSE 0
            END as array_length
        FROM ml_predictions
        WHERE datetime > NOW() - INTERVAL '10 minutes'
        ORDER BY datetime DESC
        LIMIT 5
    """
    )

    if predictions:
        for pred in predictions:
            print(f"\n   –°–∏–º–≤–æ–ª: {pred['symbol']}")
            print(f"   –í—Ä–µ–º—è: {pred['datetime']}")
            print(f"   –ö–æ–ª-–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {pred['features_count']}")
            print(
                f"   –ú–∞—Å—Å–∏–≤ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {pred['has_array']} (–¥–ª–∏–Ω–∞: {pred['array_length']})"
            )
            conf = pred["signal_confidence"] * 100 if pred["signal_confidence"] else 0
            print(f"   –°–∏–≥–Ω–∞–ª: {pred['signal_type']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {conf:.1f}%)")
            print(f"   –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ 15–º: {pred['predicted_return_15m']:.4f}")
            dir_conf = (
                pred["direction_15m_confidence"] * 100 if pred["direction_15m_confidence"] else 0
            )
            print(f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 15–º: {pred['direction_15m']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {dir_conf:.1f}%)")
    else:
        print("   –ù–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç")

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º ProcessedMarketData
    print("\n2. ProcessedMarketData —Å ML –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏:")
    processed = await AsyncPGPool.fetch(
        """
        SELECT
            symbol,
            datetime,
            CASE WHEN ml_features IS NOT NULL THEN '–î–ê' ELSE '–ù–ï–¢' END as has_features,
            pg_column_size(ml_features::text) as size_bytes
        FROM processed_market_data
        WHERE datetime > NOW() - INTERVAL '1 hour'
        ORDER BY datetime DESC
        LIMIT 5
    """
    )

    if processed:
        for rec in processed:
            print(
                f"   {rec['symbol']:10} | {rec['datetime']} | ML –ø—Ä–∏–∑–Ω–∞–∫–∏: {rec['has_features']} | –†–∞–∑–º–µ—Ä: {rec['size_bytes']} –±–∞–π—Ç"
            )
    else:
        print("   –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å")

    # 3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    print("\n3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å:")

    # ML predictions
    ml_stats = await AsyncPGPool.fetchrow(
        """
        SELECT
            COUNT(*) as total,
            COUNT(DISTINCT symbol) as symbols,
            COUNT(CASE WHEN symbol != 'UNKNOWN' THEN 1 END) as valid_symbols,
            COUNT(CASE WHEN features_array IS NOT NULL THEN 1 END) as with_array,
            AVG(features_count) as avg_features
        FROM ml_predictions
        WHERE datetime > NOW() - INTERVAL '1 hour'
    """
    )

    print("\n   ML Predictions:")
    print(f"      –í—Å–µ–≥–æ: {ml_stats['total']}")
    print(f"      –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {ml_stats['symbols']}")
    print(f"      –° –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏: {ml_stats['valid_symbols']}")
    print(f"      –° –ø–æ–ª–Ω—ã–º –º–∞—Å—Å–∏–≤–æ–º –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {ml_stats['with_array']}")
    avg_f = ml_stats["avg_features"] if ml_stats["avg_features"] else 0
    print(f"      –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {avg_f:.0f}")

    # ProcessedMarketData
    proc_stats = await AsyncPGPool.fetchrow(
        """
        SELECT
            COUNT(*) as total,
            COUNT(DISTINCT symbol) as symbols,
            COUNT(CASE WHEN ml_features IS NOT NULL THEN 1 END) as with_features
        FROM processed_market_data
        WHERE datetime > NOW() - INTERVAL '1 hour'
    """
    )

    print("\n   ProcessedMarketData:")
    print(f"      –í—Å–µ–≥–æ: {proc_stats['total']}")
    print(f"      –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {proc_stats['symbols']}")
    print(f"      –° ML –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏: {proc_stats['with_features']}")

    # 4. –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    print("\n" + "=" * 80)
    print("–ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:")

    success_count = 0
    total_checks = 3

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: ML predictions —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
    if ml_stats["total"] > 0 and ml_stats["valid_symbols"] == ml_stats["total"]:
        print("   ‚úÖ –í—Å–µ ML predictions –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (–Ω–µ UNKNOWN)")
        success_count += 1
    elif ml_stats["total"] > 0:
        percent = (ml_stats["valid_symbols"] / ml_stats["total"]) * 100
        print(f"   ‚ö†Ô∏è  {percent:.0f}% ML predictions –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã")
        if percent > 90:
            success_count += 1
    else:
        print("   ‚ùå –ù–µ—Ç –Ω–æ–≤—ã—Ö ML predictions")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ü–æ–ª–Ω—ã–π –º–∞—Å—Å–∏–≤ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
    if ml_stats["total"] > 0 and ml_stats["with_array"] == ml_stats["total"]:
        print("   ‚úÖ –í—Å–µ ML predictions —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–æ–ª–Ω—ã–π –º–∞—Å—Å–∏–≤ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        success_count += 1
    elif ml_stats["total"] > 0:
        percent = (ml_stats["with_array"] / ml_stats["total"]) * 100
        print(f"   ‚ö†Ô∏è  {percent:.0f}% ML predictions —Å–æ–¥–µ—Ä–∂–∞—Ç –º–∞—Å—Å–∏–≤ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        if percent > 90:
            success_count += 1
    else:
        print("   ‚ùå –ù–µ—Ç –Ω–æ–≤—ã—Ö ML predictions")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: ProcessedMarketData —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
    if proc_stats["total"] > 0:
        print(f"   ‚úÖ ProcessedMarketData —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è ({proc_stats['total']} –∑–∞–ø–∏—Å–µ–π)")
        success_count += 1
    else:
        print("   ‚ö†Ô∏è  ProcessedMarketData –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å")
        print("      (–í–æ–∑–º–æ–∂–Ω–æ –∏–∑-–∑–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –≤ RealTimeIndicatorCalculator)")

    print("\n" + "-" * 40)
    if success_count == total_checks:
        print("üéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢ –ò–î–ï–ê–õ–¨–ù–û!")
    elif success_count >= 2:
        print("‚úÖ –û–°–ù–û–í–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û")
        print("   ML predictions —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –∏ –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    else:
        print("‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê")

    print("=" * 80)


if __name__ == "__main__":
    asyncio.run(check_ml_data())
