#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã

–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç.
"""

import asyncio
import logging
import sys
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, "/mnt/SSD/PYCHARMPRODJECT/BOT_AI_V3")


class MasterTestRunner:
    """–ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫–∞—Ç–µ–ª—å –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""

    def __init__(self):
        logging.basicConfig(
            level=logging.INFO,
            format="%(asctime)s | %(levelname)s | %(message)s",
            datefmt="%H:%M:%S",
        )
        self.logger = logging.getLogger(__name__)

        self.test_results = {
            "system_monitoring": {"status": "pending", "errors": [], "duration": 0},
            "comprehensive_diagnostics": {
                "status": "pending",
                "errors": [],
                "duration": 0,
            },
            "forced_signal_tests": {"status": "pending", "errors": [], "duration": 0},
        }

    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ"""
        self.logger.info("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BOT_AI_V3")
        self.logger.info("=" * 80)
        self.logger.info(f"‚è∞ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now()}")
        self.logger.info("=" * 80)

        start_time = time.time()

        try:
            # 1. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã (–±—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞)
            await self._run_system_monitoring()

            # 2. –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (–æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã)
            await self._run_comprehensive_diagnostics()

            # 3. –§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å –±–∞–ª–∞–Ω—Å–æ–º (–≥–ª—É–±–æ–∫–∏–µ —Ç–µ—Å—Ç—ã)
            await self._run_forced_signal_tests()

            # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            await self._generate_master_report()

        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ç–µ—Å—Ç–µ: {e}")

        finally:
            total_duration = time.time() - start_time
            self.logger.info(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {total_duration:.2f}s")

    async def _run_system_monitoring(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.logger.info("üîç –≠–¢–ê–ü 1: –°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        self.logger.info("-" * 60)

        start_time = time.time()

        try:
            from tests.trading_system_monitor import TradingSystemMonitor

            monitor = TradingSystemMonitor()
            await monitor.run_system_monitoring()

            self.test_results["system_monitoring"]["status"] = "completed"
            self.logger.info("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            self.test_results["system_monitoring"]["status"] = "failed"
            self.test_results["system_monitoring"]["errors"].append(str(e))

        finally:
            self.test_results["system_monitoring"]["duration"] = (
                time.time() - start_time
            )

    async def _run_comprehensive_diagnostics(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        self.logger.info("\nüî¨ –≠–¢–ê–ü 2: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
        self.logger.info("-" * 60)

        start_time = time.time()

        try:
            from tests.comprehensive_signal_order_tests import (
                ComprehensiveTradingDiagnostics,
            )

            diagnostics = ComprehensiveTradingDiagnostics()
            await diagnostics.run_comprehensive_tests()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if len(diagnostics.test_stats["errors"]) == 0:
                self.test_results["comprehensive_diagnostics"]["status"] = "completed"
                self.logger.info("‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                self.test_results["comprehensive_diagnostics"]["status"] = (
                    "completed_with_errors"
                )
                self.test_results["comprehensive_diagnostics"]["errors"] = (
                    diagnostics.test_stats["errors"]
                )
                self.logger.warning(
                    f"‚ö†Ô∏è  –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å {len(diagnostics.test_stats['errors'])} –æ—à–∏–±–∫–∞–º–∏"
                )

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
            self.test_results["comprehensive_diagnostics"]["status"] = "failed"
            self.test_results["comprehensive_diagnostics"]["errors"].append(str(e))

        finally:
            self.test_results["comprehensive_diagnostics"]["duration"] = (
                time.time() - start_time
            )

    async def _run_forced_signal_tests(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å –±–∞–ª–∞–Ω—Å–æ–º"""
        self.logger.info("\n‚ö° –≠–¢–ê–ü 3: –§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å –±–∞–ª–∞–Ω—Å–æ–º $150")
        self.logger.info("-" * 60)

        start_time = time.time()

        try:
            from tests.forced_signal_order_creation import ForcedSignalOrderTester

            tester = ForcedSignalOrderTester()
            await tester.run_forced_tests()

            self.test_results["forced_signal_tests"]["status"] = "completed"
            self.logger.info("‚úÖ –§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {e}")
            self.test_results["forced_signal_tests"]["status"] = "failed"
            self.test_results["forced_signal_tests"]["errors"].append(str(e))

        finally:
            self.test_results["forced_signal_tests"]["duration"] = (
                time.time() - start_time
            )

    async def _generate_master_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.logger.info("\n" + "=" * 80)
        self.logger.info("üìä –°–í–û–î–ù–´–ô –û–¢–ß–ï–¢ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        self.logger.info("=" * 80)

        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_tests = len(self.test_results)
        completed_tests = sum(
            1
            for result in self.test_results.values()
            if result["status"] in ["completed", "completed_with_errors"]
        )
        failed_tests = sum(
            1 for result in self.test_results.values() if result["status"] == "failed"
        )

        total_duration = sum(
            result["duration"] for result in self.test_results.values()
        )
        total_errors = sum(
            len(result["errors"]) for result in self.test_results.values()
        )

        self.logger.info("üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        self.logger.info(f"   üî∏ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        self.logger.info(f"   üî∏ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_tests}")
        self.logger.info(f"   üî∏ –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed_tests}")
        self.logger.info(f"   üî∏ –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_duration:.2f}s")
        self.logger.info(f"   üî∏ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {total_errors}")

        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ç–µ—Å—Ç–∞–º
        self.logger.info("\nüîç –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø:")
        for test_name, result in self.test_results.items():
            status_icon = {
                "completed": "‚úÖ",
                "completed_with_errors": "‚ö†Ô∏è",
                "failed": "‚ùå",
                "pending": "‚è≥",
            }.get(result["status"], "‚ùì")

            self.logger.info(
                f"   {status_icon} {test_name}: {result['status']} ({result['duration']:.2f}s)"
            )

            if result["errors"]:
                self.logger.info(f"      –û—à–∏–±–∫–∏ ({len(result['errors'])}):")
                for error in result["errors"]:
                    self.logger.info(f"        - {error}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        await self._final_database_analysis()

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self.logger.info("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")

        if failed_tests > 0:
            self.logger.info(
                "   üî∏ –ö–†–ò–¢–ò–ß–ù–û: –ï—Å—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã - —Å–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞"
            )

        if total_errors > 10:
            self.logger.info(
                "   üî∏ –í–ù–ò–ú–ê–ù–ò–ï: –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã"
            )

        if completed_tests == total_tests and total_errors == 0:
            self.logger.info("   üî∏ –û–¢–õ–ò–ß–ù–û: –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã –±–µ–∑ –æ—à–∏–±–æ–∫!")

        self.logger.info(
            "   üî∏ –î–ª—è live –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: python3 tests/trading_system_monitor.py --live"
        )
        self.logger.info(
            "   üî∏ –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: python3 run_comprehensive_tests.py"
        )

        self.logger.info(f"\n‚è∞ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {datetime.now()}")
        self.logger.info("=" * 80)

    async def _final_database_analysis(self):
        """–§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from database.connections import get_async_db

            async with get_async_db() as db:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
                test_signals_result = await db.execute(
                    "SELECT COUNT(*) FROM signals WHERE extra_data::text LIKE '%test%'"
                )
                test_signals_count = test_signals_result.scalar()

                test_orders_result = await db.execute(
                    "SELECT COUNT(*) FROM orders WHERE extra_data::text LIKE '%test%' OR extra_data::text LIKE '%forced%'"
                )
                test_orders_count = test_orders_result.scalar()

                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                all_signals_result = await db.execute("SELECT COUNT(*) FROM signals")
                all_signals_count = all_signals_result.scalar()

                all_orders_result = await db.execute("SELECT COUNT(*) FROM orders")
                all_orders_count = all_orders_result.scalar()

                self.logger.info("\nüìä –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ë–î:")
                self.logger.info(f"   üî∏ –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã: {test_signals_count}")
                self.logger.info(f"   üî∏ –¢–µ—Å—Ç–æ–≤—ã–µ –æ—Ä–¥–µ—Ä–∞: {test_orders_count}")
                self.logger.info(f"   üî∏ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {all_signals_count:,}")
                self.logger.info(f"   üî∏ –í—Å–µ–≥–æ –æ—Ä–¥–µ—Ä–æ–≤: {all_orders_count:,}")

                if all_signals_count > 0:
                    conversion_rate = (all_orders_count / all_signals_count) * 100
                    self.logger.info(
                        f"   üî∏ –ö–æ–Ω–≤–µ—Ä—Å–∏—è —Å–∏–≥–Ω–∞–ª‚Üí–æ—Ä–¥–µ—Ä: {conversion_rate:.2f}%"
                    )

                    if conversion_rate < 10:
                        self.logger.error(
                            "   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ù–∏–∑–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –æ—Ä–¥–µ—Ä–∞!"
                        )
                        self.logger.error("      –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                        self.logger.error("      - TradingEngine –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                        self.logger.error(
                            "      - SignalProcessor –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã"
                        )
                        self.logger.error("      - OrderManager –Ω–µ —Å–æ–∑–¥–∞–µ—Ç –æ—Ä–¥–µ—Ä–∞")
                        self.logger.error(
                            "      - –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–ª–∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞"
                        )
                    elif conversion_rate < 50:
                        self.logger.warning(
                            f"   ‚ö†Ô∏è  –ù–∏–∑–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è ({conversion_rate:.1f}%) - –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã"
                        )
                    else:
                        self.logger.info(
                            f"   ‚úÖ –•–æ—Ä–æ—à–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è ({conversion_rate:.1f}%)"
                        )

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ë–î: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    runner = MasterTestRunner()
    await runner.run_all_tests()


if __name__ == "__main__":
    asyncio.run(main())
