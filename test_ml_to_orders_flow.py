#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ ML -> Orders
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å—é —Ü–µ–ø–æ—á–∫—É –æ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ML —Å–∏–≥–Ω–∞–ª–∞ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤
"""

import asyncio
import logging
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append("/mnt/SSD/PYCHARMPRODJECT/BOT_AI_V3")

from core.config.config_manager import ConfigManager
from core.system.orchestrator import SystemOrchestrator


async def test_ml_to_orders_flow():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ ML -> Orders"""

    config_manager = None
    orchestrator = None

    try:
        logger.info("=" * 80)
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ ML -> Orders")
        logger.info("=" * 80)

        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        logger.info("\nüìã –®–∞–≥ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        config_manager = ConfigManager()
        config = config_manager.get_config()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é ML
        ml_config = config.get("ml", {})
        if not ml_config.get("enabled", True):
            logger.warning("ML –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
            return

        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞, ML –≤–∫–ª—é—á–µ–Ω")
        logger.info(f"   –°–∏–º–≤–æ–ª—ã: {ml_config.get('symbols', [])}")
        logger.info(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª: {ml_config.get('signal_interval_seconds', 60)}—Å")

        # 2. –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        logger.info("\nüìã –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        orchestrator = SystemOrchestrator(config_manager)

        # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        logger.info("\nüìã –®–∞–≥ 3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        await orchestrator.initialize()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        if not orchestrator.trading_engine:
            logger.error("Trading Engine –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return

        if not orchestrator.signal_scheduler:
            logger.error("Signal Scheduler –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return

        logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

        # 4. –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
        logger.info("\nüìã –®–∞–≥ 4: –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã...")
        await orchestrator.start()

        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        status = await orchestrator.get_status()
        logger.info("\nüìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:")
        logger.info(f"   –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {status['components']}")
        logger.info(
            f"   Trading Engine: {orchestrator.trading_engine.get_status()['state']}"
        )

        # 6. –ñ–¥–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        logger.info("\nüìã –®–∞–≥ 5: –û–∂–∏–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ML —Å–∏–≥–Ω–∞–ª–æ–≤...")
        logger.info("‚è≥ –ñ–¥–µ–º 2 –º–∏–Ω—É—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤...")

        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –º–µ—Ç—Ä–∏–∫–∏ Trading Engine
        for i in range(12):  # 12 * 10 —Å–µ–∫ = 2 –º–∏–Ω—É—Ç—ã
            await asyncio.sleep(10)

            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            engine_status = orchestrator.trading_engine.get_status()
            metrics = engine_status["metrics"]
            queues = engine_status["queue_sizes"]

            logger.info(f"\n‚è±Ô∏è [{i + 1}/12] –ú–µ—Ç—Ä–∏–∫–∏ Trading Engine:")
            logger.info(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {metrics['signals_processed']}")
            logger.info(f"   –í—ã–ø–æ–ª–Ω–µ–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤: {metrics['orders_executed']}")
            logger.info(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {metrics['active_positions']}")
            logger.info(f"   –û—á–µ—Ä–µ–¥—å —Å–∏–≥–Ω–∞–ª–æ–≤: {queues['signals']}")
            logger.info(f"   –û—á–µ—Ä–µ–¥—å –æ—Ä–¥–µ—Ä–æ–≤: {queues['orders']}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Signal Scheduler
            if orchestrator.signal_scheduler:
                scheduler_status = await orchestrator.signal_scheduler.get_status()
                active_symbols = sum(
                    1 for s in scheduler_status["symbols"].values() if s["active"]
                )
                logger.info(f"   Signal Scheduler: {active_symbols} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")

                # –í—ã–≤–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã
                for symbol, info in scheduler_status["symbols"].items():
                    if info.get("last_signal"):
                        last_signal = info["last_signal"]
                        if "signal" in last_signal:
                            signal = last_signal["signal"]
                            logger.info(
                                f"   üìä {symbol}: {signal.signal_type.value} "
                                f"(—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.1f}%)"
                            )

            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã - –≤—ã—Ö–æ–¥–∏–º —Ä–∞–Ω—å—à–µ
            if metrics["signals_processed"] > 0:
                logger.info("\n‚úÖ –°–∏–≥–Ω–∞–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
                break

        # 7. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        logger.info("\n" + "=" * 80)
        logger.info("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢")
        logger.info("=" * 80)

        final_status = orchestrator.trading_engine.get_status()
        final_metrics = final_status["metrics"]

        logger.info("\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        logger.info(f"   ‚úÖ –°–∏–≥–Ω–∞–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {final_metrics['signals_processed']}")
        logger.info(f"   ‚úÖ –û—Ä–¥–µ—Ä–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {final_metrics['orders_executed']}")
        logger.info(f"   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {final_metrics['active_positions']}")
        logger.info(
            f"   ‚úÖ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {final_metrics['processing_time_avg']:.3f}—Å"
        )
        logger.info(f"   ‚ö†Ô∏è –û—à–∏–±–æ–∫: {final_metrics['errors_count']}")

        if final_metrics["signals_processed"] > 0:
            logger.info("\nüéâ –¢–ï–°–¢ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù! –ü–æ—Ç–æ–∫ ML -> Orders —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        else:
            logger.warning("\n‚ö†Ô∏è –°–∏–≥–Ω–∞–ª—ã –Ω–µ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")

    except Exception as e:
        logger.error(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {e}", exc_info=True)

    finally:
        # 8. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        logger.info("\nüìã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
        if orchestrator:
            await orchestrator.shutdown()
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

        logger.info("\n" + "=" * 80)
        logger.info("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
        logger.info("=" * 80)


if __name__ == "__main__":
    asyncio.run(test_ml_to_orders_flow())
