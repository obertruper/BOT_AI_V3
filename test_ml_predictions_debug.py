#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
"""

import asyncio

import numpy as np
from sqlalchemy import and_, select

from core.config.config_manager import ConfigManager
from core.logger import setup_logger
from database.connections import get_async_db
from database.models.market_data import RawMarketData
from ml.ml_manager import MLManager
from ml.ml_signal_processor import MLSignalProcessor
from ml.realtime_indicator_calculator import RealTimeIndicatorCalculator

logger = setup_logger(__name__)


async def test_single_symbol_detailed(symbol: str = "BTCUSDT"):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""

    config_manager = ConfigManager()
    config = config_manager.get_config()

    logger.info(f"\n{'=' * 60}")
    logger.info(f"üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ {symbol}")
    logger.info(f"{'=' * 60}\n")

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    async with get_async_db() as db:
        stmt = (
            select(RawMarketData)
            .where(
                and_(
                    RawMarketData.symbol == symbol,
                    RawMarketData.exchange == "bybit",
                    RawMarketData.interval_minutes == 15,
                )
            )
            .order_by(RawMarketData.datetime.desc())
            .limit(200)
        )

        result = await db.execute(stmt)
        data = result.scalars().all()

        logger.info("üìä –î–∞–Ω–Ω—ã–µ –≤ –ë–î:")
        logger.info(f"   –ó–∞–ø–∏—Å–µ–π: {len(data)}")
        if data:
            logger.info(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è: {data[0].datetime}")
            logger.info(f"   –ü–µ—Ä–≤–∞—è: {data[-1].datetime}")

    # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    ml_manager = MLManager(config)
    await ml_manager.initialize()

    indicator_calculator = RealTimeIndicatorCalculator(cache_ttl=900, config=config)

    # 3. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º DataFrame
    import pandas as pd

    if data:
        df = pd.DataFrame(
            [
                {
                    "datetime": d.datetime,
                    "open": float(d.open),
                    "high": float(d.high),
                    "low": float(d.low),
                    "close": float(d.close),
                    "volume": float(d.volume),
                    "turnover": float(d.turnover) if d.turnover else 0,
                }
                for d in reversed(data)  # –†–µ–≤–µ—Ä—Å –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
            ]
        )
        df.set_index("datetime", inplace=True)

        logger.info("\nüìà DataFrame –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω:")
        logger.info(f"   –§–æ—Ä–º–∞: {df.shape}")
        logger.info(f"   –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")

        # 4. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        try:
            features_dict = await indicator_calculator.get_features_for_ml(symbol, df)

            logger.info("\nüî¢ –ü—Ä–∏–∑–Ω–∞–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã:")
            logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(features_dict)}")
            logger.info(
                f"   –¢–∏–ø—ã: {set(type(v).__name__ for v in features_dict.values())}"
            )

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤
            features_array = np.array(list(features_dict.values())).reshape(1, -1)
            logger.info(f"   –ú–∞—Å—Å–∏–≤: {features_array.shape}")

            # 5. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            prediction = await ml_manager.predict(features_array)

            logger.info("\nü§ñ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:")
            logger.info(
                f"   –°—ã—Ä–æ–µ: {prediction['predictions'][:8]}"
            )  # –ü–µ—Ä–≤—ã–µ 8 –∑–Ω–∞—á–µ–Ω–∏–π
            logger.info(f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {prediction['predictions'][4:8]}")
            logger.info(f"   –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞: {prediction.get('signal_type', 'N/A')}")
            logger.info(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction.get('confidence', 0):.2%}")

            # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
            signal_processor = MLSignalProcessor(
                ml_manager=ml_manager, config=config, config_manager=config_manager
            )
            await signal_processor.initialize()

            signal = await signal_processor.process_realtime_signal(
                symbol=symbol, exchange="bybit"
            )

            if signal:
                logger.info("\n‚úÖ –°–∏–≥–Ω–∞–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:")
                logger.info(f"   –¢–∏–ø: {signal.signal_type.value}")
                logger.info(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.2%}")
                logger.info(f"   –°–∏–ª–∞: {signal.strength:.2f}")
            else:
                logger.info("\n‚ùå –°–∏–≥–Ω–∞–ª –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
                logger.info(
                    f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal_processor.min_confidence}"
                )
                logger.info(
                    f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞: {signal_processor.min_signal_strength}"
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}", exc_info=True)


async def test_feature_engineering():
    """–¢–µ—Å—Ç feature engineering"""

    config_manager = ConfigManager()
    config = config_manager.get_config()

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    import pandas as pd

    dates = pd.date_range(start="2024-01-01", periods=200, freq="15min")

    test_df = pd.DataFrame(
        {
            "datetime": dates,
            "symbol": "BTCUSDT",  # –î–æ–±–∞–≤–ª—è–µ–º symbol
            "open": np.random.uniform(40000, 45000, 200),
            "high": np.random.uniform(40100, 45100, 200),
            "low": np.random.uniform(39900, 44900, 200),
            "close": np.random.uniform(40000, 45000, 200),
            "volume": np.random.uniform(100, 1000, 200),
            "turnover": np.random.uniform(4000000, 45000000, 200),
        }
    )
    # –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º datetime –∫–∞–∫ –∏–Ω–¥–µ–∫—Å - feature_engineering_v2 –æ–∂–∏–¥–∞–µ—Ç –µ–≥–æ –∫–∞–∫ –∫–æ–ª–æ–Ω–∫—É
    # test_df.set_index('datetime', inplace=True)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º feature engineer
    from ml.logic.feature_engineering_v2 import FeatureEngineer

    fe = FeatureEngineer(config)

    logger.info("\nüß™ –¢–µ—Å—Ç Feature Engineering")
    logger.info(f"   –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {test_df.shape}")

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
    features = fe.create_features(test_df)

    logger.info(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(features)}")
    if isinstance(features, np.ndarray):
        logger.info(f"   –§–æ—Ä–º–∞: {features.shape}")
        logger.info(
            f"   –ü–µ—Ä–≤—ã–µ 10 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {features[:10] if features.ndim == 1 else features[0, :10]}"
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    feature_names = fe.get_feature_names()
    logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∑–≤–∞–Ω–∏–π: {len(feature_names)}")
    logger.info(f"   –ü—Ä–∏–º–µ—Ä—ã: {feature_names[:5]}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    logger.info("\n" + "=" * 80)
    logger.info("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
    logger.info("=" * 80 + "\n")

    # –¢–µ—Å—Ç feature engineering
    await test_feature_engineering()

    # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ BTCUSDT
    await test_single_symbol_detailed("BTCUSDT")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤
    for symbol in ["ETHUSDT", "SOLUSDT"]:
        await test_single_symbol_detailed(symbol)


if __name__ == "__main__":
    asyncio.run(main())
