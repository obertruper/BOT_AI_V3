#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –≤—Å–µ—Ö 240 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
"""

import asyncio

import numpy as np
import pandas as pd

from core.logger import setup_logger
from ml.config.features_240 import REQUIRED_FEATURES_240
from ml.logic.feature_engineering_v2 import FeatureEngineer

logger = setup_logger(__name__)


def generate_test_data(n_samples=300):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ OHLCV –¥–∞–Ω–Ω—ã–µ"""
    dates = pd.date_range(start="2024-01-01", periods=n_samples, freq="5T")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ OHLCV –¥–∞–Ω–Ω—ã–µ
    np.random.seed(42)
    base_price = 50000
    returns = np.random.normal(0, 0.001, n_samples)
    prices = [base_price]

    for ret in returns[1:]:
        prices.append(prices[-1] * (1 + ret))

    prices = np.array(prices)

    # –°–æ–∑–¥–∞–µ–º OHLCV
    df = pd.DataFrame(
        {
            "datetime": dates,
            "open": prices,
            "high": prices * (1 + np.random.uniform(0, 0.01, n_samples)),
            "low": prices * (1 - np.random.uniform(0, 0.01, n_samples)),
            "close": prices,
            "volume": np.random.uniform(100, 1000, n_samples),
            "symbol": "BTCUSDT",
        }
    )

    # –î–æ–±–∞–≤–ª—è–µ–º turnover
    df["turnover"] = df["close"] * df["volume"]

    # –û—Å—Ç–∞–≤–ª—è–µ–º datetime –∫–∞–∫ –∫–æ–ª–æ–Ω–∫—É (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è FeatureEngineer)
    # df.set_index('datetime', inplace=True)

    return df


async def test_fixed_indicators():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = generate_test_data(300)
    logger.info(f"üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(test_data)} —Å–≤–µ—á–µ–π")

    # –°–æ–∑–¥–∞–µ–º FeatureEngineer —Å inference mode
    config = {"inference_mode": True}
    engineer = FeatureEngineer(config, inference_mode=True)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
    logger.info("üîß –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
    try:
        features_df = engineer.create_features(test_data, inference_mode=True)
        logger.info(f"‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã: {features_df.shape}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        feature_cols = [col for col in features_df.columns if col not in ["symbol", "datetime"]]
        logger.info(f"üìà –í—Å–µ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(feature_cols)}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        key_indicators = [
            "rsi_5",
            "rsi_14",
            "sma_5",
            "sma_10",
            "ema_5",
            "ema_10",
            "macd_12_26",
            "atr_7",
            "atr_14",
        ]
        missing_key = []
        present_key = []

        for indicator in key_indicators:
            if indicator in feature_cols:
                present_key.append(indicator)
            else:
                missing_key.append(indicator)

        logger.info(f"‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã ({len(present_key)}): {present_key}")
        if missing_key:
            logger.warning(
                f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã ({len(missing_key)}): {missing_key}"
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º REQUIRED_FEATURES_240
        available_required = []
        missing_required = []

        for feature in REQUIRED_FEATURES_240:
            if feature in feature_cols:
                available_required.append(feature)
            else:
                missing_required.append(feature)

        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ REQUIRED_FEATURES_240:")
        logger.info(f"  ‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ: {len(available_required)}/240")
        logger.info(f"  ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {len(missing_required)}/240")

        if missing_required:
            logger.warning(f"‚ö†Ô∏è –ü–µ—Ä–≤—ã–µ 10 –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö: {missing_required[:10]}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º NaN –∑–Ω–∞—á–µ–Ω–∏—è
        last_row = features_df.iloc[-1]
        nan_counts = {}
        total_nan = 0

        for col in feature_cols:
            if col in last_row and pd.isna(last_row[col]):
                nan_counts[col] = 1
                total_nan += 1

        logger.info(f"üß™ NaN –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–µ: {total_nan}/{len(feature_cols)}")
        if nan_counts:
            logger.warning(f"‚ö†Ô∏è –°—Ç–æ–ª–±—Ü—ã —Å NaN: {list(nan_counts.keys())[:10]}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Å–ø–µ—Ä—Å–∏—é –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        non_zero_variance = 0
        zero_variance = []

        for col in feature_cols:
            if col in features_df.columns:
                col_var = features_df[col].var()
                if pd.isna(col_var) or col_var == 0:
                    zero_variance.append(col)
                else:
                    non_zero_variance += 1

        logger.info("üìä –î–∏—Å–ø–µ—Ä—Å–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
        logger.info(f"  ‚úÖ –° –Ω–µ–Ω—É–ª–µ–≤–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–µ–π: {non_zero_variance}")
        logger.info(f"  ‚ùå –° –Ω—É–ª–µ–≤–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–µ–π: {len(zero_variance)}")

        if zero_variance:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–∏–∑–Ω–∞–∫–∏ —Å –Ω—É–ª–µ–≤–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–µ–π: {zero_variance[:10]}")

        return {
            "total_features": len(feature_cols),
            "required_available": len(available_required),
            "required_missing": len(missing_required),
            "nan_count": total_nan,
            "non_zero_variance": non_zero_variance,
            "success": True,
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
        return {"success": False, "error": str(e)}


if __name__ == "__main__":
    result = asyncio.run(test_fixed_indicators())

    if result["success"]:
        print("\n" + "=" * 60)
        print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –ò–ù–î–ò–ö–ê–¢–û–†–û–í")
        print("=" * 60)
        print(f"üìä –í—Å–µ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {result['total_features']}")
        print(f"‚úÖ REQUIRED_FEATURES_240 –¥–æ—Å—Ç—É–ø–Ω–æ: {result['required_available']}/240")
        print(f"‚ùå REQUIRED_FEATURES_240 –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {result['required_missing']}/240")
        print(f"üß™ NaN –∑–Ω–∞—á–µ–Ω–∏–π: {result['nan_count']}")
        print(f"üìà –ü—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å –Ω–µ–Ω—É–ª–µ–≤–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–µ–π: {result['non_zero_variance']}")

        if result["required_available"] == 240 and result["nan_count"] == 0:
            print("\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        else:
            print("\n‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê:")
            if result["required_available"] < 240:
                print(f"  - –î–æ–±–∞–≤–∏—Ç—å {240 - result['required_available']} –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
            if result["nan_count"] > 0:
                print(f"  - –£–±—Ä–∞—Ç—å {result['nan_count']} NaN –∑–Ω–∞—á–µ–Ω–∏–π")
    else:
        print(f"\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: {result['error']}")
