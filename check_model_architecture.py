#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –º–æ–¥–µ–ª–∏ –∏–∑ checkpoint
"""

from pathlib import Path

import torch


def check_model_architecture():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –º–æ–¥–µ–ª–∏ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ checkpoint."""

    print("üîç –ü–†–û–í–ï–†–ö–ê –ê–†–•–ò–¢–ï–ö–¢–£–†–´ –ú–û–î–ï–õ–ò\n")

    # –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
    model_path = Path(
        "/mnt/SSD/PYCHARMPRODJECT/BOT_AI_V3/models/saved/best_model_20250728_215703.pth"
    )

    # –ó–∞–≥—Ä—É–∂–∞–µ–º checkpoint
    checkpoint = torch.load(model_path, map_location="cpu")
    state_dict = checkpoint["model_state_dict"]

    print("üìä –ê–Ω–∞–ª–∏–∑ direction_head –≤ –º–æ–¥–µ–ª–∏:")
    print("-" * 60)

    # –ò—â–µ–º –≤—Å–µ —Å–ª–æ–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å direction
    direction_layers = {}
    for name, tensor in state_dict.items():
        if "direction" in name.lower():
            direction_layers[name] = tensor
            print(f"{name}: shape={tensor.shape}")

    print("\nüìä –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö head —Å–ª–æ–µ–≤:")
    print("-" * 60)

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º head
    heads = {}
    for name, tensor in state_dict.items():
        if "_head" in name:
            head_type = name.split(".")[0]
            if head_type not in heads:
                heads[head_type] = []
            heads[head_type].append((name, tensor.shape))

    for head_type, layers in sorted(heads.items()):
        print(f"\n{head_type}:")
        for layer_name, shape in layers:
            print(f"  {layer_name}: {shape}")

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ direction_head
    print("\nüéØ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó direction_head:")
    print("-" * 60)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π Linear —Å–ª–æ–π
    direction_final_weight = None
    direction_final_bias = None

    for name, tensor in state_dict.items():
        if "direction_head" in name and "weight" in name:
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª–æ–π (–Ω–∞–∏–±–æ–ª—å—à–∏–π –Ω–æ–º–µ—Ä)
            if "3.weight" in name:  # –û–±—ã—á–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª–æ–π
                direction_final_weight = tensor
        if "direction_head" in name and "bias" in name:
            if "3.bias" in name:
                direction_final_bias = tensor

    if direction_final_weight is not None:
        print("–§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ª–æ–π direction_head:")
        print(f"  Weight shape: {direction_final_weight.shape}")
        print(f"  Output size: {direction_final_weight.shape[0]}")

        if direction_final_weight.shape[0] == 12:
            print("  ‚úÖ –ú–æ–¥–µ–ª—å –≤—ã–¥–∞–µ—Ç 12 –∑–Ω–∞—á–µ–Ω–∏–π (3 –∫–ª–∞—Å—Å–∞ √ó 4 —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞)")
            print("  –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∫–∞–∂–¥—ã–µ 3 –∑–Ω–∞—á–µ–Ω–∏—è = softmax –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞")
        elif direction_final_weight.shape[0] == 4:
            print("  ‚úÖ –ú–æ–¥–µ–ª—å –≤—ã–¥–∞–µ—Ç 4 –∑–Ω–∞—á–µ–Ω–∏—è (–ø–æ –æ–¥–Ω–æ–º—É –∫–ª–∞—Å—Å—É –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º)")
        elif direction_final_weight.shape[0] == 3:
            print("  ‚úÖ –ú–æ–¥–µ–ª—å –≤—ã–¥–∞–µ—Ç 3 –∑–Ω–∞—á–µ–Ω–∏—è (3 –∫–ª–∞—Å—Å–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞)")

    if direction_final_bias is not None:
        print(f"\n  Bias shape: {direction_final_bias.shape}")
        print(f"  Bias values: {direction_final_bias.cpu().numpy()}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—ã—Ö–æ–¥–æ–≤
    print("\nüìä –°–¢–†–£–ö–¢–£–†–ê –í–°–ï–• –í–´–•–û–î–û–í –ú–û–î–ï–õ–ò:")
    print("-" * 60)

    total_outputs = 0
    output_structure = []

    # –ü–æ—Ä—è–¥–æ–∫ head'–æ–≤ –≤–∞–∂–µ–Ω!
    head_order = [
        "future_returns_head",
        "direction_head",
        "long_levels_head",
        "short_levels_head",
        "risk_metrics_head",
        "confidence_head",
    ]

    for head_name in head_order:
        for name, tensor in state_dict.items():
            if head_name in name and "3.bias" in name:  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª–æ–π
                size = tensor.shape[0]
                output_structure.append(
                    (head_name, size, total_outputs, total_outputs + size)
                )
                total_outputs += size

    print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—Ö–æ–¥–æ–≤: {total_outputs}")
    print("\n–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ã—Ö–æ–¥–æ–≤:")
    for head_name, size, start, end in output_structure:
        print(f"  [{start:2d}-{end - 1:2d}]: {head_name:<25} ({size} outputs)")

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    print("-" * 60)

    if any(
        "direction_head" in name and tensor.shape[0] == 12
        for name, tensor in state_dict.items()
        if "3.bias" in name
    ):
        print("1. direction_head –≤—ã–¥–∞–µ—Ç 12 –∑–Ω–∞—á–µ–Ω–∏–π")
        print("2. –ù—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –≤ _interpret_predictions():")
        print("   - –í–∑—è—Ç—å outputs[4:16] –¥–ª—è directions")
        print("   - –†–∞–∑–±–∏—Ç—å –Ω–∞ 4 –≥—Ä—É–ø–ø—ã –ø–æ 3 –∑–Ω–∞—á–µ–Ω–∏—è")
        print("   - –ü—Ä–∏–º–µ–Ω–∏—Ç—å softmax –∏ argmax –∫ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ")
        print("3. –°–¥–≤–∏–Ω—É—Ç—å –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö outputs:")
        print("   - level_targets –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 16, –∞ –Ω–µ —Å 8")
        print("   - risk_metrics –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 24, –∞ –Ω–µ —Å 16")


if __name__ == "__main__":
    check_model_architecture()
