#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 18 —á–∞—Å–æ–≤
"""

import asyncio
from datetime import datetime

from sqlalchemy import text

from database.connections import get_async_db


async def analyze_bot_activity():
    print("=" * 80)
    print("üìä –ê–ù–ê–õ–ò–ó –†–ê–ë–û–¢–´ –ë–û–¢–ê –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï 18 –ß–ê–°–û–í")
    print("=" * 80)

    async with get_async_db() as db:
        # 1. –ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤ LONG vs SHORT
        print("\n1Ô∏è‚É£ –°–ò–ì–ù–ê–õ–´ (LONG vs SHORT):")
        result = await db.execute(
            text(
                """
            SELECT
                signal_type,
                COUNT(*) as count,
                ROUND(AVG(confidence)::numeric, 3) as avg_conf,
                ROUND(AVG(strength)::numeric, 3) as avg_str
            FROM signals
            WHERE created_at >= NOW() - INTERVAL '18 hours'
            GROUP BY signal_type
            ORDER BY count DESC
        """
            )
        )
        signals = result.fetchall()

        total_signals = sum(s.count for s in signals)
        print(f"  –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total_signals}")

        for s in signals:
            percent = (s.count / total_signals * 100) if total_signals > 0 else 0
            print(
                f"  {s.signal_type.upper()}: {s.count} ({percent:.1f}%) | confidence={s.avg_conf:.3f}, strength={s.avg_str:.3f}"
            )

        if not any(s.signal_type.lower() == "short" for s in signals):
            print("  ‚ö†Ô∏è SHORT –°–ò–ì–ù–ê–õ–û–í –ù–ï–¢! –ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ LONG!")

        # 2. –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        print("\n  –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–∏–º–≤–æ–ª–∞–º:")
        result = await db.execute(
            text(
                """
            SELECT
                symbol,
                signal_type,
                COUNT(*) as count
            FROM signals
            WHERE created_at >= NOW() - INTERVAL '18 hours'
            GROUP BY symbol, signal_type
            ORDER BY symbol, signal_type
        """
            )
        )
        symbol_signals = result.fetchall()

        current_symbol = None
        for ss in symbol_signals:
            if current_symbol != ss.symbol:
                if current_symbol:
                    print()
                print(f"  {ss.symbol}:", end=" ")
                current_symbol = ss.symbol
            print(f"{ss.signal_type}={ss.count}", end=" ")
        print()

        # 3. –°—Ç–∞—Ç—É—Å—ã –æ—Ä–¥–µ—Ä–æ–≤
        print("\n2Ô∏è‚É£ –û–†–î–ï–†–ê:")
        result = await db.execute(
            text(
                """
            SELECT
                status,
                COUNT(*) as count
            FROM orders
            WHERE created_at >= NOW() - INTERVAL '18 hours'
            GROUP BY status
            ORDER BY count DESC
        """
            )
        )
        orders = result.fetchall()

        for o in orders:
            print(f"  {o.status}: {o.count}")

        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö vs —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        print("\n3Ô∏è‚É£ –¢–ò–ü –û–†–î–ï–†–û–í:")
        result = await db.execute(
            text(
                """
            WITH order_types AS (
                SELECT
                    CASE
                        WHEN order_id LIKE 'test_%' THEN '–¢–ï–°–¢–û–í–´–ï'
                        WHEN order_id LIKE 'demo_%' THEN '–î–ï–ú–û'
                        WHEN order_id LIKE 'paper_%' THEN 'PAPER'
                        WHEN order_id LIKE 'BOT_%' THEN 'BOT_GENERATED'
                        ELSE '–†–ï–ê–õ–¨–ù–´–ï_BYBIT'
                    END as order_type
                FROM orders
                WHERE created_at >= NOW() - INTERVAL '18 hours'
            )
            SELECT order_type, COUNT(*) as count
            FROM order_types
            GROUP BY order_type
            ORDER BY count DESC
        """
            )
        )
        order_types = result.fetchall()

        for ot in order_types:
            print(f"  {ot.order_type}: {ot.count}")

        # 5. PnL –∞–Ω–∞–ª–∏–∑
        print("\n4Ô∏è‚É£ –ü–†–ò–ë–´–õ–¨/–£–ë–´–¢–û–ö (PnL):")
        result = await db.execute(
            text(
                """
            SELECT
                symbol,
                COUNT(*) as trades,
                ROUND(SUM(pnl)::numeric, 2) as total_pnl,
                ROUND(AVG(pnl)::numeric, 2) as avg_pnl,
                ROUND(MAX(pnl)::numeric, 2) as best,
                ROUND(MIN(pnl)::numeric, 2) as worst
            FROM trades
            WHERE created_at >= NOW() - INTERVAL '18 hours'
            GROUP BY symbol
            ORDER BY total_pnl DESC
            LIMIT 10
        """
            )
        )
        trades = result.fetchall()

        if trades:
            total_pnl_all = 0
            for t in trades:
                status = "‚úÖ" if t.total_pnl and t.total_pnl > 0 else "‚ùå"
                pnl = t.total_pnl if t.total_pnl else 0
                total_pnl_all += pnl
                print(
                    f"  {status} {t.symbol}: {t.trades} —Å–¥–µ–ª–æ–∫, PnL=${pnl:.2f} (avg=${t.avg_pnl or 0:.2f}, best=${t.best or 0:.2f}, worst=${t.worst or 0:.2f})"
                )
            print(f"\n  üìà –ò–¢–û–ì–û PnL –∑–∞ 18 —á–∞—Å–æ–≤: ${total_pnl_all:.2f}")
        else:
            print("  –ù–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥")

        # 6. –¢–µ–∫—É—â–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        print("\n5Ô∏è‚É£ –û–¢–ö–†–´–¢–´–ï –ü–û–ó–ò–¶–ò–ò:")
        result = await db.execute(
            text(
                """
            SELECT
                symbol,
                side,
                size,
                entry_price,
                unrealized_pnl,
                created_at
            FROM positions
            WHERE status = 'open'
            ORDER BY unrealized_pnl DESC
        """
            )
        )
        positions = result.fetchall()

        if positions:
            total_unrealized = 0
            for p in positions:
                pnl = p.unrealized_pnl if p.unrealized_pnl else 0
                age_hours = (datetime.utcnow() - p.created_at).total_seconds() / 3600
                pnl_str = f"+${pnl:.2f}" if pnl > 0 else f"${pnl:.2f}"
                print(
                    f"  {p.symbol} {p.side}: size={p.size}, entry={p.entry_price}, PnL={pnl_str}, –≤–æ–∑—Ä–∞—Å—Ç={age_hours:.1f}—á"
                )
                total_unrealized += pnl

            print(f"\n  üí∞ –û–±—â–∏–π –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL: ${total_unrealized:.2f}")
            print(f"  üìä –í—Å–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(positions)}")
        else:
            print("  –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")

        # 7. –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        print("\n6Ô∏è‚É£ –ü–û–°–õ–ï–î–ù–Ø–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨:")
        result = await db.execute(
            text(
                """
            SELECT
                'Signals' as component,
                COUNT(*) as count_last_hour,
                MAX(created_at) as last_activity
            FROM signals
            WHERE created_at >= NOW() - INTERVAL '1 hour'
            UNION ALL
            SELECT
                'Orders' as component,
                COUNT(*) as count_last_hour,
                MAX(created_at) as last_activity
            FROM orders
            WHERE created_at >= NOW() - INTERVAL '1 hour'
            UNION ALL
            SELECT
                'Trades' as component,
                COUNT(*) as count_last_hour,
                MAX(created_at) as last_activity
            FROM trades
            WHERE created_at >= NOW() - INTERVAL '1 hour'
        """
            )
        )
        activity = result.fetchall()

        for a in activity:
            if a.last_activity:
                minutes_ago = (datetime.utcnow() - a.last_activity).total_seconds() / 60
                print(
                    f"  {a.component}: {a.count_last_hour} –∑–∞ —á–∞—Å, –ø–æ—Å–ª–µ–¥–Ω—è—è {minutes_ago:.1f} –º–∏–Ω –Ω–∞–∑–∞–¥"
                )
            else:
                print(f"  {a.component}: –ù–ï–¢ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å ‚ö†Ô∏è")

        # 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–∏—á–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∏–π –∏ TP/SL
        print("\n7Ô∏è‚É£ –ß–ê–°–¢–ò–ß–ù–´–ï –ó–ê–ö–†–´–¢–ò–Ø –ò TP/SL:")
        result = await db.execute(
            text(
                """
            SELECT
                COUNT(*) FILTER (WHERE notes LIKE '%partial%') as partial_closes,
                COUNT(*) FILTER (WHERE notes LIKE '%take_profit%' OR notes LIKE '%TP%') as tp_hits,
                COUNT(*) FILTER (WHERE notes LIKE '%stop_loss%' OR notes LIKE '%SL%') as sl_hits,
                COUNT(*) as total_trades
            FROM trades
            WHERE created_at >= NOW() - INTERVAL '18 hours'
        """
            )
        )
        tp_sl = result.fetchone()

        if tp_sl and tp_sl.total_trades > 0:
            print(f"  –ß–∞—Å—Ç–∏—á–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∏–π: {tp_sl.partial_closes or 0}")
            print(f"  Take Profit —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π: {tp_sl.tp_hits or 0}")
            print(f"  Stop Loss —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π: {tp_sl.sl_hits or 0}")
            print(f"  –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {tp_sl.total_trades}")
        else:
            print("  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ TP/SL")


if __name__ == "__main__":
    asyncio.run(analyze_bot_activity())
