#!/mnt/SSD/PYCHARMPRODJECT/BOT_AI_V3/venv/bin/python3
"""
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ BOT Trading v3 —Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
–ó–∞–ø—É—Å–∫–∞–µ—Ç Core System –∏ Web API –≤ –æ–¥–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
"""

import asyncio
import os
import signal
import sys
import threading
from datetime import datetime
from pathlib import Path

from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

import uvicorn

from core.config.config_manager import ConfigManager
from core.exceptions import ConfigurationError, SystemError
from core.logger import setup_logger
from core.system.orchestrator import SystemOrchestrator
from web.api.main import app, initialize_web_api
from web.integration.web_orchestrator_bridge import initialize_web_bridge

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logger("integrated_start")


class IntegratedBotSystem:
    """–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å Core –∏ Web API"""

    def __init__(self):
        self.orchestrator: SystemOrchestrator | None = None
        self.config_manager: ConfigManager | None = None
        self.shutdown_event = asyncio.Event()
        self.web_server = None
        self.web_thread = None

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("=" * 80)
        logger.info("üöÄ BOT_AI_V3 - –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫")
        logger.info(f"üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        logger.info("=" * 80)

        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            logger.info("üìã –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
            self.config_manager = ConfigManager()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self._validate_critical_settings()

            # –°–æ–∑–¥–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
            logger.info("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SystemOrchestrator...")
            self.orchestrator = SystemOrchestrator(self.config_manager)
            await self.orchestrator.initialize()

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Web API —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ orchestrator
            logger.info("üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web API...")
            from core.shared_context import shared_context

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º orchestrator –≤ shared context
            shared_context.set_orchestrator(self.orchestrator)
            logger.info("‚úÖ Orchestrator —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ shared context")

            initialize_web_api(
                orchestrator=self.orchestrator,
                trader_manager=getattr(self.orchestrator, "trader_manager", None),
                exchange_factory=getattr(self.orchestrator, "exchange_factory", None),
                config_manager=self.config_manager,
            )

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º web bridge
            global _web_bridge
            _web_bridge = await initialize_web_bridge(self.orchestrator)

            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        except ConfigurationError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            logger.error("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
            raise
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            raise

    def _validate_critical_settings(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        required_env = ["PGUSER", "PGPASSWORD", "PGDATABASE", "SECRET_KEY"]

        missing = []
        for var in required_env:
            if not os.getenv(var):
                missing.append(var)

        if missing:
            raise ConfigurationError(
                f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing)}\n"
                f"–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example"
            )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ API –∫–ª—é—á–∞ –±–∏—Ä–∂–∏
        exchanges = ["BYBIT", "BINANCE", "OKX", "BITGET", "GATEIO", "KUCOIN", "HUOBI"]
        has_exchange = False

        for exchange in exchanges:
            if os.getenv(f"{exchange}_API_KEY"):
                has_exchange = True
                logger.info(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã API –∫–ª—é—á–∏ –¥–ª—è {exchange}")
                break

        if not has_exchange:
            logger.warning(
                "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã API –∫–ª—é—á–∏ –±–∏—Ä–∂. "
                "–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –Ω–∞–±–æ—Ä –∫–ª—é—á–µ–π –≤ .env –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"
            )

    async def start_core(self):
        """–ó–∞–ø—É—Å–∫ Core —Å–∏—Å—Ç–µ–º—ã"""
        if not self.orchestrator:
            raise SystemError("–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        logger.info("\nüîÑ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Core —Å–∏—Å—Ç–µ–º—ã...")

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
            await self.orchestrator.start()

            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å
            await self._print_system_status()

            logger.info("\n‚úÖ Core —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Core —Å–∏—Å—Ç–µ–º—ã: {e}")
            raise

    def start_web_server(self):
        """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        logger.info("\nüåê –ó–∞–ø—É—Å–∫ Web API...")

        async def run_server():
            config = uvicorn.Config(
                app=app,
                host="0.0.0.0",
                port=8080,
                log_level="info",
                access_log=True,
                loop="asyncio",
            )
            self.web_server = uvicorn.Server(config)
            await self.web_server.serve()

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
        def run_in_thread():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(run_server())

        self.web_thread = threading.Thread(target=run_in_thread, daemon=True)
        self.web_thread.start()

        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        import time

        time.sleep(3)

        logger.info("‚úÖ Web API –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8080")
        logger.info("üìö API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8080/api/docs")

    async def _print_system_status(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        if not self.orchestrator:
            return

        status = await self.orchestrator.get_status()

        logger.info("\nüìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´:")
        logger.info("-" * 50)

        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        logger.info("–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
        for component, is_active in status.get("components", {}).items():
            icon = "‚úÖ" if is_active else "‚ùå"
            logger.info(f"  {icon} {component}")

        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        db_status = status.get("database", {})
        if db_status.get("connected"):
            logger.info(
                f"\nüíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ü–æ–¥–∫–ª—é—á–µ–Ω–∞ (PostgreSQL –Ω–∞ –ø–æ—Ä—Ç—É {os.getenv('PGPORT', '5555')})"
            )
        else:
            logger.info("\nüíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")

        logger.info("-" * 50)

    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("\n‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        logger.info("üìä –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        logger.info("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:5173")
        logger.info("üìö API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8080/api/docs")

        # –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        await self.shutdown_event.wait()

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º—ã...")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
        if self.web_server:
            logger.info("‚è∏Ô∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Web API...")
            self.web_server.should_exit = True

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Core —Å–∏—Å—Ç–µ–º—É
        if self.orchestrator:
            logger.info("‚è∏Ô∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Core —Å–∏—Å—Ç–µ–º—É...")
            await self.orchestrator.stop()

        logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        logger.info("üëã BOT_AI_V3 –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

    def handle_signal(self, sig, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        logger.info(f"\nüì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {sig}")
        self.shutdown_event.set()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    system = IntegratedBotSystem()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, system.handle_signal)
    signal.signal(signal.SIGTERM, system.handle_signal)

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        await system.initialize()

        # –ó–∞–ø—É—Å–∫ Core —Å–∏—Å—Ç–µ–º—ã
        await system.start_core()

        # –ó–∞–ø—É—Å–∫ Web API –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        system.start_web_server()

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        await system.run()

    except KeyboardInterrupt:
        logger.info("\n‚å®Ô∏è –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()
    finally:
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞
        await system.stop()


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
    if sys.version_info < (3, 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        sys.exit(1)

    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    asyncio.run(main())
