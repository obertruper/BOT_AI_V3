#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏–∑ REQUIRED_FEATURES_240
"""

import logging

import numpy as np
import pandas as pd

from ml.config.features_240 import REQUIRED_FEATURES_240
from ml.logic.feature_engineering_v2 import FeatureEngineer

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def test_missing_indicators():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã"""

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    import datetime

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ OHLCV –¥–∞–Ω–Ω—ã–µ
    dates = pd.date_range(
        start=datetime.datetime.now() - datetime.timedelta(days=30),
        end=datetime.datetime.now(),
        freq="15min",
    )

    np.random.seed(42)  # –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
    price_base = 50000

    ohlcv_data = []
    for i, date in enumerate(dates):
        price_change = np.random.normal(0, 0.02)  # 2% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        price = price_base * (1 + price_change * i / 1000)

        high = price * (1 + abs(np.random.normal(0, 0.005)))
        low = price * (1 - abs(np.random.normal(0, 0.005)))
        open_price = price + np.random.normal(0, price * 0.001)
        close_price = price + np.random.normal(0, price * 0.001)
        volume = np.random.uniform(100, 1000)

        ohlcv_data.append(
            [int(date.timestamp() * 1000), open_price, high, low, close_price, volume]
        )

    ohlcv = ohlcv_data

    # –°–æ–∑–¥–∞–µ–º DataFrame
    df = pd.DataFrame(ohlcv, columns=["timestamp", "open", "high", "low", "close", "volume"])
    df["timestamp"] = pd.to_datetime(df["timestamp"], unit="ms")
    df["datetime"] = df["timestamp"]  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É datetime
    df["symbol"] = "BTCUSDT"  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É symbol
    df["turnover"] = df["volume"] * df["close"]  # –î–æ–±–∞–≤–ª—è–µ–º turnover

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º feature engineer
    config = {"features": {}}
    feature_engineer = FeatureEngineer(config=config, inference_mode=True)

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
    logger.info("üîß –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏...")
    df_features = feature_engineer.create_features(df.copy())

    print(f"üìä –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(df_features.columns)}")

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    missing_features = []
    zero_variance_features = []
    available_features = set(df_features.columns)

    for feature in REQUIRED_FEATURES_240:
        if feature not in available_features:
            missing_features.append(feature)
        elif df_features[feature].var() == 0 or df_features[feature].isna().all():
            zero_variance_features.append(feature)

    print("\n" + "=" * 80)
    print("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–• –ü–†–ò–ó–ù–ê–ö–û–í")
    print("=" * 80)

    if missing_features:
        print(f"\n‚ùå –ü–û–õ–ù–û–°–¢–¨–Æ –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –ü–†–ò–ó–ù–ê–ö–ò ({len(missing_features)}):")
        for i, feature in enumerate(missing_features[:20]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
            print(f"   {i + 1:2d}. {feature}")
        if len(missing_features) > 20:
            print(f"   ... –∏ –µ—â–µ {len(missing_features) - 20} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

    if zero_variance_features:
        print(f"\n‚ö†Ô∏è –ü–†–ò–ó–ù–ê–ö–ò –° –ù–£–õ–ï–í–û–ô –î–ò–°–ü–ï–†–°–ò–ï–ô ({len(zero_variance_features)}):")
        for i, feature in enumerate(zero_variance_features[:20]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
            print(f"   {i + 1:2d}. {feature}")
        if len(zero_variance_features) > 20:
            print(f"   ... –∏ –µ—â–µ {len(zero_variance_features) - 20} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    macd_missing = [f for f in missing_features + zero_variance_features if "macd" in f]
    stoch_missing = [f for f in missing_features + zero_variance_features if "stoch" in f]
    williams_missing = [f for f in missing_features + zero_variance_features if "williams" in f]
    adx_missing = [f for f in missing_features + zero_variance_features if "adx" in f]
    mfi_missing = [f for f in missing_features + zero_variance_features if "mfi" in f]

    print("\nüìà –ê–ù–ê–õ–ò–ó –ü–û –ì–†–£–ü–ü–ê–ú –ò–ù–î–ò–ö–ê–¢–û–†–û–í:")
    print(f"   üî∏ MACD –ø—Ä–æ–±–ª–µ–º—ã: {macd_missing}")
    print(f"   üî∏ Stochastic –ø—Ä–æ–±–ª–µ–º—ã: {stoch_missing}")
    print(f"   üî∏ Williams %R –ø—Ä–æ–±–ª–µ–º—ã: {williams_missing}")
    print(f"   üî∏ ADX –ø—Ä–æ–±–ª–µ–º—ã: {adx_missing}")
    print(f"   üî∏ MFI –ø—Ä–æ–±–ª–µ–º—ã: {mfi_missing}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –≤ DataFrame
    print("\nüîß –î–û–°–¢–£–ü–ù–´–ï –ü–û–•–û–ñ–ò–ï –ü–†–ò–ó–ù–ê–ö–ò:")
    for prefix in ["macd", "stoch", "williams", "adx", "mfi"]:
        similar = [col for col in df_features.columns if prefix in col.lower()]
        print(f"   üî∏ {prefix.upper()}: {similar[:5]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5

    return {
        "total_features": len(df_features.columns),
        "missing_features": missing_features,
        "zero_variance_features": zero_variance_features,
        "required_total": len(REQUIRED_FEATURES_240),
    }


if __name__ == "__main__":
    result = test_missing_indicators()

    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 80)
    print(f"‚úÖ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {result['total_features']}")
    print(f"üéØ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {result['required_total']}")
    print(f"‚ùå –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {len(result['missing_features'])}")
    print(f"‚ö†Ô∏è –° –Ω—É–ª–µ–≤–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–µ–π: {len(result['zero_variance_features'])}")
    print(
        f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {((result['required_total'] - len(result['missing_features']) - len(result['zero_variance_features'])) / result['required_total']) * 100:.1f}%"
    )
