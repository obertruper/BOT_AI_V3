#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import sys
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from dotenv import load_dotenv

from core.config.config_manager import ConfigManager
from database.connections.postgres import AsyncPGPool

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


async def test_data_updates():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""

    print("=" * 60)
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–Ø –î–ê–ù–ù–´–•")
    print("=" * 60)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_manager = ConfigManager()
    config = config_manager.get_config()
    data_config = config.get("data_management", {})

    print("\nüìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è data_management:")
    print(f"   ‚Ä¢ auto_update: {data_config.get('auto_update', False)}")
    print(
        f"   ‚Ä¢ update_interval: {data_config.get('update_interval', 60)} —Å–µ–∫ ({data_config.get('update_interval', 60) / 60:.1f} –º–∏–Ω)"
    )
    print(f"   ‚Ä¢ initial_load_days: {data_config.get('initial_load_days', 7)} –¥–Ω–µ–π")
    print(f"   ‚Ä¢ min_candles_for_ml: {data_config.get('min_candles_for_ml', 96)} —Å–≤–µ—á–µ–π")
    print(f"   ‚Ä¢ check_on_startup: {data_config.get('check_on_startup', True)}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ:")

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        total = await AsyncPGPool.fetch("SELECT COUNT(*) as cnt FROM raw_market_data")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total[0]['cnt']}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å)
        fresh_1h = await AsyncPGPool.fetch(
            """SELECT COUNT(*) as cnt, COUNT(DISTINCT symbol) as symbols
               FROM raw_market_data
               WHERE timestamp > EXTRACT(EPOCH FROM NOW() - INTERVAL '1 hour') * 1000"""
        )
        print(
            f"   ‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: {fresh_1h[0]['cnt']} –∑–∞–ø–∏—Å–µ–π ({fresh_1h[0]['symbols']} —Å–∏–º–≤–æ–ª–æ–≤)"
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        fresh_24h = await AsyncPGPool.fetch(
            """SELECT COUNT(*) as cnt, COUNT(DISTINCT symbol) as symbols
               FROM raw_market_data
               WHERE timestamp > EXTRACT(EPOCH FROM NOW() - INTERVAL '24 hours') * 1000"""
        )
        print(
            f"   ‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: {fresh_24h[0]['cnt']} –∑–∞–ø–∏—Å–µ–π ({fresh_24h[0]['symbols']} —Å–∏–º–≤–æ–ª–æ–≤)"
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        last_updates = await AsyncPGPool.fetch(
            """SELECT symbol,
                      MAX(timestamp) as last_timestamp,
                      COUNT(*) as candle_count
               FROM raw_market_data
               GROUP BY symbol
               ORDER BY last_timestamp DESC
               LIMIT 5"""
        )

        print("\n   üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ —Å–∏–º–≤–æ–ª–∞–º:")
        for row in last_updates:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timestamp –∏–∑ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
            last_time = (
                datetime.fromtimestamp(row["last_timestamp"] / 1000)
                if row["last_timestamp"]
                else None
            )
            if last_time:
                age = datetime.now() - last_time
                age_str = (
                    f"{age.days}–¥ {age.seconds // 3600}—á"
                    if age.days > 0
                    else f"{age.seconds // 3600}—á {(age.seconds % 3600) // 60}–º"
                )
                print(
                    f"      ‚Ä¢ {row['symbol']}: {row['candle_count']} —Å–≤–µ—á–µ–π, –ø–æ—Å–ª–µ–¥–Ω—è—è {age_str} –Ω–∞–∑–∞–¥"
                )
            else:
                print(f"      ‚Ä¢ {row['symbol']}: {row['candle_count']} —Å–≤–µ—á–µ–π")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–ª—è ML (–º–∏–Ω–∏–º—É–º 96 —Å–≤–µ—á–µ–π)
        ml_ready = await AsyncPGPool.fetch(
            """SELECT symbol, COUNT(*) as cnt
               FROM raw_market_data
               GROUP BY symbol
               HAVING COUNT(*) >= 96"""
        )
        print(f"\n   ü§ñ –°–∏–º–≤–æ–ª–æ–≤ –≥–æ—Ç–æ–≤—ã—Ö –¥–ª—è ML (‚â•96 —Å–≤–µ—á–µ–π): {len(ml_ready)}")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ DataUpdateService
    print("\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ DataUpdateService:")
    try:
        from data.data_update_service import DataUpdateService

        service = DataUpdateService(config_manager)
        print("   ‚úÖ DataUpdateService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(
            f"   ‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {service.update_interval} —Å–µ–∫ ({service.update_interval / 60:.1f} –º–∏–Ω)"
        )
        print(f"   ‚Ä¢ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {'–í–∫–ª—é—á–µ–Ω–æ' if service.auto_update else '–û—Ç–∫–ª—é—á–µ–Ω–æ'}")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DataUpdateService: {e}")

    print("\n" + "=" * 60)
    print("üìå –†–ï–ó–Æ–ú–ï:")

    if data_config.get("auto_update", False):
        interval_min = data_config.get("update_interval", 60) / 60
        print(f"‚úÖ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –í–ö–õ–Æ–ß–ï–ù–û (–∫–∞–∂–¥—ã–µ {interval_min:.1f} –º–∏–Ω—É—Ç)")
    else:
        print("‚ö†Ô∏è –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –û–¢–ö–õ–Æ–ß–ï–ù–û")

    if fresh_1h[0]["cnt"] > 0:
        print("‚úÖ –ï—Å—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å)")
    else:
        print("‚ö†Ô∏è –ù–µ—Ç —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–∞")

    print("\nüöÄ –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ —á–µ—Ä–µ–∑ ./start_with_logs.sh:")
    print("   1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç —Å–≤–µ–∂–µ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö")
    print("   2. –ó–∞–≥—Ä—É–∑–∏—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ")
    print(
        f"   3. –ó–∞–ø—É—Å—Ç–∏—Ç –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ {data_config.get('update_interval', 60) / 60:.1f} –º–∏–Ω—É—Ç"
    )

    print("=" * 60)


if __name__ == "__main__":
    asyncio.run(test_data_updates())
