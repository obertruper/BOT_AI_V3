#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import os
import sys

from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

load_dotenv()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ["PGPORT"] = "5555"
os.environ["PGUSER"] = "obertruper"
os.environ["PGDATABASE"] = "bot_trading_v3"


async def test_data_update():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...\n")

    from core.config.config_manager import get_global_config_manager
    from data.data_update_service import DataUpdateService
    from database.connections.postgres import AsyncPGPool

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    config_manager = get_global_config_manager()
    data_service = DataUpdateService(config_manager)

    print("1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DataUpdateService...")

    try:
        # –ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã
        await data_service.start()
        print("   ‚úÖ –°–ª—É–∂–±–∞ –∑–∞–ø—É—â–µ–Ω–∞")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–∞–Ω–Ω—ã—Ö
        print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–∞–Ω–Ω—ã—Ö...")

        data_status = await data_service.get_data_status(force_refresh=True)

        print(f"   –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {len(data_status)}")

        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∏–º–≤–æ–ª—É
        for key, status in data_status.items():
            print(f"\n   üìä {status.symbol} ({status.interval_minutes} –º–∏–Ω):")
            print(f"      - –°–≤–µ—á–µ–π –≤ –ë–î: {status.candles_count}")
            print(f"      - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ: {status.latest_timestamp}")
            print(
                f"      - –ì–æ—Ç–æ–≤ –¥–ª—è ML: {'‚úÖ' if status.is_sufficient_for_ml else '‚ùå'}"
            )
            print(f"      - –ü—Ä–æ–ø—É—Å–∫–æ–≤: {len(status.gaps)}")

            if status.gaps:
                for gap in status.gaps[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 –ø—Ä–æ–ø—É—Å–∫–∞
                    print(
                        f"        Gap: {gap.start_time} - {gap.end_time} ({gap.expected_candles} —Å–≤–µ—á–µ–π)"
                    )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        pool = await AsyncPGPool.get_pool()
        before_count = await pool.fetchval(
            """
            SELECT COUNT(*) FROM raw_market_data
            WHERE symbol = 'BTCUSDT'
            AND interval_minutes = 15
            AND datetime > NOW() - INTERVAL '1 hour'
        """
        )

        print(f"   –°–≤–µ—á–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –î–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {before_count}")

        # –ñ–¥–µ–º –æ–¥–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (60 —Å–µ–∫—É–Ω–¥)
        print("\n   ‚è≥ –ñ–¥–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (60 —Å–µ–∫)...")
        await asyncio.sleep(65)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        after_count = await pool.fetchval(
            """
            SELECT COUNT(*) FROM raw_market_data
            WHERE symbol = 'BTCUSDT'
            AND interval_minutes = 15
            AND datetime > NOW() - INTERVAL '1 hour'
        """
        )

        print(f"   –°–≤–µ—á–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –ü–û–°–õ–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {after_count}")

        if after_count > before_count:
            print(
                f"   ‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å! –î–æ–±–∞–≤–ª–µ–Ω–æ {after_count - before_count} –Ω–æ–≤—ã—Ö —Å–≤–µ—á–µ–π"
            )
        else:
            print("   ‚ö†Ô∏è –ù–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å (–≤–æ–∑–º–æ–∂–Ω–æ, —Ä—ã–Ω–æ–∫ –∑–∞–∫—Ä—ã—Ç)")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –±–∏—Ä–∂–µ–π
        print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂–∏...")

        from exchanges.bybit.bybit_exchange import BybitExchange

        exchange = BybitExchange(
            api_key=os.getenv("BYBIT_API_KEY"),
            api_secret=os.getenv("BYBIT_API_SECRET"),
            sandbox=False,
        )

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏
        candles = await exchange.get_recent_candles(
            symbol="BTCUSDT", interval_minutes=15, count=5
        )

        print(f"   –ü–æ–ª—É—á–µ–Ω–æ {len(candles)} —Å–≤–µ—á–µ–π —Å –±–∏—Ä–∂–∏:")
        for candle in candles[-3:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3
            print(
                f"      {candle.timestamp}: O={candle.open_price} H={candle.high_price} "
                f"L={candle.low_price} C={candle.close_price} V={candle.volume}"
            )

        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª—É–∂–±—ã
        print("\n5Ô∏è‚É£ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª—É–∂–±—ã...")
        await data_service.stop()
        print("   ‚úÖ –°–ª—É–∂–±–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback

        traceback.print_exc()

        # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ —Å–ª—É–∂–±–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        if data_service.is_running:
            await data_service.stop()


if __name__ == "__main__":
    asyncio.run(test_data_update())
