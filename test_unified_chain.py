#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏: ML —Å–∏–≥–Ω–∞–ª ‚Üí UnifiedSignalProcessor ‚Üí Order ‚Üí Exchange
"""

import asyncio
import os
from datetime import datetime

from dotenv import load_dotenv

load_dotenv()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ["PGPORT"] = "5555"
os.environ["PGUSER"] = "obertruper"
os.environ["PGDATABASE"] = "bot_trading_v3"


async def test_unified_chain():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""

    print(f"\nüîß –¢–ï–°–¢ –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–û–ô –¶–ï–ü–û–ß–ö–ò - {datetime.now().strftime('%H:%M:%S')}")
    print("=" * 70)

    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        print("\n1Ô∏è‚É£ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:")

        from core.signals.unified_signal_processor import UnifiedSignalProcessor
        from database.connections.postgres import AsyncPGPool
        from ml.ml_manager import MLManager
        from trading.order_executor import OrderExecutor

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ML –º–µ–Ω–µ–¥–∂–µ—Ä
        ml_config = {"model_path": "models/saved", "device": "cpu"}
        ml_manager = MLManager(ml_config)
        await ml_manager.initialize()
        print("   ‚úÖ ML Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OrderExecutor
        order_executor = OrderExecutor()
        await order_executor.initialize()
        print("   ‚úÖ OrderExecutor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –°–æ–∑–¥–∞–µ–º UnifiedSignalProcessor
        processor_config = {
            "min_confidence_threshold": 0.3,
            "max_daily_trades": 100,
            "position_size": 0.0001,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è BTC
            "exchange": "bybit",
        }

        signal_processor = UnifiedSignalProcessor(
            ml_manager=ml_manager,
            trading_engine=None,  # –ü–æ–∫–∞ –±–µ–∑ trading engine
            config=processor_config,
        )
        print("   ‚úÖ UnifiedSignalProcessor —Å–æ–∑–¥–∞–Ω")

        # 2. –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("\n2Ô∏è‚É£ –ü–û–õ–£–ß–ï–ù–ò–ï –†–´–ù–û–ß–ù–´–• –î–ê–ù–ù–´–•:")

        pool = await AsyncPGPool.get_pool()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ BTCUSDT
        market_data_query = """
        SELECT * FROM raw_market_data
        WHERE symbol = 'BTCUSDT'
        AND interval_minutes = 15
        ORDER BY datetime DESC
        LIMIT 100
        """

        candles = await pool.fetch(market_data_query)

        if not candles:
            print("   ‚ùå –ù–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!")
            return

        current_price = float(candles[0]["close"])
        print(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(candles)} —Å–≤–µ—á–µ–π")
        print(f"   üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTCUSDT: ${current_price:,.2f}")

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è ML
        market_data = {
            "symbol": "BTCUSDT",
            "current_price": current_price,
            "candles": candles,
        }

        # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ML —Å–∏–≥–Ω–∞–ª
        print("\n3Ô∏è‚É£ –ì–ï–ù–ï–†–ê–¶–ò–Ø ML –°–ò–ì–ù–ê–õ–ê:")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ UnifiedSignalProcessor
        order = await signal_processor.process_ml_prediction("BTCUSDT", market_data)

        if order:
            print("   ‚úÖ –°–æ–∑–¥–∞–Ω –æ—Ä–¥–µ—Ä:")
            print(f"      –°–∏–º–≤–æ–ª: {order.symbol}")
            print(f"      –°—Ç–æ—Ä–æ–Ω–∞: {order.side}")
            print(f"      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order.quantity}")
            print(f"      –¶–µ–Ω–∞: ${order.price:,.2f}")
            print(f"      ID: {order.id}")

            # 4. –ò—Å–ø–æ–ª–Ω—è–µ–º –æ—Ä–¥–µ—Ä
            print("\n4Ô∏è‚É£ –ò–°–ü–û–õ–ù–ï–ù–ò–ï –û–†–î–ï–†–ê:")

            success = await order_executor.execute_order(order)

            if success:
                print("   ‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω!")
            else:
                print("   ‚ùå –û—Ä–¥–µ—Ä –æ—Ç–∫–ª–æ–Ω–µ–Ω")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏—á–∏–Ω—É
                rejected_info = await pool.fetchrow(
                    """
                    SELECT status, metadata
                    FROM orders
                    WHERE id = $1
                """,
                    order.id,
                )

                if rejected_info:
                    print(f"   üìã –°—Ç–∞—Ç—É—Å: {rejected_info['status']}")
                    print(
                        f"   üìã –ü—Ä–∏—á–∏–Ω–∞: {rejected_info['metadata'].get('error_message', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}"
                    )

        else:
            print("   ‚ö†Ô∏è –°–∏–≥–Ω–∞–ª –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (–≤–æ–∑–º–æ–∂–Ω–æ NEUTRAL)")

        # 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\n5Ô∏è‚É£ –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")

        processor_stats = await signal_processor.get_stats()
        print("   üìä SignalProcessor:")
        print(f"      –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {processor_stats['signals_processed']}")
        print(f"      –°–æ–∑–¥–∞–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤: {processor_stats['orders_created']}")
        print(f"      –û—à–∏–±–æ–∫: {processor_stats['errors_count']}")

        executor_stats = await order_executor.get_stats()
        print("   üìä OrderExecutor:")
        print(f"      –ò—Å–ø–æ–ª–Ω–µ–Ω–æ: {executor_stats['executed_count']}")
        print(f"      –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {executor_stats['rejected_count']}")
        print(f"      –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –±–∏—Ä–∂–∏: {executor_stats['connected_exchanges']}")

        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
        print("\n6Ô∏è‚É£ –ü–û–°–õ–ï–î–ù–ò–ï –û–†–î–ï–†–ê:")

        recent_orders = await pool.fetch(
            """
            SELECT id, symbol, side, quantity, price, status, created_at
            FROM orders
            WHERE created_at > NOW() - INTERVAL '1 hour'
            ORDER BY created_at DESC
            LIMIT 5
        """
        )

        for order in recent_orders:
            icon = (
                "‚úÖ"
                if order["status"] == "OPEN"
                else "‚ùå"
                if order["status"] == "REJECTED"
                else "‚è≥"
            )
            print(
                f"   {icon} #{order['id']}: {order['symbol']} {order['side']} "
                f"{order['quantity']} @ ${order['price']:,.2f} - {order['status']}"
            )

        await AsyncPGPool.close_pool()

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(test_unified_chain())
