#!/usr/bin/env python3
"""
CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫—Ä–æ—Å—Å-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
–ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –∑–∞–ø—É—Å–∫–∞ –∫—Ä–æ—Å—Å-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python ai_agents/cli_cross_verification.py start "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"
    python ai_agents/cli_cross_verification.py status <task_id>
    python ai_agents/cli_cross_verification.py list
    python ai_agents/cli_cross_verification.py feedback <task_id>

–ê–≤—Ç–æ—Ä: BOT Trading v3 Team
"""

import asyncio
import argparse
import sys
import json
from pathlib import Path
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent.parent))

from ai_agents.automated_cross_verification import AutomatedCrossVerification


class CrossVerificationCLI:
    """CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫—Ä–æ—Å—Å-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.cross_verifier = AutomatedCrossVerification()
    
    async def start_verification(self, description: str, task_content: str, max_iterations: Optional[int] = None):
        """–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∫—Ä–æ—Å—Å-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –∫—Ä–æ—Å—Å-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {description}")
        print("=" * 60)
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π workflow
            task_id, report_path = await self.cross_verifier.run_full_workflow(
                description, task_content, max_iterations
            )
            
            print("‚úÖ –ö—Ä–æ—Å—Å-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            print(f"üìã Task ID: {task_id}")
            print(f"üìÑ –û—Ç—á–µ—Ç: {report_path}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            await self.show_task_status(task_id)
            
            return task_id
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫—Ä–æ—Å—Å-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return None
    
    async def show_task_status(self, task_id: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏"""
        status = self.cross_verifier.get_task_status(task_id)
        
        if "error" in status:
            print(f"‚ùå {status['error']}")
            return
        
        print(f"\nüìä –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: {task_id}")
        print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {status['description']}")
        print(f"üîÑ –°—Ç–∞—Ç—É—Å: {status['status']}")
        print(f"üî¢ –ò—Ç–µ—Ä–∞—Ü–∏–π: {status['iteration_count']}")
        print(f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {status['created_at']}")
        
        if status.get('cross_report_path'):
            print(f"üìÑ –û—Ç—á–µ—Ç: {status['cross_report_path']}")
        
        print(f"\nü§ñ AI —Å–∏—Å—Ç–µ–º—ã:")
        for ai_system, session_info in status['chat_sessions'].items():
            status_emoji = "‚úÖ" if session_info['status'] == "responded" else "‚ùå"
            print(f"  {status_emoji} {ai_system}: {session_info['status']} "
                  f"(–æ—Ç–≤–µ—Ç–æ–≤: {session_info['responses_count']}, "
                  f"chat: {session_info['chat_id']})")
    
    def list_tasks(self):
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á"""
        tasks = self.cross_verifier.list_active_tasks()
        
        if not tasks:
            print("üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç")
            return
        
        print(f"üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ ({len(tasks)}):")
        print("=" * 80)
        
        for task in tasks:
            status_emoji = {
                "created": "üÜï",
                "in_progress": "üîÑ", 
                "feedback_received": "üí¨",
                "completed": "‚úÖ",
                "error": "‚ùå"
            }.get(task['status'], "‚ùì")
            
            print(f"{status_emoji} {task['task_id']}")
            print(f"   üìù {task['description']}")
            print(f"   üîÑ {task['status']} (–∏—Ç–µ—Ä–∞—Ü–∏–π: {task['iteration_count']})")
            print(f"   üìÖ {task['created_at']}")
            print()
    
    async def send_feedback(self, task_id: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ –∑–∞–¥–∞—á–µ"""
        print(f"üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ feedback –¥–ª—è –∑–∞–¥–∞—á–∏: {task_id}")
        
        try:
            feedback = await self.cross_verifier.send_cross_report_for_feedback(task_id)
            
            print("‚úÖ Feedback –ø–æ–ª—É—á–µ–Ω –æ—Ç –≤—Å–µ—Ö AI —Å–∏—Å—Ç–µ–º!")
            
            for ai_system, response in feedback.items():
                print(f"\nü§ñ {ai_system}:")
                print(f"   üìù {response[:200]}{'...' if len(response) > 200 else ''}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
            report_path = await self.cross_verifier.generate_cross_report(task_id)
            print(f"\nüìÑ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç: {report_path}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ feedback: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(
        description="–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫—Ä–æ—Å—Å-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å —Ç—Ä–µ–º—è AI —Å–∏—Å—Ç–µ–º–∞–º–∏",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∫—Ä–æ—Å—Å-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
  python ai_agents/cli_cross_verification.py start "–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞" "–†–∞–∑—Ä–∞–±–æ—Ç–∞–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ –¥–ª—è BTC —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RSI –∏ MACD"
  
  # –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏  
  python ai_agents/cli_cross_verification.py status cross_verification_20250713_150000
  
  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á
  python ai_agents/cli_cross_verification.py list
  
  # –û—Ç–ø—Ä–∞–≤–∫–∞ feedback
  python ai_agents/cli_cross_verification.py feedback cross_verification_20250713_150000
        """
    )
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ start
    start_parser = subparsers.add_parser('start', help='–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∫—Ä–æ—Å—Å-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏')
    start_parser.add_argument('description', help='–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏')
    start_parser.add_argument('task_content', help='–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è AI')
    start_parser.add_argument('--max-iterations', type=int, default=5, 
                             help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5)')
    
    # –ö–æ–º–∞–Ω–¥–∞ status
    status_parser = subparsers.add_parser('status', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏')
    status_parser.add_argument('task_id', help='ID –∑–∞–¥–∞—á–∏')
    
    # –ö–æ–º–∞–Ω–¥–∞ list
    list_parser = subparsers.add_parser('list', help='–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á')
    
    # –ö–æ–º–∞–Ω–¥–∞ feedback
    feedback_parser = subparsers.add_parser('feedback', help='–û—Ç–ø—Ä–∞–≤–∏—Ç—å feedback –ø–æ –∑–∞–¥–∞—á–µ')
    feedback_parser.add_argument('task_id', help='ID –∑–∞–¥–∞—á–∏')
    
    # –ö–æ–º–∞–Ω–¥–∞ interactive
    interactive_parser = subparsers.add_parser('interactive', help='–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º CLI
    cli = CrossVerificationCLI()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    if args.command == 'start':
        asyncio.run(cli.start_verification(
            args.description, 
            args.task_content, 
            args.max_iterations
        ))
    
    elif args.command == 'status':
        asyncio.run(cli.show_task_status(args.task_id))
    
    elif args.command == 'list':
        cli.list_tasks()
    
    elif args.command == 'feedback':
        asyncio.run(cli.send_feedback(args.task_id))
    
    elif args.command == 'interactive':
        asyncio.run(interactive_mode(cli))


async def interactive_mode(cli: CrossVerificationCLI):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"""
    print("ü§ñ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –∫—Ä–æ—Å—Å-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    print("–í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏, 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
    print("=" * 50)
    
    while True:
        try:
            command = input("\n> ").strip()
            
            if command.lower() in ['exit', 'quit', 'q']:
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            
            elif command.lower() in ['help', 'h']:
                print("""
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
  start <–æ–ø–∏—Å–∞–Ω–∏–µ> <—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ>  - –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∫—Ä–æ—Å—Å-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
  status <task_id>              - –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏  
  list                          - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á
  feedback <task_id>            - –û—Ç–ø—Ä–∞–≤–∏—Ç—å feedback
  help                          - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
  exit                          - –í—ã—Ö–æ–¥
                """)
            
            elif command.lower() == 'list':
                cli.list_tasks()
            
            elif command.startswith('status '):
                task_id = command.split(' ', 1)[1]
                await cli.show_task_status(task_id)
            
            elif command.startswith('feedback '):
                task_id = command.split(' ', 1)[1]
                await cli.send_feedback(task_id)
            
            elif command.startswith('start '):
                parts = command.split(' ', 2)
                if len(parts) < 3:
                    print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: start <–æ–ø–∏—Å–∞–Ω–∏–µ> <—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ>")
                    continue
                
                description = parts[1]
                task_content = parts[2]
                await cli.start_verification(description, task_content)
            
            else:
                print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
                print("–í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
        
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()