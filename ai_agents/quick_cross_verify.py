#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –∫—Ä–æ—Å—Å-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è - —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
–î–ª—è —á–∞—Å—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python ai_agents/quick_cross_verify.py "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"

–ê–≤—Ç–æ—Ä: BOT Trading v3 Team
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent.parent))

from ai_agents.automated_cross_verification import AutomatedCrossVerification


async def quick_verify(description: str, task_content: str):
    """–ë—ã—Å—Ç—Ä–∞—è –∫—Ä–æ—Å—Å-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""

    print("üöÄ –ë—ã—Å—Ç—Ä–∞—è –∫—Ä–æ—Å—Å-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è BOT Trading v3")
    print("=" * 60)
    print(f"üìã –ó–∞–¥–∞—á–∞: {description}")
    print("üéØ AI —Å–∏—Å—Ç–µ–º—ã: ChatGPT o3-pro, Grok v4, Claude Opus 4")
    print("=" * 60)

    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    cross_verifier = AutomatedCrossVerification()

    try:
        # –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ (–º–∞–∫—Å–∏–º—É–º 3 –∏—Ç–µ—Ä–∞—Ü–∏–∏)
        task_id, report_path = await cross_verifier.run_full_workflow(
            description=description, task_content=task_content, max_iterations=3
        )

        print("\n" + "=" * 60)
        print("‚úÖ –ö–†–û–°–°-–í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("=" * 60)
        print(f"üìã Task ID: {task_id}")
        print(f"üìÑ –û—Ç—á–µ—Ç: {report_path}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        status = cross_verifier.get_task_status(task_id)
        print(f"üî¢ –ò—Ç–µ—Ä–∞—Ü–∏–π: {status['iteration_count']}")

        successful_ai = sum(
            1 for session in status["chat_sessions"].values() if session["status"] == "responded"
        )
        total_ai = len(status["chat_sessions"])
        print(f"ü§ñ –£—Å–ø–µ—à–Ω—ã—Ö AI: {successful_ai}/{total_ai}")

        print("\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        for ai_system, session_info in status["chat_sessions"].items():
            status_emoji = "‚úÖ" if session_info["status"] == "responded" else "‚ùå"
            print(
                f"   {status_emoji} {ai_system.upper()}: {session_info['responses_count']} –æ—Ç–≤–µ—Ç–æ–≤"
            )

        print(f"\nüìñ –ß–∏—Ç–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤: {report_path}")

        return task_id, report_path

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫—Ä–æ—Å—Å-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞")
        print("   - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é MCP —Å–µ—Ä–≤–µ—Ä–æ–≤")
        print("   - –õ–æ–≥–∏ –≤ logs/cross_verification.log")
        return None, None


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) != 3:
        print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ!")
        print("\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print('   python ai_agents/quick_cross_verify.py "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"')
        print("\n–ü—Ä–∏–º–µ—Ä—ã:")
        print(
            '   python ai_agents/quick_cross_verify.py "–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞" "–†–∞–∑—Ä–∞–±–æ—Ç–∞–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ –¥–ª—è BTC"'
        )
        print(
            '   python ai_agents/quick_cross_verify.py "–†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç" "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å stop-loss –¥–ª—è –∫—Ä–∏–ø—Ç–æ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞"'
        )
        print(
            '   python ai_agents/quick_cross_verify.py "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –±–æ—Ç–∞" "–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è HFT –±–æ—Ç–∞"'
        )
        sys.exit(1)

    description = sys.argv[1]
    task_content = sys.argv[2]

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ã—Å—Ç—Ä—É—é –∫—Ä–æ—Å—Å-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    asyncio.run(quick_verify(description, task_content))


if __name__ == "__main__":
    main()
