#!/usr/bin/env python3
"""
–ö—Ä–æ—Å—Å-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≥–æ—Ç–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ workflow
–£–ø—Ä–æ—â–∞–µ—Ç –∑–∞–ø—É—Å–∫ —Ç–∏–ø–æ–≤—ã—Ö –∑–∞–¥–∞—á

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python ai_agents/template_cross_verify.py scalping_strategy "–î–µ—Ç–∞–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞"
    python ai_agents/template_cross_verify.py hft_architecture "–ê–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è HFT"
    python ai_agents/template_cross_verify.py --list  # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —à–∞–±–ª–æ–Ω—ã

–ê–≤—Ç–æ—Ä: BOT Trading v3 Team
"""

import asyncio
import sys
import argparse
from pathlib import Path
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent.parent))

from ai_agents.automated_cross_verification import AutomatedCrossVerification
from ai_agents.workflow_templates import WorkflowTemplates, QUICK_WORKFLOWS, TaskType


class TemplateCrossVerification:
    """–ö—Ä–æ—Å—Å-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å —à–∞–±–ª–æ–Ω–∞–º–∏"""
    
    def __init__(self):
        self.cross_verifier = AutomatedCrossVerification()
        self.templates = WorkflowTemplates.get_all_templates()
    
    async def run_template_verification(
        self, 
        template_name: str, 
        task_content: str,
        custom_params: Optional[dict] = None
    ):
        """–ó–∞–ø—É—Å–∫ –∫—Ä–æ—Å—Å-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å —à–∞–±–ª–æ–Ω–æ–º"""
        
        if template_name not in QUICK_WORKFLOWS:
            print(f"‚ùå –®–∞–±–ª–æ–Ω '{template_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:")
            self.list_templates()
            return None, None
        
        workflow_config = QUICK_WORKFLOWS[template_name]
        template_type = workflow_config["template_type"]
        template = self.templates[template_type]
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –∫—Ä–æ—Å—Å-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å —à–∞–±–ª–æ–Ω–æ–º: {template_name}")
        print(f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {workflow_config['description']}")
        print(f"üéØ –¢–∏–ø –∑–∞–¥–∞—á–∏: {template_type.value}")
        print("=" * 60)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        params = workflow_config.get("params", {})
        if custom_params:
            params.update(custom_params)
        
        params["task_description"] = workflow_config["description"]
        params["task_content"] = task_content
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        formatted_prompt = WorkflowTemplates.format_prompt(template, **params)
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫—Ä–æ—Å—Å-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
            task_id, report_path = await self.cross_verifier.run_full_workflow(
                description=f"{workflow_config['description']} ({template_name})",
                task_content=formatted_prompt,
                max_iterations=template.max_iterations
            )
            
            print("\n" + "="*60)
            print("‚úÖ –ö–†–û–°–°-–í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
            print("="*60)
            print(f"üìã Task ID: {task_id}")
            print(f"üìÑ –û—Ç—á–µ—Ç: {report_path}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            status = self.cross_verifier.get_task_status(task_id)
            print(f"üî¢ –ò—Ç–µ—Ä–∞—Ü–∏–π: {status['iteration_count']}")
            
            successful_ai = sum(1 for session in status['chat_sessions'].values() 
                               if session['status'] == 'responded')
            total_ai = len(status['chat_sessions'])
            print(f"ü§ñ –£—Å–ø–µ—à–Ω—ã—Ö AI: {successful_ai}/{total_ai}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º follow-up –≤–æ–ø—Ä–æ—Å—ã
            if template.follow_up_questions:
                print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ follow-up –≤–æ–ø—Ä–æ—Å—ã:")
                for i, question in enumerate(template.follow_up_questions, 1):
                    print(f"   {i}. {question}")
            
            print(f"\nüìñ –ß–∏—Ç–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤: {report_path}")
            
            return task_id, report_path
            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫—Ä–æ—Å—Å-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return None, None
    
    def list_templates(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã"""
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã workflow:")
        print("=" * 60)
        
        for template_name, config in QUICK_WORKFLOWS.items():
            template_type = config["template_type"]
            template = self.templates[template_type]
            
            print(f"üîß {template_name}")
            print(f"   üìù {config['description']}")
            print(f"   üéØ –¢–∏–ø: {template_type.value}")
            print(f"   üîÑ –ò—Ç–µ—Ä–∞—Ü–∏–π: {template.max_iterations}")
            print(f"   ü§ñ AI —Å–∏—Å—Ç–µ–º—ã: {', '.join(template.ai_systems)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            params = config.get("params", {})
            if params:
                print(f"   ‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {', '.join(f'{k}={v}' for k, v in params.items())}")
            
            print()
    
    def show_template_details(self, template_name: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
        if template_name not in QUICK_WORKFLOWS:
            print(f"‚ùå –®–∞–±–ª–æ–Ω '{template_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        workflow_config = QUICK_WORKFLOWS[template_name]
        template_type = workflow_config["template_type"]
        template = self.templates[template_type]
        
        print(f"\nüìã –î–µ—Ç–∞–ª–∏ —à–∞–±–ª–æ–Ω–∞: {template_name}")
        print("=" * 60)
        print(f"üéØ –û–ø–∏—Å–∞–Ω–∏–µ: {workflow_config['description']}")
        print(f"üìä –¢–∏–ø –∑–∞–¥–∞—á–∏: {template_type.value}")
        print(f"üîÑ –ú–∞–∫—Å–∏–º—É–º –∏—Ç–µ—Ä–∞—Ü–∏–π: {template.max_iterations}")
        print(f"ü§ñ AI —Å–∏—Å—Ç–µ–º—ã: {', '.join(template.ai_systems)}")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        params = workflow_config.get("params", {})
        if params:
            print(f"\n‚öôÔ∏è –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
            for key, value in params.items():
                print(f"   ‚Ä¢ {key}: {value}")
        
        # Follow-up –≤–æ–ø—Ä–æ—Å—ã
        if template.follow_up_questions:
            print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ follow-up –≤–æ–ø—Ä–æ—Å—ã:")
            for i, question in enumerate(template.follow_up_questions, 1):
                print(f"   {i}. {question}")
        
        # –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        print(f"\nüìñ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
        print(f"   python ai_agents/template_cross_verify.py {template_name} \"–í–∞—à–∞ –∑–∞–¥–∞—á–∞ –∑–¥–µ—Å—å\"")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="–ö—Ä–æ—Å—Å-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –≥–æ—Ç–æ–≤—ã–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏ workflow",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
  python ai_agents/template_cross_verify.py scalping_strategy "–†–∞–∑—Ä–∞–±–æ—Ç–∞–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ BTC —Å RSI –∏ MACD"
  
  # –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è  
  python ai_agents/template_cross_verify.py arbitrage_strategy "–ê—Ä–±–∏—Ç—Ä–∞–∂ –º–µ–∂–¥—É Binance –∏ Bybit"
  
  # HFT –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
  python ai_agents/template_cross_verify.py hft_architecture "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ <1–º—Å"
  
  # –°–∏—Å—Ç–µ–º–∞ —Ä–∏—Å–∫–æ–≤
  python ai_agents/template_cross_verify.py risk_system "Comprehensive —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –¥–ª—è –ø–æ—Ä—Ç—Ñ–µ–ª—è $100K"
  
  # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  python ai_agents/template_cross_verify.py trading_engine_optimization "–£—Å–∫–æ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ä–¥–µ—Ä–æ–≤ –≤ 10 —Ä–∞–∑"
  
  # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —à–∞–±–ª–æ–Ω—ã
  python ai_agents/template_cross_verify.py --list
  
  # –î–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
  python ai_agents/template_cross_verify.py --details scalping_strategy
        """
    )
    
    parser.add_argument('template_name', nargs='?', help='–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞')
    parser.add_argument('task_content', nargs='?', help='–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏')
    parser.add_argument('--list', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —à–∞–±–ª–æ–Ω—ã')
    parser.add_argument('--details', metavar='TEMPLATE', help='–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —à–∞–±–ª–æ–Ω–∞')
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É
    template_verifier = TemplateCrossVerification()
    
    if args.list:
        template_verifier.list_templates()
        return
    
    if args.details:
        template_verifier.show_template_details(args.details)
        return
    
    if not args.template_name or not args.task_content:
        print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏!")
        print("\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("   python ai_agents/template_cross_verify.py <template_name> <task_content>")
        print("\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤:")
        print("   python ai_agents/template_cross_verify.py --list")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫—Ä–æ—Å—Å-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —Å —à–∞–±–ª–æ–Ω–æ–º
    await template_verifier.run_template_verification(
        args.template_name, 
        args.task_content
    )


if __name__ == "__main__":
    asyncio.run(main())