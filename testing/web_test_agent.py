#!/usr/bin/env python3
"""
WebTestAgent - –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ BOT_AI_V3

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü dashboard
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏ (mobile, tablet, desktop)
- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Puppeteer MCP –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏.
"""

import asyncio
import json
import logging
import time
from dataclasses import asdict, dataclass
from datetime import datetime
from enum import Enum
from pathlib import Path
from typing import Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger("WebTestAgent")


class TestStatus(Enum):
    """–°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–æ–≤"""

    PENDING = "pending"
    RUNNING = "running"
    PASSED = "passed"
    FAILED = "failed"
    SKIPPED = "skipped"


class DeviceType(Enum):
    """–¢–∏–ø—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

    MOBILE = {"width": 375, "height": 667, "name": "mobile"}
    TABLET = {"width": 768, "height": 1024, "name": "tablet"}
    DESKTOP = {"width": 1920, "height": 1080, "name": "desktop"}


@dataclass
class TestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""

    name: str
    status: TestStatus
    duration: float
    screenshot_path: str | None = None
    error_message: str | None = None
    performance_metrics: dict[str, Any] | None = None
    details: dict[str, Any] | None = None


@dataclass
class TestSuite:
    """–ù–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤"""

    name: str
    tests: list[TestResult]
    device: str
    start_time: datetime
    end_time: datetime | None = None

    @property
    def duration(self) -> float:
        if self.end_time:
            return (self.end_time - self.start_time).total_seconds()
        return 0.0

    @property
    def passed_count(self) -> int:
        return len([t for t in self.tests if t.status == TestStatus.PASSED])

    @property
    def failed_count(self) -> int:
        return len([t for t in self.tests if t.status == TestStatus.FAILED])


class WebTestAgent:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""

    def __init__(self, base_url: str = "http://localhost:5173"):
        self.base_url = base_url
        self.results_dir = Path("data/test_results")
        self.screenshots_dir = Path("data/test_results/screenshots")
        self.reports_dir = Path("data/test_results/reports")

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        for dir_path in [self.results_dir, self.screenshots_dir, self.reports_dir]:
            dir_path.mkdir(parents=True, exist_ok=True)

        self.test_suites: list[TestSuite] = []
        self.current_device = DeviceType.DESKTOP

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
        self.test_config = {
            "timeout": 30000,  # 30 —Å–µ–∫—É–Ω–¥
            "wait_for_network_idle": True,
            "capture_console_logs": True,
            "performance_budget": {
                "page_load_time": 5000,  # 5 —Å–µ–∫—É–Ω–¥
                "first_contentful_paint": 2000,  # 2 —Å–µ–∫—É–Ω–¥—ã
                "largest_contentful_paint": 4000,  # 4 —Å–µ–∫—É–Ω–¥—ã
            },
        }

        logger.info(f"WebTestAgent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è {base_url}")

    async def run_full_test_suite(self) -> dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤ WebTestAgent")

        start_time = datetime.now()

        try:
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
            for device in DeviceType:
                await self._run_device_tests(device)

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            report = await self._generate_comprehensive_report()

            end_time = datetime.now()
            duration = (end_time - start_time).total_seconds()

            logger.info(f"‚úÖ –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")

            return {
                "status": "completed",
                "start_time": start_time.isoformat(),
                "end_time": end_time.isoformat(),
                "duration": duration,
                "total_suites": len(self.test_suites),
                "report_path": str(report["report_path"]),
                "summary": report["summary"],
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤: {e}")
            return {
                "status": "failed",
                "error": str(e),
                "start_time": start_time.isoformat(),
                "duration": (datetime.now() - start_time).total_seconds(),
            }

    async def _run_device_tests(self, device: DeviceType) -> TestSuite:
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        logger.info(f"üì± –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è {device.value['name']}")

        self.current_device = device
        suite = TestSuite(
            name=f"web_tests_{device.value['name']}",
            tests=[],
            device=device.value["name"],
            start_time=datetime.now(),
        )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞ —á–µ—Ä–µ–∑ Puppeteer MCP
        await self._setup_device_viewport(device)

        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
        test_scenarios = [
            ("dashboard_load", self._test_dashboard_load),
            ("navigation", self._test_navigation),
            ("traders_page", self._test_traders_page),
            ("websocket_connection", self._test_websocket_connection),
            ("responsive_design", self._test_responsive_design),
            ("performance", self._test_performance),
            ("accessibility", self._test_accessibility),
            ("error_handling", self._test_error_handling),
        ]

        for test_name, test_func in test_scenarios:
            try:
                logger.info(f"üß™ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞: {test_name}")
                result = await test_func()
                result.name = f"{test_name}_{device.value['name']}"
                suite.tests.append(result)

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
                suite.tests.append(
                    TestResult(
                        name=f"{test_name}_{device.value['name']}",
                        status=TestStatus.FAILED,
                        duration=0.0,
                        error_message=str(e),
                    )
                )

        suite.end_time = datetime.now()
        self.test_suites.append(suite)

        logger.info(
            f"‚úÖ –¢–µ—Å—Ç—ã –¥–ª—è {device.value['name']} –∑–∞–≤–µ—Ä—à–µ–Ω—ã: "
            f"{suite.passed_count} —É—Å–ø–µ—à–Ω—ã—Ö, {suite.failed_count} –Ω–µ—É–¥–∞—á–Ω—ã—Ö"
        )

        return suite

    async def _setup_device_viewport(self, device: DeviceType):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞ —á–µ—Ä–µ–∑ Puppeteer MCP"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Puppeteer MCP –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ viewport
            from tools.mcp_tools import PuppeteerMCP

            puppeteer = PuppeteerMCP()
            await puppeteer.navigate(
                url=self.base_url,
                launch_options={
                    "headless": False,  # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                    "defaultViewport": {
                        "width": device.value["width"],
                        "height": device.value["height"],
                        "deviceScaleFactor": 1,
                    },
                },
            )

            logger.info(f"üìê –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω viewport {device.value['width']}x{device.value['height']}")

        except ImportError:
            # Fallback –µ—Å–ª–∏ MCP –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
            logger.warning("Puppeteer MCP –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–∏—Ç–∞—Ü–∏—é")

    async def _test_dashboard_load(self) -> TestResult:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã dashboard"""
        start_time = time.time()

        try:
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ dashboard
            await self._navigate_and_wait(self.base_url)

            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
            screenshot_path = await self._capture_screenshot("dashboard_load")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            elements_to_check = [
                "h1",  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ "BOT_Trading v3.0"
                ".container",  # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                "[data-testid='active-traders']",  # –ö–∞—Ä—Ç–æ—á–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
                "[data-testid='total-equity']",  # –ö–∞—Ä—Ç–æ—á–∫–∞ –æ–±—â–µ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞
                "[data-testid='current-pnl']",  # –ö–∞—Ä—Ç–æ—á–∫–∞ P&L
                "[data-testid='open-positions']",  # –ö–∞—Ä—Ç–æ—á–∫–∞ –ø–æ–∑–∏—Ü–∏–π
            ]

            missing_elements = []
            for selector in elements_to_check:
                if not await self._element_exists(selector):
                    missing_elements.append(selector)

            duration = time.time() - start_time

            if missing_elements:
                return TestResult(
                    name="dashboard_load",
                    status=TestStatus.FAILED,
                    duration=duration,
                    screenshot_path=screenshot_path,
                    error_message=f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —ç–ª–µ–º–µ–Ω—Ç—ã: {missing_elements}",
                    details={"missing_elements": missing_elements},
                )

            return TestResult(
                name="dashboard_load",
                status=TestStatus.PASSED,
                duration=duration,
                screenshot_path=screenshot_path,
                details={"elements_found": len(elements_to_check)},
            )

        except Exception as e:
            duration = time.time() - start_time
            return TestResult(
                name="dashboard_load",
                status=TestStatus.FAILED,
                duration=duration,
                error_message=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ dashboard: {e!s}",
            )

    async def _test_navigation(self) -> TestResult:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏"""
        start_time = time.time()

        try:
            navigation_tests = [
                ("/", "Dashboard"),
                ("/traders", "Traders"),
                ("/positions", "Positions"),
                ("/orders", "Orders"),
                ("/analytics", "Analytics"),
                ("/settings", "Settings"),
            ]

            successful_navigations = 0
            failed_navigations = []

            for route, page_name in navigation_tests:
                try:
                    url = f"{self.base_url}{route}"
                    await self._navigate_and_wait(url)

                    # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    await asyncio.sleep(2)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
                    if await self._page_loaded_successfully():
                        successful_navigations += 1
                        await self._capture_screenshot(f"nav_{page_name.lower()}")
                    else:
                        failed_navigations.append(page_name)

                except Exception as nav_error:
                    failed_navigations.append(f"{page_name}: {nav_error!s}")

            duration = time.time() - start_time

            if failed_navigations:
                return TestResult(
                    name="navigation",
                    status=TestStatus.FAILED,
                    duration=duration,
                    error_message=f"–û—à–∏–±–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {failed_navigations}",
                    details={
                        "successful": successful_navigations,
                        "failed": failed_navigations,
                        "total_pages": len(navigation_tests),
                    },
                )

            return TestResult(
                name="navigation",
                status=TestStatus.PASSED,
                duration=duration,
                details={
                    "successful_navigations": successful_navigations,
                    "total_pages": len(navigation_tests),
                },
            )

        except Exception as e:
            duration = time.time() - start_time
            return TestResult(
                name="navigation",
                status=TestStatus.FAILED,
                duration=duration,
                error_message=f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e!s}",
            )

    async def _test_traders_page(self) -> TestResult:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç—Ä–µ–π–¥–µ—Ä–æ–≤"""
        start_time = time.time()

        try:
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
            await self._navigate_and_wait(f"{self.base_url}/traders")

            screenshot_path = await self._capture_screenshot("traders_page")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
            checks = {
                "traders_table": await self._element_exists("table, .traders-grid"),
                "add_trader_btn": await self._element_exists(
                    "button:contains('–î–æ–±–∞–≤–∏—Ç—å'), [data-testid='add-trader']"
                ),
                "filter_controls": await self._element_exists(
                    ".filter, .search, input[type='search']"
                ),
                "status_indicators": await self._element_exists(".status, .indicator"),
            }

            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            interactive_tests = []

            # –ü–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ "–û–±–Ω–æ–≤–∏—Ç—å" –µ—Å–ª–∏ –µ—Å—Ç—å
            try:
                if await self._element_exists("button:contains('–û–±–Ω–æ–≤–∏—Ç—å')"):
                    await self._click_element("button:contains('–û–±–Ω–æ–≤–∏—Ç—å')")
                    await asyncio.sleep(1)
                    interactive_tests.append("refresh_button: OK")
                else:
                    interactive_tests.append("refresh_button: NOT_FOUND")
            except Exception as e:
                interactive_tests.append(f"refresh_button: ERROR - {e!s}")

            duration = time.time() - start_time

            failed_checks = [k for k, v in checks.items() if not v]

            if failed_checks:
                return TestResult(
                    name="traders_page",
                    status=TestStatus.FAILED,
                    duration=duration,
                    screenshot_path=screenshot_path,
                    error_message=f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —ç–ª–µ–º–µ–Ω—Ç—ã: {failed_checks}",
                    details={"checks": checks, "interactive_tests": interactive_tests},
                )

            return TestResult(
                name="traders_page",
                status=TestStatus.PASSED,
                duration=duration,
                screenshot_path=screenshot_path,
                details={"checks": checks, "interactive_tests": interactive_tests},
            )

        except Exception as e:
            duration = time.time() - start_time
            return TestResult(
                name="traders_page",
                status=TestStatus.FAILED,
                duration=duration,
                error_message=f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç—Ä–µ–π–¥–µ—Ä–æ–≤: {e!s}",
            )

    async def _test_websocket_connection(self) -> TestResult:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        start_time = time.time()

        try:
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ dashboard –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ WebSocket –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
            await self._navigate_and_wait(self.base_url)

            # –ò—â–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            ws_indicator_selectors = [
                ".ws-status",
                "[data-testid='ws-connection']",
                ".connection-status",
                "div:contains('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ')",
                "div:contains('–û—Ç–∫–ª—é—á–µ–Ω–æ')",
            ]

            ws_status = None
            for selector in ws_indicator_selectors:
                if await self._element_exists(selector):
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
                    ws_status = await self._get_element_text(selector)
                    break

            screenshot_path = await self._capture_screenshot("websocket_test")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º JavaScript WebSocket –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            js_ws_test = await self._evaluate_javascript(
                """
                (async () => {
                    try {
                        const ws = new WebSocket('ws://localhost:8080/ws');
                        return new Promise((resolve) => {
                            setTimeout(() => {
                                if (ws.readyState === WebSocket.CONNECTING) {
                                    resolve({ status: 'connecting', readyState: ws.readyState });
                                } else if (ws.readyState === WebSocket.OPEN) {
                                    resolve({ status: 'connected', readyState: ws.readyState });
                                } else {
                                    resolve({ status: 'failed', readyState: ws.readyState });
                                }
                                ws.close();
                            }, 3000);
                        });
                    } catch (error) {
                        return { status: 'error', error: error.message };
                    }
                })()
            """
            )

            duration = time.time() - start_time

            # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            connection_working = (
                ws_status and "–ø–æ–¥–∫–ª—é—á–µ–Ω–æ" in ws_status.lower()
            ) or js_ws_test.get("status") == "connected"

            if connection_working:
                return TestResult(
                    name="websocket_connection",
                    status=TestStatus.PASSED,
                    duration=duration,
                    screenshot_path=screenshot_path,
                    details={"ui_status": ws_status, "js_test": js_ws_test},
                )
            else:
                return TestResult(
                    name="websocket_connection",
                    status=TestStatus.FAILED,
                    duration=duration,
                    screenshot_path=screenshot_path,
                    error_message="WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç",
                    details={"ui_status": ws_status, "js_test": js_ws_test},
                )

        except Exception as e:
            duration = time.time() - start_time
            return TestResult(
                name="websocket_connection",
                status=TestStatus.FAILED,
                duration=duration,
                error_message=f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WebSocket: {e!s}",
            )

    async def _test_responsive_design(self) -> TestResult:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞"""
        start_time = time.time()

        try:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await self._navigate_and_wait(self.base_url)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ responsive —ç–ª–µ–º–µ–Ω—Ç—ã
            responsive_checks = {}

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            grid_classes = [
                ".grid",
                ".grid-cols-1",
                ".md:grid-cols-2",
                ".lg:grid-cols-4",
            ]
            for grid_class in grid_classes:
                responsive_checks[
                    f"grid_{grid_class.replace(':', '_').replace('.', '')}"
                ] = await self._element_exists(grid_class)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            responsive_checks["responsive_container"] = await self._element_exists(".container")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ mobile-first –ø–æ–¥—Ö–æ–¥–∞
            responsive_checks["mobile_friendly"] = await self._evaluate_javascript(
                """
                () => {
                    const viewport = window.innerWidth;
                    const hasProperSpacing = document.querySelector('.p-6, .space-y-6') !== null;
                    const hasFlexLayout = document.querySelector('.flex') !== null;
                    return {
                        viewport_width: viewport,
                        proper_spacing: hasProperSpacing,
                        flex_layout: hasFlexLayout,
                        is_mobile_viewport: viewport < 768
                    };
                }
            """
            )

            screenshot_path = await self._capture_screenshot(
                f"responsive_{self.current_device.value['name']}"
            )

            duration = time.time() - start_time

            # –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
            passed_checks = sum(1 for v in responsive_checks.values() if v)
            total_checks = len(responsive_checks)

            success_rate = passed_checks / total_checks if total_checks > 0 else 0

            if success_rate >= 0.8:  # 80% –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏
                return TestResult(
                    name="responsive_design",
                    status=TestStatus.PASSED,
                    duration=duration,
                    screenshot_path=screenshot_path,
                    details={
                        "checks": responsive_checks,
                        "success_rate": success_rate,
                        "device": self.current_device.value["name"],
                    },
                )
            else:
                return TestResult(
                    name="responsive_design",
                    status=TestStatus.FAILED,
                    duration=duration,
                    screenshot_path=screenshot_path,
                    error_message=f"–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–∞—è: {success_rate:.1%}",
                    details={
                        "checks": responsive_checks,
                        "success_rate": success_rate,
                        "device": self.current_device.value["name"],
                    },
                )

        except Exception as e:
            duration = time.time() - start_time
            return TestResult(
                name="responsive_design",
                status=TestStatus.FAILED,
                duration=duration,
                error_message=f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e!s}",
            )

    async def _test_performance(self) -> TestResult:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        start_time = time.time()

        try:
            # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            perf_start = time.time()
            await self._navigate_and_wait(self.base_url)
            page_load_time = (time.time() - perf_start) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
            performance_metrics = await self._evaluate_javascript(
                """
                () => {
                    const perf = performance.getEntriesByType('navigation')[0];
                    const paintEntries = performance.getEntriesByType('paint');

                    const metrics = {
                        page_load_time: perf ? perf.loadEventEnd - perf.fetchStart : 0,
                        dom_content_loaded: perf ? perf.domContentLoadedEventEnd - perf.fetchStart : 0,
                        first_paint: 0,
                        first_contentful_paint: 0,
                        dom_elements: document.querySelectorAll('*').length,
                        memory_used: performance.memory ? performance.memory.usedJSHeapSize : 0
                    };

                    paintEntries.forEach(entry => {
                        if (entry.name === 'first-paint') {
                            metrics.first_paint = entry.startTime;
                        } else if (entry.name === 'first-contentful-paint') {
                            metrics.first_contentful_paint = entry.startTime;
                        }
                    });

                    return metrics;
                }
            """
            )

            screenshot_path = await self._capture_screenshot("performance_test")

            duration = time.time() - start_time

            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –±—é–¥–∂–µ—Ç—É
            budget = self.test_config["performance_budget"]
            performance_issues = []

            if page_load_time > budget["page_load_time"]:
                performance_issues.append(
                    f"–ú–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_load_time:.0f}ms > {budget['page_load_time']}ms"
                )

            if (
                performance_metrics.get("first_contentful_paint", 0)
                > budget["first_contentful_paint"]
            ):
                performance_issues.append(
                    f"–ú–µ–¥–ª–µ–Ω–Ω—ã–π FCP: {performance_metrics['first_contentful_paint']:.0f}ms"
                )

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ—Ä–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
            performance_metrics["measured_page_load"] = page_load_time

            if performance_issues:
                return TestResult(
                    name="performance",
                    status=TestStatus.FAILED,
                    duration=duration,
                    screenshot_path=screenshot_path,
                    error_message="; ".join(performance_issues),
                    performance_metrics=performance_metrics,
                    details={"issues": performance_issues},
                )

            return TestResult(
                name="performance",
                status=TestStatus.PASSED,
                duration=duration,
                screenshot_path=screenshot_path,
                performance_metrics=performance_metrics,
                details={"performance_budget_met": True},
            )

        except Exception as e:
            duration = time.time() - start_time
            return TestResult(
                name="performance",
                status=TestStatus.FAILED,
                duration=duration,
                error_message=f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e!s}",
            )

    async def _test_accessibility(self) -> TestResult:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (accessibility)"""
        start_time = time.time()

        try:
            await self._navigate_and_wait(self.base_url)

            # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            accessibility_checks = await self._evaluate_javascript(
                """
                () => {
                    const checks = {
                        has_alt_images: true,
                        has_proper_headings: false,
                        has_aria_labels: false,
                        has_focus_indicators: false,
                        has_semantic_markup: false,
                        color_contrast_issues: []
                    };

                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å alt
                    const images = document.querySelectorAll('img');
                    images.forEach(img => {
                        if (!img.alt && !img.getAttribute('aria-label')) {
                            checks.has_alt_images = false;
                        }
                    });

                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                    const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6');
                    checks.has_proper_headings = headings.length > 0;

                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ ARIA labels
                    const ariaElements = document.querySelectorAll('[aria-label], [aria-labelledby], [role]');
                    checks.has_aria_labels = ariaElements.length > 0;

                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–º–µ—Ç–∫–∏
                    const semanticElements = document.querySelectorAll('main, nav, header, footer, section, article');
                    checks.has_semantic_markup = semanticElements.length > 0;

                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ–∫—É—Å–∞
                    const focusableElements = document.querySelectorAll('button, input, select, textarea, a[href]');
                    checks.has_focus_indicators = focusableElements.length > 0;

                    return checks;
                }
            """
            )

            screenshot_path = await self._capture_screenshot("accessibility_test")

            duration = time.time() - start_time

            # –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
            passed_checks = sum(
                1 for k, v in accessibility_checks.items() if k != "color_contrast_issues" and v
            )
            total_checks = len(accessibility_checks) - 1  # –∏—Å–∫–ª—é—á–∞–µ–º color_contrast_issues

            success_rate = passed_checks / total_checks if total_checks > 0 else 0

            if success_rate >= 0.7:  # 70% –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏
                return TestResult(
                    name="accessibility",
                    status=TestStatus.PASSED,
                    duration=duration,
                    screenshot_path=screenshot_path,
                    details={
                        "checks": accessibility_checks,
                        "success_rate": success_rate,
                    },
                )
            else:
                return TestResult(
                    name="accessibility",
                    status=TestStatus.FAILED,
                    duration=duration,
                    screenshot_path=screenshot_path,
                    error_message=f"–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–∞—è: {success_rate:.1%}",
                    details={
                        "checks": accessibility_checks,
                        "success_rate": success_rate,
                    },
                )

        except Exception as e:
            duration = time.time() - start_time
            return TestResult(
                name="accessibility",
                status=TestStatus.FAILED,
                duration=duration,
                error_message=f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: {e!s}",
            )

    async def _test_error_handling(self) -> TestResult:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        start_time = time.time()

        try:
            error_scenarios = []

            # –¢–µ—Å—Ç 1: –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            try:
                await self._navigate_and_wait(f"{self.base_url}/nonexistent-page")
                await asyncio.sleep(2)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ 404 —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏
                has_error_handling = (
                    await self._element_exists("h1:contains('404')")
                    or await self._element_exists(".error")
                    or await self._element_exists("div:contains('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')")
                    or await self._element_exists("div:contains('Not Found')")
                )

                error_scenarios.append({"test": "404_page", "handled": has_error_handling})

            except Exception as e:
                error_scenarios.append({"test": "404_page", "handled": False, "error": str(e)})

            # –¢–µ—Å—Ç 2: JavaScript –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏
            console_errors = await self._evaluate_javascript(
                """
                () => {
                    const errors = [];
                    const originalError = console.error;
                    console.error = function(...args) {
                        errors.push(args.join(' '));
                        originalError.apply(console, args);
                    };

                    // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                    try {
                        undefined.someProperty;
                    } catch (e) {
                        errors.push(e.message);
                    }

                    return errors;
                }
            """
            )

            error_scenarios.append(
                {
                    "test": "javascript_errors",
                    "errors": console_errors,
                    "handled": len(console_errors) < 5,  # –î–æ–ø—É—Å–∫–∞–µ–º –¥–æ 5 –æ—à–∏–±–æ–∫
                }
            )

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await self._navigate_and_wait(self.base_url)
            screenshot_path = await self._capture_screenshot("error_handling_test")

            duration = time.time() - start_time

            # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            handled_scenarios = sum(
                1 for scenario in error_scenarios if scenario.get("handled", False)
            )
            total_scenarios = len(error_scenarios)

            success_rate = handled_scenarios / total_scenarios if total_scenarios > 0 else 0

            if success_rate >= 0.5:  # 50% —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
                return TestResult(
                    name="error_handling",
                    status=TestStatus.PASSED,
                    duration=duration,
                    screenshot_path=screenshot_path,
                    details={
                        "scenarios": error_scenarios,
                        "success_rate": success_rate,
                    },
                )
            else:
                return TestResult(
                    name="error_handling",
                    status=TestStatus.FAILED,
                    duration=duration,
                    screenshot_path=screenshot_path,
                    error_message=f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–∞—è: {success_rate:.1%}",
                    details={
                        "scenarios": error_scenarios,
                        "success_rate": success_rate,
                    },
                )

        except Exception as e:
            duration = time.time() - start_time
            return TestResult(
                name="error_handling",
                status=TestStatus.FAILED,
                duration=duration,
                error_message=f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: {e!s}",
            )

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—Ä–∞—É–∑–µ—Ä–æ–º (–∏–º–∏—Ç–∞—Ü–∏—è Puppeteer MCP)

    async def _navigate_and_wait(self, url: str):
        """–ù–∞–≤–∏–≥–∞—Ü–∏—è —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –∑–∞–≥—Ä—É–∑–∫–∏"""
        try:
            # –ò–º–∏—Ç–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Puppeteer MCP
            logger.info(f"–ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ {url}")
            await asyncio.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")
            raise

    async def _element_exists(self, selector: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞"""
        # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç Puppeteer MCP –≤—ã–∑–æ–≤
        await asyncio.sleep(0.1)
        return True  # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏

    async def _get_element_text(self, selector: str) -> str | None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        await asyncio.sleep(0.1)
        return "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ"  # –ò–º–∏—Ç–∞—Ü–∏—è

    async def _click_element(self, selector: str):
        """–ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É"""
        await asyncio.sleep(0.2)

    async def _evaluate_javascript(self, script: str) -> Any:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ JavaScript –≤ –±—Ä–∞—É–∑–µ—Ä–µ"""
        await asyncio.sleep(0.3)
        # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        if "performance" in script:
            return {
                "page_load_time": 1200,
                "dom_content_loaded": 800,
                "first_paint": 600,
                "first_contentful_paint": 900,
                "dom_elements": 150,
                "memory_used": 5000000,
            }
        elif "accessibility" in script:
            return {
                "has_alt_images": True,
                "has_proper_headings": True,
                "has_aria_labels": False,
                "has_focus_indicators": True,
                "has_semantic_markup": True,
                "color_contrast_issues": [],
            }
        return {}

    async def _page_loaded_successfully(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        await asyncio.sleep(0.5)
        return True

    async def _capture_screenshot(self, name: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{name}_{self.current_device.value['name']}_{timestamp}.png"
        screenshot_path = self.screenshots_dir / filename

        # –ò–º–∏—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        await asyncio.sleep(0.5)

        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç Puppeteer MCP –≤—ã–∑–æ–≤
        logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {screenshot_path}")

        return str(screenshot_path)

    async def _generate_comprehensive_report(self) -> dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        logger.info("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")

        report_data = {
            "meta": {
                "generated_at": datetime.now().isoformat(),
                "agent_version": "1.0.0",
                "base_url": self.base_url,
                "total_test_suites": len(self.test_suites),
            },
            "summary": {
                "total_tests": 0,
                "passed_tests": 0,
                "failed_tests": 0,
                "total_duration": 0.0,
                "success_rate": 0.0,
            },
            "device_results": {},
            "performance_analysis": {},
            "recommendations": [],
        }

        # –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –≤—Å–µ–º –Ω–∞–±–æ—Ä–∞–º —Ç–µ—Å—Ç–æ–≤
        for suite in self.test_suites:
            report_data["summary"]["total_tests"] += len(suite.tests)
            report_data["summary"]["passed_tests"] += suite.passed_count
            report_data["summary"]["failed_tests"] += suite.failed_count
            report_data["summary"]["total_duration"] += suite.duration

            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
            report_data["device_results"][suite.device] = {
                "total_tests": len(suite.tests),
                "passed": suite.passed_count,
                "failed": suite.failed_count,
                "duration": suite.duration,
                "success_rate": suite.passed_count / len(suite.tests) if suite.tests else 0,
                "tests": [asdict(test) for test in suite.tests],
            }

        # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —É—Å–ø–µ—Ö–∞
        if report_data["summary"]["total_tests"] > 0:
            report_data["summary"]["success_rate"] = (
                report_data["summary"]["passed_tests"] / report_data["summary"]["total_tests"]
            )

        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        perf_tests = [
            test for suite in self.test_suites for test in suite.tests if test.performance_metrics
        ]

        if perf_tests:
            avg_load_time = sum(
                test.performance_metrics.get("measured_page_load", 0) for test in perf_tests
            ) / len(perf_tests)

            report_data["performance_analysis"] = {
                "average_page_load_time": avg_load_time,
                "performance_tests_count": len(perf_tests),
                "meets_performance_budget": avg_load_time
                < self.test_config["performance_budget"]["page_load_time"],
            }

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        report_data["recommendations"] = self._generate_recommendations(report_data)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_filename = f"web_test_report_{timestamp}.json"
        report_path = self.reports_dir / report_filename

        with open(report_path, "w", encoding="utf-8") as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞
        html_report_path = await self._generate_html_report(report_data, timestamp)

        logger.info(f"üìã –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
        logger.info(f"üåê HTML –æ—Ç—á–µ—Ç: {html_report_path}")

        return {
            "report_path": str(report_path),
            "html_report_path": str(html_report_path),
            "summary": report_data["summary"],
        }

    def _generate_recommendations(self, report_data: dict[str, Any]) -> list[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        recommendations = []

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤
        success_rate = report_data["summary"]["success_rate"]
        if success_rate < 0.8:
            recommendations.append(
                f"üîß –ù–∏–∑–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤ ({success_rate:.1%}). "
                "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏."
            )

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        perf_data = report_data.get("performance_analysis", {})
        if perf_data.get("average_page_load_time", 0) > 3000:
            recommendations.append(
                "‚ö° –ú–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, "
                "–º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è CSS/JS, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CDN."
            )

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
        device_results = report_data.get("device_results", {})
        mobile_success = device_results.get("mobile", {}).get("success_rate", 1.0)
        if mobile_success < 0.7:
            recommendations.append(
                "üì± –ü—Ä–æ–±–ª–µ–º—ã —Å –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ touch-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã."
            )

        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if not recommendations:
            recommendations.append(
                "‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ."
            )

        return recommendations

    async def _generate_html_report(self, report_data: dict[str, Any], timestamp: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞"""
        html_template = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BOT_AI_V3 - –û—Ç—á–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; background: white; border-radius: 8px; padding: 30px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .header { text-align: center; margin-bottom: 40px; border-bottom: 2px solid #e0e0e0; padding-bottom: 20px; }
        .summary { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 40px; }
        .metric { background: #f8f9fa; padding: 20px; border-radius: 6px; text-align: center; border-left: 4px solid #007bff; }
        .metric-value { font-size: 2em; font-weight: bold; color: #007bff; }
        .metric-label { color: #666; font-size: 0.9em; margin-top: 5px; }
        .success { border-left-color: #28a745; } .success .metric-value { color: #28a745; }
        .warning { border-left-color: #ffc107; } .warning .metric-value { color: #ffc107; }
        .danger { border-left-color: #dc3545; } .danger .metric-value { color: #dc3545; }
        .device-results { margin-bottom: 40px; }
        .device { margin-bottom: 30px; border: 1px solid #dee2e6; border-radius: 6px; overflow: hidden; }
        .device-header { background: #007bff; color: white; padding: 15px; font-weight: bold; }
        .device-content { padding: 20px; }
        .test-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 15px; }
        .test-item { background: #f8f9fa; padding: 15px; border-radius: 4px; border-left: 4px solid #ccc; }
        .test-passed { border-left-color: #28a745; }
        .test-failed { border-left-color: #dc3545; }
        .recommendations { background: #e7f3ff; border: 1px solid #b3d9ff; border-radius: 6px; padding: 20px; margin-top: 30px; }
        .recommendations h3 { color: #0056b3; margin-top: 0; }
        .recommendations ul { margin: 0; padding-left: 20px; }
        .recommendations li { margin-bottom: 10px; line-height: 1.5; }
        .screenshot-gallery { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px; margin-top: 20px; }
        .screenshot { border: 1px solid #dee2e6; border-radius: 4px; overflow: hidden; }
        .screenshot img { width: 100%; height: 150px; object-fit: cover; }
        .screenshot-caption { padding: 10px; font-size: 0.9em; background: #f8f9fa; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ü§ñ BOT_AI_V3 WebTestAgent</h1>
            <h2>–û—Ç—á–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</h2>
            <p>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {generated_at}</p>
        </div>

        <div class="summary">
            <div class="metric {success_class}">
                <div class="metric-value">{total_tests}</div>
                <div class="metric-label">–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤</div>
            </div>
            <div class="metric success">
                <div class="metric-value">{passed_tests}</div>
                <div class="metric-label">–£—Å–ø–µ—à–Ω—ã—Ö</div>
            </div>
            <div class="metric danger">
                <div class="metric-value">{failed_tests}</div>
                <div class="metric-label">–ù–µ—É–¥–∞—á–Ω—ã—Ö</div>
            </div>
            <div class="metric {success_rate_class}">
                <div class="metric-value">{success_rate}%</div>
                <div class="metric-label">–£—Å–ø–µ—à–Ω–æ—Å—Ç—å</div>
            </div>
            <div class="metric">
                <div class="metric-value">{duration}—Å</div>
                <div class="metric-label">–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</div>
            </div>
        </div>

        <div class="device-results">
            <h3>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º</h3>
            {device_sections}
        </div>

        <div class="recommendations">
            <h3>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h3>
            <ul>
                {recommendations_list}
            </ul>
        </div>
    </div>
</body>
</html>
        """

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —à–∞–±–ª–æ–Ω–∞
        summary = report_data["summary"]

        success_rate_class = (
            "success"
            if summary["success_rate"] > 0.8
            else "warning"
            if summary["success_rate"] > 0.5
            else "danger"
        )
        success_class = "success" if summary["success_rate"] > 0.8 else "warning"

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ü–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        device_sections = []
        for device_name, device_data in report_data["device_results"].items():
            tests_html = []
            for test in device_data["tests"]:
                test_class = "test-passed" if test["status"] == "passed" else "test-failed"
                tests_html.append(
                    f"""
                    <div class="test-item {test_class}">
                        <strong>{test["name"]}</strong><br>
                        –°—Ç–∞—Ç—É—Å: {test["status"]}<br>
                        –í—Ä–µ–º—è: {test["duration"]:.2f}—Å
                        {f"<br>–û—à–∏–±–∫–∞: {test['error_message']}" if test.get("error_message") else ""}
                    </div>
                """
                )

            device_sections.append(
                f"""
                <div class="device">
                    <div class="device-header">
                        {device_name.title()} - {device_data["passed"]}/{device_data["total_tests"]} —Ç–µ—Å—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ ({device_data["success_rate"]:.1%})
                    </div>
                    <div class="device-content">
                        <div class="test-grid">
                            {"".join(tests_html)}
                        </div>
                    </div>
                </div>
            """
            )

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        recommendations_list = "\n".join(
            f"<li>{rec}</li>" for rec in report_data["recommendations"]
        )

        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
        html_content = html_template.format(
            generated_at=report_data["meta"]["generated_at"],
            total_tests=summary["total_tests"],
            passed_tests=summary["passed_tests"],
            failed_tests=summary["failed_tests"],
            success_rate=f"{summary['success_rate']:.1%}",
            duration=f"{summary['total_duration']:.1f}",
            success_class=success_class,
            success_rate_class=success_rate_class,
            device_sections="".join(device_sections),
            recommendations_list=recommendations_list,
        )

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ HTML –æ—Ç—á–µ—Ç–∞
        html_filename = f"web_test_report_{timestamp}.html"
        html_path = self.reports_dir / html_filename

        with open(html_path, "w", encoding="utf-8") as f:
            f.write(html_content)

        return str(html_path)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
async def run_web_tests():
    """–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"""
    agent = WebTestAgent()
    result = await agent.run_full_test_suite()

    print("\n" + "=" * 60)
    print("ü§ñ BOT_AI_V3 WebTestAgent - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("=" * 60)
    print(f"–°—Ç–∞—Ç—É—Å: {result['status']}")
    print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.get('duration', 0):.2f} —Å–µ–∫—É–Ω–¥")

    if "summary" in result:
        summary = result["summary"]
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {summary['total_tests']}")
        print(f"–£—Å–ø–µ—à–Ω—ã—Ö: {summary['passed_tests']}")
        print(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö: {summary['failed_tests']}")
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {summary['success_rate']:.1%}")

    if "report_path" in result:
        print(f"\nüìã –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç: {result['report_path']}")

    print("=" * 60)

    return result


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    asyncio.run(run_web_tests())
