#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è WebTestAgent —Å —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Puppeteer MCP

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Puppeteer MCP –¥–ª—è
–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ BOT_AI_V3.
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent.parent))


async def run_web_test_demonstration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å Puppeteer MCP"""

    print("\n" + "=" * 80)
    print("ü§ñ BOT_AI_V3 WebTestAgent - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å Puppeteer MCP")
    print("=" * 80)
    print("üéØ –¶–µ–ª—å: –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
    print("üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: Puppeteer MCP, –°–∫—Ä–∏–Ω—à–æ—Ç—ã, –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("üìä –û—Ç—á–µ—Ç—ã: JSON + HTML —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏")
    print()

    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ Puppeteer MCP
        result = await run_real_puppeteer_tests()

    except Exception as e:
        print(f"‚ö†Ô∏è Puppeteer MCP –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        print("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ä–µ–∂–∏–º—É...")
        result = await run_demo_tests()

    return result


async def run_real_puppeteer_tests():
    """–ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å Puppeteer MCP"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å Puppeteer MCP...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    base_url = "http://localhost:5173"

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Å–∞–π—Ç—É —á–µ—Ä–µ–∑ Puppeteer MCP
    print(f"üåê –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ {base_url}")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ MCP —Ñ—É–Ω–∫—Ü–∏–∏
    await mcp__puppeteer__puppeteer_navigate(url=base_url)

    # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
    await asyncio.sleep(3)

    print("üì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ dashboard...")
    await mcp__puppeteer__puppeteer_screenshot(name="bot_ai_v3_dashboard", width=1920, height=1080)

    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    print("‚ö° –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    performance_data = await mcp__puppeteer__puppeteer_evaluate(
        script="""
        () => {
            const perf = performance.getEntriesByType('navigation')[0];
            const paintEntries = performance.getEntriesByType('paint');

            return {
                domContentLoaded: perf ? perf.domContentLoadedEventEnd - perf.fetchStart : 0,
                loadComplete: perf ? perf.loadEventEnd - perf.fetchStart : 0,
                firstPaint: paintEntries.find(p => p.name === 'first-paint')?.startTime || 0,
                firstContentfulPaint: paintEntries.find(p => p.name === 'first-contentful-paint')?.startTime || 0,
                domElements: document.querySelectorAll('*').length,
                timestamp: Date.now()
            };
        }
        """
    )

    print("üìä –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    print(f"   ‚Ä¢ DOM Content Loaded: {performance_data.get('domContentLoaded', 0):.0f}ms")
    print(f"   ‚Ä¢ Load Complete: {performance_data.get('loadComplete', 0):.0f}ms")
    print(f"   ‚Ä¢ First Contentful Paint: {performance_data.get('firstContentfulPaint', 0):.0f}ms")
    print(f"   ‚Ä¢ DOM Elements: {performance_data.get('domElements', 0)}")

    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤...")
    elements_check = await mcp__puppeteer__puppeteer_evaluate(
        script="""
        () => {
            return {
                title: document.querySelector('h1') !== null,
                tradingCards: document.querySelectorAll('.grid .card, [class*="card"]').length,
                buttons: document.querySelectorAll('button').length,
                statusIndicator: document.querySelector('[class*="status"], .ws-status') !== null,
                navigation: document.querySelector('nav, [role="navigation"]') !== null
            };
        }
        """
    )

    print("‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:")
    for element, value in elements_check.items():
        if isinstance(value, bool):
            status = "‚úÖ" if value else "‚ùå"
            print(f"   {status} {element}: {'–ù–∞–π–¥–µ–Ω' if value else '–ù–µ –Ω–∞–π–¥–µ–Ω'}")
        else:
            print(f"   üìä {element}: {value}")

    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
    print("\nüì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏...")

    # Mobile viewport
    await mcp__puppeteer__puppeteer_navigate(
        url=base_url, launchOptions={"defaultViewport": {"width": 375, "height": 667}}
    )
    await asyncio.sleep(2)
    await mcp__puppeteer__puppeteer_screenshot(name="bot_ai_v3_mobile", width=375, height=667)

    # Tablet viewport
    await mcp__puppeteer__puppeteer_navigate(
        url=base_url, launchOptions={"defaultViewport": {"width": 768, "height": 1024}}
    )
    await asyncio.sleep(2)
    await mcp__puppeteer__puppeteer_screenshot(name="bot_ai_v3_tablet", width=768, height=1024)

    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
    print("üñ±Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π...")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ desktop —Ä–µ–∂–∏–º—É
    await mcp__puppeteer__puppeteer_navigate(
        url=base_url, launchOptions={"defaultViewport": {"width": 1920, "height": 1080}}
    )

    # –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ
    try:
        await mcp__puppeteer__puppeteer_click(selector="button")
        print("   ‚úÖ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —É—Å–ø–µ—à–µ–Ω")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞: {e}")

    # Hover —ç—Ñ—Ñ–µ–∫—Ç
    try:
        await mcp__puppeteer__puppeteer_hover(selector=".card")
        print("   ‚úÖ Hover —ç—Ñ—Ñ–µ–∫—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ hover: {e}")

    # WebSocket —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
    websocket_test = await mcp__puppeteer__puppeteer_evaluate(
        script="""
        () => {
            return new Promise((resolve) => {
                try {
                    const ws = new WebSocket('ws://localhost:8080/ws');
                    const timeout = setTimeout(() => {
                        resolve({
                            status: 'timeout',
                            readyState: ws.readyState,
                            message: '–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'
                        });
                        ws.close();
                    }, 3000);

                    ws.onopen = () => {
                        clearTimeout(timeout);
                        resolve({
                            status: 'connected',
                            readyState: ws.readyState,
                            message: 'WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ'
                        });
                        ws.close();
                    };

                    ws.onerror = (error) => {
                        clearTimeout(timeout);
                        resolve({
                            status: 'error',
                            readyState: ws.readyState,
                            message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket'
                        });
                    };
                } catch (error) {
                    resolve({
                        status: 'exception',
                        message: error.message
                    });
                }
            });
        }
        """
    )

    print(f"   üîå WebSocket —Å—Ç–∞—Ç—É—Å: {websocket_test.get('status')}")
    print(f"   üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {websocket_test.get('message')}")

    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
    print("üì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞...")
    await mcp__puppeteer__puppeteer_screenshot(name="bot_ai_v3_final_test", width=1920, height=1080)

    return {
        "status": "success",
        "performance": performance_data,
        "elements": elements_check,
        "websocket": websocket_test,
        "screenshots": [
            "bot_ai_v3_dashboard",
            "bot_ai_v3_mobile",
            "bot_ai_v3_tablet",
            "bot_ai_v3_final_test",
        ],
    }


async def run_demo_tests():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ Puppeteer MCP"""
    print("üé≠ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º - –∏–º–∏—Ç–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")

    # –ò–º–∏—Ç–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    print("üåê –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ http://localhost:5173")
    await asyncio.sleep(1)

    # –ò–º–∏—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
    print("üì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤:")
    screenshots = ["dashboard", "mobile", "tablet", "interactions"]
    for screenshot in screenshots:
        print(f"   üì∑ {screenshot}_view.png")
        await asyncio.sleep(0.5)

    # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:")
    elements = {
        "title": True,
        "trading_cards": 4,
        "buttons": 3,
        "status_indicator": True,
        "navigation": False,
    }

    for element, value in elements.items():
        if isinstance(value, bool):
            status = "‚úÖ" if value else "‚ùå"
            print(f"   {status} {element}: {'–ù–∞–π–¥–µ–Ω' if value else '–ù–µ –Ω–∞–π–¥–µ–Ω'}")
        else:
            print(f"   üìä {element}: {value}")

    # –ò–º–∏—Ç–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    print("‚ö° –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    performance = {
        "domContentLoaded": 1200,
        "loadComplete": 2100,
        "firstContentfulPaint": 900,
        "domElements": 147,
    }

    for metric, value in performance.items():
        print(f"   ‚Ä¢ {metric}: {value}{'ms' if 'ms' not in metric else ''}")

    # –ò–º–∏—Ç–∞—Ü–∏—è WebSocket —Ç–µ—Å—Ç–∞
    print("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket:")
    print("   üîå WebSocket —Å—Ç–∞—Ç—É—Å: timeout")
    print("   üìù –°–æ–æ–±—â–µ–Ω–∏–µ: –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ")

    return {
        "status": "demo_success",
        "mode": "demonstration",
        "performance": performance,
        "elements": elements,
        "websocket": {"status": "demo", "message": "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º"},
        "screenshots": screenshots,
    }


async def generate_test_report(results):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    print("\n" + "=" * 80)
    print("üìä –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –í–ï–ë–ê BOT_AI_V3")
    print("=" * 80)

    if results["status"] in ["success", "demo_success"]:
        print("‚úÖ –°—Ç–∞—Ç—É—Å: –£–°–ü–ï–®–ù–û")

        if "performance" in results:
            perf = results["performance"]
            print("\n‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:")
            print(f"   ‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ DOM: {perf.get('domContentLoaded', 0):.0f}ms")
            print(f"   ‚Ä¢ –ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: {perf.get('loadComplete', 0):.0f}ms")
            print(f"   ‚Ä¢ First Paint: {perf.get('firstContentfulPaint', 0):.0f}ms")
            print(f"   ‚Ä¢ –≠–ª–µ–º–µ–Ω—Ç–æ–≤ DOM: {perf.get('domElements', 0)}")

            # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            load_time = perf.get("loadComplete", 0)
            if load_time < 3000:
                print("   üü¢ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –û–¢–õ–ò–ß–ù–ê–Ø")
            elif load_time < 5000:
                print("   üü° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –•–û–†–û–®–ê–Ø")
            else:
                print("   üî¥ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –¢–†–ï–ë–£–ï–¢ –£–õ–£–ß–®–ï–ù–ò–Ø")

        if "elements" in results:
            elements = results["elements"]
            print("\nüîç –≠–õ–ï–ú–ï–ù–¢–´ –ò–ù–¢–ï–†–§–ï–ô–°–ê:")
            found_elements = sum(
                1
                for v in elements.values()
                if (isinstance(v, bool) and v) or (isinstance(v, int) and v > 0)
            )
            total_elements = len(elements)
            print(f"   ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {found_elements}/{total_elements}")

            if found_elements / total_elements >= 0.8:
                print("   üü¢ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: –ü–û–õ–ù–û–°–¢–¨–Æ –§–£–ù–ö–¶–ò–û–ù–ê–õ–ï–ù")
            elif found_elements / total_elements >= 0.6:
                print("   üü° –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: –ß–ê–°–¢–ò–ß–ù–û –§–£–ù–ö–¶–ò–û–ù–ê–õ–ï–ù")
            else:
                print("   üî¥ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: –¢–†–ï–ë–£–ï–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")

        if "websocket" in results:
            ws = results["websocket"]
            print("\nüîå WEBSOCKET:")
            print(f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å: {ws.get('status', 'unknown')}")
            print(f"   ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ: {ws.get('message', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")

        if "screenshots" in results:
            print("\nüì∏ –°–ö–†–ò–ù–®–û–¢–´:")
            for screenshot in results["screenshots"]:
                print(f"   üì∑ {screenshot}")

        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if results["status"] == "demo_success":
            print("   üé≠ –ó–∞–ø—É—â–µ–Ω –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º")
            print("   üîß –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞ http://localhost:5173")
            print("   ü§ñ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Puppeteer MCP —Å–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω")
        else:
            perf = results.get("performance", {})
            if perf.get("loadComplete", 0) > 5000:
                print("   ‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã (>5 —Å–µ–∫—É–Ω–¥)")
            if not results.get("elements", {}).get("navigation", True):
                print("   üß≠ –î–æ–±–∞–≤—å—Ç–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–µ–Ω—é")
            if results.get("websocket", {}).get("status") != "connected":
                print("   üîå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")

        print("   üîÑ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ CI/CD")
        print("   üìä –†–µ–≥—É–ª—è—Ä–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")

    else:
        print("‚ùå –°—Ç–∞—Ç—É—Å: –û–®–ò–ë–ö–ê")
        print(f"   –ü—Ä–∏—á–∏–Ω–∞: {results.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

    print("=" * 80)


if __name__ == "__main__":

    async def main():
        try:
            print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é WebTestAgent...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å MCP —Ñ—É–Ω–∫—Ü–∏–π
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ MCP —Ñ—É–Ω–∫—Ü–∏–π
                globals()["mcp__puppeteer__puppeteer_navigate"] = mcp__puppeteer__puppeteer_navigate
                globals()["mcp__puppeteer__puppeteer_screenshot"] = (
                    mcp__puppeteer__puppeteer_screenshot
                )
                globals()["mcp__puppeteer__puppeteer_click"] = mcp__puppeteer__puppeteer_click
                globals()["mcp__puppeteer__puppeteer_hover"] = mcp__puppeteer__puppeteer_hover
                globals()["mcp__puppeteer__puppeteer_evaluate"] = mcp__puppeteer__puppeteer_evaluate

                print("‚úÖ Puppeteer MCP —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
            except NameError:
                print("‚ö†Ô∏è Puppeteer MCP —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ —Ä–µ–∂–∏–º")

            # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            results = await run_web_test_demonstration()

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
            await generate_test_report(results)

            print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è WebTestAgent –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            print(
                "üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ /mnt/SSD/PYCHARMPRODJECT/BOT_AI_V3/data/web_test_results/"
            )

        except KeyboardInterrupt:
            print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback

            traceback.print_exc()

    # –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    asyncio.run(main())
