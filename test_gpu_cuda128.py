# \!/usr/bin/env python3
"""
–¢–µ—Å—Ç GPU —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è CUDA 12.8
"""

import os
import sys

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –î–û –∏–º–ø–æ—Ä—Ç–∞ torch
os.environ["CUDA_LAUNCH_BLOCKING"] = "1"
os.environ["TORCH_CUDA_ARCH_LIST"] = (
    "8.6;8.9;9.0;12.0"  # Ampere, Ada, Hopper, RTX 5090 (sm_120)
)
os.environ["PYTORCH_CUDA_ALLOC_CONF"] = "max_split_size_mb:512"
os.environ["TORCH_COMPILE_DISABLE"] = "1"  # RTX 5090 –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç torch.compile

import torch

print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ GPU/CUDA:")
print(f"PyTorch –≤–µ—Ä—Å–∏—è: {torch.__version__}")
print(f"CUDA –¥–æ—Å—Ç—É–ø–Ω–∞: {torch.cuda.is_available()}")

if torch.cuda.is_available():
    print(f"CUDA –≤–µ—Ä—Å–∏—è: {torch.version.cuda}")
    print(f"cuDNN –≤–µ—Ä—Å–∏—è: {torch.backends.cudnn.version()}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ GPU: {torch.cuda.device_count()}")

    for i in range(torch.cuda.device_count()):
        props = torch.cuda.get_device_properties(i)
        print(f"\nGPU {i}: {props.name}")
        print(f"  Compute Capability: {props.major}.{props.minor}")
        print(f"  –ü–∞–º—è—Ç—å: {props.total_memory / 1024**3:.1f} GB")
        print(f"  Multiprocessors: {props.multi_processor_count}")
else:
    print("\n‚ö†Ô∏è CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ torch.cuda.is_available()")

# –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–Ω–∑–æ—Ä–∞
print("\nüß™ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è GPU —Ç–µ–Ω–∑–æ—Ä–∞:")
try:
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ cuda:0
    device = torch.device("cuda:0")
    tensor = torch.zeros(1, 1, device=device)
    print(f"‚úÖ –¢–µ–Ω–∑–æ—Ä —Å–æ–∑–¥–∞–Ω –Ω–∞ {device}")
    print(f"   –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Ç–µ–Ω–∑–æ—Ä–∞: {tensor.device}")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {type(e).__name__}: {e}")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
print("\nüìä –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
print(f"Python: {sys.version}")
print(f"LD_LIBRARY_PATH: {os.environ.get('LD_LIBRARY_PATH', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}")
print(f"CUDA_HOME: {os.environ.get('CUDA_HOME', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}")
