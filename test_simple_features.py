#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Ç–µ—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
"""

import numpy as np


# –ò–º–∏—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ _handle_nan_values –î–û –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
def old_handle_nan_values(features_array):
    """–°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è —Å —Ä–æ–±–∞—Å—Ç–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    features_array = np.nan_to_num(features_array, nan=0.0, posinf=0.0, neginf=0.0)

    for i in range(features_array.shape[1]):
        feature_col = features_array[:, i]
        q25, q75 = np.percentile(feature_col, [25, 75])
        iqr = q75 - q25

        if iqr > 1e-8:
            median = np.median(feature_col)
            features_array[:, i] = (feature_col - median) / iqr
            features_array[:, i] = np.clip(features_array[:, i], -3, 3)
        else:
            features_array[:, i] = feature_col

    return features_array


# –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ë–ï–ó –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
def new_handle_nan_values(features_array):
    """–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è - —Ç–æ–ª—å–∫–æ –∫–ª–∏–ø–ø–∏–Ω–≥ —Å –±–æ–ª—å—à–∏–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏"""
    features_array = np.nan_to_num(features_array, nan=0.0, posinf=1e6, neginf=-1e6)
    features_array = np.clip(features_array, -1e6, 1e6)
    return features_array


# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
btc_data = np.array(
    [[40000, 41000, 39000], [40100, 41100, 39100], [39900, 40900, 38900]]
)
eth_data = np.array([[2500, 2600, 2400], [2510, 2610, 2410], [2490, 2590, 2390]])

print("=== –°–¢–ê–†–ê–Ø –í–ï–†–°–ò–Ø (—Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π) ===")
btc_old = old_handle_nan_values(btc_data.copy())
eth_old = old_handle_nan_values(eth_data.copy())
print(f"BTC –ø–æ—Å–ª–µ —Å—Ç–∞—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n{btc_old}")
print(f"ETH –ø–æ—Å–ª–µ —Å—Ç–∞—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n{eth_old}")
print(f"–°—Ä–µ–¥–Ω—è—è —Ä–∞–∑–Ω–æ—Å—Ç—å: {np.mean(np.abs(btc_old - eth_old)):.6f}")

print("\n=== –ù–û–í–ê–Ø –í–ï–†–°–ò–Ø (–±–µ–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏) ===")
btc_new = new_handle_nan_values(btc_data.copy())
eth_new = new_handle_nan_values(eth_data.copy())
print(f"BTC –ø–æ—Å–ª–µ –Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n{btc_new}")
print(f"ETH –ø–æ—Å–ª–µ –Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n{eth_new}")
print(f"–°—Ä–µ–¥–Ω—è—è —Ä–∞–∑–Ω–æ—Å—Ç—å: {np.mean(np.abs(btc_new - eth_new)):.2f}")

print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:")
if np.mean(np.abs(btc_old - eth_old)) < 1.0:
    print("‚ùå –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è –¥–µ–ª–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Ö–æ–∂–∏–º–∏")
else:
    print("‚úÖ –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞–∑–ª–∏—á–∏—è")

if np.mean(np.abs(btc_new - eth_new)) < 1.0:
    print("‚ùå –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –¥–µ–ª–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Ö–æ–∂–∏–º–∏")
else:
    print("‚úÖ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞–∑–ª–∏—á–∏—è")
