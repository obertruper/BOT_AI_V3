#!/usr/bin/env python3
"""
–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ä–¥–µ—Ä–æ–≤ —Å Bybit
"""

import asyncio
import os

from dotenv import load_dotenv
from sqlalchemy import text

from database.connections import get_async_db
from exchanges.bybit.client import BybitClient

load_dotenv()


async def sync_orders():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ä–¥–µ—Ä–æ–≤"""

    print("=" * 80)
    print("–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –û–†–î–ï–†–û–í –° BYBIT")
    print("=" * 80)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Bybit
    client = BybitClient(
        api_key=os.getenv("BYBIT_API_KEY"), api_secret=os.getenv("BYBIT_API_SECRET")
    )

    await client.connect()

    async with get_async_db() as db:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ OPEN –æ—Ä–¥–µ—Ä–∞ –∏–∑ –ë–î
        result = await db.execute(
            text(
                """
            SELECT id, order_id, symbol, side, quantity, price, status
            FROM orders
            WHERE status = 'OPEN'
        """
            )
        )

        open_orders = result.fetchall()

        print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ {len(open_orders)} –æ—Ä–¥–µ—Ä–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º OPEN –≤ –ë–î")

        updated_count = 0
        filled_count = 0
        cancelled_count = 0

        for order in open_orders:
            try:
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂–µ
                exchange_order = await client.get_order(
                    symbol=order.symbol, order_id=order.order_id
                )

                if exchange_order:
                    exchange_status = exchange_order.get("orderStatus", "").upper()

                    # –ú–∞–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ Bybit –Ω–∞ –Ω–∞—à–∏
                    status_map = {
                        "FILLED": "FILLED",
                        "NEW": "OPEN",
                        "PARTIALLYFILLED": "PARTIALLY_FILLED",
                        "CANCELLED": "CANCELLED",
                        "REJECTED": "REJECTED",
                        "EXPIRED": "CANCELLED",
                    }

                    new_status = status_map.get(exchange_status, "OPEN")

                    if new_status != "OPEN":
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
                        await db.execute(
                            text(
                                """
                            UPDATE orders
                            SET status = :status,
                                updated_at = NOW(),
                                filled_quantity = :filled_qty,
                                average_price = :avg_price
                            WHERE id = :id
                        """
                            ),
                            {
                                "status": new_status,
                                "filled_qty": float(exchange_order.get("cumExecQty", 0)),
                                "avg_price": float(exchange_order.get("avgPrice", 0)),
                                "id": order.id,
                            },
                        )

                        updated_count += 1
                        if new_status == "FILLED":
                            filled_count += 1
                            print(f"  ‚úÖ {order.symbol}: OPEN ‚Üí FILLED")
                        elif new_status == "CANCELLED":
                            cancelled_count += 1
                            print(f"  ‚ùå {order.symbol}: OPEN ‚Üí CANCELLED")
                else:
                    # –û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –±–∏—Ä–∂–µ - –≤–µ—Ä–æ—è—Ç–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫
                    await db.execute(
                        text(
                            """
                        UPDATE orders
                        SET status = 'CANCELLED',
                            updated_at = NOW()
                        WHERE id = :id
                    """
                        ),
                        {"id": order.id},
                    )

                    cancelled_count += 1
                    print(f"  ‚ùå {order.symbol}: OPEN ‚Üí CANCELLED (–Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –±–∏—Ä–∂–µ)")

            except Exception as e:
                print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä–¥–µ—Ä–∞ {order.symbol}: {e}")

        # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await db.commit()

        print("\n" + "=" * 80)
        print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò:")
        print(f"  –û–±–Ω–æ–≤–ª–µ–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤: {updated_count}")
        print(f"  –ò–∑ –Ω–∏—Ö FILLED: {filled_count}")
        print(f"  –ò–∑ –Ω–∏—Ö CANCELLED: {cancelled_count}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        new_stats = await db.execute(
            text(
                """
            SELECT status, COUNT(*) as cnt
            FROM orders
            GROUP BY status
        """
            )
        )

        stats = new_stats.fetchall()

        print("\nüìä –ù–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–†–î–ï–†–û–í:")
        for st in stats:
            print(f"  {st.status}: {st.cnt}")

        print("\n‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


if __name__ == "__main__":
    asyncio.run(sync_orders())
