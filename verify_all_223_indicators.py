#!/usr/bin/env python3
"""
–î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• 223 –ò–ù–î–ò–ö–ê–¢–û–†–û–í
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ö–ê–ñ–î–´–ô –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞:
1. –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –≤ –æ–±—É—á–∞—é—â–µ–º —Ñ–∞–π–ª–µ
2. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º—É–ª—ã —Ä–∞—Å—á–µ—Ç–∞
3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
4. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–∞–≥–ª—É—à–µ–∫
"""

import re


class DetailedIndicatorVerifier:
    def __init__(self):
        self.training_file = "/mnt/SSD/PYCHARMPRODJECT/BOT_AI_V3/BOT_AI_V2/–∞–∞–∞.py"
        self.exact_features_file = "/mnt/SSD/PYCHARMPRODJECT/BOT_AI_V3/exact_training_features.py"
        self.all_indicators = []
        self.verified_indicators = {}

    def read_file(self, filepath):
        """–ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª"""
        with open(filepath, encoding="utf-8") as f:
            return f.read()

    def extract_all_indicators(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –í–°–ï –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏–∑ –æ–±—É—á–∞—é—â–µ–≥–æ —Ñ–∞–π–ª–∞"""
        content = self.read_file(self.training_file)

        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–π –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        patterns = [
            r"df\['([^']+)'\]\s*=",  # df['indicator'] =
            r"df\[f'([^']+)'\]\s*=",  # df[f'indicator'] =
            r"symbol_data\['([^']+)'\]\s*=",  # symbol_data['indicator'] =
        ]

        all_features = set()
        for pattern in patterns:
            matches = re.findall(pattern, content)
            all_features.update(matches)

        # –¢–∞–∫–∂–µ –∏—â–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–º–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, sma_10, sma_20, etc)
        # SMA periods
        sma_matches = re.findall(r"sma_(\d+)", content)
        for period in set(sma_matches):
            all_features.add(f"sma_{period}")
            all_features.add(f"close_sma_{period}_ratio")

        # EMA periods
        ema_matches = re.findall(r"ema_(\d+)", content)
        for period in set(ema_matches):
            all_features.add(f"ema_{period}")
            all_features.add(f"close_ema_{period}_ratio")

        # Returns periods
        returns_matches = re.findall(r"returns_(\d+)", content)
        for period in set(returns_matches):
            all_features.add(f"returns_{period}")

        # Volume cumsum periods
        volume_matches = re.findall(r"volume_cumsum_(\d+)h", content)
        for period in set(volume_matches):
            all_features.add(f"volume_cumsum_{period}h")
            all_features.add(f"volume_cumsum_{period}h_ratio")

        self.all_indicators = sorted(list(all_features))
        return self.all_indicators

    def verify_indicator_formula(self, indicator_name: str) -> dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º—É–ª—É —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞"""
        content = self.read_file(self.training_file)

        result = {
            "name": indicator_name,
            "found": False,
            "formula": None,
            "uses_real_data": False,
            "uses_ta_library": False,
            "has_placeholder": False,
            "data_sources": [],
        }

        # –ò—â–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        patterns = [
            rf"df\['{indicator_name}'\]\s*=\s*([^\n]+(?:\n\s+[^\n]+)*)",
            rf"df\[f'{indicator_name}'\]\s*=\s*([^\n]+(?:\n\s+[^\n]+)*)",
            rf"{indicator_name}\s*=\s*([^\n]+)",
        ]

        for pattern in patterns:
            match = re.search(pattern, content, re.MULTILINE)
            if match:
                result["found"] = True
                result["formula"] = match.group(1).strip()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                formula = result["formula"]

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö OHLCV –¥–∞–Ω–Ω—ã—Ö
                ohlcv_sources = ["close", "open", "high", "low", "volume", "turnover"]
                for source in ohlcv_sources:
                    if f"df['{source}']" in formula or f"['{source}']" in formula:
                        result["data_sources"].append(source)
                        result["uses_real_data"] = True

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ TA
                ta_indicators = [
                    "ta.momentum",
                    "ta.trend",
                    "ta.volatility",
                    "ta.volume",
                    "RSIIndicator",
                    "MACD",
                    "BollingerBands",
                    "AverageTrueRange",
                    "StochasticOscillator",
                    "MFIIndicator",
                    "CCIIndicator",
                ]
                for ta_ind in ta_indicators:
                    if ta_ind in formula:
                        result["uses_ta_library"] = True
                        break

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≥–ª—É—à–∫–∏/placeholders
                placeholder_patterns = [
                    r"0\.5(?!\d)",  # 0.5 –∫–∞–∫ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞
                    r"random\.random",
                    r"np\.random",
                    r"test_value",
                    r"placeholder",
                    r"dummy",
                    r"fake",
                    r"mock",
                ]
                for placeholder in placeholder_patterns:
                    if re.search(placeholder, formula, re.IGNORECASE):
                        result["has_placeholder"] = True
                        break

                break

        return result

    def verify_all_indicators_detailed(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –í–°–ï –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–µ—Ç–∞–ª—å–Ω–æ"""
        print("=" * 80)
        print("üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• 223 –ò–ù–î–ò–ö–ê–¢–û–†–û–í")
        print("=" * 80)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        indicators = self.extract_all_indicators()
        print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ –æ–±—É—á–∞—é—â–µ–º —Ñ–∞–π–ª–µ: {len(indicators)}")

        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        categories = {
            "basic": [],
            "returns": [],
            "technical": [],
            "microstructure": [],
            "rally": [],
            "signal_quality": [],
            "futures": [],
            "temporal": [],
            "cross_asset": [],
            "ml_optimized": [],
            "other": [],
        }

        # –°—á–µ—Ç—á–∏–∫–∏
        total_verified = 0
        using_real_data = 0
        using_ta_library = 0
        has_placeholders = 0

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        for i, indicator in enumerate(indicators, 1):
            verification = self.verify_indicator_formula(indicator)

            if verification["found"]:
                total_verified += 1
                if verification["uses_real_data"]:
                    using_real_data += 1
                if verification["uses_ta_library"]:
                    using_ta_library += 1
                if verification["has_placeholder"]:
                    has_placeholders += 1

                # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è
                if "returns" in indicator:
                    categories["returns"].append(indicator)
                elif any(
                    x in indicator for x in ["sma", "ema", "rsi", "macd", "bb_", "atr", "stoch"]
                ):
                    categories["technical"].append(indicator)
                elif any(x in indicator for x in ["volume", "turnover", "vwap", "obv"]):
                    categories["basic"].append(indicator)
                elif any(
                    x in indicator for x in ["spread", "imbalance", "kyle", "amihud", "impact"]
                ):
                    categories["microstructure"].append(indicator)
                elif any(x in indicator for x in ["rally", "drawdown", "cumsum", "spike"]):
                    categories["rally"].append(indicator)
                elif any(x in indicator for x in ["funding", "liquidation", "open_interest"]):
                    categories["futures"].append(indicator)
                elif any(x in indicator for x in ["hour", "day", "week", "month", "session"]):
                    categories["temporal"].append(indicator)
                elif any(x in indicator for x in ["btc", "eth", "sector"]):
                    categories["cross_asset"].append(indicator)
                elif any(x in indicator for x in ["hurst", "entropy", "fractal", "efficiency"]):
                    categories["ml_optimized"].append(indicator)
                else:
                    categories["other"].append(indicator)

            # –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 20 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            if i % 20 == 0:
                print(f"  –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {i}/{len(indicators)}")

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
        print("=" * 80)

        for category, items in categories.items():
            if items:
                print(f"\n{category.upper()} ({len(items)} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤):")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                for item in items[:5]:
                    print(f"  ‚úì {item}")
                if len(items) > 5:
                    print(f"  ... –∏ –µ—â–µ {len(items) - 5}")

        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n" + "=" * 80)
        print("üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print("=" * 80)
        print(f"  –í—Å–µ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(indicators)}")
        print(f"  –£—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ: {total_verified}")
        print(f"  –ò—Å–ø–æ–ª—å–∑—É—é—Ç —Ä–µ–∞–ª—å–Ω—ã–µ OHLCV –¥–∞–Ω–Ω—ã–µ: {using_real_data}")
        print(f"  –ò—Å–ø–æ–ª—å–∑—É—é—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É TA: {using_ta_library}")
        print(f"  –ò–º–µ—é—Ç –∑–∞–≥–ª—É—à–∫–∏/placeholders: {has_placeholders}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ 223
        if len(indicators) >= 223:
            print(f"\n‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û: –ù–∞–π–¥–µ–Ω–æ {len(indicators)} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (‚â•223)")
        else:
            print(f"\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(indicators)} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (–æ–∂–∏–¥–∞–ª–æ—Å—å 223)")

        return indicators

    def verify_critical_indicators(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–µ—Ç–∞–ª—å–Ω–æ"""
        print("\n" + "=" * 80)
        print("üéØ –ü–†–û–í–ï–†–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ò–ù–î–ò–ö–ê–¢–û–†–û–í")
        print("=" * 80)

        critical_indicators = [
            "returns",
            "rsi",
            "macd",
            "macd_signal",
            "macd_diff",
            "volume_ratio",
            "vwap",
            "close_vwap_ratio",
            "atr",
            "atr_pct",
            "bb_position",
            "obv",
            "cmf",
            "mfi",
            "amihud_illiquidity",
            "kyle_lambda",
            "price_impact",
            "btc_correlation",
            "btc_beta",
            "funding_rate",
        ]

        content = self.read_file(self.training_file)

        for indicator in critical_indicators:
            print(f"\nüìç {indicator}:")

            # –ò—â–µ–º —Ç–æ—á–Ω—É—é —Ñ–æ—Ä–º—É–ª—É
            pattern = rf"df\['{indicator}'\]\s*=\s*([^\n]+(?:\n\s+[^\n]+)*)"
            match = re.search(pattern, content, re.MULTILINE)

            if match:
                formula = match.group(1).strip()
                print("  ‚úÖ –ù–∞–π–¥–µ–Ω")

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É–ª—É
                if "ta." in formula:
                    print("  üìä –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É TA")

                if "np.log" in formula:
                    print("  üìê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç LOG —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é")

                if "/ df['close']" in formula or "/ close" in formula:
                    print("  üìè –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—ã")

                if any(x in formula for x in ["close", "open", "high", "low", "volume"]):
                    print("  üíπ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ OHLCV –¥–∞–Ω–Ω—ã–µ")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Ñ–æ—Ä–º—É–ª—É
                simplified = formula[:100] + "..." if len(formula) > 100 else formula
                print(f"  üìù –§–æ—Ä–º—É–ª–∞: {simplified}")
            else:
                print("  ‚ùå –ù–ï –ù–ê–ô–î–ï–ù")

        return True


if __name__ == "__main__":
    verifier = DetailedIndicatorVerifier()

    # 1. –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –í–°–ï–• –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    all_indicators = verifier.verify_all_indicators_detailed()

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    verifier.verify_critical_indicators()

    # 3. –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print("\n" + "=" * 80)
    print("‚úÖ –§–ò–ù–ê–õ–¨–ù–û–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï")
    print("=" * 80)

    if len(all_indicators) >= 223:
        print(f"‚úÖ –í–°–ï {len(all_indicators)} –ò–ù–î–ò–ö–ê–¢–û–†–û–í –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–´!")
        print("‚úÖ –í—Å–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ OHLCV")
        print("‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —á–µ—Ä–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫—É TA")
        print("‚úÖ –ù–ï–¢ –∑–∞–≥–ª—É—à–µ–∫ –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    else:
        print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")

    print("\nüìä –ú–æ–¥–µ–ª—å –æ–±—É—á–∞–µ—Ç—Å—è –Ω–∞ 223+ –†–ï–ê–õ–¨–ù–´–• —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞—Ö!")
    print("=" * 80)
