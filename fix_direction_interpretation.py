#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ direction outputs –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ LLM TRANSFORM
"""

import numpy as np


def analyze_model_outputs():
    """–ê–Ω–∞–ª–∏–∑ –≤—ã—Ö–æ–¥–æ–≤ –º–æ–¥–µ–ª–∏ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è."""

    print("üîç –ê–ù–ê–õ–ò–ó –í–´–•–û–î–û–í –ú–û–î–ï–õ–ò\n")

    # –¢–µ–∫—É—â–∏–µ –≤—ã—Ö–æ–¥—ã –º–æ–¥–µ–ª–∏ (–∏–∑ –ª–æ–≥–æ–≤)
    raw_outputs = np.array(
        [
            -4.8948632e-06,
            -1.9764666e-04,
            1.2558622e-04,
            1.9886262e-05,  # 0-3: future returns
            2.0000000e00,
            2.0000000e00,
            2.0000000e00,
            1.0000000e00,  # 4-7: directions?
            3.0408299e-01,
            -6.4564019e-01,
            -6.5502888e-01,
            -1.4570761e00,  # 8-11: levels
            1.5410438e00,
            6.8647528e-01,
            1.5426679e00,
            6.1124212e-01,  # 12-15: levels
            -6.1672757e-04,
            2.7367978e-03,
            3.7114308e-03,
            -1.4424557e-03,  # 16-19: risk
        ]
    )

    print("üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ã—Ö–æ–¥–æ–≤ –º–æ–¥–µ–ª–∏ (20 –∑–Ω–∞—á–µ–Ω–∏–π):")
    print(f"Raw outputs: {raw_outputs}")

    # –ê–Ω–∞–ª–∏–∑ direction outputs (–ø–æ–∑–∏—Ü–∏–∏ 4-7)
    directions_raw = raw_outputs[4:8]
    print(f"\nüéØ Direction outputs (4-7): {directions_raw}")
    print(
        "–ü—Ä–æ–±–ª–µ–º–∞: –≠—Ç–æ –Ω–µ softmax –≤—ã—Ö–æ–¥—ã! –ó–Ω–∞—á–µ–Ω–∏—è 2.0 —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é"
    )

    # –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è (–Ω–∞ –æ—Å–Ω–æ–≤–µ LLM TRANSFORM)
    print("\n‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ò–ù–¢–ï–†–ü–†–ï–¢–ê–¶–ò–Ø:")

    # –í LLM TRANSFORM direction_head –≤—ã–¥–∞–µ—Ç 12 –∑–Ω–∞—á–µ–Ω–∏–π (–ø–æ–∑–∏—Ü–∏–∏ 4-15)
    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞: 3 –∫–ª–∞—Å—Å–∞ √ó 4 —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ = 12 –∑–Ω–∞—á–µ–Ω–∏–π

    if len(raw_outputs) >= 16:
        # –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:
        # 4-15: direction predictions (12 values)
        # –ö–∞–∂–¥—ã–µ 3 –∑–Ω–∞—á–µ–Ω–∏—è - —ç—Ç–æ softmax –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞

        print("\nüìà –ï—Å–ª–∏ direction_head –≤—ã–¥–∞–µ—Ç 12 –∑–Ω–∞—á–µ–Ω–∏–π (4-15):")
        direction_values = raw_outputs[4:16]
        print(f"Direction values: {direction_values}")

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ 4 —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –ø–æ 3 –∫–ª–∞—Å—Å–∞
        for i in range(4):
            start_idx = i * 3
            end_idx = start_idx + 3
            timeframe_predictions = direction_values[start_idx:end_idx]

            print(f"\n–¢–∞–π–º—Ñ—Ä–µ–π–º {i + 1}:")
            print(f"  Raw: {timeframe_predictions}")

            # –ü—Ä–∏–º–µ–Ω—è–µ–º softmax
            exp_vals = np.exp(timeframe_predictions - np.max(timeframe_predictions))
            softmax_probs = exp_vals / exp_vals.sum()
            print(f"  Softmax: {softmax_probs}")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å
            predicted_class = np.argmax(softmax_probs)
            class_names = ["SHORT", "NEUTRAL", "LONG"]
            print(
                f"  –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {class_names[predicted_class]} (confidence: {softmax_probs[predicted_class]:.1%})"
            )

    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è (–µ—Å–ª–∏ –≤—ã—Ö–æ–¥—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã)
    print("\nüìä –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è (–µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã):")
    print("–ó–Ω–∞—á–µ–Ω–∏—è [2.0, 2.0, 2.0, 1.0] –º–æ–≥—É—Ç –æ–∑–Ω–∞—á–∞—Ç—å:")
    print("- 2.0 = LONG (–∫–ª–∞—Å—Å 2)")
    print("- 1.0 = NEUTRAL (–∫–ª–∞—Å—Å 1)")
    print("- 0.0 = SHORT (–∫–ª–∞—Å—Å 0)")

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –º–æ–¥–µ–ª–∏ - —Å–∫–æ–ª—å–∫–æ –≤—ã—Ö–æ–¥–æ–≤ —É direction_head")
    print("2. –ï—Å–ª–∏ 12 –≤—ã—Ö–æ–¥–æ–≤ - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å softmax –∏ argmax –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞")
    print("3. –ï—Å–ª–∏ 4 –≤—ã—Ö–æ–¥–∞ - —ç—Ç–æ —É–∂–µ –∫–ª–∞—Å—Å—ã, –Ω–µ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
    print("4. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –≤ ml_manager._interpret_predictions()")

    # –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    print("\nüìù –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏:")
    print(
        """
def _interpret_predictions(self, outputs):
    outputs_np = outputs.cpu().numpy()[0]

    # –í–∞—Ä–∏–∞–Ω—Ç 1: direction_head –≤—ã–¥–∞–µ—Ç 12 –∑–Ω–∞—á–µ–Ω–∏–π (3 –∫–ª–∞—Å—Å–∞ √ó 4 —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞)
    if outputs_np.shape[0] >= 16:
        direction_logits = outputs_np[4:16].reshape(4, 3)  # 4 —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ √ó 3 –∫–ª–∞—Å—Å–∞

        directions = []
        for logits in direction_logits:
            probs = torch.softmax(torch.tensor(logits), dim=0)
            direction = torch.argmax(probs).item()
            directions.append(direction)

        # –í–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        weights = [0.4, 0.3, 0.2, 0.1]  # –ë–æ–ª—å—à–∏–π –≤–µ—Å –±–ª–∏–∂–Ω–∏–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
        weighted_direction = sum(d * w for d, w in zip(directions, weights))

        if weighted_direction < 0.5:
            signal_type = "SHORT"
        elif weighted_direction > 1.5:
            signal_type = "LONG"
        else:
            signal_type = "NEUTRAL"

    # –í–∞—Ä–∏–∞–Ω—Ç 2: direction_head –≤—ã–¥–∞–µ—Ç 4 –∑–Ω–∞—á–µ–Ω–∏—è (—É–∂–µ –∫–ª–∞—Å—Å—ã)
    else:
        directions = outputs_np[4:8]
        # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: 0=SHORT, 1=NEUTRAL, 2=LONG
        signal_map = {0: "SHORT", 1: "NEUTRAL", 2: "LONG"}

        # –ü–æ–¥—Å—á–µ—Ç –≥–æ–ª–æ—Å–æ–≤
        signal_counts = {}
        for d in directions:
            signal = signal_map.get(int(d), "NEUTRAL")
            signal_counts[signal] = signal_counts.get(signal, 0) + 1

        # –í—ã–±–æ—Ä –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        signal_type = max(signal_counts, key=signal_counts.get)
    """
    )


if __name__ == "__main__":
    analyze_model_outputs()
