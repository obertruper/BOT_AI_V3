#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã inference mode
"""

import sys
from pathlib import Path

import numpy as np
import pandas as pd

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

from core.logger import setup_logger
from ml.config.features_240 import REQUIRED_FEATURES_240
from ml.logic.archive_old_versions.feature_engineering_v2 import FeatureEngineer

logger = setup_logger("test_inference_mode")


def test_inference_mode():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É inference mode –≤ feature engineering
    """
    try:
        logger.info("=" * 60)
        logger.info("üß™ –¢–ï–°–¢ INFERENCE MODE")
        logger.info("=" * 60)

        # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        logger.info("\n1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö OHLCV –¥–∞–Ω–Ω—ã—Ö...")

        dates = pd.date_range(end=pd.Timestamp.now(), periods=300, freq="15min")
        price_base = 50000  # BTC —Ü–µ–Ω–∞
        price_changes = np.random.randn(300) * 0.001
        prices = price_base * np.cumprod(1 + price_changes)

        test_data = pd.DataFrame(
            {
                "datetime": dates,
                "open": prices * (1 + np.random.randn(300) * 0.0001),
                "high": prices * (1 + np.abs(np.random.randn(300)) * 0.0002),
                "low": prices * (1 - np.abs(np.random.randn(300)) * 0.0002),
                "close": prices,
                "volume": np.random.randint(100, 1000, 300).astype(float),
                "symbol": "BTCUSDT",
            }
        )
        test_data["turnover"] = test_data["close"] * test_data["volume"]

        logger.info(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(test_data)} —Å–≤–µ—á–µ–π –¥–ª—è BTCUSDT")

        # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º FeatureEngineer
        logger.info("\n2Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FeatureEngineer...")

        config = {"features": {}}
        engineer = FeatureEngineer(config)
        engineer.disable_progress = True  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∞

        # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –ë–ï–ó inference mode
        logger.info("\n3Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ë–ï–ó inference mode...")

        features_full = engineer.create_features(test_data.copy(), inference_mode=False)

        # –§–∏–ª—å—Ç—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        numeric_cols_full = features_full.select_dtypes(include=[np.number]).columns.tolist()
        # –ò—Å–∫–ª—é—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = ["open", "high", "low", "close", "volume", "turnover"]
        features_cols_full = [col for col in numeric_cols_full if col not in metadata]

        logger.info(f"  üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–ø–æ–ª–Ω—ã–π —Ä–µ–∂–∏–º): {len(features_cols_full)}")
        logger.info(f"  üìä –í—Å–µ–≥–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ DataFrame: {len(features_full.columns)}")

        # 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –° inference mode
        logger.info("\n4Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –° inference mode...")

        features_inference = engineer.create_features(test_data.copy(), inference_mode=True)

        # –§–∏–ª—å—Ç—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        numeric_cols_inference = features_inference.select_dtypes(
            include=[np.number]
        ).columns.tolist()
        # –ò—Å–∫–ª—é—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        features_cols_inference = [col for col in numeric_cols_inference if col not in metadata]

        logger.info(
            f"  üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (inference mode): {len(features_cols_inference)}"
        )
        logger.info(f"  üìä –í—Å–µ–≥–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ DataFrame: {len(features_inference.columns)}")

        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        logger.info("\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ–∂–∏–¥–∞–Ω–∏—è–º...")

        if len(features_cols_inference) == 240:
            logger.info("  ‚úÖ –£–°–ü–ï–•: Inference mode –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–æ–≤–Ω–æ 240 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤!")
        else:
            logger.error(f"  ‚ùå –û–®–ò–ë–ö–ê: –û–∂–∏–¥–∞–ª–æ—Å—å 240, –ø–æ–ª—É—á–µ–Ω–æ {len(features_cols_inference)}")

            # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–Ω–∏—Ü—ã
            logger.info("\n  üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
            logger.info(f"     –ü–æ–ª–Ω—ã–π —Ä–µ–∂–∏–º: {len(features_cols_full)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
            logger.info(f"     Inference mode: {len(features_cols_inference)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
            logger.info(f"     –†–∞–∑–Ω–∏—Ü–∞: {len(features_cols_full) - len(features_cols_inference)}")

        # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω—É–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        logger.info("\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç—Ä–µ–±—É–µ–º—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")

        missing_features = []
        for feature in REQUIRED_FEATURES_240[:10]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 10
            if feature not in features_inference.columns:
                missing_features.append(feature)

        if missing_features:
            logger.warning(f"  ‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏: {missing_features}")
        else:
            logger.info("  ‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")

        # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π
        logger.info("\n7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")

        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É
        last_row = features_inference.iloc[-1]

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        numeric_values = last_row[features_cols_inference]
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        numeric_values = pd.to_numeric(numeric_values, errors="coerce")
        non_zero = np.sum(numeric_values != 0)
        non_nan = np.sum(~numeric_values.isna())

        logger.info("  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏:")
        logger.info(
            f"     - –ù–µ–Ω—É–ª–µ–≤—ã—Ö: {non_zero}/{len(numeric_values)} ({non_zero / len(numeric_values) * 100:.1f}%)"
        )
        logger.info(
            f"     - –ù–µ NaN: {non_nan}/{len(numeric_values)} ({non_nan / len(numeric_values) * 100:.1f}%)"
        )

        # 8. –ò—Ç–æ–≥–æ–≤—ã–π –≤–µ—Ä–¥–∏–∫—Ç
        logger.info("\n" + "=" * 60)
        logger.info("üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
        logger.info("=" * 60)

        success = True

        if len(features_cols_inference) != 240:
            logger.error(
                f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(features_cols_inference)} –≤–º–µ—Å—Ç–æ 240"
            )
            success = False

        if non_zero < len(numeric_values) * 0.3:
            logger.error(f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω—É–ª–µ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(numeric_values) - non_zero}")
            success = False

        if success:
            logger.info("‚úÖ –¢–ï–°–¢ –£–°–ü–ï–®–ù–û –ü–†–û–ô–î–ï–ù!")
            logger.info("  - Inference mode —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            logger.info("  - –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —Ä–æ–≤–Ω–æ 240 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        else:
            logger.error("‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù")
            logger.info("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            logger.info("  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ create_features")
            logger.info("  2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ REQUIRED_FEATURES_240 –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
            logger.info("  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã –≤—ã–∑—ã–≤–∞—é—Ç—Å—è")

        return success

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}", exc_info=True)
        return False


if __name__ == "__main__":
    success = test_inference_mode()
    sys.exit(0 if success else 1)
