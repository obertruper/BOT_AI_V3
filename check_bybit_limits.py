#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –Ω–∞ Bybit
"""

import asyncio
import os
import sys

from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

load_dotenv()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ["PGPORT"] = "5555"
os.environ["PGUSER"] = "obertruper"
os.environ["PGDATABASE"] = "bot_trading_v3"


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ Bybit –ª–∏–º–∏—Ç–æ–≤ –∏ –±–∞–ª–∞–Ω—Å–∞ ===\n")

    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit
        from exchanges.factory import ExchangeFactory

        factory = ExchangeFactory()
        exchange = await factory.create_and_connect(
            exchange_type="bybit",
            api_key=os.getenv("BYBIT_API_KEY"),
            api_secret=os.getenv("BYBIT_API_SECRET"),
            sandbox=False,
        )
        await exchange.initialize()

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        print("1Ô∏è‚É£ –ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞:")

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å USDT
        usdt_balance_info = await exchange.get_balance("USDT")

        # Balance - —ç—Ç–æ –æ–±—ä–µ–∫—Ç, –Ω–µ —Å–ª–æ–≤–∞—Ä—å
        if usdt_balance_info:
            usdt_balance = (
                usdt_balance_info.free if hasattr(usdt_balance_info, "free") else 0
            )
            usdt_total = (
                usdt_balance_info.total if hasattr(usdt_balance_info, "total") else 0
            )
        else:
            usdt_balance = 0
            usdt_total = 0

        print(f"   USDT: {usdt_total:.4f} (—Å–≤–æ–±–æ–¥–Ω–æ: {usdt_balance:.4f})")
        print(f"\nüí∞ –î–æ—Å—Ç—É–ø–Ω–æ USDT –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: ${usdt_balance:.2f}")

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π:")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
            positions = await exchange.get_positions()
            if positions:
                print(f"   –ù–∞–π–¥–µ–Ω–æ {len(positions)} –ø–æ–∑–∏—Ü–∏–π:")
                for pos in positions:
                    if (
                        hasattr(pos, "symbol")
                        and hasattr(pos, "size")
                        and pos.size != 0
                    ):
                        print(
                            f"   {pos.symbol}: {pos.size} (PnL: {getattr(pos, 'pnl', 'N/A')})"
                        )
            else:
                print("   –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
        except Exception as e:
            print(f"   –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
        print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤:")

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º client –Ω–∞–ø—Ä—è–º—É—é
            client = exchange.client if hasattr(exchange, "client") else exchange
            open_orders = await client.get_open_orders("BTCUSDT")

            if open_orders:
                print(f"   –ù–∞–π–¥–µ–Ω–æ {len(open_orders)} –æ—Ä–¥–µ—Ä–æ–≤:")
                for order in open_orders[:5]:
                    print(
                        f"   {order.get('symbol')}: {order.get('side')} {order.get('qty')} @ {order.get('price')}"
                    )
            else:
                print("   –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
        except Exception as e:
            print(f"   –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤: {e}")

        # 4. –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC
        print("\n4Ô∏è‚É£ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC:")
        ticker = await exchange.get_ticker("BTCUSDT")
        current_price = ticker.last if hasattr(ticker, "last") else ticker.price
        print(f"   BTC/USDT: ${current_price:.2f}")

        # 5. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–ª—è Bybit)
        min_order_value = 5.0  # –ú–∏–Ω–∏–º—É–º $5 –Ω–∞ Bybit
        min_order_qty = 0.001  # –ú–∏–Ω–∏–º—É–º 0.001 BTC

        min_position_usd = max(min_order_value, min_order_qty * current_price)

        print("\nüìä –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è Bybit:")
        print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${min_position_usd:.2f}")
        print(f"   –≠—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–æ: {min_position_usd / current_price:.6f} BTC")

        # 6. –ê–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏
        print("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï:")
        print(f"   –£ –≤–∞—Å –µ—Å—Ç—å ${usdt_total:.2f} USDT, –Ω–æ –≤—Å–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!")
        print(f"   –°–≤–æ–±–æ–¥–Ω–æ: ${usdt_balance:.2f}")
        print("\n   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   - –ï—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏")
        print("   - –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞")
        print("   - –°—Ä–µ–¥—Å—Ç–≤–∞ –≤ –¥—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–∞—Ö")

        if usdt_balance == 0:
            print("\n‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏!")
            print("   –ó–∞–∫—Ä–æ–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ—Ä–¥–µ—Ä–∞")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()

    finally:
        if "exchange" in locals():
            # BybitExchange –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ close
            pass


if __name__ == "__main__":
    asyncio.run(main())
