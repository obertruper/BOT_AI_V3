#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —É—á–µ—Ç–æ–º —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–æ–≤ —Ç–µ–∫—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é —Ä—ã–Ω–∫–∞
"""

import asyncio
import sys
from pathlib import Path

import numpy as np

sys.path.insert(0, str(Path(__file__).parent))

from core.logger import setup_logger
from ml.ml_manager import MLManager

logger = setup_logger("market_aware_test")


async def simulate_market_conditions():
    """
    –°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–æ–≤
    """

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML Manager
    config = {"ml": {"model": {"device": "cpu"}, "model_directory": "models/saved"}}

    ml_manager = MLManager(config)
    await ml_manager.initialize()

    logger.info("=" * 60)
    logger.info("üîç –¢–ï–°–¢ –ê–î–ï–ö–í–ê–¢–ù–û–°–¢–ò –°–ò–ì–ù–ê–õ–û–í –†–´–ù–û–ß–ù–´–ú –£–°–õ–û–í–ò–Ø–ú")
    logger.info("=" * 60)

    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    scenarios = [
        {
            "name": "üêÇ –°–ò–õ–¨–ù–´–ô –ë–´–ß–ò–ô –¢–†–ï–ù–î",
            "trend": "up",
            "volatility": 0.02,
            "expected_long_ratio": (0.5, 0.9),  # –û–∂–∏–¥–∞–µ–º 50-90% LONG
            "expected_short_ratio": (0.0, 0.3),  # –û–∂–∏–¥–∞–µ–º 0-30% SHORT
        },
        {
            "name": "üêª –°–ò–õ–¨–ù–´–ô –ú–ï–î–í–ï–ñ–ò–ô –¢–†–ï–ù–î",
            "trend": "down",
            "volatility": 0.03,
            "expected_long_ratio": (0.0, 0.3),  # –û–∂–∏–¥–∞–µ–º 0-30% LONG
            "expected_short_ratio": (0.5, 0.9),  # –û–∂–∏–¥–∞–µ–º 50-90% SHORT
        },
        {
            "name": "‚ÜîÔ∏è –ë–û–ö–û–í–û–ï –î–í–ò–ñ–ï–ù–ò–ï",
            "trend": "sideways",
            "volatility": 0.01,
            "expected_long_ratio": (0.2, 0.5),  # –û–∂–∏–¥–∞–µ–º 20-50% LONG
            "expected_short_ratio": (0.2, 0.5),  # –û–∂–∏–¥–∞–µ–º 20-50% SHORT
        },
    ]

    symbols = ["BTCUSDT", "ETHUSDT", "SOLUSDT", "BNBUSDT", "XRPUSDT"]

    for scenario in scenarios:
        logger.info(f"\n{'=' * 50}")
        logger.info(f"üìä –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario['name']}")
        logger.info(f"{'=' * 50}")

        signal_counts = {"LONG": 0, "SHORT": 0, "NEUTRAL": 0}

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ —Å —É—á–µ—Ç–æ–º —Å—Ü–µ–Ω–∞—Ä–∏—è
        for symbol in symbols:
            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –Ω—É–∂–Ω—ã–º —Ç—Ä–µ–Ω–¥–æ–º
            features = generate_market_data(
                trend=scenario["trend"],
                volatility=scenario["volatility"],
                symbol=symbol,
            )

            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                prediction = await ml_manager.predict(features)
                signal_type = prediction.get("signal_type", "UNKNOWN")
                confidence = prediction.get("confidence", 0)

                if signal_type in signal_counts:
                    signal_counts[signal_type] += 1

                # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                directions = prediction.get("predictions", {}).get(
                    "directions_by_timeframe", []
                )
                logger.debug(
                    f"  {symbol}: {signal_type} (conf: {confidence:.2f}) "
                    f"directions: {directions}"
                )

            except Exception as e:
                logger.error(f"  –û—à–∏–±–∫–∞ –¥–ª—è {symbol}: {e}")

        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total = sum(signal_counts.values())
        if total > 0:
            long_ratio = signal_counts["LONG"] / total
            short_ratio = signal_counts["SHORT"] / total
            neutral_ratio = signal_counts["NEUTRAL"] / total

            logger.info("\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            logger.info(f"  LONG:    {signal_counts['LONG']} ({long_ratio:.1%})")
            logger.info(f"  SHORT:   {signal_counts['SHORT']} ({short_ratio:.1%})")
            logger.info(f"  NEUTRAL: {signal_counts['NEUTRAL']} ({neutral_ratio:.1%})")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç–∏
            is_adequate = True
            issues = []

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º LONG
            if not (
                scenario["expected_long_ratio"][0]
                <= long_ratio
                <= scenario["expected_long_ratio"][1]
            ):
                is_adequate = False
                issues.append(
                    f"LONG: {long_ratio:.1%} –≤–Ω–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ "
                    f"{scenario['expected_long_ratio'][0]:.0%}-{scenario['expected_long_ratio'][1]:.0%}"
                )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º SHORT
            if not (
                scenario["expected_short_ratio"][0]
                <= short_ratio
                <= scenario["expected_short_ratio"][1]
            ):
                is_adequate = False
                issues.append(
                    f"SHORT: {short_ratio:.1%} –≤–Ω–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ "
                    f"{scenario['expected_short_ratio'][0]:.0%}-{scenario['expected_short_ratio'][1]:.0%}"
                )

            if is_adequate:
                logger.info("\n‚úÖ –ê–î–ï–ö–í–ê–¢–ù–û: –°–∏–≥–Ω–∞–ª—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ä—ã–Ω–æ—á–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º")
            else:
                logger.warning("\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –°–∏–≥–Ω–∞–ª—ã –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ä—ã–Ω–∫—É")
                for issue in issues:
                    logger.warning(f"  - {issue}")

    logger.info("\n" + "=" * 60)
    logger.info("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")


def generate_market_data(trend="up", volatility=0.02, symbol="BTCUSDT"):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ç—Ä–µ–Ω–¥–æ–º

    Args:
        trend: 'up', 'down', –∏–ª–∏ 'sideways'
        volatility: —É—Ä–æ–≤–µ–Ω—å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        symbol: —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª

    Returns:
        numpy array —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ (96, 240)
    """
    np.random.seed(hash(symbol) % 10000)

    # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    features = np.random.randn(96, 240) * volatility

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥ –≤ –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (–ø–µ—Ä–≤—ã–µ 20)
    if trend == "up":
        # –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
        trend_component = np.linspace(0, 1, 96).reshape(-1, 1)
        features[:, :20] += trend_component * 0.5
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è RSI-–ø–æ–¥–æ–±–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        features[:, 20:30] += 0.3
    elif trend == "down":
        # –ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
        trend_component = np.linspace(0, -1, 96).reshape(-1, 1)
        features[:, :20] += trend_component * 0.5
        # –£–º–µ–Ω—å—à–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è RSI-–ø–æ–¥–æ–±–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        features[:, 20:30] -= 0.3
    else:  # sideways
        # –ë–æ–∫–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ - —Å–∏–Ω—É—Å–æ–∏–¥–∞
        sideways_component = np.sin(np.linspace(0, 4 * np.pi, 96)).reshape(-1, 1)
        features[:, :20] += sideways_component * 0.2
        # RSI –æ–∫–æ–ª–æ 50
        features[:, 20:30] *= 0.5

    # –î–æ–±–∞–≤–ª—è–µ–º —à—É–º –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
    features += np.random.randn(96, 240) * volatility * 0.5

    return features


if __name__ == "__main__":
    asyncio.run(simulate_market_conditions())
