#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ Bybit —á–µ—Ä–µ–∑ API
"""

import asyncio
import os

from dotenv import load_dotenv

load_dotenv()


async def check_balance():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ Bybit client"""
    from exchanges.bybit.client import BybitClient

    api_key = os.getenv("BYBIT_API_KEY")
    api_secret = os.getenv("BYBIT_API_SECRET")

    print(f"üîë Using API key: {api_key[:10]}...")

    client = BybitClient(api_key=api_key, api_secret=api_secret)

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        balance = await client.get_balance("USDT")
        print("‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ:")
        print(f"   USDT: {balance}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
        positions = await client.get_positions()
        if positions:
            print(f"üìä –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏: {len(positions)}")
            for pos in positions:
                print(f"   - {pos['symbol']}: {pos.get('size', 0)} @ {pos.get('avgPrice', 0)}")
        else:
            print("üìä –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
        orders = await client.get_open_orders()
        if orders:
            print(f"üìù –û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞: {len(orders)}")
        else:
            print("üìù –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


if __name__ == "__main__":
    asyncio.run(check_balance())
