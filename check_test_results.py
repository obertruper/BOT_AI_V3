#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import asyncio

from database.connections.postgres import AsyncPGPool


async def check_results():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""

    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø BOT_AI_V3")
    print("=" * 80)

    # 1. –°–∏–≥–Ω–∞–ª—ã
    signals = await AsyncPGPool.fetch(
        """
        SELECT id, symbol, signal_type, strength, confidence, strategy_name, created_at
        FROM signals
        ORDER BY created_at DESC
        LIMIT 10
    """
    )

    print("\nüîç –ü–û–°–õ–ï–î–ù–ò–ï –°–ò–ì–ù–ê–õ–´:")
    print("-" * 80)
    print(
        f"{'ID':>5} | {'–¢–∏–ø':^5} | {'–°–∏–º–≤–æ–ª':^8} | {'–°—Ç—Ä–∞—Ç–µ–≥–∏—è':^25} | {'–°–∏–ª–∞':>6} | {'–ö–æ–Ω—Ñ':>5}"
    )
    print("-" * 80)

    for sig in signals:
        print(
            f"{sig['id']:>5} | {sig['signal_type']:^5} | {sig['symbol']:^8} | {sig['strategy_name']:^25} | {sig['strength']:>6.2f} | {sig['confidence']:>5.0%}"
        )

    # 2. –û—Ä–¥–µ—Ä–∞
    orders = await AsyncPGPool.fetch(
        """
        SELECT id, order_id, symbol, side, order_type, status, quantity, price, created_at
        FROM orders
        ORDER BY created_at DESC
        LIMIT 10
    """
    )

    print(f"\nüìà –ü–û–°–õ–ï–î–ù–ò–ï –û–†–î–ï–†–ê ({len(orders)}):")
    print("-" * 80)
    print(
        f"{'Order ID':^30} | {'Side':^4} | {'–°–∏–º–≤–æ–ª':^8} | {'–¢–∏–ø':^6} | {'–ö–æ–ª-–≤–æ':>10} | {'–¶–µ–Ω–∞':>10} | {'–°—Ç–∞—Ç—É—Å':^10}"
    )
    print("-" * 80)

    for order in orders:
        price_str = f"${order['price']:,.2f}" if order["price"] else "Market"
        print(
            f"{order['order_id'][:30]:^30} | {order['side']:^4} | {order['symbol']:^8} | {order['order_type']:^6} | {order['quantity']:>10.4f} | {price_str:>10} | {order['status']:^10}"
        )

    # 3. –°–¥–µ–ª–∫–∏
    trades = await AsyncPGPool.fetch(
        """
        SELECT id, order_id, symbol, side, quantity, price, executed_at
        FROM trades
        ORDER BY executed_at DESC
        LIMIT 10
    """
    )

    print(f"\nüí∞ –ü–û–°–õ–ï–î–ù–ò–ï –°–î–ï–õ–ö–ò ({len(trades)}):")
    if trades:
        print("-" * 80)
        print(
            f"{'Trade ID':>8} | {'–°–∏–º–≤–æ–ª':^8} | {'Side':^4} | {'–ö–æ–ª-–≤–æ':>10} | {'–¶–µ–Ω–∞':>10} | {'–í—Ä–µ–º—è':^20}"
        )
        print("-" * 80)

        for trade in trades:
            exec_time = trade["executed_at"].strftime("%Y-%m-%d %H:%M:%S")
            print(
                f"{trade['id']:>8} | {trade['symbol']:^8} | {trade['side']:^4} | {trade['quantity']:>10.4f} | ${trade['price']:>9,.2f} | {exec_time:^20}"
            )
    else:
        print("   –ù–µ—Ç —Å–¥–µ–ª–æ–∫")

    # 4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = await AsyncPGPool.fetchrow(
        """
        SELECT
            (SELECT COUNT(*) FROM signals WHERE created_at > NOW() - INTERVAL '1 hour') as signals_hour,
            (SELECT COUNT(*) FROM orders WHERE created_at > NOW() - INTERVAL '1 hour') as orders_hour,
            (SELECT COUNT(*) FROM trades WHERE executed_at > NOW() - INTERVAL '1 hour') as trades_hour,
            (SELECT COUNT(*) FROM signals WHERE signal_type = 'LONG' AND created_at > NOW() - INTERVAL '1 hour') as long_signals,
            (SELECT COUNT(*) FROM signals WHERE signal_type = 'SHORT' AND created_at > NOW() - INTERVAL '1 hour') as short_signals,
            (SELECT COUNT(*) FROM orders WHERE status = 'filled' AND created_at > NOW() - INTERVAL '1 hour') as filled_orders
    """
    )

    print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –ü–û–°–õ–ï–î–ù–ò–ô –ß–ê–°:")
    print("-" * 80)
    print(
        f"–°–∏–≥–Ω–∞–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {stats['signals_hour']} (LONG: {stats['long_signals']}, SHORT: {stats['short_signals']})"
    )
    print(
        f"–û—Ä–¥–µ—Ä–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {stats['orders_hour']} (–ò—Å–ø–æ–ª–Ω–µ–Ω–æ: {stats['filled_orders']})"
    )
    print(f"–°–¥–µ–ª–æ–∫ —Å–æ–≤–µ—Ä—à–µ–Ω–æ: {stats['trades_hour']}")

    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
    conversion_rate = (
        (stats["orders_hour"] / stats["signals_hour"] * 100)
        if stats["signals_hour"] > 0
        else 0
    )
    print(f"\n–ö–æ–Ω–≤–µ—Ä—Å–∏—è —Å–∏–≥–Ω–∞–ª‚Üí–æ—Ä–¥–µ—Ä: {conversion_rate:.1f}%")

    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    strategies = await AsyncPGPool.fetch(
        """
        SELECT DISTINCT strategy_name, COUNT(*) as count
        FROM signals
        WHERE created_at > NOW() - INTERVAL '1 hour'
        GROUP BY strategy_name
        ORDER BY count DESC
    """
    )

    if strategies:
        print("\nüéØ –ê–ö–¢–ò–í–ù–´–ï –°–¢–†–ê–¢–ï–ì–ò–ò:")
        for strat in strategies:
            print(f"   {strat['strategy_name']}: {strat['count']} —Å–∏–≥–Ω–∞–ª–æ–≤")

    print("\n" + "=" * 80)
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


if __name__ == "__main__":
    asyncio.run(check_results())
