#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ ML –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from pathlib import Path
import sys

sys.path.append(str(Path(__file__).parent))

from visualize_ml_predictions import (
    create_predictions_chart,
    create_market_data_analysis,
    create_features_heatmap,
    CHARTS_DIR
)

def generate_demo_data(symbol: str = "BTCUSDT"):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ OHLCV –¥–∞–Ω–Ω—ã–µ
    periods = 200
    dates = pd.date_range(end=datetime.now(), periods=periods, freq='15min')
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ü–µ–Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    base_price = 95000 if symbol == "BTCUSDT" else 3200 if symbol == "ETHUSDT" else 150
    prices = []
    current_price = base_price
    
    for _ in range(periods):
        change = np.random.randn() * base_price * 0.002  # 0.2% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        current_price += change
        prices.append(current_price)
    
    df = pd.DataFrame({
        'open': prices + np.random.randn(periods) * base_price * 0.001,
        'high': [p + abs(np.random.randn()) * base_price * 0.003 for p in prices],
        'low': [p - abs(np.random.randn()) * base_price * 0.003 for p in prices],
        'close': prices,
        'volume': np.random.randint(1000000, 10000000, periods)
    }, index=dates)
    
    return df

def generate_demo_prediction(signal_type="LONG", confidence=0.75):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–º–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"""
    
    return {
        'signal_type': signal_type,
        'confidence': confidence,
        'signal_strength': confidence * 0.8,
        'predictions': {
            'directions_by_timeframe': [2, 2, 1, 2],  # 0=SHORT, 1=NEUTRAL, 2=LONG
            'direction_probabilities': [
                [0.15, 0.25, 0.60],  # 15m: 60% LONG
                [0.20, 0.30, 0.50],  # 1h: 50% LONG
                [0.25, 0.40, 0.35],  # 4h: 40% NEUTRAL
                [0.10, 0.30, 0.60],  # 12h: 60% LONG
            ],
            'returns_15m': 0.0025,
            'returns_1h': 0.0048,
            'returns_4h': 0.0032,
            'returns_12h': 0.0089
        },
        'stop_loss_pct': 0.02,
        'take_profit_pct': 0.04,
        'risk_level': 'medium'
    }

def generate_demo_features(num_features=240):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
    
    feature_names = [
        'rsi_14', 'macd_signal', 'bb_upper', 'bb_lower', 'ema_9', 'ema_21',
        'volume_sma', 'atr_14', 'stoch_k', 'stoch_d', 'obv', 'adx',
        'cci', 'williams_r', 'mfi', 'roc', 'trix', 'keltner_upper',
        'donchian_upper', 'ichimoku_a', 'vwap', 'pvt', 'eom', 'cmf'
    ]
    
    # –†–∞—Å—à–∏—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ 240 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    all_features = []
    for i in range(num_features):
        if i < len(feature_names):
            name = feature_names[i]
        else:
            name = f'feature_{i}'
        
        value = np.random.randn() * 0.5 + 0.5  # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        all_features.append({'name': name, 'value': value})
    
    return all_features

async def run_demo():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
    
    print("=" * 80)
    print("ML VISUALIZATION DEMO - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
    print("=" * 80)
    
    symbols = ["BTCUSDT", "ETHUSDT", "SOLUSDT"]
    signal_types = ["LONG", "SHORT", "NEUTRAL"]
    
    for i, symbol in enumerate(symbols):
        print(f"\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è {symbol}...")
        print("-" * 40)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        market_data = generate_demo_data(symbol)
        signal_type = signal_types[i % 3]
        confidence = 0.65 + np.random.random() * 0.3
        prediction = generate_demo_prediction(signal_type, confidence)
        features_data = generate_demo_features()
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        try:
            # 1. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            print(f"  üìà –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞...")
            chart_file = create_predictions_chart(symbol, prediction, market_data)
            if chart_file and Path(chart_file).exists():
                size_kb = Path(chart_file).stat().st_size / 1024
                print(f"    ‚úÖ –°–æ–∑–¥–∞–Ω: {chart_file.name} ({size_kb:.1f} KB)")
            
            # 2. –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö  
            print(f"  üìä –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            market_file = create_market_data_analysis(symbol, market_data, timestamp)
            if market_file and Path(market_file).exists():
                size_kb = Path(market_file).stat().st_size / 1024
                print(f"    ‚úÖ –°–æ–∑–¥–∞–Ω: {market_file.name} ({size_kb:.1f} KB)")
            
            # 3. –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            print(f"  üî• –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
            heatmap_file = create_features_heatmap(symbol, features_data, timestamp)
            if heatmap_file and Path(heatmap_file).exists():
                size_kb = Path(heatmap_file).stat().st_size / 1024
                print(f"    ‚úÖ –°–æ–∑–¥–∞–Ω: {heatmap_file.name} ({size_kb:.1f} KB)")
            
            # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            print(f"\n  üìå –î–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:")
            print(f"    ‚Ä¢ –°–∏–≥–Ω–∞–ª: {signal_type}")
            print(f"    ‚Ä¢ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏—è: {confidence:.1%}")
            print(f"    ‚Ä¢ Stop Loss: {prediction['stop_loss_pct']:.1%}")
            print(f"    ‚Ä¢ Take Profit: {prediction['take_profit_pct']:.1%}")
            print(f"    ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {prediction['risk_level']}")
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            import traceback
            traceback.print_exc()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\n" + "=" * 80)
    print("üìÅ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–û–ó–î–ê–ù–ù–´–• –§–ê–ô–õ–û–í")
    print("=" * 80)
    
    if CHARTS_DIR.exists():
        all_files = list(CHARTS_DIR.glob("*"))
        demo_files = [f for f in all_files if any(s in f.name for s in symbols)]
        
        print(f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {len(all_files)}")
        print(f"–°–æ–∑–¥–∞–Ω–æ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏: {len(demo_files)}")
        
        if demo_files:
            print("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
            for f in sorted(demo_files, key=lambda x: x.stat().st_mtime)[-10:]:
                size_kb = f.stat().st_size / 1024
                mod_time = datetime.fromtimestamp(f.stat().st_mtime)
                print(f"  ‚Ä¢ {f.name} ({size_kb:.1f} KB) - {mod_time.strftime('%H:%M:%S')}")
        
        # –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä
        total_size = sum(f.stat().st_size for f in demo_files) / (1024 * 1024)
        print(f"\n–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {total_size:.2f} MB")
    
    print("\n" + "=" * 80)
    print("‚ú® –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("=" * 80)
    print(f"\nüìÇ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {CHARTS_DIR.absolute()}")
    print("\nüåê –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –æ—Ç–∫—Ä–æ–π—Ç–µ HTML —Ñ–∞–π–ª—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    print("üñºÔ∏è PNG —Ñ–∞–π–ª—ã –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –≤ –ª—é–±–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print("\nüí° –°–æ–≤–µ—Ç: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å http://localhost:5173/ml –¥–ª—è")
    print("   –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ML —Å–∏—Å—Ç–µ–º–æ–π")

if __name__ == "__main__":
    asyncio.run(run_demo())