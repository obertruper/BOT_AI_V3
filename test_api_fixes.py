#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π API –æ—à–∏–±–æ–∫ –≤ BOT_AI_V3

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. Rate Limiter - —É–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
2. API Key Manager - –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ä–æ—Ç–∞—Ü–∏—è –∫–ª—é—á–µ–π
3. Health Monitor - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∏—Ä–∂
4. Port Management - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤
5. Exponential Backoff - —É–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
"""

import asyncio
import json
import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from exchanges.base.api_key_manager import KeyType, get_key_manager
from exchanges.base.health_monitor import get_health_monitor
from exchanges.base.rate_limiter import RequestPriority, get_rate_limiter
from exchanges.bybit.client import BybitClient


async def test_rate_limiter():
    """–¢–µ—Å—Ç Rate Limiter"""
    print("\n" + "=" * 60)
    print("üîÑ –¢–ï–°–¢ RATE LIMITER")
    print("=" * 60)

    rate_limiter = get_rate_limiter()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤...")

    for i in range(5):
        success = await rate_limiter.acquire(
            exchange_name="bybit",
            endpoint="/v5/market/time",
            is_private=False,
            priority=RequestPriority.NORMAL,
        )

        if success:
            print(f"‚úÖ –ó–∞–ø—Ä–æ—Å {i + 1}: —Ä–∞–∑—Ä–µ—à–µ–Ω")
            rate_limiter.record_success("bybit", "/v5/market/time", 50.0)
        else:
            print(f"‚ùå –ó–∞–ø—Ä–æ—Å {i + 1}: –æ—Ç–∫–ª–æ–Ω–µ–Ω (rate limit)")

        await asyncio.sleep(0.1)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = rate_limiter.get_stats("bybit")
    print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Rate Limiter –¥–ª—è Bybit:")
    print(json.dumps(stats, indent=2, ensure_ascii=False))

    return True


async def test_api_key_manager():
    """–¢–µ—Å—Ç API Key Manager"""
    print("\n" + "=" * 60)
    print("üîë –¢–ï–°–¢ API KEY MANAGER")
    print("=" * 60)

    key_manager = get_key_manager()
    await key_manager.initialize()

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–∏
    print("üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö API –∫–ª—é—á–µ–π...")

    key_id_1 = key_manager.add_key(
        exchange_name="bybit",
        api_key="test_key_1",
        api_secret="test_secret_1",
        key_type=KeyType.MAIN,
    )

    key_id_2 = key_manager.add_key(
        exchange_name="bybit",
        api_key="test_key_2",
        api_secret="test_secret_2",
        key_type=KeyType.BACKUP,
    )

    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á: {key_id_1}")
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–ª—é—á: {key_id_2}")

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á
    active_key = await key_manager.get_active_key("bybit")
    if active_key:
        print(f"üéØ –ê–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á: {active_key.masked_key}")

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = key_manager.get_key_stats("bybit")
    print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API Keys –¥–ª—è Bybit:")
    print(json.dumps(stats, indent=2, ensure_ascii=False))

    await key_manager.shutdown()
    return True


async def test_health_monitor():
    """–¢–µ—Å—Ç Health Monitor"""
    print("\n" + "=" * 60)
    print("üè• –¢–ï–°–¢ HEALTH MONITOR")
    print("=" * 60)

    health_monitor = get_health_monitor()
    await health_monitor.initialize()

    # –î–æ–±–∞–≤–ª—è–µ–º –±–∏—Ä–∂–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    print("üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∏—Ä–∂ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
    health_monitor.add_exchange("bybit")
    health_monitor.add_exchange("binance")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
    print("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞ 10 —Å–µ–∫—É–Ω–¥...")
    await health_monitor.start_monitoring()

    # –ñ–¥–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–æ–∫
    await asyncio.sleep(10)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
    bybit_status = health_monitor.get_exchange_status("bybit")
    if bybit_status:
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å Bybit: {bybit_status.overall_status.value}")
        print(f"üì° –°—Ä–µ–¥–Ω—è—è –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: {bybit_status.avg_latency:.1f}ms")
        print(f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {bybit_status.last_check}")

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å–≤–æ–¥–∫—É
    summary = health_monitor.get_health_summary()
    print("\nüìà –°–≤–æ–¥–∫–∞ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –±–∏—Ä–∂:")
    print(json.dumps(summary, indent=2, ensure_ascii=False))

    await health_monitor.shutdown()
    return True


async def test_bybit_client():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Bybit –∫–ª–∏–µ–Ω—Ç–æ–º"""
    print("\n" + "=" * 60)
    print("üîó –¢–ï–°–¢ BYBIT CLIENT –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 60)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –≤ –ø—É–±–ª–∏—á–Ω–æ–º —Ä–µ–∂–∏–º–µ
    client = BybitClient(
        api_key="public_access", api_secret="public_access", sandbox=False
    )

    try:
        print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit...")
        success = await client.connect()

        if success:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞
            print("‚è∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞...")
            server_time = await client.get_server_time()
            print(f"üïê –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {server_time}")

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è
            print("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è...")
            health_status = client.get_health_status()
            print(f"üìä –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è: {health_status['status']}")

            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            print("üìà –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
            metrics = client.get_performance_metrics()
            print(
                f"üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤: {metrics['connection_stats']['success_rate']}"
            )

        else:
            print("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return False
    finally:
        await client.disconnect()

    return True


def test_port_management():
    """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç–∞–º–∏"""
    print("\n" + "=" * 60)
    print("üîå –¢–ï–°–¢ PORT MANAGEMENT")
    print("=" * 60)

    from unified_launcher import find_processes_using_port, is_port_in_use

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—Ä—Ç–æ–≤
    test_ports = [8080, 5173, 3000, 9090]

    for port in test_ports:
        in_use = is_port_in_use(port)
        print(f"üîç –ü–æ—Ä—Ç {port}: {'–∑–∞–Ω—è—Ç' if in_use else '—Å–≤–æ–±–æ–¥–µ–Ω'}")

        if in_use:
            processes = find_processes_using_port(port)
            for proc_info in processes:
                print(f"   üìù –ü—Ä–æ—Ü–µ—Å—Å: {proc_info['name']} (PID: {proc_info['pid']})")

    return True


async def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô API –û–®–ò–ë–û–ö BOT_AI_V3")
    print("=" * 80)

    tests = [
        ("Rate Limiter", test_rate_limiter),
        ("API Key Manager", test_api_key_manager),
        ("Health Monitor", test_health_monitor),
        ("Bybit Client Integration", test_bybit_client),
        # ("Port Management", test_port_management)  # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
    ]

    results = {}

    for test_name, test_func in tests:
        print(f"\nüß™ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞: {test_name}")
        print("-" * 40)

        try:
            start_time = time.time()
            result = await test_func()
            duration = time.time() - start_time

            results[test_name] = {"success": result, "duration": f"{duration:.2f}s"}

            if result:
                print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù ({duration:.2f}s)")
            else:
                print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù ({duration:.2f}s)")

        except Exception as e:
            duration = time.time() - start_time
            results[test_name] = {
                "success": False,
                "error": str(e),
                "duration": f"{duration:.2f}s",
            }
            print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e} ({duration:.2f}s)")

    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ—Ä—Ç–æ–≤
    print("\nüß™ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞: Port Management")
    print("-" * 40)
    try:
        start_time = time.time()
        result = test_port_management()
        duration = time.time() - start_time

        results["Port Management"] = {"success": result, "duration": f"{duration:.2f}s"}

        if result:
            print(f"‚úÖ Port Management: –ü–†–û–ô–î–ï–ù ({duration:.2f}s)")
        else:
            print(f"‚ùå Port Management: –ü–†–û–í–ê–õ–ï–ù ({duration:.2f}s)")
    except Exception as e:
        duration = time.time() - start_time
        results["Port Management"] = {
            "success": False,
            "error": str(e),
            "duration": f"{duration:.2f}s",
        }
        print(f"‚ùå Port Management: –û–®–ò–ë–ö–ê - {e} ({duration:.2f}s)")

    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 80)

    passed = sum(1 for r in results.values() if r["success"])
    total = len(results)

    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}/{total}")
    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed / total) * 100:.1f}%")

    print("\nüìã –î–µ—Ç–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    for test_name, result in results.items():
        status = "‚úÖ PASS" if result["success"] else "‚ùå FAIL"
        duration = result["duration"]
        error = (
            f" ({result.get('error', '')})"
            if not result["success"] and "error" in result
            else ""
        )
        print(f"  {status} {test_name}: {duration}{error}")

    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return True
    else:
        print(
            f"\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ {total - passed} —Ç–µ—Å—Ç–∞—Ö. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞."
        )
        return False


if __name__ == "__main__":
    result = asyncio.run(run_all_tests())
    sys.exit(0 if result else 1)
