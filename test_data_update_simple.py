#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import os
import sys

from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

load_dotenv()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ["PGPORT"] = "5555"
os.environ["PGUSER"] = "obertruper"
os.environ["PGDATABASE"] = "bot_trading_v3"


async def test_data_status():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–∏—Å—Ç–µ–º–µ...\n")

    from core.config.config_manager import get_global_config_manager
    from data.data_update_service import DataUpdateService
    from database.connections.postgres import AsyncPGPool

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    config_manager = get_global_config_manager()
    data_service = DataUpdateService(config_manager)

    print("1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DataUpdateService...")

    try:
        # –ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã
        await data_service.start()
        print("   ‚úÖ –°–ª—É–∂–±–∞ –∑–∞–ø—É—â–µ–Ω–∞")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–∞–Ω–Ω—ã—Ö
        print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–∞–Ω–Ω—ã—Ö...")

        data_status = await data_service.get_data_status(force_refresh=True)

        print(f"   –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {len(data_status)}")

        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∏–º–≤–æ–ª—É
        total_gaps = 0
        symbols_need_update = []

        for key, status in data_status.items():
            print(f"\n   üìä {status.symbol} ({status.interval_minutes} –º–∏–Ω):")
            print(f"      - –°–≤–µ—á–µ–π –≤ –ë–î: {status.candles_count}")
            print(f"      - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ: {status.latest_timestamp}")
            print(
                f"      - –ì–æ—Ç–æ–≤ –¥–ª—è ML: {'‚úÖ' if status.is_sufficient_for_ml else '‚ùå'}"
            )
            print(f"      - –ü—Ä–æ–ø—É—Å–∫–æ–≤: {len(status.gaps)}")

            if status.gaps:
                total_gaps += len(status.gaps)
                symbols_need_update.append(status.symbol)
                for gap in status.gaps[:1]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ–ø—É—Å–∫
                    print(
                        f"        Gap: {gap.start_time} - {gap.end_time} ({gap.expected_candles} —Å–≤–µ—á–µ–π)"
                    )

        # –í—ã–≤–æ–¥—ã
        print("\nüìä –ò–¢–û–ì–û:")
        print(f"   - –í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(data_status)}")
        print(f"   - –°–∏–º–≤–æ–ª–æ–≤ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏: {len(symbols_need_update)}")
        print(f"   - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤: {total_gaps}")

        if symbols_need_update:
            print(
                f"\n‚ö†Ô∏è  –°–∏–º–≤–æ–ª—ã —Ç—Ä–µ–±—É—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {', '.join(symbols_need_update)}"
            )
            print("\nüîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–ø—É—Å–∫–æ–≤...")

            # –î–∞–µ–º —Å–ª—É–∂–±–µ –≤—Ä–µ–º—è –Ω–∞—á–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
            await asyncio.sleep(5)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏
            pool = await AsyncPGPool.get_pool()

            for symbol in symbols_need_update[:3]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–∏–º–≤–æ–ª–∞
                count = await pool.fetchval(
                    """
                    SELECT COUNT(*) FROM raw_market_data
                    WHERE symbol = $1
                    AND interval_minutes = 15
                    AND datetime > NOW() - INTERVAL '1 minute'
                """,
                    symbol,
                )

                if count > 0:
                    print(
                        f"   ‚úÖ {symbol}: –Ω–∞—á–∞–ª–∞—Å—å –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ({count} —Å–≤–µ—á–µ–π)"
                    )
                else:
                    print(f"   ‚è≥ {symbol}: –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏...")

        else:
            print("\n‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã!")

        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª—É–∂–±—ã
        print("\n5Ô∏è‚É£ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª—É–∂–±—ã...")
        await data_service.stop()
        print("   ‚úÖ –°–ª—É–∂–±–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

        print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback

        traceback.print_exc()

        # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ —Å–ª—É–∂–±–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        if data_service.is_running:
            await data_service.stop()


if __name__ == "__main__":
    asyncio.run(test_data_status())
