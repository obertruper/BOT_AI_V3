#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
"""

import asyncio
import sys
from pathlib import Path

import numpy as np
import pandas as pd

sys.path.insert(0, str(Path(__file__).parent))


async def test_fixed_model():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""

    print("=" * 70)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –ú–û–î–ï–õ–ò")
    print("=" * 70)

    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ML Manager
    from core.config.config_manager import ConfigManager
    from ml.ml_manager import MLManager

    config_manager = ConfigManager()
    config = {
        "ml": config_manager.get_ml_config(),
        "system": config_manager.get_system_config(),
        "trading": config_manager.get_config("trading", {}),
    }

    print("\n1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML Manager —Å –Ω–æ–≤—ã–º feature_engineering...")
    ml_manager = MLManager(config)
    await ml_manager.initialize()
    print("‚úÖ ML Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    # 2. –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    from database.connections.postgres import AsyncPGPool

    print("\n2Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î...")

    # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è BTCUSDT
    candles = await AsyncPGPool.fetch(
        """
        SELECT timestamp, open, high, low, close, volume
        FROM raw_market_data
        WHERE symbol = 'BTCUSDT'
        ORDER BY timestamp DESC
        LIMIT 200
    """
    )

    if len(candles) < 96:
        print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(candles)} —Å–≤–µ—á–µ–π")
        return

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DataFrame
    df = pd.DataFrame(candles)
    df = df.sort_values("timestamp")
    df["symbol"] = "BTCUSDT"

    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π –¥–ª—è BTCUSDT")
    print(f"   –ü–µ—Ä–∏–æ–¥: {df['timestamp'].min()} - {df['timestamp'].max()}")

    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    print("\n3Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å –Ω–æ–≤—ã–º feature_engineering_v4...")

    from ml.logic.feature_engineering_v4 import FeatureEngineer

    feature_engineer = FeatureEngineer(config)

    features = feature_engineer.create_features(df)

    print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {features.shape[1]}")
    print(f"   –°—Ç—Ä–æ–∫: {features.shape[0]}")

    if features.shape[1] != 240:
        print(f"‚ùå –û–®–ò–ë–ö–ê: –û–∂–∏–¥–∞–ª–æ—Å—å 240 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ {features.shape[1]}")
    else:
        print("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ: 240")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN –∏ Inf
    nan_count = features.isna().sum().sum()
    inf_count = np.isinf(features.select_dtypes(include=[np.number])).sum().sum()

    print(f"\n   NaN –∑–Ω–∞—á–µ–Ω–∏–π: {nan_count}")
    print(f"   Inf –∑–Ω–∞—á–µ–Ω–∏–π: {inf_count}")

    # 4. –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    print("\n4Ô∏è‚É£ –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é...")

    try:
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 96 —Å—Ç—Ä–æ–∫ —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
        if len(features) >= 96:
            features_for_prediction = features.iloc[-96:]
        else:
            print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, –¥–æ–ø–æ–ª–Ω—è–µ–º –Ω—É–ª—è–º–∏")
            padding = pd.DataFrame(
                0, index=range(96 - len(features)), columns=features.columns
            )
            features_for_prediction = pd.concat([padding, features], ignore_index=True)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ numpy array
        features_array = features_for_prediction.values

        print(f"   Shape –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {features_array.shape}")

        # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        prediction = await ml_manager.predict(features_array)

        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø:")
        print("-" * 50)
        print(f"Signal type: {prediction['signal_type']}")
        print(f"Confidence: {prediction['confidence']:.1%}")
        print(f"Signal strength: {prediction['signal_strength']:.3f}")
        print(f"Risk level: {prediction['risk_level']}")

        if "predictions" in prediction:
            pred = prediction["predictions"]
            print(f"\nDirection score: {pred['direction_score']:.3f}")
            print(f"Directions by timeframe: {pred['directions_by_timeframe']}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
            print("\nüéØ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º:")
            probs = pred["direction_probabilities"]
            timeframes = ["15m", "1h", "4h", "12h"]

            for i, tf in enumerate(timeframes):
                p = probs[i]
                print(f"  {tf}: LONG={p[0]:.1%}, SHORT={p[1]:.1%}, NEUTRAL={p[2]:.1%}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
                max_prob = max(p)
                if max_prob > 0.5:  # –ï—Å—Ç—å —è–≤–Ω—ã–π —Ñ–∞–≤–æ—Ä–∏—Ç
                    print("       ‚Üí –£–≤–µ—Ä–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ!")
                elif max_prob < 0.4:  # –í—Å–µ –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω—ã
                    print("       ‚Üí ‚ö†Ô∏è –ù–µ—É–≤–µ—Ä–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")

            # –ê–Ω–∞–ª–∏–∑ —É–ª—É—á—à–µ–Ω–∏–π
            print("\nüìà –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ô:")

            all_probs = np.array(probs).flatten()
            prob_std = np.std(all_probs)
            prob_range = np.max(all_probs) - np.min(all_probs)

            print(f"   –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π: {prob_std:.3f}")
            print(f"   –†–∞–∑–±—Ä–æ—Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π: {prob_range:.3f}")

            if prob_std > 0.15:
                print("   ‚úÖ –ú–æ–¥–µ–ª—å –≤—ã–¥–∞–µ—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
            else:
                print("   ‚ö†Ô∏è –ú–æ–¥–µ–ª—å –≤—Å–µ –µ—â–µ –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–∞—è")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
            directions = pred["directions_by_timeframe"]
            unique_directions = len(set(directions))

            print(f"\n   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {unique_directions} –∏–∑ 4")
            if unique_directions == 1:
                print("   ‚úÖ –í—Å–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã —Å–æ–≥–ª–∞—Å–Ω—ã - —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª!")
            elif unique_directions == 4:
                print("   ‚ö†Ô∏è –í—Å–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã —Ä–∞–∑–Ω—ã–µ - —Å–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏: {e}")
        import traceback

        traceback.print_exc()

    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é
    print("\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...")

    if ml_manager.scaler is not None:
        print(f"Scaler —Ç–∏–ø: {type(ml_manager.scaler).__name__}")

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        try:
            features_normalized = ml_manager.scaler.transform(features_array)

            print("–ü–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ (RobustScaler):")
            print(f"  Median: {np.median(features_normalized):.4f}")
            print(
                f"  IQR: {np.percentile(features_normalized, 75) - np.percentile(features_normalized, 25):.4f}"
            )
            print(f"  Min: {features_normalized.min():.4f}")
            print(f"  Max: {features_normalized.max():.4f}")

            # RobustScaler –¥–æ–ª–∂–µ–Ω —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–æ–∫—Ä—É–≥ 0 —Å IQR ~1
            if abs(np.median(features_normalized)) < 0.1:
                print("  ‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è")
            else:
                print("  ‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

    await AsyncPGPool.close()

    print("\n" + "=" * 70)
    print("üìù –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 70)
    print(
        """
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—à–µ:

‚úÖ –£–°–ü–ï–• –µ—Å–ª–∏:
- –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —Ä–æ–≤–Ω–æ 240 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
- –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ù–ï —Ä–∞–≤–Ω—ã ~33% –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤
- –ï—Å—Ç—å —è–≤–Ω—ã–µ —Ñ–∞–≤–æ—Ä–∏—Ç—ã –≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è—Ö (>50%)
- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π > 0.15

‚ùå –ü–†–û–ë–õ–ï–ú–ê –µ—Å–ª–∏:
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ != 240
- –í—Å–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ ~33%
- –ú–æ–¥–µ–ª—å –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–∞—è –≤–æ –≤—Å–µ—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è—Ö

–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –æ—Å—Ç–∞—é—Ç—Å—è, –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ:
1. –ü–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ—Ä—Å–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫ (pandas, numpy, ta)
3. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ
    """
    )


if __name__ == "__main__":
    asyncio.run(test_fixed_model())
