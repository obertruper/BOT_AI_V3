#!/usr/bin/env python3
"""
–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ ML –º–æ–¥–µ–ª–∏ —Å –æ—á–∏—Å—Ç–∫–æ–π –∫–µ—à–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏
"""

import asyncio
import os
import sys
import time
from pathlib import Path

from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å Python
sys.path.insert(0, str(Path(__file__).parent))

load_dotenv()


def kill_existing_processes():
    """–£–±–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞"""
    print("üîç –ò—â–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã...")

    # –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
    os.system("pkill -f 'python.*unified_launcher' 2>/dev/null")
    os.system("pkill -f 'python.*main.py' 2>/dev/null")
    time.sleep(2)

    print("‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")


def clear_ml_cache():
    """–û—á–∏—â–∞–µ–º –∫–µ—à ML –º–æ–¥–µ–ª–∏"""
    print("üßπ –û—á–∏—â–∞–µ–º –∫–µ—à ML –º–æ–¥–µ–ª–∏...")

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∫–µ—à–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    cache_dirs = ["data/cache", "data/ml_cache", "ml/cache", ".cache"]

    for cache_dir in cache_dirs:
        if os.path.exists(cache_dir):
            os.system(f"rm -rf {cache_dir}")
            print(f"  –£–¥–∞–ª–µ–Ω: {cache_dir}")

    # –û—á–∏—â–∞–µ–º Redis –∫–µ—à –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    try:
        import redis

        r = redis.Redis(host="localhost", port=6379, db=0)
        r.flushdb()
        print("  Redis –∫–µ—à –æ—á–∏—â–µ–Ω")
    except:
        pass

    print("‚úÖ –ö–µ—à –æ—á–∏—â–µ–Ω")


def verify_ml_thresholds():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Ä–æ–≥–∏ ML –º–æ–¥–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏ ML –º–æ–¥–µ–ª–∏...")

    ml_manager_path = "ml/ml_manager.py"
    with open(ml_manager_path, "r") as f:
        content = f.read()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ—Ä–æ–≥–∏
    if "weighted_direction < 0.8" in content and "weighted_direction < 1.2" in content:
        print("‚úÖ –ü–æ—Ä–æ–≥–∏ ML –º–æ–¥–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:")
        print("  LONG: < 0.8")
        print("  SHORT: 0.8 - 1.2")
        print("  NEUTRAL: >= 1.2")
        return True
    else:
        print("‚ùå –ü–æ—Ä–æ–≥–∏ ML –º–æ–¥–µ–ª–∏ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        return False


async def start_system():
    """–ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Å ML"""
    print("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π ML –º–æ–¥–µ–ª—å—é...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ unified_launcher —Å —Ä–µ–∂–∏–º–æ–º ML
    cmd = "python3 unified_launcher.py --mode=ml"

    print(f"–í—ã–ø–æ–ª–Ω—è–µ–º: {cmd}")
    process = await asyncio.create_subprocess_shell(
        cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
    )

    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    await asyncio.sleep(5)

    if process.returncode is None:
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ —Å ML —Ä–µ–∂–∏–º–æ–º")

        # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ –ª–æ–≥–∏
        print("\nüìã –ü–µ—Ä–≤—ã–µ –ª–æ–≥–∏:")
        try:
            stdout, _ = await asyncio.wait_for(process.communicate(), timeout=5.0)
            if stdout:
                print(stdout.decode()[:1000])
        except asyncio.TimeoutError:
            # –ü—Ä–æ—Ü–µ—Å—Å –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - —ç—Ç–æ —Ö–æ—Ä–æ—à–æ
            print("  –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏
            log_file = f"data/logs/bot_trading_{time.strftime('%Y%m%d')}.log"
            if os.path.exists(log_file):
                os.system(f"tail -20 {log_file}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
        stderr = await process.stderr.read()
        print(stderr.decode())


async def monitor_signals():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–º –Ω–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã"""
    print("\nüìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö ML —Å–∏–≥–Ω–∞–ª–æ–≤...")

    from database.connections.postgres import AsyncPGPool

    await AsyncPGPool.initialize()

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    initial_count = await AsyncPGPool.fetchval(
        "SELECT COUNT(*) FROM signals WHERE DATE(created_at) = CURRENT_DATE"
    )

    print(f"–°–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –¥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {initial_count}")

    # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥
    await asyncio.sleep(30)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    new_count = await AsyncPGPool.fetchval(
        "SELECT COUNT(*) FROM signals WHERE DATE(created_at) = CURRENT_DATE"
    )

    if new_count > initial_count:
        print(f"‚úÖ –ù–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {new_count - initial_count}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
        type_dist = await AsyncPGPool.fetch(
            """
            SELECT signal_type, COUNT(*) as count
            FROM signals
            WHERE created_at > NOW() - INTERVAL '1 minute'
            GROUP BY signal_type
        """
        )

        print("\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤:")
        for row in type_dist:
            print(f"  {row['signal_type']}: {row['count']}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã
        latest = await AsyncPGPool.fetch(
            """
            SELECT symbol, signal_type, confidence, suggested_price
            FROM signals
            ORDER BY created_at DESC
            LIMIT 5
        """
        )

        print("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–∏–≥–Ω–∞–ª–æ–≤:")
        for sig in latest:
            print(
                f"  {sig['symbol']}: {sig['signal_type']} (conf: {sig['confidence']:.3f}) @ ${sig['suggested_price']}"
            )
    else:
        print("‚ö†Ô∏è –ù–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")

    await AsyncPGPool.close()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    print("üîÑ –ü–ï–†–ï–ó–ê–ü–£–°–ö ML –ú–û–î–ï–õ–ò –° –û–ë–ù–û–í–õ–ï–ù–ù–´–ú–ò –ü–û–†–û–ì–ê–ú–ò")
    print("=" * 60)

    # 1. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    kill_existing_processes()

    # 2. –û—á–∏—â–∞–µ–º –∫–µ—à
    clear_ml_cache()

    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏
    if not verify_ml_thresholds():
        print("‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: –ø–æ—Ä–æ–≥–∏ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        return

    # 4. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
    await start_system()

    # 5. –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Å–∏–≥–Ω–∞–ª—ã
    await monitor_signals()

    print("\n" + "=" * 60)
    print("‚úÖ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω")
    print("üìã –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print("  tail -f data/logs/bot_trading_$(date +%Y%m%d).log | grep -E 'ML|signal'")
    print("  python3 scripts/monitor_ml_signals.py")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()
