#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø–æ 10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Å–∏–≥–Ω–∞–ª–æ–≤ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
–ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∏–∑ BOT_AI_V2 –¥–ª—è V3
"""

import asyncio
import logging
import os
import signal
from datetime import datetime
from typing import Dict, Optional

from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("logs/multi_crypto_trading.log"),
    ],
)
logger = logging.getLogger("MultiCryptoTrading")

from core.config.config_manager import ConfigManager
from core.shared_context import SharedContext

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ V3
from core.system.orchestrator import SystemOrchestrator
from exchanges.factory import ExchangeFactory
from risk_management.manager import RiskManager
from strategies.manager import StrategyManager
from trading.engine import TradingEngine

# –°–ø–∏—Å–æ–∫ –∏–∑ 10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
CRYPTO_SYMBOLS = [
    "BTCUSDT",  # Bitcoin
    "ETHUSDT",  # Ethereum
    "BNBUSDT",  # Binance Coin
    "SOLUSDT",  # Solana
    "XRPUSDT",  # Ripple
    "ADAUSDT",  # Cardano
    "DOGEUSDT",  # Dogecoin
    "DOTUSDT",  # Polkadot
    "LINKUSDT",  # Chainlink
    "MATICUSDT",  # Polygon
]


class MultiCryptoTradingSystem:
    """–°–∏—Å—Ç–µ–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º"""

    def __init__(self):
        self.orchestrator: Optional[SystemOrchestrator] = None
        self.config_manager: Optional[ConfigManager] = None
        self.trading_engine: Optional[TradingEngine] = None
        self.strategy_manager: Optional[StrategyManager] = None
        self.exchange = None
        self.risk_manager: Optional[RiskManager] = None
        self.shared_context: Optional[SharedContext] = None
        self.running = False
        self.signal_generation_task = None

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("=" * 60)
            logger.info("  –ó–ê–ü–£–°–ö MULTI-CRYPTO TRADING SYSTEM")
            logger.info("=" * 60)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            self.config_manager = ConfigManager()
            await self.config_manager.initialize()

            # –û–±—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            self.shared_context = SharedContext()

            # –°–æ–∑–¥–∞–Ω–∏–µ –±–∏—Ä–∂–∏ (Bybit)
            exchange_config = {
                "api_key": os.getenv("BYBIT_API_KEY"),
                "api_secret": os.getenv("BYBIT_API_SECRET"),
                "testnet": os.getenv("BYBIT_TESTNET", "false").lower() == "true",
            }

            factory = ExchangeFactory()
            self.exchange = await factory.create_and_connect(
                exchange_type="bybit",
                api_key=exchange_config["api_key"],
                api_secret=exchange_config["api_secret"],
                sandbox=exchange_config.get("testnet", False),
            )
            await self.exchange.initialize()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
            balance = await self.exchange.get_balance()
            usdt_balance = balance.get("USDT", 0)
            logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å USDT: {usdt_balance:.2f}")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            self.trading_engine = TradingEngine(self.shared_context)
            self.strategy_manager = StrategyManager(self.shared_context)
            self.risk_manager = RiskManager(self.shared_context)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            self.orchestrator = SystemOrchestrator(self.shared_context)
            await self.orchestrator.initialize()

            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            self.orchestrator.register_component("trading_engine", self.trading_engine)
            self.orchestrator.register_component(
                "strategy_manager", self.strategy_manager
            )
            self.orchestrator.register_component("risk_manager", self.risk_manager)
            self.orchestrator.register_component("exchange", self.exchange)

            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

            # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤–ª–µ
            logger.info("\nüìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏:")
            logger.info(
                f"   –ë–∏—Ä–∂–∞: Bybit {'(Testnet)' if exchange_config['testnet'] else '(Mainnet)'}"
            )
            logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç: {len(CRYPTO_SYMBOLS)}")
            logger.info("   –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–≥–Ω–∞–ª–æ–≤: 60 —Å–µ–∫—É–Ω–¥")
            logger.info(f"   Leverage: {os.getenv('DEFAULT_LEVERAGE', 5)}x")
            logger.info("   Risk per trade: 2%")

            logger.info("\nüíπ –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã:")
            for symbol in CRYPTO_SYMBOLS:
                logger.info(f"   - {symbol}")

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
            return False

    async def generate_signals(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É"""
        while self.running:
            try:
                logger.info("\n" + "=" * 50)
                logger.info(
                    f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ - {datetime.now().strftime('%H:%M:%S')}"
                )

                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
                for symbol in CRYPTO_SYMBOLS:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä—ã–Ω–∫–µ
                        ticker = await self.exchange.get_ticker(symbol)
                        if not ticker:
                            continue

                        current_price = ticker.get("last", 0)
                        logger.info(f"\nüìà {symbol}: ${current_price:.4f}")

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                        positions = await self.exchange.get_positions(symbol)

                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª —á–µ—Ä–µ–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—à—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                        signal = await self._analyze_market(symbol, ticker)

                        if signal:
                            logger.info(
                                f"   üéØ –°–∏–≥–Ω–∞–ª: {signal['action']} (—Å–∏–ª–∞: {signal['strength']})"
                            )

                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
                            if await self.risk_manager.can_open_position(symbol):
                                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ trading engine
                                await self.trading_engine.process_signal(signal)
                            else:
                                logger.warning("   ‚ö†Ô∏è –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å–¥–µ–ª–∫—É")

                    except Exception as e:
                        logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {symbol}: {str(e)}")

                # –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                logger.info("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞...")
                await asyncio.sleep(60)

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {str(e)}")
                await asyncio.sleep(60)

    async def _analyze_market(self, symbol: str, ticker: Dict) -> Optional[Dict]:
        """–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        # –≠—Ç–æ –±–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä - –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã RSI, EMA, MACD –∏ —Ç.–¥.

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (—Å–≤–µ—á–∏)
            # candles = await self.exchange.get_candles(symbol, '5m', limit=100)

            # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∑–∞ 24—á
            change_24h = ticker.get("percentage", 0)

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Å—Ç—ã—Ö —É—Å–ª–æ–≤–∏–π
            if change_24h > 5:  # –†–æ—Å—Ç –±–æ–ª–µ–µ 5% –∑–∞ 24—á
                return {
                    "symbol": symbol,
                    "action": "SELL",  # –ü—Ä–æ–¥–∞–µ–º –Ω–∞ —Ä–æ—Å—Ç–µ
                    "strength": "MEDIUM",
                    "price": ticker["last"],
                    "reason": f"–†–æ—Å—Ç {change_24h:.2f}% –∑–∞ 24—á",
                }
            elif change_24h < -5:  # –ü–∞–¥–µ–Ω–∏–µ –±–æ–ª–µ–µ 5% –∑–∞ 24—á
                return {
                    "symbol": symbol,
                    "action": "BUY",  # –ü–æ–∫—É–ø–∞–µ–º –Ω–∞ –ø–∞–¥–µ–Ω–∏–∏
                    "strength": "MEDIUM",
                    "price": ticker["last"],
                    "reason": f"–ü–∞–¥–µ–Ω–∏–µ {change_24h:.2f}% –∑–∞ 24—á",
                }

            return None

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {str(e)}")
            return None

    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"""
        if not await self.initialize():
            return False

        self.running = True

        try:
            # –ó–∞–ø—É—Å–∫ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await self.orchestrator.start()

            # –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
            self.signal_generation_task = asyncio.create_task(self.generate_signals())

            logger.info("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            logger.info("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")

            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await self.signal_generation_task

        except KeyboardInterrupt:
            logger.info("\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        finally:
            await self.stop()

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
        self.running = False

        # –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        if self.signal_generation_task:
            self.signal_generation_task.cancel()
            try:
                await self.signal_generation_task
            except asyncio.CancelledError:
                pass

        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        if self.orchestrator:
            await self.orchestrator.stop()

        if self.exchange:
            await self.exchange.close()

        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    system = MultiCryptoTradingSystem()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    def signal_handler(sig, frame):
        logger.info("\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
        asyncio.create_task(system.stop())

    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    # –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
    await system.start()


if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs("logs", exist_ok=True)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
    asyncio.run(main())
