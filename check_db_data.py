#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import json
from datetime import datetime

import asyncpg
from dotenv import load_dotenv

load_dotenv()


async def check_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î"""

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ asyncpg
    conn = await asyncpg.connect(
        host="localhost",
        port=5555,
        user="obertruper",
        password="ilpnqw1234",
        database="bot_trading_v3",
    )

    print("üîç –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• BOT_AI_V3")
    print("=" * 60)

    try:
        # 1. –°–ò–ì–ù–ê–õ–´
        print("\nüìä –°–ò–ì–ù–ê–õ–´ (signals):")
        print("-" * 40)

        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        count = await conn.fetchval("SELECT COUNT(*) FROM signals")
        print(f"–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {count}")

        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã
        signals = await conn.fetch(
            """
            SELECT id, symbol, signal_type, strength, confidence,
                   suggested_price, suggested_stop_loss, suggested_take_profit,
                   created_at, metadata, indicators, strategy_name
            FROM signals
            ORDER BY created_at DESC
            LIMIT 5
        """
        )

        if signals:
            print("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–∏–≥–Ω–∞–ª–æ–≤:")
            for s in signals:
                print(f"\n  ID: {s['id']}")
                print(f"  –°–∏–º–≤–æ–ª: {s['symbol']}")
                print(f"  –¢–∏–ø: {s['signal_type']}")
                print(f"  –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {s['strategy_name']}")
                print(f"  –°–∏–ª–∞: {s['strength']:.3f}")
                print(f"  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {s['confidence']:.3f}")
                print(f"  –¶–µ–Ω–∞: ${s['suggested_price']}")
                print(f"  Stop Loss: ${s['suggested_stop_loss']}")
                print(f"  Take Profit: ${s['suggested_take_profit']}")
                print(f"  –°–æ–∑–¥–∞–Ω: {s['created_at']}")
                if s["indicators"]:
                    print(
                        f"  –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: {json.dumps(s['indicators'], indent=4)[:200]}..."
                    )
                if s["metadata"]:
                    print(
                        f"  –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {json.dumps(s['metadata'], indent=4)[:200]}..."
                    )

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º
        type_dist = await conn.fetch(
            """
            SELECT signal_type, COUNT(*) as count
            FROM signals
            GROUP BY signal_type
        """
        )
        print("\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º:")
        for t in type_dist:
            print(f"  {t['signal_type']}: {t['count']}")

        # 2. –û–†–î–ï–†–ê
        print("\nüìù –û–†–î–ï–†–ê (orders):")
        print("-" * 40)

        count = await conn.fetchval("SELECT COUNT(*) FROM orders")
        print(f"–í—Å–µ–≥–æ –æ—Ä–¥–µ—Ä–æ–≤: {count}")

        # –°—Ç–∞—Ç—É—Å—ã –æ—Ä–¥–µ—Ä–æ–≤
        status_dist = await conn.fetch(
            """
            SELECT status, COUNT(*) as count
            FROM orders
            GROUP BY status
        """
        )
        print("\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
        for s in status_dist:
            print(f"  {s['status']}: {s['count']}")

        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
        orders = await conn.fetch(
            """
            SELECT id, symbol, order_type, side, status,
                   quantity, price, stop_loss, take_profit, created_at
            FROM orders
            ORDER BY created_at DESC
            LIMIT 5
        """
        )

        if orders:
            print("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—Ä–¥–µ—Ä–æ–≤:")
            for o in orders:
                print(f"\n  ID: {o['id']}")
                print(f"  –°–∏–º–≤–æ–ª: {o['symbol']}")
                print(f"  –¢–∏–ø/–°—Ç–æ—Ä–æ–Ω–∞: {o['order_type']}/{o['side']}")
                print(f"  –°—Ç–∞—Ç—É—Å: {o['status']}")
                print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {o['quantity']}")
                print(f"  –¶–µ–Ω–∞: ${o['price']}")
                print(f"  SL/TP: ${o['stop_loss']}/{o['take_profit']}")
                print(f"  –°–æ–∑–¥–∞–Ω: {o['created_at']}")

        # 3. –°–î–ï–õ–ö–ò
        print("\nüí∞ –°–î–ï–õ–ö–ò (trades):")
        print("-" * 40)

        count = await conn.fetchval("SELECT COUNT(*) FROM trades")
        print(f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {count}")

        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏
        trades = await conn.fetch(
            """
            SELECT id, symbol, side, quantity,
                   price, realized_pnl, commission, executed_at, strategy_name
            FROM trades
            ORDER BY executed_at DESC
            LIMIT 5
        """
        )

        if trades:
            print("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–¥–µ–ª–æ–∫:")
            for t in trades:
                print(f"\n  ID: {t['id']}")
                print(f"  –°–∏–º–≤–æ–ª: {t['symbol']}")
                print(f"  –°—Ç–æ—Ä–æ–Ω–∞: {t['side']}")
                print(f"  –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {t['strategy_name']}")
                print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {t['quantity']}")
                print(f"  –¶–µ–Ω–∞: ${t['price']}")
                print(f"  PnL: ${t['realized_pnl']}")
                print(f"  –ö–æ–º–∏—Å—Å–∏—è: ${t['commission']}")
                print(f"  –ò—Å–ø–æ–ª–Ω–µ–Ω: {t['executed_at']}")

        # –û–±—â–∏–π PnL
        total_pnl = await conn.fetchval("SELECT SUM(realized_pnl) FROM trades")
        print(f"\n–û–±—â–∏–π PnL: ${total_pnl or 0:.2f}")

        # 4. –†–´–ù–û–ß–ù–´–ï –î–ê–ù–ù–´–ï
        print("\nüìà –†–´–ù–û–ß–ù–´–ï –î–ê–ù–ù–´–ï (raw_market_data):")
        print("-" * 40)

        count = await conn.fetchval("SELECT COUNT(*) FROM raw_market_data")
        print(f"–í—Å–µ–≥–æ —Å–≤–µ—á–µ–π: {count}")

        # –°–∏–º–≤–æ–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏
        symbols = await conn.fetch(
            """
            SELECT symbol, COUNT(*) as count,
                   MIN(timestamp) as first_candle,
                   MAX(timestamp) as last_candle
            FROM raw_market_data
            GROUP BY symbol
            ORDER BY count DESC
            LIMIT 5
        """
        )

        if symbols:
            print("\n–¢–æ–ø-5 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–∞–Ω–Ω—ã—Ö:")
            for s in symbols:
                print(f"  {s['symbol']}: {s['count']} —Å–≤–µ—á–µ–π")
                print(f"    –ü–µ—Ä–≤–∞—è: {s['first_candle']}")
                print(f"    –ü–æ—Å–ª–µ–¥–Ω—è—è: {s['last_candle']}")

        # 5. –û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï (ML features)
        print("\nü§ñ ML FEATURES (processed_market_data):")
        print("-" * 40)

        count = await conn.fetchval("SELECT COUNT(*) FROM processed_market_data")
        print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π —Å features: {count}")

        if count > 0:
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å
            latest = await conn.fetchrow(
                """
                SELECT symbol, technical_indicators, ml_features, datetime,
                       direction_15m, direction_1h, direction_4h, direction_12h
                FROM processed_market_data
                ORDER BY datetime DESC
                LIMIT 1
            """
            )

            if latest:
                print("\n–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å:")
                print(f"  –°–∏–º–≤–æ–ª: {latest['symbol']}")
                print(f"  –í—Ä–µ–º—è: {latest['datetime']}")
                print(
                    f"  –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (15m/1h/4h/12h): {latest['direction_15m']}/{latest['direction_1h']}/{latest['direction_4h']}/{latest['direction_12h']}"
                )
                if latest["technical_indicators"]:
                    # –ü–∞—Ä—Å–∏–º JSON –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
                    indicators = latest["technical_indicators"]
                    if isinstance(indicators, str):
                        indicators = json.loads(indicators)
                    print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {len(indicators)}")
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                    if isinstance(indicators, dict):
                        indicators_sample = dict(list(indicators.items())[:5])
                        print(
                            f"  –ü—Ä–∏–º–µ—Ä—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {json.dumps(indicators_sample, indent=4)}"
                        )
                if latest["ml_features"]:
                    ml_features = latest["ml_features"]
                    if isinstance(ml_features, str):
                        ml_features = json.loads(ml_features)
                    print(
                        f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ML features: {len(ml_features) if ml_features else 0}"
                    )

        # 6. –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ò–ù–î–ò–ö–ê–¢–û–†–´
        print("\nüìâ –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ò–ù–î–ò–ö–ê–¢–û–†–´ (technical_indicators):")
        print("-" * 40)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        table_exists = await conn.fetchval(
            """
            SELECT EXISTS (
                SELECT FROM information_schema.tables
                WHERE table_name = 'technical_indicators'
            )
        """
        )

        if table_exists:
            count = await conn.fetchval("SELECT COUNT(*) FROM technical_indicators")
            print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {count}")

            if count > 0:
                # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                indicators = await conn.fetch(
                    """
                    SELECT symbol, indicator_name, value, created_at
                    FROM technical_indicators
                    ORDER BY created_at DESC
                    LIMIT 10
                """
                )

                if indicators:
                    print("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:")
                    for i in indicators:
                        print(
                            f"  {i['symbol']} - {i['indicator_name']}: {i['value']:.4f} ({i['created_at']})"
                        )
        else:
            print("–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # 7. –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –°–ï–ì–û–î–ù–Ø
        print("\nüìÖ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –°–ï–ì–û–î–ù–Ø:")
        print("-" * 40)

        today = datetime.now().date()

        # –°–∏–≥–Ω–∞–ª—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_signals = await conn.fetchval(
            """
            SELECT COUNT(*) FROM signals
            WHERE DATE(created_at) = $1
        """,
            today,
        )
        print(f"–°–∏–≥–Ω–∞–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {today_signals}")

        # –û—Ä–¥–µ—Ä–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_orders = await conn.fetchval(
            """
            SELECT COUNT(*) FROM orders
            WHERE DATE(created_at) = $1
        """,
            today,
        )
        print(f"–û—Ä–¥–µ—Ä–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {today_orders}")

        # –°–¥–µ–ª–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_trades = await conn.fetchval(
            """
            SELECT COUNT(*) FROM trades
            WHERE DATE(executed_at) = $1
        """,
            today,
        )
        print(f"–°–¥–µ–ª–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–æ: {today_trades}")

        # PnL –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_pnl = await conn.fetchval(
            """
            SELECT SUM(realized_pnl) FROM trades
            WHERE DATE(executed_at) = $1
        """,
            today,
        )
        print(f"PnL –∑–∞ —Å–µ–≥–æ–¥–Ω—è: ${today_pnl or 0:.2f}")

    finally:
        await conn.close()

    print("\n" + "=" * 60)
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


if __name__ == "__main__":
    asyncio.run(check_database())
