#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ PostgreSQL –¥–ª—è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
"""

import os
import subprocess


def run_command(cmd, check=True):
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, check=check)
        return result.stdout.strip(), result.stderr.strip()
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {cmd}")
        print(f"   Stderr: {e.stderr}")
        return None, e.stderr


def find_postgres_config():
    """–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ PostgreSQL"""
    possible_paths = [
        "/etc/postgresql/*/main/pg_hba.conf",
        "/var/lib/postgresql/*/data/pg_hba.conf",
        "/usr/local/pgsql/data/pg_hba.conf",
        f"/home/{os.getenv('USER')}/postgres/data/pg_hba.conf",
        "/opt/homebrew/var/postgres/pg_hba.conf",  # macOS Homebrew
    ]

    for pattern in possible_paths:
        stdout, _ = run_command(f"ls {pattern}", check=False)
        if stdout:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω pg_hba.conf: {stdout}")
            return stdout.split("\n")[0]

    # –ü–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ PostgreSQL –∫–æ–º–∞–Ω–¥—ã
    print("üîç –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ PostgreSQL...")
    stdout, stderr = run_command(
        'psql -p 5555 -U obertruper -d bot_trading_v3 -c "SHOW config_file;" -t', check=False
    )
    if stdout:
        config_dir = os.path.dirname(stdout.strip())
        hba_file = os.path.join(config_dir, "pg_hba.conf")
        if os.path.exists(hba_file):
            return hba_file

    return None


def check_postgres_running():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω"""
    stdout, _ = run_command("ps aux | grep postgres | grep 5555", check=False)
    if "postgres" in stdout:
        print("‚úÖ PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 5555")
        return True

    # –ü—Ä–æ–≤–µ—Ä–∏–º —á–µ—Ä–µ–∑ netstat/ss
    stdout, _ = run_command("ss -tlnp | grep :5555", check=False)
    if ":5555" in stdout:
        print("‚úÖ –ü–æ—Ä—Ç 5555 –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–µ—Ç—Å—è")
        return True

    print("‚ùå PostgreSQL –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5555")
    return False


def get_docker_networks():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ IP –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ Docker —Å–µ—Ç–µ–π"""
    networks = []

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è Docker bridge —Å–µ—Ç—å
    stdout, _ = run_command(
        "docker network inspect bridge --format '{{range .IPAM.Config}}{{.Subnet}}{{end}}'",
        check=False,
    )
    if stdout:
        networks.append(stdout.strip())

    # –ù–∞—à–∞ –∫–∞—Å—Ç–æ–º–Ω–∞—è —Å–µ—Ç—å
    stdout, _ = run_command(
        "docker network inspect bot_ai_v3_bot_network --format '{{range .IPAM.Config}}{{.Subnet}}{{end}}'",
        check=False,
    )
    if stdout:
        networks.append(stdout.strip())

    return networks


def create_temp_hba_conf():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ pg_hba.conf —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    networks = get_docker_networks()

    hba_content = """# PostgreSQL Client Authentication Configuration File
# TYPE  DATABASE        USER            ADDRESS                 METHOD

# "local" is for Unix domain socket connections only
local   all             all                                     trust
# IPv4 local connections:
host    all             all             127.0.0.1/32            trust
host    all             all             ::1/128                 trust

# Docker networks
"""

    for network in networks:
        hba_content += f"host    all             all             {network}               md5\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ IP –¥–ª—è –Ω–∞—à–µ–≥–æ —Å–ª—É—á–∞—è
    hba_content += """
# Metabase container access
host    all             obertruper      172.21.0.0/16           trust
host    all             obertruper      172.17.0.0/16           trust
host    all             obertruper      172.18.0.0/16           trust
host    all             obertruper      172.19.0.0/16           trust
host    all             obertruper      172.20.0.0/16           trust
"""

    with open("temp_pg_hba.conf", "w") as f:
        f.write(hba_content)

    return "temp_pg_hba.conf"


def apply_postgres_settings():
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ PostgreSQL —á–µ—Ä–µ–∑ SQL"""
    print("üîß –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å PostgreSQL —á–µ—Ä–µ–∑ SQL –∫–æ–º–∞–Ω–¥—ã...")

    # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–º–µ–Ω–∏—Ç—å listen_addresses
    commands = ["ALTER SYSTEM SET listen_addresses = '*';", "SELECT pg_reload_conf();"]

    for cmd in commands:
        stdout, stderr = run_command(
            f'psql -p 5555 -U obertruper -d bot_trading_v3 -c "{cmd}"', check=False
        )
        if stderr and "permission denied" not in stderr.lower():
            print(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {cmd}")
        else:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å: {cmd}")


def main():
    print("=" * 60)
    print("   –ù–ê–°–¢–†–û–ô–ö–ê –î–û–°–¢–£–ü–ê POSTGRESQL –î–õ–Ø DOCKER")
    print("=" * 60)

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç
    if not check_postgres_running():
        print("‚ùå PostgreSQL –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ PostgreSQL")
        return False

    # 2. –ü–æ–ª—É—á–∞–µ–º Docker —Å–µ—Ç–∏
    networks = get_docker_networks()
    print(f"üåê Docker —Å–µ—Ç–∏: {networks}")

    # 3. –ò—â–µ–º —Ñ–∞–π–ª pg_hba.conf
    hba_file = find_postgres_config()
    if not hba_file:
        print("‚ùå –§–∞–π–ª pg_hba.conf –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("üí° –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥...")
        apply_postgres_settings()
        return False

    print(f"üìù –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {hba_file}")

    # 4. –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    temp_file = create_temp_hba_conf()
    print(f"üìÑ –°–æ–∑–¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_file}")

    # 5. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("\n" + "=" * 60)
    print("   –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –ù–ê–°–¢–†–û–ô–ö–ò")
    print("=" * 60)
    print(
        f"""
1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:
   sudo cp {temp_file} {hba_file}

2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ PostgreSQL:
   sudo systemctl reload postgresql
   # –∏–ª–∏
   sudo service postgresql reload

3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:
   docker exec bot_metabase psql -h 172.21.0.1 -p 5555 -U obertruper -d bot_trading_v3 -c "SELECT 1"
"""
    )

    return True


if __name__ == "__main__":
    success = main()
    if success:
        print("‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    else:
        print("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
