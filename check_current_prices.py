#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω
"""

import asyncio
import os
from datetime import datetime

from dotenv import load_dotenv

load_dotenv()


async def check_current_prices():
    from exchanges.bybit.bybit_exchange import BybitExchange

    exchange = BybitExchange(
        api_key=os.getenv("BYBIT_API_KEY"),
        api_secret=os.getenv("BYBIT_API_SECRET"),
        sandbox=False,
    )

    try:
        await exchange.connect()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
        symbols = ["BTCUSDT", "ETHUSDT", "SOLUSDT"]

        print(f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now()}\n")
        print("üí≤ –¢–ï–ö–£–©–ò–ï –¶–ï–ù–´:")

        for symbol in symbols:
            ticker = await exchange.get_ticker(symbol)
            print(
                f"   {symbol}: ${ticker.last_price:.2f} (–≤—Ä–µ–º—è –±–∏—Ä–∂–∏: {ticker.timestamp})"
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏
        print("\nüìä –ü–û–°–õ–ï–î–ù–ò–ï –°–í–ï–ß–ò (15–º):")

        for symbol in symbols:
            candles = await exchange.get_candles(symbol, 15, limit=1)
            if candles:
                candle = candles[0]
                print(
                    f"   {symbol}: –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤ {candle.timestamp.strftime('%H:%M')}, —Ü–µ–Ω–∞: ${candle.close_price:.2f}"
                )

    finally:
        await exchange.disconnect()


if __name__ == "__main__":
    asyncio.run(check_current_prices())
