#!/usr/bin/env python3
"""–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ Bybit"""

import asyncio
import os
import sys
from pathlib import Path

sys.path.append(str(Path(__file__).parent))

from dotenv import load_dotenv

from core.logger import setup_logger
from exchanges.bybit.client import BybitClient

logger = setup_logger("check_order")


async def check_order():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä–¥–µ—Ä–∞"""
    load_dotenv()

    client = BybitClient(
        api_key=os.getenv("BYBIT_API_KEY"),
        api_secret=os.getenv("BYBIT_API_SECRET"),
        sandbox=False,
    )

    try:
        await client.connect()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä
        order_id = "c78332b4-39a5-4248-b69a-49178d3abcb3"
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä–¥–µ—Ä–∞ {order_id}")

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
        params = {"category": "linear", "settleCoin": "USDT"}

        response = await client._make_request(
            "GET", "/v5/order/realtime", params, auth=True
        )
        logger.info(f"üì¶ –ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞: {len(response['result']['list'])} —à—Ç.")

        for order in response["result"]["list"]:
            logger.info(
                f"  - {order['symbol']}: {order['side']} {order['qty']} @ {order.get('price', 'MARKET')}"
            )
            logger.info(f"    ID: {order['orderId']}, Status: {order['orderStatus']}")

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ä–¥–µ—Ä–æ–≤
        params = {"category": "linear", "orderId": order_id}

        try:
            response = await client._make_request(
                "GET", "/v5/order/history", params, auth=True
            )
            if response["result"]["list"]:
                order = response["result"]["list"][0]
                logger.info("\n‚úÖ –ù–∞–π–¥–µ–Ω –æ—Ä–¥–µ—Ä –≤ –∏—Å—Ç–æ—Ä–∏–∏:")
                logger.info(f"  Symbol: {order['symbol']}")
                logger.info(f"  Side: {order['side']}")
                logger.info(f"  Qty: {order['qty']}")
                logger.info(f"  Status: {order['orderStatus']}")
                logger.info(f"  Created: {order['createdTime']}")
                logger.info(f"  Executed Qty: {order.get('cumExecQty', 0)}")
                logger.info(f"  Avg Price: {order.get('avgPrice', 'N/A')}")
            else:
                logger.warning(f"‚ö†Ô∏è –û—Ä–¥–µ—Ä {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
        positions = await client.get_positions()
        logger.info(f"\nüìä –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏: {len(positions)} —à—Ç.")
        for pos in positions:
            logger.info(f"  - {pos.symbol}: {pos.side} {pos.size}")
            logger.info(
                f"    Entry: ${pos.mark_price:.2f}, PnL: ${pos.unrealised_pnl:.2f}"
            )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback

        logger.error(traceback.format_exc())
    finally:
        await client.disconnect()


if __name__ == "__main__":
    asyncio.run(check_order())
