#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –º–æ–¥–µ–ª–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""

import asyncio
import sys
from pathlib import Path

import numpy as np
import pandas as pd

sys.path.insert(0, str(Path(__file__).parent))


async def test_predictions():
    """–¢–µ—Å—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –º–æ–¥–µ–ª–∏"""

    print("=" * 60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ô –ú–û–î–ï–õ–ò")
    print("=" * 60)

    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ML Manager
    from core.config.config_manager import ConfigManager
    from ml.ml_manager import MLManager

    config_manager = ConfigManager()
    config = {
        "ml": config_manager.get_ml_config(),
        "system": config_manager.get_system_config(),
        "trading": config_manager.get_config("trading", {}),
    }

    print("\n1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML Manager...")
    ml_manager = MLManager(config)
    await ml_manager.initialize()
    print("‚úÖ ML Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    # 2. –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    from database.connections.postgres import AsyncPGPool

    # AsyncPGPool –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏

    print("\n2Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î...")

    # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è BTCUSDT –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    candles = await AsyncPGPool.fetch(
        """
        SELECT timestamp, open, high, low, close, volume
        FROM raw_market_data
        WHERE symbol = 'BTCUSDT'
        AND timestamp > NOW() - INTERVAL '24 hours'
        ORDER BY timestamp DESC
        LIMIT 96
    """
    )

    if len(candles) < 96:
        print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(candles)} —Å–≤–µ—á–µ–π")
        return

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DataFrame
    df = pd.DataFrame(candles)
    df = df.sort_values("timestamp")  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    df["symbol"] = "BTCUSDT"

    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π –¥–ª—è BTCUSDT")

    # 3. –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    print("\n3Ô∏è‚É£ –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ...")

    try:
        prediction = await ml_manager.predict(df)

        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø:")
        print("-" * 40)
        print(f"Signal type: {prediction['signal_type']}")
        print(f"Confidence: {prediction['confidence']:.1%}")
        print(f"Signal strength: {prediction['signal_strength']:.3f}")
        print(f"Risk level: {prediction['risk_level']}")

        if "predictions" in prediction:
            pred = prediction["predictions"]
            print(f"\nDirection score: {pred['direction_score']:.3f}")
            print(f"Directions by timeframe: {pred['directions_by_timeframe']}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
            print("\nüéØ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º:")
            probs = pred["direction_probabilities"]
            timeframes = ["15m", "1h", "4h", "12h"]
            for i, tf in enumerate(timeframes):
                p = probs[i]
                print(f"  {tf}: LONG={p[0]:.1%}, SHORT={p[1]:.1%}, NEUTRAL={p[2]:.1%}")

            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã
            print("\n‚ö†Ô∏è –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´:")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–Ω—Ç—Ä–æ–ø–∏—é (–Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)
            for i, tf in enumerate(timeframes):
                p = np.array(probs[i])
                # –≠–Ω—Ç—Ä–æ–ø–∏—è –®–µ–Ω–Ω–æ–Ω–∞
                entropy = -np.sum(p * np.log(p + 1e-10))
                max_entropy = np.log(3)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç–Ω—Ç—Ä–æ–ø–∏—è –¥–ª—è 3 –∫–ª–∞—Å—Å–æ–≤
                uncertainty = (
                    entropy / max_entropy
                )  # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (0-1)
                print(f"  {tf}: –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å = {uncertainty:.1%}")

            # –ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –±–ª–∏–∑–∫–∏ –∫ 33%, —ç—Ç–æ –ø—Ä–∏–∑–Ω–∞–∫ –ø—Ä–æ–±–ª–µ–º—ã
            all_probs = np.array(probs).flatten()
            if np.all(np.abs(all_probs - 0.333) < 0.05):
                print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê:")
                print("  –ú–æ–¥–µ–ª—å –≤—ã–¥–∞–µ—Ç –ø–æ—á—Ç–∏ —Ä–∞–≤–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤!")
                print("  –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –º–æ–¥–µ–ª—å –ø–æ —Å—É—Ç–∏ —Å–ª—É—á–∞–π–Ω–æ —É–≥–∞–¥—ã–≤–∞–µ—Ç.")
                print("\n  –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                print("  1. –ú–æ–¥–µ–ª—å –Ω–µ –±—ã–ª–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—É—á–µ–Ω–∞")
                print(
                    "  2. –í—Ö–æ–¥–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–µ–º, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –æ–±—É—á–∞–ª–∞—Å—å –º–æ–¥–µ–ª—å"
                )
                print("  3. –ü—Ä–æ–±–ª–µ–º—ã —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö (scaler)")
                print("  4. –ú–æ–¥–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ '—Å–ª—É—á–∞–π–Ω—ã—Ö' –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏: {e}")
        import traceback

        traceback.print_exc()

    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º scaler
    print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ scaler...")

    if ml_manager.scaler is not None:
        print(f"Scaler —Ç–∏–ø: {type(ml_manager.scaler).__name__}")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_features = np.random.randn(96, 240)  # 96 –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫, 240 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        normalized = ml_manager.scaler.transform(test_features)

        print(
            f"–î–æ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: mean={test_features.mean():.3f}, std={test_features.std():.3f}"
        )
        print(
            f"–ü–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: mean={normalized.mean():.3f}, std={normalized.std():.3f}"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ scaler –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
        if np.abs(normalized.mean()) > 0.1 or np.abs(normalized.std() - 1.0) > 0.1:
            print(
                "‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å scaler - –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
            )

    await AsyncPGPool.close()

    print("\n" + "=" * 60)
    print("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("=" * 60)
    print(
        """
1. –ú–æ–¥–µ–ª—å –≤—ã–¥–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–≤—Å–µ –∫–ª–∞—Å—Å—ã ~33%)
2. –≠—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–±—É—á–µ–Ω–∏–µ–º –∏–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
3. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –º–µ–∂–¥—É –æ–±—É—á–µ–Ω–∏–µ–º –∏ inference
   - –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π scaler
   - –í–æ–∑–º–æ–∂–Ω–æ, –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    )


if __name__ == "__main__":
    asyncio.run(test_predictions())
