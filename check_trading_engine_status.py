#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import asyncio
import sys
from datetime import datetime
from pathlib import Path

import aiohttp

sys.path.append(str(Path(__file__).parent))

from core.logger import setup_logger
from database.connections.postgres import AsyncPGPool

logger = setup_logger("check_trading_engine")


async def check_trading_engine():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞."""

    print("üîç –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –¢–û–†–ì–û–í–û–ì–û –î–í–ò–ñ–ö–ê\n")
    print("=" * 60)

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ API
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å—Ç–∞—Ç—É—Å–∞...")
    try:
        async with aiohttp.ClientSession() as session:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
            async with session.get("http://localhost:8080/api/health") as resp:
                if resp.status == 200:
                    health_data = await resp.json()
                    print(f"‚úÖ API —Å—Ç–∞—Ç—É—Å: {health_data.get('status', 'unknown')}")

                    if "components" in health_data:
                        print("\n–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
                        for comp, status in health_data["components"].items():
                            status_str = "‚úÖ" if status else "‚ùå"
                            print(
                                f"  {status_str} {comp}: {'–∞–∫—Ç–∏–≤–µ–Ω' if status else '–Ω–µ –∞–∫—Ç–∏–≤–µ–Ω'}"
                            )
                else:
                    print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: {resp.status})")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏
            async with session.get("http://localhost:8080/api/status/trading") as resp:
                if resp.status == 200:
                    trading_status = await resp.json()
                    print("\n‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω")
                    print(
                        f"  –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {trading_status.get('active_strategies', 0)}"
                    )
                    print(
                        f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {trading_status.get('processed_signals', 0)}"
                    )
                else:
                    print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    print("\n2Ô∏è‚É£ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã...")

    recent_signals = await AsyncPGPool.fetch(
        """
        SELECT
            id, symbol, signal_type, strength, confidence,
            created_at, strategy_name, extra_data
        FROM signals
        WHERE created_at > NOW() - INTERVAL '30 minutes'
        ORDER BY created_at DESC
        LIMIT 10
    """
    )

    if recent_signals:
        print(f"\n–ù–∞–π–¥–µ–Ω–æ {len(recent_signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç:")
        for signal in recent_signals[:5]:
            time_ago = datetime.utcnow() - signal["created_at"].replace(tzinfo=None)
            print(f"\n  üìä {signal['symbol']} - {signal['signal_type']}")
            print(
                f"     –°–∏–ª–∞: {signal['strength']:.2f}, –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal['confidence']:.2%}"
            )
            print(f"     –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {signal['strategy_name']}")
            print(f"     –°–æ–∑–¥–∞–Ω: {time_ago.total_seconds():.0f} —Å–µ–∫ –Ω–∞–∑–∞–¥")
    else:
        print("‚ùå –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç")

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)
    pending_signals = await AsyncPGPool.fetch(
        """
        SELECT COUNT(*) as count
        FROM signals
        WHERE created_at > NOW() - INTERVAL '1 hour'
        AND id NOT IN (
            SELECT DISTINCT signal_id
            FROM orders
            WHERE signal_id IS NOT NULL
        )
    """
    )

    pending_count = pending_signals[0]["count"] if pending_signals else 0

    if pending_count > 0:
        print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {pending_count} –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
        print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   - Trading Engine –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
        print("   - Signal Processor –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∏—Ä–∂–∞–º")
    else:
        print("‚úÖ –í—Å–µ —Å–∏–≥–Ω–∞–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")

    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤
    print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤...")

    recent_orders = await AsyncPGPool.fetch(
        """
        SELECT
            COUNT(*) as total,
            COUNT(CASE WHEN status = 'filled' THEN 1 END) as filled,
            COUNT(CASE WHEN status = 'rejected' THEN 1 END) as rejected,
            COUNT(CASE WHEN status = 'pending' THEN 1 END) as pending
        FROM orders
        WHERE created_at > NOW() - INTERVAL '1 hour'
    """
    )

    if recent_orders and recent_orders[0]["total"] > 0:
        order_stats = recent_orders[0]
        print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤ –∑–∞ —á–∞—Å:")
        print(f"   –í—Å–µ–≥–æ: {order_stats['total']}")
        print(f"   –ò—Å–ø–æ–ª–Ω–µ–Ω–æ: {order_stats['filled']}")
        print(f"   –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {order_stats['rejected']}")
        print(f"   –í –æ–∂–∏–¥–∞–Ω–∏–∏: {order_stats['pending']}")
    else:
        print("‚ùå –ù–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å")

    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ signal_processor
    print("\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ Signal Processor...")

    # –°–º–æ—Ç—Ä–∏–º –ª–æ–≥–∏ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å signal processor
    try:
        import subprocess

        logs = subprocess.run(
            ["tail", "-n", "100", "data/logs/trading.log"],
            capture_output=True,
            text=True,
        )

        if logs.stdout:
            signal_processor_lines = [
                l for l in logs.stdout.split("\n") if "signal_processor" in l.lower()
            ]
            if signal_processor_lines:
                print(
                    f"‚úÖ Signal Processor –∞–∫—Ç–∏–≤–µ–Ω ({len(signal_processor_lines)} –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–∞—Ö)"
                )
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–ø–∏—Å–∏
                for line in signal_processor_lines[-3:]:
                    if line.strip():
                        print(f"   {line[:100]}...")
            else:
                print("‚ö†Ô∏è  Signal Processor –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ –ª–æ–≥–∞—Ö")
        else:
            print("‚ö†Ô∏è  –õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")

    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
    print("\n6Ô∏è‚É£ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∏—Ä–∂–∏
    exchange_check = await AsyncPGPool.fetch(
        """
        SELECT DISTINCT exchange, COUNT(*) as signal_count
        FROM signals
        WHERE created_at > NOW() - INTERVAL '1 hour'
        GROUP BY exchange
    """
    )

    if exchange_check:
        print("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –±–∏—Ä–∂–∏:")
        for exc in exchange_check:
            print(f"   {exc['exchange']}: {exc['signal_count']} —Å–∏–≥–Ω–∞–ª–æ–≤")
    else:
        print("‚ö†Ô∏è  –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –±–∏—Ä–∂–∞—Ö")

    # 7. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\n7Ô∏è‚É£ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("=" * 60)

    if pending_count > 0:
        print("\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã!")
        print("\n–î–µ–π—Å—Ç–≤–∏—è:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Trading Engine –∞–∫—Ç–∏–≤–µ–Ω –≤ unified_launcher")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ signal_processor –∑–∞–ø—É—â–µ–Ω")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–∞–º")
        print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏: tail -f data/logs/error.log")

        print("\n–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤:")
        print("```bash")
        print("# –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å —Ç–æ—Ä–≥–æ–≤–ª–µ–π")
        print("python3 unified_launcher.py --mode=ml")
        print("```")
    else:
        print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
        print("   - –°–∏–≥–Ω–∞–ª—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è")
        print("   - API –∞–∫—Ç–∏–≤–µ–Ω")
        print("   - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞")

    print("\n" + "=" * 60)


if __name__ == "__main__":
    asyncio.run(check_trading_engine())
