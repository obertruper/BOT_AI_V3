#!/usr/bin/env python3
"""
üéØ –ì–õ–ê–í–ù–ê–Ø –¢–û–ß–ö–ê –í–•–û–î–ê –í –¢–ï–°–¢–û–í–£–Æ –°–ò–°–¢–ï–ú–£ BOT_AI_V3

–ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:
- Unit —Ç–µ—Å—Ç—ã
- Integration —Ç–µ—Å—Ç—ã
- Performance —Ç–µ—Å—Ç—ã
- E2E —Ç–µ—Å—Ç—ã
- Dynamic SL/TP —Ç–µ—Å—Ç—ã
- Code Quality –ø—Ä–æ–≤–µ—Ä–∫–∏

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python3 orchestrator_main.py                    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    python3 orchestrator_main.py --mode quick       # –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã
    python3 orchestrator_main.py --mode full        # –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    python3 orchestrator_main.py --mode dynamic-sltp # Dynamic SL/TP —Ç–µ—Å—Ç—ã
    python3 orchestrator_main.py --help             # –°–ø—Ä–∞–≤–∫–∞
"""

import argparse
import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
try:
    from scripts.unified_test_orchestrator import UnifiedTestOrchestrator
except ImportError as e:
    print(f"‚ùå Error importing UnifiedTestOrchestrator: {e}")
    print("üí° Make sure you're running from the project root directory")
    sys.exit(1)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º run_tests –¥–ª—è CLI —Ä–µ–∂–∏–º–∞
try:
    from run_tests import TestRunner
except ImportError:
    TestRunner = None

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Position Tracker —Ç–µ—Å—Ç—ã
try:
    from tests.position_tracker_test_suite import PositionTrackerTestSuite
except ImportError:
    PositionTrackerTestSuite = None


class Colors:
    """ANSI —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"""

    HEADER = "\033[95m"
    BLUE = "\033[94m"
    CYAN = "\033[96m"
    GREEN = "\033[92m"
    WARNING = "\033[93m"
    FAIL = "\033[91m"
    ENDC = "\033[0m"
    BOLD = "\033[1m"


def print_welcome():
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    print(f"\n{Colors.HEADER}{'='*80}{Colors.ENDC}")
    print(f"{Colors.HEADER}{Colors.BOLD}üéØ BOT_AI_V3 UNIFIED TEST ORCHESTRATOR üéØ{Colors.ENDC}")
    print(f"{Colors.HEADER}{'='*80}{Colors.ENDC}")
    print(f"{Colors.CYAN}üöÄ –ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã{Colors.ENDC}")
    print(f"{Colors.BLUE}üìä –í–∫–ª—é—á–∞–µ—Ç Dynamic SL/TP —Ç–µ—Å—Ç—ã –∏ –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é{Colors.ENDC}")
    print(f"{Colors.GREEN}‚ú® –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ –æ—Ç—á–µ—Ç–∞–º–∏{Colors.ENDC}")
    print(f"{Colors.HEADER}{'='*80}{Colors.ENDC}\n")


async def run_position_tracker_tests(args):
    """–ó–∞–ø—É—Å–∫ Position Tracker —Ç–µ—Å—Ç–æ–≤"""
    if PositionTrackerTestSuite is None:
        print(f"{Colors.FAIL}‚ùå Position Tracker Test Suite –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω{Colors.ENDC}")
        return

    print(f"{Colors.BLUE}üéØ –ó–∞–ø—É—Å–∫ Position Tracker Test Suite...{Colors.ENDC}\n")
    
    suite = PositionTrackerTestSuite()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã Position Tracker
        await suite.run_all_tests(verbose=args.verbose)
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
        suite.print_summary()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –æ—Ç—á–µ—Ç –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
        if args.generate_report:
            await suite.generate_html_report()
            print(f"{Colors.GREEN}üìÑ HTML –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ test_results/position_tracker_report.html{Colors.ENDC}")
            
    except Exception as e:
        print(f"{Colors.FAIL}‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Position Tracker —Ç–µ—Å—Ç–æ–≤: {e}{Colors.ENDC}")
        if args.verbose:
            import traceback
            traceback.print_exc()


def print_help():
    """–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    help_text = f"""
{Colors.BOLD}üéØ –†–ï–ñ–ò–ú–´ –†–ê–ë–û–¢–´:{Colors.ENDC}

{Colors.CYAN}–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º:{Colors.ENDC}
  python3 orchestrator_main.py
  
  –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é:
  - –í—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  - –ó–∞–ø—É—Å–∫–∞ Dynamic SL/TP suite
  - –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML –æ—Ç—á–µ—Ç–æ–≤
  - –í–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

{Colors.CYAN}CLI —Ä–µ–∂–∏–º—ã:{Colors.ENDC}
  --mode quick          –ë—ã—Å—Ç—Ä—ã–µ smoke –∏ unit —Ç–µ—Å—Ç—ã
  --mode standard       Unit + ML + Database —Ç–µ—Å—Ç—ã  
  --mode full           –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  --mode dynamic-sltp   –¢–æ–ª—å–∫–æ Dynamic SL/TP —Ç–µ—Å—Ç—ã
  --mode position-tracker –¢–æ–ª—å–∫–æ Position Tracker —Ç–µ—Å—Ç—ã
  --mode performance    –¢–æ–ª—å–∫–æ performance —Ç–µ—Å—Ç—ã
  --mode integration    –¢–æ–ª—å–∫–æ integration —Ç–µ—Å—Ç—ã
  --mode ci             CI/CD –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã

{Colors.CYAN}–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–∂–∏–º—ã:{Colors.ENDC}
  --mode visual         –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
  --mode analysis       Code analysis –∏ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞
  --mode coverage       Coverage –∞–Ω–∞–ª–∏–∑ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –æ—Ç—á–µ—Ç–∞–º–∏

{Colors.CYAN}–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:{Colors.ENDC}
  --verbose, -v         –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
  --quiet, -q           –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥  
  --timeout SECONDS     –¢–∞–π–º–∞—É—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1800)
  --parallel            –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
  --generate-report     –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å HTML –æ—Ç—á–µ—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  --output-dir DIR      –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤

{Colors.BOLD}üîß –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:{Colors.ENDC}

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
python3 orchestrator_main.py

# –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º  
python3 orchestrator_main.py --mode quick --generate-report

# –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–æ–º
python3 orchestrator_main.py --mode full --parallel --verbose

# –¢–æ–ª—å–∫–æ Dynamic SL/TP —Ç–µ—Å—Ç—ã
python3 orchestrator_main.py --mode dynamic-sltp --verbose

# –¢–æ–ª—å–∫–æ Position Tracker —Ç–µ—Å—Ç—ã
python3 orchestrator_main.py --mode position-tracker --verbose

# CI/CD —Ä–µ–∂–∏–º  
python3 orchestrator_main.py --mode ci --quiet --timeout 600

{Colors.BOLD}üìä DYNAMIC SL/TP –¢–ï–°–¢–´:{Colors.ENDC}

–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö Stop Loss/Take Profit:
- Unit —Ç–µ—Å—Ç—ã –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
- Integration —Ç–µ—Å—Ç—ã —Å ML —Å–∏–≥–Ω–∞–ª–∞–º–∏  
- Performance —Ç–µ—Å—Ç—ã —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–∞
- E2E —Ç–µ—Å—Ç—ã –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞
- Stress —Ç–µ—Å—Ç—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π

{Colors.BOLD}üìç POSITION TRACKER –¢–ï–°–¢–´:{Colors.ENDC}

–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Enhanced Position Tracker:
- Unit —Ç–µ—Å—Ç—ã –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
- Integration —Ç–µ—Å—Ç—ã —Å –ë–î –∏ –±–∏—Ä–∂–∞–º–∏
- Performance —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- API Integration —Ç–µ—Å—Ç—ã
- Error handling –∏ stress —Ç–µ—Å—Ç—ã

{Colors.BOLD}üìÅ –°–¢–†–£–ö–¢–£–†–ê –û–¢–ß–ï–¢–û–í:{Colors.ENDC}

test_results/
‚îú‚îÄ‚îÄ dashboard.html          # –ì–ª–∞–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥
‚îú‚îÄ‚îÄ detailed_report.json    # –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã  
‚îú‚îÄ‚îÄ coverage/              # Coverage –æ—Ç—á–µ—Ç—ã
‚îú‚îÄ‚îÄ performance/           # Performance –º–µ—Ç—Ä–∏–∫–∏
‚îî‚îÄ‚îÄ dynamic_sltp/         # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –¥–ª—è SL/TP

{Colors.GREEN}üí° –°–æ–≤–µ—Ç: –ù–∞—á–Ω–∏—Ç–µ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π{Colors.ENDC}
"""
    print(help_text)


async def run_cli_mode(mode: str, args):
    """–ó–∞–ø—É—Å–∫ –≤ CLI —Ä–µ–∂–∏–º–µ"""
    print(f"{Colors.BLUE}üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ: {mode}{Colors.ENDC}\n")

    orchestrator = UnifiedTestOrchestrator()

    if mode == "interactive":
        await orchestrator.run_interactive()

    elif mode == "quick":
        # –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã
        for key in orchestrator.components:
            orchestrator.components[key]["enabled"] = key in ["unit_tests", "smoke"]
        await orchestrator.run_cli("quick")

    elif mode == "standard":
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–µ—Å—Ç—ã
        for key in orchestrator.components:
            orchestrator.components[key]["enabled"] = key in [
                "unit_tests",
                "ml_tests",
                "database_tests",
            ]
        await orchestrator.run_cli("standard")

    elif mode == "full":
        # –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        await orchestrator.run_cli("full")

    elif mode == "dynamic-sltp":
        # –¢–æ–ª—å–∫–æ Dynamic SL/TP —Ç–µ—Å—Ç—ã
        await orchestrator.run_dynamic_sltp_suite()

    elif mode == "position-tracker":
        # –¢–æ–ª—å–∫–æ Position Tracker —Ç–µ—Å—Ç—ã
        await run_position_tracker_tests(args)

    elif mode == "performance":
        # Performance —Ç–µ—Å—Ç—ã
        for key in orchestrator.components:
            orchestrator.components[key]["enabled"] = key in [
                "performance_tests",
                "dynamic_sltp_performance_tests",
            ]
        await orchestrator.run_all_enabled()

    elif mode == "integration":
        # Integration —Ç–µ—Å—Ç—ã
        for key in orchestrator.components:
            orchestrator.components[key]["enabled"] = key in [
                "integration_tests",
                "dynamic_sltp_integration_tests",
                "dynamic_sltp_e2e_tests",
            ]
        await orchestrator.run_all_enabled()

    elif mode == "ci":
        # CI –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        for key in orchestrator.components:
            orchestrator.components[key]["enabled"] = key in [
                "unit_tests",
                "ml_tests",
                "code_quality",
                "security_check",
            ]
        await orchestrator.run_all_enabled()

    elif mode == "visual":
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
        orchestrator.generate_html_dashboard()
        print(f"{Colors.GREEN}‚úÖ Visual dashboard generated{Colors.ENDC}")
        return

    elif mode == "analysis":
        # Code analysis
        for key in orchestrator.components:
            orchestrator.components[key]["enabled"] = key in [
                "code_quality",
                "type_check",
                "security_check",
                "code_usage_analyzer_tests",
                "code_analyzer_validation_tests",
            ]
        await orchestrator.run_all_enabled()

    elif mode == "coverage":
        # Coverage –∞–Ω–∞–ª–∏–∑
        for key in orchestrator.components:
            orchestrator.components[key]["enabled"] = key in [
                "coverage_report",
                "unit_tests",
                "integration_tests",
            ]
        await orchestrator.run_all_enabled()

    else:
        print(f"{Colors.FAIL}‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: {mode}{Colors.ENDC}")
        print(f"{Colors.CYAN}üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤{Colors.ENDC}")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
    if args.generate_report:
        print(f"\n{Colors.GREEN}üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞...{Colors.ENDC}")
        orchestrator.generate_html_dashboard()

    print(f"\n{Colors.GREEN}‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!{Colors.ENDC}")
    print(f"{Colors.BLUE}üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: test_results/{Colors.ENDC}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="üéØ BOT_AI_V3 Unified Test Orchestrator",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º",
    )

    parser.add_argument(
        "--mode",
        choices=[
            "interactive",
            "quick",
            "standard",
            "full",
            "dynamic-sltp",
            "position-tracker",
            "performance",
            "integration",
            "ci",
            "visual",
            "analysis",
            "coverage",
        ],
        default="interactive",
        help="–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
    )

    parser.add_argument("--verbose", "-v", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")

    parser.add_argument("--quiet", "-q", action="store_true", help="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥")

    parser.add_argument(
        "--timeout",
        type=int,
        default=1800,
        help="–¢–∞–π–º–∞—É—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1800)",
    )

    parser.add_argument("--parallel", action="store_true", help="–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤")

    parser.add_argument(
        "--generate-report", action="store_true", help="–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å HTML –æ—Ç—á–µ—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
    )

    parser.add_argument(
        "--output-dir", default="test_results", help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤"
    )

    parser.add_argument("--help-detailed", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å–ø—Ä–∞–≤–∫—É")

    args = parser.parse_args()

    # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
    if args.help_detailed:
        print_help()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if args.verbose and args.quiet:
        print(
            f"{Colors.WARNING}‚ö†Ô∏è  –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å --verbose –∏ --quiet –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ{Colors.ENDC}"
        )
        return

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (–µ—Å–ª–∏ –Ω–µ quiet —Ä–µ–∂–∏–º)
    if not args.quiet:
        print_welcome()

    try:
        # –ó–∞–ø—É—Å–∫ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–µ–∂–∏–º–µ
        asyncio.run(run_cli_mode(args.mode, args))

    except KeyboardInterrupt:
        print(f"\n{Colors.WARNING}üõë –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Colors.ENDC}")
    except Exception as e:
        print(f"{Colors.FAIL}‚ùå –û—à–∏–±–∫–∞: {e}{Colors.ENDC}")
        if args.verbose:
            import traceback

            traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()
