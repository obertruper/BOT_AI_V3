#!/usr/bin/env python3
"""–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ confidence"""

import numpy as np

# –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –º–æ–¥–µ–ª–∏
# risk_metrics (outputs 16-19) - –æ–±—ã—á–Ω–æ –±–ª–∏–∑–∫–∏ –∫ 0
risk_metrics = np.array([0.01, 0.02, -0.01, 0.015])

# signal_strength - —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (0.25 - 1.0)
# –ï—Å–ª–∏ 3 –∏–∑ 4 —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ —Å–æ–≥–ª–∞—Å–Ω—ã: 3/4 = 0.75
signal_strength = 0.75

# avg_risk - —Å—Ä–µ–¥–Ω–µ–µ risk_metrics
avg_risk = float(np.mean(risk_metrics))

print("=" * 60)
print("–ê–ù–ê–õ–ò–ó –§–û–†–ú–£–õ–´ CONFIDENCE")
print("=" * 60)

print("\nüìä –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
print(f"  risk_metrics: {risk_metrics}")
print(f"  signal_strength: {signal_strength}")
print(f"  avg_risk: {avg_risk:.4f}")

# –ò–∑ ml_manager.py —Å—Ç—Ä–æ–∫–∏ 505-507, 633-635
# confidence_scores = risk_metrics
# model_confidence = np.mean(1.0 / (1.0 + np.exp(-confidence_scores)))
confidence_scores = risk_metrics
model_confidence = float(np.mean(1.0 / (1.0 + np.exp(-confidence_scores))))

print("\nüîç –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã:")
print(f"  confidence_scores: {confidence_scores}")
print(f"  sigmoid –∫–∞–∂–¥–æ–≥–æ: {1.0 / (1.0 + np.exp(-confidence_scores))}")
print(f"  model_confidence (—Å—Ä–µ–¥–Ω–µ–µ sigmoid): {model_confidence:.6f}")

# –ò–∑ ml_manager.py —Å—Ç—Ä–æ–∫–∏ 638-640
# combined_confidence = signal_strength * 0.4 + model_confidence * 0.4 + (1.0 - avg_risk) * 0.2
combined_confidence = (
    signal_strength * 0.4 + model_confidence * 0.4 + (1.0 - avg_risk) * 0.2
)

print("\nüìà –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç:")
print(
    "  combined_confidence = signal_strength * 0.4 + model_confidence * 0.4 + (1.0 - avg_risk) * 0.2"
)
print(
    f"  combined_confidence = {signal_strength:.2f} * 0.4 + {model_confidence:.4f} * 0.4 + {1.0 - avg_risk:.4f} * 0.2"
)
print(
    f"  combined_confidence = {signal_strength * 0.4:.4f} + {model_confidence * 0.4:.4f} + {(1.0 - avg_risk) * 0.2:.4f}"
)
print(f"  combined_confidence = {combined_confidence:.6f}")

print("\n" + "=" * 60)
print("–ü–†–û–ë–õ–ï–ú–ê –ù–ê–ô–î–ï–ù–ê!")
print("=" * 60)

print("\n–ï—Å–ª–∏ risk_metrics –±–ª–∏–∑–∫–∏ –∫ 0 (—á—Ç–æ –æ–±—ã—á–Ω–æ –∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç),")
print("—Ç–æ sigmoid(0) = 0.5, –∏ —Ñ–æ—Ä–º—É–ª–∞ –¥–∞–µ—Ç:")

# –¢–µ—Å—Ç —Å –Ω—É–ª–µ–≤—ã–º–∏ risk_metrics
risk_metrics_zero = np.array([0.0, 0.0, 0.0, 0.0])
model_conf_zero = float(np.mean(1.0 / (1.0 + np.exp(-risk_metrics_zero))))
avg_risk_zero = 0.0

# –†–∞–∑–Ω—ã–µ signal_strength
for ss in [0.25, 0.50, 0.75, 1.0]:
    conf = ss * 0.4 + model_conf_zero * 0.4 + (1.0 - avg_risk_zero) * 0.2
    print(f"  signal_strength={ss:.2f} ‚Üí confidence={conf:.4f}")

print("\nüí° –†–ï–®–ï–ù–ò–ï:")
print("1. risk_metrics –Ω–µ –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ confidence_scores")
print("2. –ù—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ confidence –≤—ã—Ö–æ–¥—ã –º–æ–¥–µ–ª–∏")
print("3. –ò–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã—Ö–æ–¥—ã –º–æ–¥–µ–ª–∏")

print("\nüéØ –§–æ—Ä–º—É–ª–∞ –ø—Ä–∏ risk_metrics ‚âà 0:")
print("  confidence ‚âà signal_strength * 0.4 + 0.5 * 0.4 + 1.0 * 0.2")
print("  confidence ‚âà signal_strength * 0.4 + 0.2 + 0.2")
print("  confidence ‚âà signal_strength * 0.4 + 0.4")
print("\n–ü—Ä–∏ signal_strength = 0.5: confidence = 0.5 * 0.4 + 0.4 = 0.6")
print("–ü—Ä–∏ signal_strength = 0.75: confidence = 0.75 * 0.4 + 0.4 = 0.7")
print("\n–í–°–ï –ó–ù–ê–ß–ï–ù–ò–Ø –ë–£–î–£–¢ –í –î–ò–ê–ü–ê–ó–û–ù–ï 0.5 - 0.8!")
