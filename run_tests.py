#!/usr/bin/env python3
"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ BOT_AI_V3 —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ü–µ–ø–æ—á–µ–∫ –∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å—é
"""

import argparse
import subprocess
import time


class Colors:
    """ANSI —Ü–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞"""

    HEADER = "\033[95m"
    OKBLUE = "\033[94m"
    OKCYAN = "\033[96m"
    OKGREEN = "\033[92m"
    WARNING = "\033[93m"
    FAIL = "\033[91m"
    ENDC = "\033[0m"
    BOLD = "\033[1m"
    UNDERLINE = "\033[4m"


class TestRunner:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π runner –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""

    def __init__(self, verbose: bool = True):
        self.verbose = verbose
        self.test_suites = {
            "unit": {
                "path": "tests/unit",
                "markers": "-m unit",
                "timeout": 300,
                "description": "Unit —Ç–µ—Å—Ç—ã –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤",
            },
            "ml": {
                "path": "tests/unit/ml",
                "markers": "-m ml",
                "timeout": 600,
                "description": "–¢–µ—Å—Ç—ã Machine Learning –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤",
            },
            "database": {
                "path": "tests/unit/database",
                "markers": "-m 'unit and not slow'",
                "timeout": 300,
                "description": "–¢–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
            },
            "integration": {
                "path": "tests/integration",
                "markers": "-m integration",
                "timeout": 900,
                "description": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã",
            },
            "performance": {
                "path": "tests/performance",
                "markers": "-m performance",
                "timeout": 1200,
                "description": "Performance –∏ load —Ç–µ—Å—Ç—ã",
            },
            "smoke": {
                "path": "tests",
                "markers": "-m smoke",
                "timeout": 180,
                "description": "–ë—ã—Å—Ç—Ä—ã–µ smoke —Ç–µ—Å—Ç—ã",
            },
            # === DYNAMIC SL/TP TEST SUITES ===
            "dynamic_sltp_unit": {
                "path": "tests/unit/trading/orders/test_dynamic_sltp_calculator.py",
                "markers": "-m 'unit and sltp'",
                "timeout": 300,
                "description": "Dynamic SL/TP unit —Ç–µ—Å—Ç—ã",
            },
            "dynamic_sltp_integration": {
                "path": "tests/integration/test_dynamic_sltp_integration.py",
                "markers": "-m 'integration and sltp'",
                "timeout": 600,
                "description": "Dynamic SL/TP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã",
            },
            "dynamic_sltp_e2e": {
                "path": "tests/integration/test_dynamic_sltp_e2e.py",
                "markers": "-m 'e2e and sltp'",
                "timeout": 900,
                "description": "Dynamic SL/TP end-to-end —Ç–µ—Å—Ç—ã",
            },
            "dynamic_sltp_performance": {
                "path": "tests/performance/test_dynamic_sltp_performance.py",
                "markers": "-m 'performance and sltp'",
                "timeout": 1200,
                "description": "Dynamic SL/TP performance —Ç–µ—Å—Ç—ã",
            },
            "dynamic_sltp_all": {
                "path": "tests/unit/trading/orders/test_dynamic_sltp_calculator.py tests/integration/test_dynamic_sltp_integration.py tests/integration/test_dynamic_sltp_e2e.py",
                "markers": "-m sltp",
                "timeout": 1500,
                "description": "–ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä Dynamic SL/TP —Ç–µ—Å—Ç–æ–≤",
            },
        }

        # –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ü–µ–ø–æ—á–∫–∏
        self.chains = {
            "quick": ["smoke", "unit"],
            "standard": ["unit", "ml", "database"],
            "full": ["unit", "ml", "database", "integration", "performance"],
            "ml-focus": ["ml", "database", "integration"],
            "ci": ["smoke", "unit", "ml"],
            # Dynamic SL/TP chains
            "dynamic_sltp_quick": ["dynamic_sltp_unit", "dynamic_sltp_integration"],
            "dynamic_sltp_complete": ["dynamic_sltp_unit", "dynamic_sltp_integration", "dynamic_sltp_e2e"],
            "dynamic_sltp_full": ["dynamic_sltp_unit", "dynamic_sltp_integration", "dynamic_sltp_e2e", "dynamic_sltp_performance"],
        }

    def print_header(self, text: str):
        """–í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        print(f"\n{Colors.HEADER}{'=' * 80}{Colors.ENDC}")
        print(f"{Colors.HEADER}{Colors.BOLD}{text.center(80)}{Colors.ENDC}")
        print(f"{Colors.HEADER}{'=' * 80}{Colors.ENDC}\n")

    def print_suite_info(self, suite_name: str):
        """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–±–æ—Ä–µ —Ç–µ—Å—Ç–æ–≤"""
        suite = self.test_suites[suite_name]
        print(f"{Colors.OKBLUE}üì¶ –ù–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤:{Colors.ENDC} {suite_name}")
        print(f"{Colors.OKBLUE}üìÑ –û–ø–∏—Å–∞–Ω–∏–µ:{Colors.ENDC} {suite['description']}")
        print(f"{Colors.OKBLUE}üìÅ –ü—É—Ç—å:{Colors.ENDC} {suite['path']}")
        print(f"{Colors.OKBLUE}üè∑Ô∏è  –ú–∞—Ä–∫–µ—Ä—ã:{Colors.ENDC} {suite['markers']}")
        print(f"{Colors.OKBLUE}‚è±Ô∏è  –¢–∞–π–º–∞—É—Ç:{Colors.ENDC} {suite['timeout']}s\n")

    def run_suite(self, suite_name: str, extra_args: list[str] = None) -> tuple[bool, float, dict]:
        """–ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤"""
        if suite_name not in self.test_suites:
            print(f"{Colors.FAIL}‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤: {suite_name}{Colors.ENDC}")
            return False, 0.0, {}

        suite = self.test_suites[suite_name]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        cmd = [
            "pytest",
            suite["path"],
            suite["markers"],
            "-v" if self.verbose else "-q",
            "--tb=short",
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        if extra_args:
            cmd.extend(extra_args)

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        start_time = time.time()

        if self.verbose:
            print(f"{Colors.OKCYAN}üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã:{Colors.ENDC} {' '.join(cmd)}\n")

        result = subprocess.run(cmd, capture_output=True, text=True)
        duration = time.time() - start_time

        # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        success = result.returncode == 0
        stats = self._parse_test_results(suite_name)

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if success:
            print(f"\n{Colors.OKGREEN}‚úÖ {suite_name} —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!{Colors.ENDC}")
        else:
            print(f"\n{Colors.FAIL}‚ùå {suite_name} —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã!{Colors.ENDC}")
            if result.stderr:
                print(f"{Colors.WARNING}–û—à–∏–±–∫–∏:{Colors.ENDC}\n{result.stderr}")

        return success, duration, stats

    def _parse_test_results(self, suite_name: str) -> dict:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –≤—ã–≤–æ–¥–∞ pytest"""
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å stdout
        stats = {"total": 0, "passed": 0, "failed": 0, "skipped": 0, "errors": 0}

        return stats

    def run_chain(self, chain: list[str], stop_on_failure: bool = True) -> dict:
        """–ó–∞–ø—É—Å–∫ —Ü–µ–ø–æ—á–∫–∏ —Ç–µ—Å—Ç–æ–≤"""
        results = {}
        total_start = time.time()

        self.print_header(f"–ó–∞–ø—É—Å–∫ —Ü–µ–ø–æ—á–∫–∏ —Ç–µ—Å—Ç–æ–≤: {' ‚Üí '.join(chain)}")

        for i, suite in enumerate(chain, 1):
            print(f"\n{Colors.BOLD}[{i}/{len(chain)}] –ó–∞–ø—É—Å–∫ {suite} —Ç–µ—Å—Ç–æ–≤{Colors.ENDC}")
            print("-" * 60)

            self.print_suite_info(suite)

            success, duration, stats = self.run_suite(suite)

            results[suite] = {"success": success, "duration": duration, "stats": stats}

            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._print_suite_stats(suite, stats, duration)

            if not success and stop_on_failure:
                print(f"\n{Colors.FAIL}‚õî –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ø–æ—á–∫–∏ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤ {suite}{Colors.ENDC}")
                break

        total_duration = time.time() - total_start
        self._print_final_report(results, total_duration)

        return results

    def _print_suite_stats(self, suite_name: str, stats: dict, duration: float):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤"""
        print(f"\n{Colors.BOLD}üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {suite_name}:{Colors.ENDC}")
        print(f"  –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {stats['total']}")
        print(f"  ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {stats['passed']}")
        print(f"  ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {stats['failed']}")
        print(f"  ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats['skipped']}")
        print(f"  üí• –û—à–∏–±–æ–∫: {stats['errors']}")
        print(f"  ‚è±Ô∏è  –í—Ä–µ–º—è: {duration:.2f}s")

    def _print_final_report(self, results: dict, total_duration: float):
        """–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º —Ç–µ—Å—Ç–∞–º"""
        self.print_header("–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç")

        total_tests = sum(r["stats"]["total"] for r in results.values())
        total_passed = sum(r["stats"]["passed"] for r in results.values())
        total_failed = sum(r["stats"]["failed"] for r in results.values())
        total_skipped = sum(r["stats"]["skipped"] for r in results.values())

        print(f"{Colors.BOLD}üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:{Colors.ENDC}")
        print(f"  –í—Å–µ–≥–æ –Ω–∞–±–æ—Ä–æ–≤: {len(results)}")
        print(f"  –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"  ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {total_passed}")
        print(f"  ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_failed}")
        print(f"  ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {total_skipped}")
        print(f"  ‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_duration:.2f}s")

        print(f"\n{Colors.BOLD}üìã –î–µ—Ç–∞–ª–∏ –ø–æ –Ω–∞–±–æ—Ä–∞–º:{Colors.ENDC}")
        for suite, result in results.items():
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"  {status} {suite}: {result['duration']:.2f}s")

        # –ò—Ç–æ–≥–æ–≤—ã–π –≤–µ—Ä–¥–∏–∫—Ç
        all_passed = all(r["success"] for r in results.values())
        if all_passed:
            print(f"\n{Colors.OKGREEN}{Colors.BOLD}üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!{Colors.ENDC}")
        else:
            print(f"\n{Colors.FAIL}{Colors.BOLD}‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã!{Colors.ENDC}")

    def list_suites(self):
        """–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        self.print_header("–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–±–æ—Ä—ã —Ç–µ—Å—Ç–æ–≤")

        for name, suite in self.test_suites.items():
            print(f"{Colors.BOLD}{name}:{Colors.ENDC}")
            print(f"  {suite['description']}")
            print(f"  –ü—É—Ç—å: {suite['path']}")
            print(f"  –¢–∞–π–º–∞—É—Ç: {suite['timeout']}s\n")

    def list_chains(self):
        """–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ü–µ–ø–æ—á–µ–∫"""
        self.print_header("–ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ü–µ–ø–æ—á–∫–∏ —Ç–µ—Å—Ç–æ–≤")

        for name, chain in self.chains.items():
            print(f"{Colors.BOLD}{name}:{Colors.ENDC} {' ‚Üí '.join(chain)}")

    def generate_coverage_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ–∫—Ä—ã—Ç–∏—è"""
        print(f"\n{Colors.OKCYAN}üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ–∫—Ä—ã—Ç–∏—è...{Colors.ENDC}")

        cmd = ["pytest", "--cov=.", "--cov-report=html", "--cov-report=term"]
        subprocess.run(cmd)

        print(f"\n{Colors.OKGREEN}‚úÖ –û—Ç—á–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω –≤ htmlcov/index.html{Colors.ENDC}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ BOT_AI_V3",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python run_tests.py --suite unit              # –ó–∞–ø—É—Å—Ç–∏—Ç—å unit —Ç–µ—Å—Ç—ã
  python run_tests.py --chain quick             # –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ã—Å—Ç—Ä—É—é —Ü–µ–ø–æ—á–∫—É
  python run_tests.py --chain unit,ml,database  # –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞
  python run_tests.py --list-suites             # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–±–æ—Ä—ã
  python run_tests.py --coverage                # –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏—è
        """,
    )

    parser.add_argument(
        "--suite",
        "-s",
        choices=["unit", "ml", "database", "integration", "performance", "smoke"],
        help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤",
    )

    parser.add_argument(
        "--chain",
        "-c",
        help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ü–µ–ø–æ—á–∫—É —Ç–µ—Å—Ç–æ–≤ (–ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –∏–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)",
    )

    parser.add_argument(
        "--list-suites",
        "-ls",
        action="store_true",
        help="–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–±–æ—Ä—ã —Ç–µ—Å—Ç–æ–≤",
    )

    parser.add_argument(
        "--list-chains",
        "-lc",
        action="store_true",
        help="–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ü–µ–ø–æ—á–∫–∏",
    )

    parser.add_argument(
        "--coverage",
        action="store_true",
        help="–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏—è –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤",
    )

    parser.add_argument(
        "--no-stop", action="store_true", help="–ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ü–µ–ø–æ—á–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ"
    )

    parser.add_argument("--quiet", "-q", action="store_true", help="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥")

    args = parser.parse_args()

    # –°–æ–∑–¥–∞–µ–º runner
    runner = TestRunner(verbose=not args.quiet)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if args.list_suites:
        runner.list_suites()
        return

    if args.list_chains:
        runner.list_chains()
        return

    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    if args.suite:
        # –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞
        success, duration, stats = runner.run_suite(args.suite)
        runner._print_suite_stats(args.suite, stats, duration)

    elif args.chain:
        # –ó–∞–ø—É—Å–∫ —Ü–µ–ø–æ—á–∫–∏
        if args.chain in runner.chains:
            # –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞
            chain = runner.chains[args.chain]
        else:
            # –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞
            chain = [s.strip() for s in args.chain.split(",")]

        runner.run_chain(chain, stop_on_failure=not args.no_stop)

    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ü–µ–ø–æ—á–∫—É
        runner.run_chain(runner.chains["standard"], stop_on_failure=not args.no_stop)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ–∫—Ä—ã—Ç–∏—è
    if args.coverage:
        runner.generate_coverage_report()


if __name__ == "__main__":
    main()
