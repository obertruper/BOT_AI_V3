#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –æ—à–∏–±–∫–∏ sqrt –≤ ML pipeline
"""

import asyncio
import traceback

import numpy as np
import pandas as pd

from core.logger import setup_logger

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
from ml.logic.archive_old_versions.feature_engineering_v2 import FeatureEngineer

logger = setup_logger(__name__)


async def test_real_sqrt_error():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π pipeline, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç –æ—à–∏–±–∫—É sqrt"""

    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ML pipeline —Å FeatureEngineer...")

    try:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –≤ —Å–∏—Å—Ç–µ–º–µ
        dates = pd.date_range(start="2024-01-01", periods=500, freq="15min")

        np.random.seed(42)
        close_prices = 50000 + np.cumsum(np.random.randn(500) * 100)

        df = pd.DataFrame(
            {
                "datetime": dates,
                "open": close_prices * (1 + np.random.randn(500) * 0.001),
                "high": close_prices * (1 + np.abs(np.random.randn(500)) * 0.002),
                "low": close_prices * (1 - np.abs(np.random.randn(500)) * 0.002),
                "close": close_prices,
                "volume": np.random.rand(500) * 1000000,
                "turnover": np.random.rand(500) * 50000000,
                "symbol": "BTCUSDT",
            }
        )

        df.set_index("datetime", inplace=True)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π DataFrame: {df.shape}")

        # –°–æ–∑–¥–∞–µ–º FeatureEngineer –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
        config = {"inference_mode": True, "disable_progress": False}

        feature_engineer = FeatureEngineer(config, inference_mode=True)
        print("‚úÖ FeatureEngineer —Å–æ–∑–¥–∞–Ω")

        # –ü—ã—Ç–∞–µ–º—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º generate_features...")

        features_result = feature_engineer.generate_features(df)

        print(f"‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã: {type(features_result)}")

        if isinstance(features_result, pd.DataFrame):
            print(f"üìä Shape: {features_result.shape}")
            print(f"üìä Columns: {len(features_result.columns)}")
            print(f"üìä NaN count: {features_result.isna().sum().sum()}")
        elif isinstance(features_result, np.ndarray):
            print(f"üìä Array shape: {features_result.shape}")
            print(f"üìä NaN count: {np.isnan(features_result).sum()}")

    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –í –†–ï–ê–õ–¨–ù–û–ú PIPELINE: {e}")
        print("üìú –ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:")
        traceback.print_exc()

        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –æ—à–∏–±–∫–∏
        if "sqrt" in str(e).lower():
            print("\nüéØ –≠—Ç–æ –æ—à–∏–±–∫–∞ sqrt! –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...")

    print("\n‚úÖ –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ pipeline –∑–∞–≤–µ—Ä—à–µ–Ω")


async def test_individual_methods():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã FeatureEngineer"""

    print("\nüî¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã FeatureEngineer...")

    try:
        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        dates = pd.date_range(start="2024-01-01", periods=100, freq="15min")

        df = pd.DataFrame(
            {
                "open": np.random.rand(100) * 50000,
                "high": np.random.rand(100) * 51000,
                "low": np.random.rand(100) * 49000,
                "close": np.random.rand(100) * 50000,
                "volume": np.random.rand(100) * 1000000,
                "symbol": "BTCUSDT",
            },
            index=dates,
        )

        feature_engineer = FeatureEngineer({}, inference_mode=True)

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º _create_volatility_features...")
        try:
            result = feature_engineer._create_volatility_features(df.copy())
            print(f"‚úÖ _create_volatility_features –ø—Ä–æ—à–µ–ª: {type(result)}")
        except Exception as e:
            print(f"‚ùå _create_volatility_features FAILED: {e}")
            traceback.print_exc()

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º _create_ml_optimized_features...")
        try:
            result = feature_engineer._create_ml_optimized_features(df.copy())
            print(f"‚úÖ _create_ml_optimized_features –ø—Ä–æ—à–µ–ª: {type(result)}")
        except Exception as e:
            print(f"‚ùå _create_ml_optimized_features FAILED: {e}")
            traceback.print_exc()

    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –º–µ—Ç–æ–¥–æ–≤: {e}")
        traceback.print_exc()


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ debug —Ç–µ—Å—Ç–∞ —Ä–µ–∞–ª—å–Ω–æ–π –æ—à–∏–±–∫–∏ sqrt...")
    asyncio.run(test_real_sqrt_error())
    asyncio.run(test_individual_methods())
