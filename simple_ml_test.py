#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ ML –ª–æ–≥–∏–∫–µ (–±–µ–∑ Redis –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
"""

import asyncio

import torch

from ml.ml_manager import MLManager

# –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
test_config = {
    "ml": {
        "model": {
            "device": "cpu",  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º CPU –¥–ª—è —Ç–µ—Å—Ç–∞
            "input_size": 240,
            "output_size": 20,
            "context_window": 96,
        },
        "model_directory": "models/saved",
        "min_confidence": 0.3,
        "min_signal_strength": 0.25,
        "risk_tolerance": "MEDIUM",
    }
}


async def test_interpretation():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""

    print("üß™ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏...")

    # –°–æ–∑–¥–∞–µ–º ML Manager —Å —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    ml_manager = MLManager(test_config)

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤—ã—Ö–æ–¥—ã –º–æ–¥–µ–ª–∏ (—Å–∏–º—É–ª–∏—Ä—É–µ–º)
    test_outputs = torch.FloatTensor(
        [
            [
                # future_returns (0-3)
                0.005,
                -0.002,
                0.008,
                0.001,
                # direction_logits (4-15) - 4 —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ √ó 3 –∫–ª–∞—Å—Å–∞
                # 15m: [LONG=1.5, SHORT=-0.5, NEUTRAL=-1.0] -> –∫–ª–∞—Å—Å 0 (LONG)
                1.5,
                -0.5,
                -1.0,
                # 1h: [LONG=0.8, SHORT=-0.3, NEUTRAL=-0.8] -> –∫–ª–∞—Å—Å 0 (LONG)
                0.8,
                -0.3,
                -0.8,
                # 4h: [LONG=2.0, SHORT=-1.0, NEUTRAL=-1.5] -> –∫–ª–∞—Å—Å 0 (LONG)
                2.0,
                -1.0,
                -1.5,
                # 12h: [LONG=0.3, SHORT=1.8, NEUTRAL=-0.5] -> –∫–ª–∞—Å—Å 1 (SHORT)
                0.3,
                1.8,
                -0.5,
                # risk_metrics (16-19)
                0.1,
                0.2,
                0.15,
                0.18,
            ]
        ]
    )

    print("\nüìä –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print("   Future returns: [0.005, -0.002, 0.008, 0.001]")
    print("   Direction expectations:")
    print("     15m: LONG (–∫–ª–∞—Å—Å 0) - –ª–æ–≥–∏—Ç—ã [1.5, -0.5, -1.0]")
    print("     1h:  LONG (–∫–ª–∞—Å—Å 0) - –ª–æ–≥–∏—Ç—ã [0.8, -0.3, -0.8]")
    print("     4h:  LONG (–∫–ª–∞—Å—Å 0) - –ª–æ–≥–∏—Ç—ã [2.0, -1.0, -1.5]")
    print("     12h: SHORT (–∫–ª–∞—Å—Å 1) - –ª–æ–≥–∏—Ç—ã [0.3, 1.8, -0.5]")

    # –í—ã–∑—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
    result = ml_manager._interpret_predictions(test_outputs)

    print("\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –ò–ù–¢–ï–†–ü–†–ï–¢–ê–¶–ò–ò:")
    print(f"   üéØ –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞: {result.get('signal_type', 'UNKNOWN')}")
    print(f"   üî• –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {result.get('signal_strength', 0):.3f}")
    print(f"   üé≤ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.get('confidence', 0):.1%}")
    print(f"   ‚ö° Focal weighting –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {'focal' in str(result)}")
    print("   üéØ Multiframe confirmation: –µ—Å—Ç—å –±–æ–Ω—É—Å")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
    print("\nüìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º:")
    print(f"   15m: {result.get('direction_15m', 'UNKNOWN')}")
    print(f"   1h:  {result.get('direction_1h', 'UNKNOWN')}")
    print(f"   4h:  {result.get('direction_4h', 'UNKNOWN')}")
    print(f"   12h: {result.get('direction_12h', 'UNKNOWN')}")

    # SL/TP
    print("\nüõ°Ô∏è Risk Management:")
    if result.get("stop_loss_pct") is not None:
        print(f"   Stop Loss: {result.get('stop_loss_pct', 0):.1%}")
        print(f"   Take Profit: {result.get('take_profit_pct', 0):.1%}")
    else:
        print("   SL/TP: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

    # –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    expected_directions = ["LONG", "LONG", "LONG", "SHORT"]
    actual_directions = [
        result.get("direction_15m", ""),
        result.get("direction_1h", ""),
        result.get("direction_4h", ""),
        result.get("direction_12h", ""),
    ]

    print("\nüîç –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:")

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∫–ª–∞—Å—Å–æ–≤
    directions_correct = expected_directions == actual_directions
    print(f"   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–ª–∞—Å—Å–æ–≤: {directions_correct}")
    if not directions_correct:
        print(f"      –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_directions}")
        print(f"      –ü–æ–ª—É—á–µ–Ω–æ:  {actual_directions}")

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å LONG, —Ç–∞–∫ –∫–∞–∫ 3 –∏–∑ 4 LONG)
    signal_type = result.get("signal_type", "")
    expected_signal = "LONG"  # –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ LONG
    signal_correct = signal_type == expected_signal
    print(f"   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏—Ç–æ–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª: {signal_correct} ({signal_type})")

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–æ–≤
    confidence = result.get("confidence", 0)
    strength = result.get("signal_strength", 0)

    confidence_ok = confidence >= 0.3 if signal_type in ["LONG", "SHORT"] else confidence >= 0.25
    strength_ok = strength >= 0.25

    print(f"   ‚úÖ –ü–æ—Ä–æ–≥–∏ confidence (‚â•30%): {confidence_ok} ({confidence:.1%})")
    print(f"   ‚úÖ –ü–æ—Ä–æ–≥–∏ strength (‚â•25%): {strength_ok} ({strength:.1%})")

    # –ò—Ç–æ–≥
    all_correct = directions_correct and signal_correct and confidence_ok and strength_ok
    print(
        f"\nüèÅ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {'‚úÖ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢' if all_correct else '‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´'}"
    )

    return all_correct


if __name__ == "__main__":
    result = asyncio.run(test_interpretation())
    print(f"\n{'=' * 60}")
    print(f"üéØ –°–¢–ê–¢–£–° –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô: {'–£–°–ü–ï–®–ù–û' if result else '–¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê'}")
    print(f"{'=' * 60}")
