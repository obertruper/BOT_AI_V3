#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ feature engineering - —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω—É–ª–µ–≤–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–∏
"""

import asyncio
import sys
from pathlib import Path

import numpy as np
import pandas as pd

sys.path.insert(0, str(Path(__file__).parent))


async def fix_features():
    """–ê–Ω–∞–ª–∏–∑ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏"""

    print("=" * 80)
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï FEATURE ENGINEERING")
    print("=" * 80)

    from database.connections.postgres import AsyncPGPool

    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
    candles = await AsyncPGPool.fetch(
        """
        SELECT timestamp, open, high, low, close, volume
        FROM raw_market_data
        WHERE symbol = 'BTCUSDT'
        ORDER BY timestamp DESC
        LIMIT 200
    """
    )

    df = pd.DataFrame([dict(row) for row in candles])
    df = df.sort_values("timestamp")

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã
    for col in ["open", "high", "low", "close", "volume"]:
        df[col] = pd.to_numeric(df[col], errors="coerce")

    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π")
    print(f"   –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö: {df.dtypes.to_dict()}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:")

    # 1. Log returns - –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ç–∏–ø–∞–º–∏
    print("\n1. Log Returns:")
    try:
        close_prices = df["close"].astype(float)
        log_returns_1 = np.log(close_prices / close_prices.shift(1))
        print(
            f"   ‚úÖ log_returns_1: min={log_returns_1.min():.6f}, max={log_returns_1.max():.6f}, std={log_returns_1.std():.6f}"
        )
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

    # 2. SMA - –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –¥–∏—Å–ø–µ—Ä—Å–∏—é
    print("\n2. Simple Moving Averages:")
    for period in [5, 10, 20]:
        sma = df["close"].rolling(window=period).mean()
        print(f"   SMA_{period}: std={sma.std():.2f}, –ø–æ—Å–ª–µ–¥–Ω–µ–µ={sma.iloc[-1]:.2f}")

    # 3. RSI
    print("\n3. RSI:")
    try:
        import ta

        rsi = ta.momentum.RSIIndicator(close=df["close"], window=14).rsi()
        print(f"   RSI: min={rsi.min():.2f}, max={rsi.max():.2f}, std={rsi.std():.2f}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

    # 4. MACD
    print("\n4. MACD:")
    try:
        macd = ta.trend.MACD(close=df["close"])
        macd_line = macd.macd()
        signal_line = macd.macd_signal()
        macd_diff = macd.macd_diff()
        print(f"   MACD: std={macd_line.std():.2f}")
        print(f"   Signal: std={signal_line.std():.2f}")
        print(f"   Histogram: std={macd_diff.std():.2f}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

    # 5. Bollinger Bands
    print("\n5. Bollinger Bands:")
    try:
        bb = ta.volatility.BollingerBands(close=df["close"], window=20, window_dev=2)
        bb_upper = bb.bollinger_hband()
        bb_lower = bb.bollinger_lband()
        bb_width = bb_upper - bb_lower
        print(f"   BB Width: std={bb_width.std():.2f}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

    # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä–∏–º –ø–æ–ª–Ω—ã–π feature engineering
    print("\n" + "=" * 80)
    print("üìä –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó FEATURE ENGINEERING")
    print("=" * 80)

    from core.config.config_manager import ConfigManager
    from ml.logic.feature_engineering_training import FeatureEngineer

    config_manager = ConfigManager()
    config = {
        "ml": config_manager.get_ml_config(),
        "system": config_manager.get_system_config(),
        "trading": config_manager.get_config("trading", {}),
    }

    fe = FeatureEngineer(config)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É symbol
    df["symbol"] = "BTCUSDT"

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
    features = fe.create_features(df)

    if features is not None and len(features) > 0:
        print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω–æ {features.shape[1]} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

        # –ê–Ω–∞–ª–∏–∑ –¥–∏—Å–ø–µ—Ä—Å–∏–∏
        features_np = features.values.astype(np.float64)
        std_by_col = np.std(features_np, axis=0)

        zero_var_mask = std_by_col < 1e-6
        zero_var_count = zero_var_mask.sum()

        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
        print(f"   –í—Å–µ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(std_by_col)}")
        print(f"   –° –Ω—É–ª–µ–≤–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–µ–π: {zero_var_count}")
        print(f"   –° –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–µ–π: {len(std_by_col) - zero_var_count}")

        if zero_var_count > 0:
            print("\n‚ö†Ô∏è –ü—Ä–∏–∑–Ω–∞–∫–∏ —Å –Ω—É–ª–µ–≤–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–µ–π:")
            zero_var_indices = np.where(zero_var_mask)[0]
            for i in zero_var_indices[:20]:  # –ü–µ—Ä–≤—ã–µ 20
                col_name = features.columns[i]
                col_values = features_np[:, i]
                print(f"   {col_name}: –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è = {col_values[0]:.6f}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–Ω—É–ª–µ–≤—ã–µ
        nonzero_var_indices = np.where(~zero_var_mask)[0]
        if len(nonzero_var_indices) > 0:
            print("\n‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–∏ —Å –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–µ–π:")
            for i in nonzero_var_indices[:10]:  # –ü–µ—Ä–≤—ã–µ 10
                col_name = features.columns[i]
                col_std = std_by_col[i]
                print(f"   {col_name}: std = {col_std:.6f}")

    print("\n" + "=" * 80)
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("=" * 80)

    print(
        """
–û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞: –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã.

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
1. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
2. –û—à–∏–±–∫–∏ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ ta
3. –ü—Ä–æ–±–ª–µ–º—ã —Å —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö (Decimal vs float)

–†–µ—à–µ–Ω–∏–µ:
1. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞ (float64)
2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
3. –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
"""
    )


if __name__ == "__main__":
    asyncio.run(fix_features())
