#!/usr/bin/env python3
"""
–í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è ML —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import asyncio
import os
import shutil
from datetime import datetime

from dotenv import load_dotenv

load_dotenv()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ["PGPORT"] = "5555"
os.environ["PGUSER"] = "obertruper"
os.environ["PGDATABASE"] = "bot_trading_v3"


async def enable_ml_signals():
    """–í–∫–ª—é—á–µ–Ω–∏–µ ML —Å–∏–≥–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""

    print(f"\nüîß –í–ö–õ–Æ–ß–ï–ù–ò–ï ML –°–ò–ì–ù–ê–õ–û–í - {datetime.now().strftime('%H:%M:%S')}")
    print("=" * 60)

    try:
        # 1. –û–±–Ω–æ–≤–ª—è–µ–º ml_config.yaml –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤
        print("\n1Ô∏è‚É£ –û–ë–ù–û–í–õ–ï–ù–ò–ï ML –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:")

        import yaml

        ml_config_path = "config/ml/ml_config.yaml"

        # –î–µ–ª–∞–µ–º –±—ç–∫–∞–ø
        shutil.copy(ml_config_path, ml_config_path + ".backup")
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {ml_config_path}.backup")

        # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open(ml_config_path, "r") as f:
            ml_config = yaml.safe_load(f)

        # –°–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        old_confidence = ml_config.get("trading", {}).get(
            "min_confidence_threshold", 0.6
        )
        if "trading" not in ml_config:
            ml_config["trading"] = {}
        ml_config["trading"]["min_confidence_threshold"] = 0.3  # –°–Ω–∏–∂–∞–µ–º –¥–æ 0.3
        ml_config["trading"]["max_daily_trades"] = 100  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if "signal_generation" not in ml_config:
            ml_config["signal_generation"] = {}
        ml_config["signal_generation"]["interval_seconds"] = (
            30  # –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫ –≤–º–µ—Å—Ç–æ 60
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        with open(ml_config_path, "w") as f:
            yaml.dump(ml_config, f, default_flow_style=False)

        print(f"   ‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {old_confidence:.0%} ‚Üí 30%")
        print("   ‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: 60 —Å–µ–∫ ‚Üí 30 —Å–µ–∫")

        # 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤
        print("\n2Ô∏è‚É£ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –ì–ï–ù–ï–†–ê–¢–û–†–ê:")

        test_script = '''#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä ML —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import asyncio
import os
import random
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()

os.environ['PGPORT'] = '5555'
os.environ['PGUSER'] = 'obertruper'
os.environ['PGDATABASE'] = 'bot_trading_v3'


async def generate_test_signals():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö ML —Å–∏–≥–Ω–∞–ª–æ–≤"""
    from database.connections.postgres import AsyncPGPool

    pool = await AsyncPGPool.get_pool()

    print(f"\\nü§ñ –¢–ï–°–¢–û–í–´–ô ML –ì–ï–ù–ï–†–ê–¢–û–† –ó–ê–ü–£–©–ï–ù - {datetime.now().strftime('%H:%M:%S')}")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\\n")

    symbols = ['BTCUSDT', 'ETHUSDT', 'SOLUSDT']

    try:
        while True:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            symbol = random.choice(symbols)

            # –°–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–±–æ–ª—å—à–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏)
            rand = random.random()
            if rand < 0.2:  # 20% LONG
                signal_type = 'LONG'
                confidence = random.uniform(0.35, 0.7)
                strength = random.uniform(0.02, 0.05)
            elif rand < 0.4:  # 20% SHORT
                signal_type = 'SHORT'
                confidence = random.uniform(0.35, 0.7)
                strength = random.uniform(0.02, 0.05)
            else:  # 60% NEUTRAL
                signal_type = 'NEUTRAL'
                confidence = random.uniform(0.25, 0.4)
                strength = random.uniform(0.001, 0.02)

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            price_data = await pool.fetchrow("""
                SELECT close
                FROM raw_market_data
                WHERE symbol = $1 AND interval_minutes = 15
                ORDER BY datetime DESC
                LIMIT 1
            """, symbol)

            if price_data:
                current_price = float(price_data['close'])

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª
                await pool.execute("""
                    INSERT INTO signals
                    (symbol, signal_type, strength, confidence, suggested_price,
                     strategy_name, created_at, extra_data)
                    VALUES ($1, $2, $3, $4, $5, $6, NOW(), $7)
                """,
                    symbol,
                    signal_type,
                    strength,
                    confidence,
                    current_price,
                    'ML_Test_Generator',
                    '{"test": true}'
                )

                if signal_type != 'NEUTRAL':
                    print(f"[{datetime.now().strftime('%H:%M:%S')}] "
                          f"{'üü¢' if signal_type == 'LONG' else 'üî¥'} "
                          f"{symbol}: {signal_type} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.0%})")

            # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–∏–≥–Ω–∞–ª–æ–º
            await asyncio.sleep(random.uniform(10, 30))

    except KeyboardInterrupt:
        print("\\n‚èπÔ∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        await AsyncPGPool.close_pool()


if __name__ == "__main__":
    asyncio.run(generate_test_signals())
'''

        with open("test_signal_generator.py", "w") as f:
            f.write(test_script)

        os.chmod("test_signal_generator.py", 0o755)
        print("   ‚úÖ –°–æ–∑–¥–∞–Ω test_signal_generator.py")

        # 3. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        print("\n3Ô∏è‚É£ –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("\n   1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        print("      python unified_launcher.py")
        print("\n   2. –í –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä:")
        print("      python test_signal_generator.py")
        print("\n   3. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print("      python monitor_simple.py")

        print("\n‚ö†Ô∏è  –í–ê–ñ–ù–û: –≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
        print("   –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        print("   cp config/ml/ml_config.yaml.backup config/ml/ml_config.yaml")

        print("\n" + "=" * 60)

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(enable_ml_signals())
