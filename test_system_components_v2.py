#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ v2
"""

import asyncio
import logging
from datetime import datetime
from decimal import Decimal

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def test_components():
    """–¢–µ—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏"""

    results = {}

    # 1. –¢–µ—Å—Ç WorkerCoordinator
    try:
        logger.info("\n=== –¢–µ—Å—Ç WorkerCoordinator ===")
        from core.system.worker_coordinator import worker_coordinator

        await worker_coordinator.start()
        worker_id = await worker_coordinator.register_worker(
            worker_type="test_worker", metadata={"test": True}
        )

        if worker_id:
            await worker_coordinator.heartbeat(worker_id, status="running", active_tasks=1)
            await worker_coordinator.unregister_worker(worker_id)
            logger.info("‚úÖ WorkerCoordinator —Ä–∞–±–æ—Ç–∞–µ—Ç")
            results["WorkerCoordinator"] = "OK"
        else:
            logger.warning("‚ö†Ô∏è WorkerCoordinator - –¥—É–±–ª–∏–∫–∞—Ç")
            results["WorkerCoordinator"] = "DUPLICATE"

        await worker_coordinator.stop()

    except Exception as e:
        logger.error(f"‚ùå WorkerCoordinator: {e}")
        results["WorkerCoordinator"] = f"ERROR: {e}"

    # 2. –¢–µ—Å—Ç SignalDeduplicator
    try:
        logger.info("\n=== –¢–µ—Å—Ç SignalDeduplicator ===")
        from core.system.signal_deduplicator import signal_deduplicator

        signal = {
            "symbol": "BTCUSDT",
            "direction": "BUY",
            "strategy": "test",
            "timestamp": datetime.now(),
            "signal_strength": 0.8,
            "price_level": 50000,
        }

        is_unique = await signal_deduplicator.check_and_register_signal(signal)
        is_duplicate = await signal_deduplicator.check_and_register_signal(signal)

        if is_unique and not is_duplicate:
            logger.info("‚úÖ SignalDeduplicator —Ä–∞–±–æ—Ç–∞–µ—Ç")
            results["SignalDeduplicator"] = "OK"
        else:
            logger.error("‚ùå SignalDeduplicator –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            results["SignalDeduplicator"] = "FAILED"

    except Exception as e:
        logger.error(f"‚ùå SignalDeduplicator: {e}")
        results["SignalDeduplicator"] = f"ERROR: {e}"

    # 3. –¢–µ—Å—Ç BalanceManager
    try:
        logger.info("\n=== –¢–µ—Å—Ç BalanceManager ===")
        from core.system.balance_manager import balance_manager

        await balance_manager.start()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
        success = await balance_manager.update_balance(
            exchange="bybit",
            symbol="USDT",
            total=Decimal("1000"),
            available=Decimal("900"),
            locked=Decimal("100"),
        )

        if success:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            available, error = await balance_manager.check_balance_availability(
                exchange="bybit", symbol="USDT", amount=Decimal("100")
            )

            if available:
                logger.info("‚úÖ BalanceManager —Ä–∞–±–æ—Ç–∞–µ—Ç")
                results["BalanceManager"] = "OK"
            else:
                logger.warning(f"‚ö†Ô∏è BalanceManager: {error}")
                results["BalanceManager"] = f"WARNING: {error}"

        await balance_manager.stop()

    except Exception as e:
        logger.error(f"‚ùå BalanceManager: {e}")
        results["BalanceManager"] = f"ERROR: {e}"

    # 4. –¢–µ—Å—Ç RateLimiter
    try:
        logger.info("\n=== –¢–µ—Å—Ç RateLimiter ===")
        from core.system.rate_limiter import rate_limiter

        wait_time = await rate_limiter.acquire("bybit", "market_data")

        if wait_time >= 0:
            logger.info(f"‚úÖ RateLimiter —Ä–∞–±–æ—Ç–∞–µ—Ç (wait: {wait_time}s)")
            results["RateLimiter"] = "OK"
        else:
            logger.error("‚ùå RateLimiter –≤–µ—Ä–Ω—É–ª –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è")
            results["RateLimiter"] = "FAILED"

    except Exception as e:
        logger.error(f"‚ùå RateLimiter: {e}")
        results["RateLimiter"] = f"ERROR: {e}"

    # 5. –¢–µ—Å—Ç ProcessMonitor
    try:
        logger.info("\n=== –¢–µ—Å—Ç ProcessMonitor ===")
        from core.system.process_monitor import process_monitor

        await process_monitor.start()

        success = await process_monitor.register_component(
            "test_component", metadata={"test": True}
        )

        if success:
            await process_monitor.heartbeat("test_component", status="healthy", active_tasks=1)

            health = process_monitor.get_component_health("test_component")

            if health and health.get("status"):
                logger.info("‚úÖ ProcessMonitor —Ä–∞–±–æ—Ç–∞–µ—Ç")
                results["ProcessMonitor"] = "OK"
            else:
                logger.warning("‚ö†Ô∏è ProcessMonitor - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–¥–æ—Ä–æ–≤—å–µ")
                results["ProcessMonitor"] = "WARNING"

        await process_monitor.stop()

    except Exception as e:
        logger.error(f"‚ùå ProcessMonitor: {e}")
        results["ProcessMonitor"] = f"ERROR: {e}"

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info("\n" + "=" * 60)
    logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    logger.info("=" * 60)

    ok_count = sum(1 for v in results.values() if v == "OK")
    total = len(results)

    for component, status in results.items():
        if status == "OK":
            logger.info(f"‚úÖ {component}: {status}")
        elif "WARNING" in str(status) or status == "DUPLICATE":
            logger.warning(f"‚ö†Ô∏è  {component}: {status}")
        else:
            logger.error(f"‚ùå {component}: {status}")

    logger.info(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {ok_count}/{total} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç")

    if ok_count == total:
        logger.info("üéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    elif ok_count >= total * 0.8:
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–∞ —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏")
    elif ok_count >= total * 0.5:
        logger.warning("‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–∞")
    else:
        logger.error("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–∞")


if __name__ == "__main__":
    asyncio.run(test_components())
