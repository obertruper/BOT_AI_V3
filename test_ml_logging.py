#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
"""

import asyncio
import os
import sys

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from datetime import datetime, timedelta

import numpy as np
import pandas as pd
from rich.console import Console

from core.logger import setup_logger
from database.connections.postgres import AsyncPGPool
from ml.ml_manager import MLManager
from ml.ml_prediction_logger import MLPredictionLogger

logger = setup_logger("test_ml_logging")
console = Console()
ml_prediction_logger = MLPredictionLogger()


async def generate_test_data(symbol: str = "BTCUSDT", periods: int = 300) -> pd.DataFrame:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ OHLCV –¥–∞–Ω–Ω—ã–µ"""

    # –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞
    base_price = 50000

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    dates = pd.date_range(
        start=datetime.now() - timedelta(hours=periods * 0.25), periods=periods, freq="15min"
    )

    prices = base_price + np.cumsum(np.random.randn(periods) * 100)

    df = pd.DataFrame(
        {
            "datetime": dates,
            "symbol": symbol,
            "open": prices + np.random.randn(periods) * 50,
            "high": prices + np.abs(np.random.randn(periods) * 100),
            "low": prices - np.abs(np.random.randn(periods) * 100),
            "close": prices,
            "volume": np.abs(np.random.randn(periods) * 10000 + 50000),
            "turnover": np.abs(np.random.randn(periods) * 500000 + 2500000),
        }
    )

    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º high/low
    df["high"] = df[["open", "high", "close"]].max(axis=1)
    df["low"] = df[["open", "low", "close"]].min(axis=1)

    return df


async def test_ml_logging():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""

    print("\n" + "=" * 60)
    print(" –¢–ï–°–¢ –î–ï–¢–ê–õ–¨–ù–û–ì–û –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ML –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ô ".center(60, "="))
    print("=" * 60 + "\n")

    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ML Manager
        print("1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML Manager...")
        config = {
            "ml": {
                "model": {
                    "path": "models/unified_patchtst_model.pth",
                    "device": "cpu",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º CPU –¥–ª—è —Ç–µ—Å—Ç–∞
                }
            }
        }

        ml_manager = MLManager(config)
        await ml_manager.initialize()
        print("‚úÖ ML Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n")

        # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("2Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        test_symbols = ["BTCUSDT", "ETHUSDT", "SOLUSDT"]

        for symbol in test_symbols:
            print(f"\n  –û–±—Ä–∞–±–æ—Ç–∫–∞ {symbol}...")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            df = await generate_test_data(symbol, periods=300)
            print(f"  ‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(df)} —Å–≤–µ—á–µ–π")

            # 3. –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            print("  üìä –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è...")
            prediction = await ml_manager.predict(df)

            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            print("  üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:")
            print(f"     Signal: {prediction['signal_type']}")
            print(f"     Confidence: {prediction['signal_confidence']:.2%}")
            print(f"     Returns 15m: {prediction['returns_15m']:.4f}")
            print(f"     Direction 15m: {prediction['direction_15m']}")

            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            print("  üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ë–î...")

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞—Ç—á–∞
            await asyncio.sleep(1)

        # 5. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        print("\n3Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π...")
        await ml_prediction_logger.flush()
        print("‚úÖ –í—Å–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n")

        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ –ë–î
        print("4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î...")
        query = """
            SELECT
                symbol,
                signal_type,
                signal_confidence,
                predicted_return_15m,
                direction_15m,
                features_count,
                inference_time_ms,
                created_at
            FROM ml_predictions
            WHERE created_at >= NOW() - INTERVAL '1 minute'
            ORDER BY created_at DESC
            LIMIT 10
        """

        rows = await AsyncPGPool.fetch(query)

        if rows:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(rows)} –∑–∞–ø–∏—Å–µ–π –≤ –ë–î:\n")

            # –í—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            print(
                "  {:^10} | {:^10} | {:^10} | {:^12} | {:^10} | {:^8} | {:^10}".format(
                    "Symbol",
                    "Signal",
                    "Confidence",
                    "Return 15m",
                    "Direction",
                    "Features",
                    "Time (ms)",
                )
            )
            print("  " + "-" * 90)

            for row in rows:
                print(
                    "  {:^10} | {:^10} | {:^10.2%} | {:^12.4f} | {:^10} | {:^8} | {:^10.1f}".format(
                        row["symbol"],
                        row["signal_type"],
                        row["signal_confidence"],
                        row["predicted_return_15m"],
                        row["direction_15m"],
                        row["features_count"],
                        row["inference_time_ms"] or 0,
                    )
                )
        else:
            print("‚ö†Ô∏è –ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î")

        # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤
        print("\n5Ô∏è‚É£ –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –≤—ã–≤–µ–¥–µ–Ω—ã –≤ –∫–æ–Ω—Å–æ–ª—å –≤—ã—à–µ ‚òùÔ∏è")
        print("   (—Å–º. –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã ML PREDICTION DETAILS)")

        print("\n" + "=" * 60)
        print(" –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û ".center(60, "‚úÖ"))
        print("=" * 60 + "\n")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        import traceback

        traceback.print_exc()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    await AsyncPGPool.init_pool()

    try:
        await test_ml_logging()
    finally:
        await AsyncPGPool.close_pool()


if __name__ == "__main__":
    asyncio.run(main())
