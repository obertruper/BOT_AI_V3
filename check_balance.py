#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ Bybit
"""

import asyncio
import os

from dotenv import load_dotenv

load_dotenv()


async def check_balance():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞"""
    from exchanges.bybit.bybit_exchange import BybitExchange

    exchange = BybitExchange(
        api_key=os.getenv("BYBIT_API_KEY"),
        api_secret=os.getenv("BYBIT_API_SECRET"),
        sandbox=False,
    )

    try:
        await exchange.connect()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Bybit")

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã
        balances = await exchange.get_balances()

        print("\nüí∞ –ë–ê–õ–ê–ù–°–´:")
        for balance in balances:
            if balance.total > 0:
                print(
                    f"   {balance.currency}: {balance.total:.4f} (–¥–æ—Å—Ç—É–ø–Ω–æ: {balance.available:.4f})"
                )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
        positions = await exchange.get_positions()

        if positions:
            print("\nüìä –ü–û–ó–ò–¶–ò–ò:")
            for pos in positions:
                if pos.size > 0:
                    print(f"   {pos.symbol}: {pos.side} {pos.size} @ {pos.entry_price}")
        else:
            print("\nüìä –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await exchange.disconnect()


if __name__ == "__main__":
    asyncio.run(check_balance())
