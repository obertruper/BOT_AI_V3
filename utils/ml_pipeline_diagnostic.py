#!/usr/bin/env python3
"""
ML Pipeline Diagnostic Tool
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ ML –≤—ã—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
"""

import asyncio
import numpy as np
import pandas as pd
from pathlib import Path
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent))

from core.config.config_manager import ConfigManager
from ml.ml_manager import MLManager
from core.logger import setup_logger

logger = setup_logger("ml_diagnostic")


class MLPipelineDiagnostic:
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ML pipeline"""
    
    def __init__(self):
        self.config_manager = ConfigManager()
        self.config = self.config_manager.get_config()
        
    async def run_diagnostic(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        logger.info("="*70)
        logger.info("üî¨ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ML PIPELINE")
        logger.info("="*70)
        
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        logger.info("\nüì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        ml_manager = MLManager(self.config)
        await ml_manager.initialize()
        
        # 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤—ã—Ö–æ–¥—ã –º–æ–¥–µ–ª–∏
        logger.info("\nüß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        test_outputs = self._create_test_outputs()
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –≤ ml_manager
        logger.info("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –≤ MLManager...")
        ml_result = self._test_ml_manager_interpretation(test_outputs)
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –≤ strategy
        logger.info("\nüìà –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –≤ PatchTSTStrategy...")
        strategy_result = self._test_strategy_interpretation(test_outputs)
        
        # 5. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logger.info("\nüîç –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
        self._compare_results(ml_result, strategy_result)
        
        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
        logger.info("\nüö¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤...")
        await self._test_signal_filtering(ml_manager)
        
        # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∫–∞
        # logger.info("\nüíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è...")
        # await self._test_caching(ml_processor)
        
        logger.info("\n" + "="*70)
        logger.info("‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        logger.info("="*70)
    
    def _create_test_outputs(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –≤—ã—Ö–æ–¥—ã –º–æ–¥–µ–ª–∏"""
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞: 0-3: returns, 4-15: logits, 16-19: risks
        outputs = np.zeros(20)
        
        # Future returns
        outputs[0:4] = [0.002, 0.003, 0.004, 0.005]  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ
        
        # Direction logits (4 —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ √ó 3 –∫–ª–∞—Å—Å–∞)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º LONG –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        for i in range(4):
            base_idx = 4 + i * 3
            outputs[base_idx] = 2.0      # LONG logit
            outputs[base_idx + 1] = 0.5  # SHORT logit
            outputs[base_idx + 2] = 0.1  # NEUTRAL logit
        
        # Risk metrics
        outputs[16:20] = [0.01, 0.01, 0.02, 0.02]
        
        return outputs
    
    def _test_ml_manager_interpretation(self, outputs):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –≤ ml_manager"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫–∞–∫ –≤ ml_manager
        future_returns = outputs[0:4]
        direction_logits = outputs[4:16]
        risk_metrics = outputs[16:20]
        
        # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        direction_logits_reshaped = direction_logits.reshape(4, 3)
        
        directions = []
        probs_list = []
        for logits in direction_logits_reshaped:
            exp_logits = np.exp(logits - np.max(logits))
            probs = exp_logits / exp_logits.sum()
            probs_list.append(probs)
            directions.append(np.argmax(probs))
        
        logger.info(f"  –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {directions}")
        logger.info(f"  –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏: {[p.round(3).tolist() for p in probs_list]}")
        
        return {
            "directions": directions,
            "probs": probs_list,
            "returns": future_returns,
            "risks": risk_metrics
        }
    
    def _test_strategy_interpretation(self, outputs):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –≤ strategy"""
        # –ù–æ–≤–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        future_returns = outputs[0:4]
        direction_logits = outputs[4:16]
        risk_metrics = outputs[16:20]
        
        direction_logits_reshaped = direction_logits.reshape(4, 3)
        
        directions = []
        probs_list = []
        for logits in direction_logits_reshaped:
            exp_logits = np.exp(logits - np.max(logits))
            probs = exp_logits / exp_logits.sum()
            probs_list.append(probs)
            directions.append(np.argmax(probs))
        
        logger.info(f"  –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {directions}")
        logger.info(f"  –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏: {[p.round(3).tolist() for p in probs_list]}")
        
        return {
            "directions": directions,
            "probs": probs_list,
            "returns": future_returns,
            "risks": risk_metrics
        }
    
    def _compare_results(self, ml_result, strategy_result):
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏"""
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        ml_dirs = ml_result["directions"]
        st_dirs = strategy_result["directions"]
        
        if ml_dirs == st_dirs:
            logger.info("  ‚úÖ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –°–û–í–ü–ê–î–ê–Æ–¢")
        else:
            logger.error(f"  ‚ùå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ù–ï –°–û–í–ü–ê–î–ê–Æ–¢")
            logger.error(f"     MLManager: {ml_dirs}")
            logger.error(f"     Strategy:  {st_dirs}")
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        ml_probs = np.array([p for p in ml_result["probs"]])
        st_probs = np.array([p for p in strategy_result["probs"]])
        
        if np.allclose(ml_probs, st_probs, atol=0.001):
            logger.info("  ‚úÖ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –°–û–í–ü–ê–î–ê–Æ–¢")
        else:
            logger.error("  ‚ùå –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ù–ï –°–û–í–ü–ê–î–ê–Æ–¢")
            logger.error(f"     –†–∞–∑–Ω–∏—Ü–∞: {np.abs(ml_probs - st_probs).max():.6f}")
    
    async def _test_signal_filtering(self, ml_manager):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤"""
        from ml.logic.signal_quality_analyzer import SignalQualityAnalyzer
        
        analyzer = SignalQualityAnalyzer(self.config)
        
        # –¢–µ—Å—Ç 1: –°–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª (–≤—Å–µ LONG)
        directions = np.array([0, 0, 0, 0])  # –í—Å–µ LONG
        direction_probs = [
            np.array([0.7, 0.2, 0.1]),  # 15m
            np.array([0.6, 0.3, 0.1]),  # 1h
            np.array([0.8, 0.1, 0.1]),  # 4h
            np.array([0.6, 0.2, 0.2]),  # 12h
        ]
        future_returns = np.array([0.002, 0.003, 0.004, 0.005])
        risk_metrics = np.array([0.01, 0.01, 0.02, 0.02])
        
        result = analyzer.analyze_signal_quality(
            directions, direction_probs, future_returns, risk_metrics, 0.0
        )
        
        logger.info(f"  –°–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª: {'‚úÖ –ü–†–û–®–ï–õ' if result.passed else '‚ùå –ù–ï –ü–†–û–®–ï–õ'}")
        logger.info(f"    –ö–∞—á–µ—Å—Ç–≤–æ: {result.quality_metrics.quality_score:.3f}")
        logger.info(f"    –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {result.strategy_used.value}")
        
        # –¢–µ—Å—Ç 2: –°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª (—Ä–∞–∑–Ω–æ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)
        directions = np.array([0, 1, 2, 0])  # –†–∞–∑–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        direction_probs = [
            np.array([0.4, 0.3, 0.3]),  # 15m - —Å–ª–∞–±–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            np.array([0.3, 0.4, 0.3]),  # 1h - —Å–ª–∞–±–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            np.array([0.3, 0.3, 0.4]),  # 4h - NEUTRAL
            np.array([0.4, 0.3, 0.3]),  # 12h
        ]
        
        result = analyzer.analyze_signal_quality(
            directions, direction_probs, future_returns, risk_metrics, 0.5
        )
        
        logger.info(f"  –°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª: {'‚úÖ –ü–†–û–®–ï–õ' if result.passed else '‚ùå –ù–ï –ü–†–û–®–ï–õ'}")
        if not result.passed:
            logger.info(f"    –ü—Ä–∏—á–∏–Ω—ã: {', '.join(result.rejection_reasons)}")
    


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    diagnostic = MLPipelineDiagnostic()
    await diagnostic.run_diagnostic()


if __name__ == "__main__":
    asyncio.run(main())