"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è BOT_Trading v3.0
"""

import signal
import sys
from datetime import datetime
from typing import Any

import psutil


def print_banner() -> None:
    """–í—ã–≤–æ–¥ –±–∞–Ω–Ω–µ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã"""
    banner = """
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                          BOT_Trading v3.0                                    ‚ïë
    ‚ïë                   –ú—É–ª—å—Ç–∏-—Ç—Ä–µ–π–¥–µ—Ä —Ç–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞                             ‚ïë
    ‚ïë                                                                               ‚ïë
    ‚ïë  üöÄ –ú—É–ª—å—Ç–∏-—Ç—Ä–µ–π–¥–µ—Ä –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞                                               ‚ïë
    ‚ïë  üîÑ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 7+ –∫—Ä–∏–ø—Ç–æ–±–∏—Ä–∂                                                  ‚ïë
    ‚ïë  ü§ñ ML-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏                                              ‚ïë
    ‚ïë  üìä Real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥                                                     ‚ïë
    ‚ïë  üõ°Ô∏è –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏                                           ‚ïë
    ‚ïë                                                                               ‚ïë
    ‚ïë  ¬© 2025 OberTrading Team                                                     ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    print(banner)


def get_system_resources() -> dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–∞—Ö"""
    try:
        # –ü–∞–º—è—Ç—å
        memory = psutil.virtual_memory()

        # CPU
        cpu_percent = psutil.cpu_percent(interval=1)

        # –î–∏—Å–∫
        disk = psutil.disk_usage("/")

        # –°–µ—Ç–µ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        net_connections = len(psutil.net_connections())

        return {
            "memory_total_mb": round(memory.total / (1024 * 1024), 2),
            "memory_available_mb": round(memory.available / (1024 * 1024), 2),
            "memory_percent": memory.percent,
            "cpu_percent": cpu_percent,
            "cpu_count": psutil.cpu_count(),
            "disk_total_gb": round(disk.total / (1024 * 1024 * 1024), 2),
            "disk_free_gb": round(disk.free / (1024 * 1024 * 1024), 2),
            "disk_used_percent": round((disk.used / disk.total) * 100, 2),
            "net_connections": net_connections,
            "timestamp": datetime.now().isoformat(),
        }
    except Exception as e:
        return {
            "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã: {e}",
            "timestamp": datetime.now().isoformat(),
        }


def setup_signal_handlers(shutdown_callback) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""

    def signal_handler(signum, frame):
        print(f"\nüì® –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum} - –Ω–∞—á–∏–Ω–∞–µ–º graceful shutdown...")
        shutdown_callback()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    signal.signal(signal.SIGINT, signal_handler)  # Ctrl+C
    signal.signal(signal.SIGTERM, signal_handler)  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞

    # –¢–æ–ª—å–∫–æ –¥–ª—è Unix-—Å–∏—Å—Ç–µ–º
    if hasattr(signal, "SIGHUP"):
        signal.signal(signal.SIGHUP, signal_handler)  # Hangup


def validate_python_version() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    required_version = (3, 8)
    current_version = sys.version_info[:2]

    if current_version < required_version:
        print(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python {required_version[0]}.{required_version[1]} –∏–ª–∏ –≤—ã—à–µ")
        print(f"‚ùå –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {current_version[0]}.{current_version[1]}")
        return False

    return True


def format_bytes(bytes_value: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–π—Ç–æ–≤ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    for unit in ["B", "KB", "MB", "GB", "TB"]:
        if bytes_value < 1024.0:
            return f"{bytes_value:.2f} {unit}"
        bytes_value /= 1024.0
    return f"{bytes_value:.2f} PB"


def format_duration(seconds: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    if seconds < 60:
        return f"{seconds:.1f} —Å–µ–∫"
    elif seconds < 3600:
        return f"{seconds / 60:.1f} –º–∏–Ω"
    elif seconds < 86400:
        return f"{seconds / 3600:.1f} —á"
    else:
        return f"{seconds / 86400:.1f} –¥–Ω"


def safe_float(value: Any, default: float = 0.0) -> float:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float"""
    try:
        return float(value)
    except (ValueError, TypeError):
        return default


def safe_int(value: Any, default: int = 0) -> int:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ int"""
    try:
        return int(value)
    except (ValueError, TypeError):
        return default


def truncate_string(text: str, max_length: int = 100) -> str:
    """–û–±—Ä–µ–∑–∫–∞ —Å—Ç—Ä–æ–∫–∏ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã"""
    if len(text) <= max_length:
        return text
    return text[: max_length - 3] + "..."


def get_config_from_env(key: str, default: Any = None) -> Any:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    import os

    value = os.getenv(key, default)

    # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –±—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    if isinstance(value, str):
        if value.lower() in ("true", "1", "yes", "on"):
            return True
        elif value.lower() in ("false", "0", "no", "off"):
            return False

    return value


def generate_id(prefix: str = "id") -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID"""
    import uuid

    return f"{prefix}_{uuid.uuid4().hex[:8]}"


def is_valid_symbol(symbol: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
    if not symbol or not isinstance(symbol, str):
        return False

    # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    if len(symbol) < 3 or len(symbol) > 20:
        return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    allowed_chars = set("ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789")
    return all(c in allowed_chars for c in symbol.upper())


def normalize_symbol(symbol: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
    if not symbol:
        return ""

    return symbol.upper().strip()


def get_timestamp() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ timestamp –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ"""
    return datetime.now().isoformat()


def parse_timeframe(timeframe: str) -> int:
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –≤ —Å–µ–∫—É–Ω–¥—ã"""
    timeframe_map = {
        "1m": 60,
        "5m": 300,
        "15m": 900,
        "30m": 1800,
        "1h": 3600,
        "4h": 14400,
        "1d": 86400,
        "1w": 604800,
    }

    return timeframe_map.get(timeframe.lower(), 60)


def create_directory_if_not_exists(path: str) -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    import os

    os.makedirs(path, exist_ok=True)


def is_port_available(port: int, host: str = "127.0.0.1") -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞"""
    import socket

    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
            sock.bind((host, port))
            return True
    except OSError:
        return False


def retry_on_exception(max_retries: int = 3, delay: float = 1.0):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö"""
    import asyncio
    from functools import wraps

    def decorator(func):
        @wraps(func)
        async def async_wrapper(*args, **kwargs):
            for attempt in range(max_retries):
                try:
                    return await func(*args, **kwargs)
                except Exception:
                    if attempt == max_retries - 1:
                        raise
                    await asyncio.sleep(delay * (2**attempt))

        @wraps(func)
        def sync_wrapper(*args, **kwargs):
            import time

            for attempt in range(max_retries):
                try:
                    return func(*args, **kwargs)
                except Exception:
                    if attempt == max_retries - 1:
                        raise
                    time.sleep(delay * (2**attempt))

        return async_wrapper if asyncio.iscoroutinefunction(func) else sync_wrapper

    return decorator
