#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏ —Ç–∏–ø–æ–≤ –æ—Ä–¥–µ—Ä–æ–≤
"""

import asyncio
import os
from datetime import datetime

import yaml
from dotenv import load_dotenv

load_dotenv()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ["PGPORT"] = "5555"
os.environ["PGUSER"] = "obertruper"
os.environ["PGDATABASE"] = "bot_trading_v3"


async def check_trading_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –¢–û–†–ì–û–í–õ–ò - {datetime.now().strftime('%H:%M:%S')}")
    print("=" * 60)

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ system.yaml
    print("\n‚öôÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø SYSTEM.YAML:")

    try:
        with open("config/system.yaml") as f:
            system_config = yaml.safe_load(f)

        trading_config = system_config.get("trading", {})

        print("\n   üìä –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏:")
        print(f"      - Hedge mode: {trading_config.get('hedge_mode', False)}")
        print(f"      - –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {trading_config.get('category', 'spot')}")
        print(f"      - –ü–ª–µ—á–æ: {trading_config.get('leverage', 1)}")

        order_config = trading_config.get("order_execution", {})
        print("\n   üí± –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤:")
        print(
            f"      - –¢–∏–ø –æ—Ä–¥–µ—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {order_config.get('default_order_type', 'MARKET')}"
        )
        print(
            f"      - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏–º–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞: {order_config.get('use_limit_orders', False)}"
        )
        print(f"      - –¢–∞–π–º–∞—É—Ç –æ—Ä–¥–µ—Ä–∞: {order_config.get('order_timeout', 300)} —Å–µ–∫")

        if order_config.get("use_limit_orders"):
            print(
                f"      - –û—Ç—Å—Ç—É–ø –¥–ª—è BUY: {order_config.get('limit_order_offset_buy', 0.0001):.4f}"
            )
            print(
                f"      - –û—Ç—Å—Ç—É–ø –¥–ª—è SELL: {order_config.get('limit_order_offset_sell', 0.0001):.4f}"
            )

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è system.yaml: {e}")

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ traders.yaml
    print("\n\n‚öôÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø TRADERS.YAML:")

    try:
        with open("config/traders.yaml") as f:
            traders_config = yaml.safe_load(f)

        for trader in traders_config.get("traders", []):
            if trader.get("enabled"):
                print(f"\n   ü§ñ –¢—Ä–µ–π–¥–µ—Ä: {trader['id']}")
                print(f"      - –¢–∏–ø: {trader['type']}")
                print(f"      - –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {trader['strategy']}")
                print(f"      - –ë–∏—Ä–∂–∞: {trader['exchange']}")

                strategy_config = trader.get("strategy_config", {})
                if "order_type" in strategy_config:
                    print(f"      - –¢–∏–ø –æ—Ä–¥–µ—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {strategy_config['order_type']}")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è traders.yaml: {e}")

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤ –≤ –ë–î
    print("\n\nüìä –ü–û–°–õ–ï–î–ù–ò–ï –û–†–î–ï–†–ê –ò–ó –ë–î:")

    from database.connections.postgres import AsyncPGPool

    try:
        pool = await AsyncPGPool.get_pool()

        orders = await pool.fetch(
            """
            SELECT
                id,
                symbol,
                side,
                order_type,
                price,
                quantity,
                status,
                created_at
            FROM orders
            WHERE created_at > NOW() - INTERVAL '24 hours'
            ORDER BY created_at DESC
            LIMIT 10
        """
        )

        if orders:
            for order in orders:
                order_type_emoji = "üí≤" if order["order_type"] == "MARKET" else "üìä"
                print(
                    f"\n   {order_type_emoji} {order['symbol']} - {order['side']} {order['order_type']}"
                )
                print(f"      ID: {order['id']}")
                print(f"      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order['quantity']}")
                if order["order_type"] == "LIMIT":
                    print(f"      –¶–µ–Ω–∞ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞: ${order['price']}")
                print(f"      –°—Ç–∞—Ç—É—Å: {order['status']}")
                print(f"      –í—Ä–µ–º—è: {order['created_at'].strftime('%Y-%m-%d %H:%M:%S')}")
        else:
            print("   ‚ùå –ù–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞")

        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ ML
        print("\n\nü§ñ ML –°–ò–ì–ù–ê–õ–´ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å):")

        signals = await pool.fetch(
            """
            SELECT
                symbol,
                signal_type,
                strength,
                confidence,
                suggested_price,
                created_at,
                extra_data
            FROM signals
            WHERE created_at > NOW() - INTERVAL '1 hour'
                AND strategy_name LIKE '%ML%'
            ORDER BY created_at DESC
            LIMIT 10
        """
        )

        if signals:
            long_count = sum(1 for s in signals if s["signal_type"] == "LONG")
            short_count = sum(1 for s in signals if s["signal_type"] == "SHORT")

            print("\n   üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"      - –í—Å–µ–≥–æ ML —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
            print(f"      - LONG (–ø–æ–∫—É–ø–∫–∞): {long_count} üü¢")
            print(f"      - SHORT (–ø—Ä–æ–¥–∞–∂–∞): {short_count} üî¥")

            print("\n   –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã:")
            for signal in signals[:5]:
                emoji = "üü¢" if signal["signal_type"] == "LONG" else "üî¥"
                print(f"\n   {emoji} {signal['symbol']} - {signal['signal_type']}")
                print(f"      –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal['confidence']:.2%}")
                print(f"      –°–∏–ª–∞: {signal['strength']:.4f}")
                if signal["suggested_price"]:
                    print(f"      –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ü–µ–Ω–∞: ${signal['suggested_price']}")
                print(f"      –í—Ä–µ–º—è: {signal['created_at'].strftime('%H:%M:%S')}")
        else:
            print("   ‚ùå –ù–µ—Ç ML —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î: {e}")
        import traceback

        traceback.print_exc()
    finally:
        await AsyncPGPool.close_pool()

    # 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\n\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("   1. –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –†–´–ù–û–ß–ù–´–ï –æ—Ä–¥–µ—Ä–∞ –≤–º–µ—Å—Ç–æ –ª–∏–º–∏—Ç–Ω—ã—Ö:")
    print("      - –í config/system.yaml —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:")
    print("        trading.order_execution.use_limit_orders: false")
    print("        trading.order_execution.default_order_type: MARKET")
    print("\n   2. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏:")
    print("      - tail -f logs/core.log")
    print("      - –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python unified_launcher.py --logs")

    print("\n" + "=" * 60)


if __name__ == "__main__":
    asyncio.run(check_trading_config())
