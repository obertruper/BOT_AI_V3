#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ ML —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import logging
import os

import yaml

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


async def check_ml_system():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ ML —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        from core.config.config_manager import ConfigManager
        from ml.ml_manager import MLManager
        from ml.ml_signal_processor import MLSignalProcessor

        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ML —Å–∏—Å—Ç–µ–º—ã...")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_manager = ConfigManager()
        config_manager.get_ml_config()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã
        full_config = config_manager._config  # –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        traders = full_config.get("traders", [])

        ml_trader = None
        for trader in traders:
            if trader.get("id") == "ml_trader_multi_crypto":
                ml_trader = trader
                break

        if ml_trader:
            symbols = ml_trader.get("symbols", [])
            logger.info(f"‚úÖ ML —Ç—Ä–µ–π–¥–µ—Ä –Ω–∞–π–¥–µ–Ω —Å {len(symbols)} —Å–∏–º–≤–æ–ª–∞–º–∏:")
            for symbol in symbols:
                logger.info(f"   - {symbol}")
        else:
            logger.error("‚ùå ML —Ç—Ä–µ–π–¥–µ—Ä 'ml_trader_multi_crypto' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ ML Manager
        logger.info("\nüß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML Manager...")
        # ML Manager –æ–∂–∏–¥–∞–µ—Ç –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é ML –∏–∑ —Ñ–∞–π–ª–∞ ml_config.yaml
        ml_config_path = os.path.join(os.path.dirname(__file__), "config", "ml", "ml_config.yaml")
        with open(ml_config_path) as f:
            ml_full_config = yaml.safe_load(f)
        ml_manager = MLManager(config=ml_full_config)
        logger.info(f"‚úÖ ML Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: {ml_manager.device}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏
        if hasattr(ml_manager, "model") and ml_manager.model is not None:
            logger.info("‚úÖ ML –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        else:
            logger.error("‚ùå ML –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ ML Signal Processor
        logger.info("\nüìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML Signal Processor...")
        MLSignalProcessor(ml_manager=ml_manager, config={"symbols": symbols})
        logger.info("‚úÖ ML Signal Processor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        logger.info("\nüéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ ML —Å–∏–≥–Ω–∞–ª–∞...")
        import numpy as np
        import pandas as pd

        from ml.logic.archive_old_versions.feature_engineering import FeatureEngineer

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = pd.DataFrame(
            {
                "open": np.random.uniform(100, 110, 100),
                "high": np.random.uniform(110, 120, 100),
                "low": np.random.uniform(90, 100, 100),
                "close": np.random.uniform(95, 115, 100),
                "volume": np.random.uniform(1000, 10000, 100),
                "timestamp": pd.date_range(start="2025-08-09", periods=100, freq="15min"),
            }
        )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        feature_engineer = FeatureEngineer()
        features = feature_engineer.engineer_features(test_data)

        if features is not None and not features.empty:
            logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {features.shape[1]} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

            # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            try:
                prediction = await ml_manager.predict(features, symbol="BTCUSDT")
                if prediction:
                    logger.info("‚úÖ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:")
                    logger.info(f"   - Signal Type: {prediction.get('signal_type', 'N/A')}")
                    logger.info(f"   - Confidence: {prediction.get('confidence', 0):.2%}")
                    logger.info(f"   - Risk Level: {prediction.get('risk_level', 'N/A')}")
                else:
                    logger.error("‚ùå –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏: {e}")
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏")

        logger.info("\n‚ú® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(check_ml_system())
