#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π Bybit
"""

import asyncio
import os
import sys
from pathlib import Path

from dotenv import load_dotenv

sys.path.insert(0, str(Path(__file__).parent))

from exchanges.bybit.client import BybitClient

load_dotenv()


async def check_keys():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π"""

    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–ª—é—á–µ–π
    keys_to_test = [
        # –¢–µ–∫—É—â–∏–µ –∏–∑ .env
        {
            "name": "Current .env",
            "key": os.getenv("BYBIT_API_KEY"),
            "secret": os.getenv("BYBIT_API_SECRET"),
        },
        # –ö–ª—é—á–∏ –∫–æ—Ç–æ—Ä—ã–µ user –¥–∞–≤–∞–ª
        {
            "name": "User provided",
            "key": "NbH0wWQ3rmgJjO2YGw",
            "secret": "6TFlkmRjczVL4y2orFlGLQMBfPpAOSaDwTUJ",
        },
        # –í–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤ —Ñ–∞–π–ª–∞—Ö
    ]

    print("=" * 60)
    print("–ü–†–û–í–ï–†–ö–ê API –ö–õ–Æ–ß–ï–ô BYBIT")
    print("=" * 60)

    for key_set in keys_to_test:
        if not key_set["key"] or not key_set["secret"]:
            continue

        print(f"\nüîë –ü—Ä–æ–≤–µ—Ä—è–µ–º: {key_set['name']}")
        print(f"   Key: {key_set['key'][:10]}...")

        try:
            client = BybitClient(
                api_key=key_set["key"], api_secret=key_set["secret"], sandbox=False
            )

            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å
            response = await client._make_request(
                "GET",
                "/v5/account/wallet-balance",
                {"accountType": "UNIFIED"},
                auth=True,
            )

            if response and "result" in response:
                result = response["result"]
                if "list" in result and result["list"]:
                    wallet = result["list"][0]
                    total_balance = float(wallet.get("totalEquity", 0))
                    print(f"   ‚úÖ –ö–ª—é—á–∏ —Ä–∞–±–æ—Ç–∞—é—Ç! –ë–∞–ª–∞–Ω—Å: ${total_balance:.2f}")

                    # –î–µ—Ç–∞–ª–∏ –±–∞–ª–∞–Ω—Å–∞
                    coins = wallet.get("coin", [])
                    for coin in coins:
                        if float(coin.get("equity", 0)) > 0:
                            print(f"      {coin['coin']}: {coin['equity']}")
                else:
                    print("   ‚ùå –ö–ª—é—á–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
            else:
                print("   ‚ùå –ö–ª—é—á–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç: –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞")

        except Exception as e:
            error_msg = str(e)
            if "10003" in error_msg:
                print("   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ API –∫–ª—é—á–∏")
            elif "33004" in error_msg:
                print("   ‚ùå API –∫–ª—é—á–∏ –∏—Å—Ç–µ–∫–ª–∏")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {error_msg}")

    print("\n" + "=" * 60)
    print("–ü–æ–∏—Å–∫ –¥—Ä—É–≥–∏—Ö –∫–ª—é—á–µ–π –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    print("=" * 60)

    # –ò—â–µ–º –∫–ª—é—á–∏ –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
    config_files = [
        "config/credentials.yaml",
        "config/exchanges.yaml",
        ".env.production",
        ".env.local",
    ]

    for config_file in config_files:
        if os.path.exists(config_file):
            print(f"üìÑ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {config_file}")
            with open(config_file, "r") as f:
                content = f.read()
                if "api_key" in content.lower() or "bybit" in content.lower():
                    print("   –ú–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª—é—á–∏, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä—É—á–Ω—É—é")


if __name__ == "__main__":
    asyncio.run(check_keys())
