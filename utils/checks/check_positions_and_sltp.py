#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∏ –∏—Ö SL/TP –Ω–∞ –±–∏—Ä–∂–µ Bybit
"""

import asyncio
import sys
from pathlib import Path

sys.path.append(str(Path(__file__).parent))

from core.config.config_manager import ConfigManager
from core.logger import setup_logger

logger = setup_logger("check_positions")


async def check_positions():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–π –∏ –∏—Ö SL/TP"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_manager = ConfigManager()
        await config_manager.initialize()
        config = config_manager.get_config()

        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ
        exchange_name = "bybit"
        exchange_config = config.get("exchanges", {}).get(exchange_name, {})

        if not exchange_config.get("enabled"):
            logger.error(f"–ë–∏—Ä–∂–∞ {exchange_name} –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return

        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∏—Ä–∂–∏
        from exchanges.factory import get_exchange_factory

        factory = get_exchange_factory()

        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        api_key = exchange_config.get("api_key", "")
        api_secret = exchange_config.get("api_secret", "")
        testnet = exchange_config.get("testnet", False)

        exchange = await factory.create_and_connect(
            exchange_name, api_key=api_key, api_secret=api_secret
        )

        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–π –Ω–∞ Bybit...")

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        positions = await exchange.get_positions()

        if not positions:
            logger.info("üìä –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
            return

        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(positions)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π:")

        for pos in positions:
            logger.info(f"\n{'=' * 50}")
            logger.info(f"–°–∏–º–≤–æ–ª: {pos.symbol}")
            logger.info(f"–°—Ç–æ—Ä–æ–Ω–∞: {pos.side}")
            logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {pos.contracts}")
            logger.info(f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {pos.entry_price}")
            logger.info(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {pos.mark_price}")
            logger.info(f"–ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL: {pos.unrealized_pnl}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º SL/TP
            if hasattr(pos, "stop_loss") and pos.stop_loss:
                logger.info(f"‚úÖ Stop Loss: {pos.stop_loss}")
            else:
                logger.warning("‚ùå Stop Loss: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")

            if hasattr(pos, "take_profit") and pos.take_profit:
                logger.info(f"‚úÖ Take Profit: {pos.take_profit}")
            else:
                logger.warning("‚ùå Take Profit: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
        logger.info("\n\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤...")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
            open_orders = await exchange.get_open_orders()

            if not open_orders:
                logger.info("üìã –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
            else:
                logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(open_orders)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤:")

                sl_tp_orders = 0
                for order in open_orders:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ SL/TP –æ—Ä–¥–µ—Ä–æ–º
                    if hasattr(order, "order_type") and order.order_type in [
                        "STOP",
                        "TAKE_PROFIT",
                        "STOP_MARKET",
                        "TAKE_PROFIT_MARKET",
                    ]:
                        sl_tp_orders += 1
                        logger.info("\n  SL/TP –û—Ä–¥–µ—Ä:")
                        logger.info(f"  - ID: {order.order_id}")
                        logger.info(f"  - –¢–∏–ø: {order.order_type}")
                        logger.info(f"  - –°–∏–º–≤–æ–ª: {order.symbol}")
                        logger.info(f"  - –°—Ç–æ—Ä–æ–Ω–∞: {order.side}")
                        logger.info(f"  - –¢—Ä–∏–≥–≥–µ—Ä —Ü–µ–Ω–∞: {getattr(order, 'trigger_price', 'N/A')}")
                        logger.info(f"  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order.quantity}")

                logger.info(f"\nüìà –ò—Ç–æ–≥–æ SL/TP –æ—Ä–¥–µ—Ä–æ–≤: {sl_tp_orders}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
        import traceback

        logger.error(traceback.format_exc())


if __name__ == "__main__":
    asyncio.run(check_positions())
