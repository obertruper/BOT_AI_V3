#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –∏ –∏—Ö –ø–ª–µ—á–∞
"""

import asyncio
import os

from dotenv import load_dotenv

load_dotenv()

import sys
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent))

from exchanges.bybit.client import BybitClient


async def check_all_positions():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""

    print("=" * 60)
    print("–ü–†–û–í–ï–†–ö–ê –í–°–ï–• –ü–û–ó–ò–¶–ò–ô –ò –ü–õ–ï–ß–ê")
    print("=" * 60)

    client = BybitClient(
        api_key=os.getenv("BYBIT_API_KEY"),
        api_secret=os.getenv("BYBIT_API_SECRET"),
        sandbox=False,
    )

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
        response = await client._make_request(
            "GET",
            "/v5/position/list",
            {"category": "linear", "settleCoin": "USDT"},
            auth=True,
        )

        if response and "result" in response:
            positions = response["result"].get("list", [])

            open_positions = []
            for pos in positions:
                size = float(pos.get("size", 0))
                if size > 0:
                    open_positions.append(pos)

            if open_positions:
                print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(open_positions)}\n")

                for pos in open_positions:
                    symbol = pos.get("symbol")
                    side = pos.get("side")
                    size = pos.get("size")
                    leverage = pos.get("leverage")
                    entry_price = pos.get("avgPrice")
                    stop_loss = pos.get("stopLoss", "")
                    take_profit = pos.get("takeProfit", "")

                    print(f"{'=' * 40}")
                    print(f"üìå {symbol}")
                    print(f"   Side: {side}")
                    print(f"   Size: {size}")
                    print(f"   Entry: ${entry_price}")

                    # –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–µ—á–æ
                    print(f"   ‚ö†Ô∏è –ü–õ–ï–ß–û: {leverage}x", end="")
                    if float(leverage) != 5:
                        print(" ‚ùå –î–û–õ–ñ–ù–û –ë–´–¢–¨ 5x!")
                    else:
                        print(" ‚úÖ")

                    # SL/TP
                    if stop_loss:
                        print(f"   SL: ${stop_loss} ‚úÖ")
                    else:
                        print("   SL: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù ‚ùå")

                    if take_profit:
                        print(f"   TP: ${take_profit} ‚úÖ")
                    else:
                        print("   TP: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù ‚ùå")
            else:
                print("\n‚ùå –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–ª–µ—á–æ –¥–ª—è –ø–æ–∑–∏—Ü–∏–π –≥–¥–µ –æ–Ω–æ != 5
        print("\n" + "=" * 60)
        print("–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–õ–ï–ß–ê")
        print("=" * 60)

        symbols_to_fix = []
        for pos in open_positions:
            if float(pos.get("leverage", 0)) != 5:
                symbols_to_fix.append(pos.get("symbol"))

        if symbols_to_fix:
            print(f"\n‚öôÔ∏è –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø–ª–µ—á–æ –¥–ª—è: {', '.join(symbols_to_fix)}")

            for symbol in symbols_to_fix:
                try:
                    print(f"\nüîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ—á–æ 5x –¥–ª—è {symbol}...")

                    params = {
                        "category": "linear",
                        "symbol": symbol,
                        "buyLeverage": "5",
                        "sellLeverage": "5",
                    }

                    response = await client._make_request(
                        "POST", "/v5/position/set-leverage", params, auth=True
                    )

                    if response and response.get("retCode") == 0:
                        print("   ‚úÖ –ü–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 5x")
                    else:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞: {response}")

                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        else:
            print("\n‚úÖ –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–ª–µ—á–æ (5x)")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")

    print("\n" + "=" * 60)
    print("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("=" * 60)
    print(
        """
1. –ü–ª–µ—á–æ –¥–æ–ª–∂–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –ü–ï–†–ï–î –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –ø–æ–∑–∏—Ü–∏–∏
2. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: config/trading.yaml
   orders:
     default_leverage: 5
3. OrderManager –¥–æ–ª–∂–µ–Ω –≤—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞—Ç—å set_leverage()
4. –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π –ø–ª–µ—á–æ –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è
5. –ù–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –±—É–¥—É—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–ª–µ—á–æ–º
    """
    )


if __name__ == "__main__":
    asyncio.run(check_all_positions())
