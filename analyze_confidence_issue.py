#!/usr/bin/env python3
"""–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ confidence –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""

import asyncio

import numpy as np

from core.config.config_manager import ConfigManager
from data.data_loader import DataLoader
from ml.ml_manager import MLManager


async def analyze():
    """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã —Å confidence"""

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_manager = ConfigManager()
    config = config_manager.get_config()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    ml_manager = MLManager(config)
    await ml_manager.initialize()

    data_loader = DataLoader(config)

    print("=" * 80)
    print("–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ –° CONFIDENCE")
    print("=" * 80)

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤
    symbols = ["BTCUSDT", "ETHUSDT", "SOLUSDT", "DOTUSDT", "BNBUSDT"]

    confidence_values = []
    signal_strengths = []

    for symbol in symbols:
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑ {symbol}:")
        print("-" * 40)

        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            data = await data_loader.get_latest_data(
                symbol=symbol, exchange="bybit", interval="15m", limit=200
            )

            if data is None or data.empty:
                print(f"  ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                continue

            # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            prediction = await ml_manager.predict(data)

            if prediction:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
                signal_type = prediction.get("signal_type", "NEUTRAL")
                signal_strength = prediction.get("signal_strength", 0)
                confidence = prediction.get("confidence", 0)

                confidence_values.append(confidence)
                signal_strengths.append(signal_strength)

                print(f"  Signal Type: {signal_type}")
                print(f"  Signal Strength: {signal_strength:.6f}")
                print(f"  Confidence: {confidence:.6f}")

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã confidence
                predictions = prediction.get("predictions", {})

                # –ò–∑–≤–ª–µ–∫–∞–µ–º future returns
                returns_15m = predictions.get("returns_15m", 0)
                returns_1h = predictions.get("returns_1h", 0)
                returns_4h = predictions.get("returns_4h", 0)
                returns_12h = predictions.get("returns_12h", 0)

                print(
                    f"  Returns: 15m={returns_15m:.4f}, 1h={returns_1h:.4f}, "
                    f"4h={returns_4h:.4f}, 12h={returns_12h:.4f}"
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±–ª–∏–∑–∫–æ –ª–∏ –∫ –ø–æ—Ä–æ–≥–æ–≤–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
                if abs(confidence - 0.60) < 0.001:
                    print("  ‚ö†Ô∏è CONFIDENCE –¢–û–ß–ù–û –ù–ê –ü–û–†–û–ì–ï 0.60!")
                elif abs(confidence - 0.60) < 0.01:
                    print("  ‚ö†Ô∏è Confidence –æ—á–µ–Ω—å –±–ª–∏–∑–∫–æ –∫ –ø–æ—Ä–æ–≥—É 0.60")

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É–ª—É
                # combined_confidence = signal_strength * 0.4 + model_confidence * 0.4 + (1.0 - avg_risk) * 0.2
                # –ï—Å–ª–∏ confidence ‚âà 0.60 –∏ signal_strength –≤–∞—Ä—å–∏—Ä—É–µ—Ç—Å—è,
                # —Ç–æ model_confidence –¥–æ–ª–∂–µ–Ω –∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å

                risk_component = 0.7  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫
                estimated_model_conf = (
                    confidence - signal_strength * 0.4 - risk_component * 0.2
                ) / 0.4

                print(f"  –†–∞—Å—á–µ—Ç–Ω–∞—è model_confidence: {estimated_model_conf:.6f}")

        except Exception as e:
            print(f"  –û—à–∏–±–∫–∞: {e}")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
    print("\n" + "=" * 80)
    print("–°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó:")
    print("-" * 40)

    if confidence_values:
        conf_array = np.array(confidence_values)
        strength_array = np.array(signal_strengths)

        print(f"Confidence –∑–Ω–∞—á–µ–Ω–∏—è: {confidence_values}")
        print(f"Signal Strength –∑–Ω–∞—á–µ–Ω–∏—è: {signal_strengths}")

        print("\nConfidence —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  –°—Ä–µ–¥–Ω–µ–µ: {conf_array.mean():.6f}")
        print(f"  –°—Ç–¥. –æ—Ç–∫–ª.: {conf_array.std():.6f}")
        print(f"  –ú–∏–Ω: {conf_array.min():.6f}")
        print(f"  –ú–∞–∫—Å: {conf_array.max():.6f}")

        print("\nSignal Strength —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  –°—Ä–µ–¥–Ω–µ–µ: {strength_array.mean():.6f}")
        print(f"  –°—Ç–¥. –æ—Ç–∫–ª.: {strength_array.std():.6f}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
        if len(confidence_values) > 1:
            correlation = np.corrcoef(conf_array, strength_array)[0, 1]
            print(f"\n–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É confidence –∏ signal_strength: {correlation:.4f}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –±–ª–∏–∑–∫–∏ –∫ 0.60
        near_threshold = np.abs(conf_array - 0.60) < 0.01
        pct_near_threshold = near_threshold.sum() / len(conf_array) * 100

        print(f"\n{pct_near_threshold:.1f}% –∑–Ω–∞—á–µ–Ω–∏–π confidence –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 0.01 –æ—Ç –ø–æ—Ä–æ–≥–∞ 0.60")

        if pct_near_threshold > 80:
            print("\nüö® –ü–†–û–ë–õ–ï–ú–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê!")
            print("–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ confidence –∑–Ω–∞—á–µ–Ω–∏–π —Å–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –æ–∫–æ–ª–æ –ø–æ—Ä–æ–≥–∞ 0.60")
            print("\n–í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:")
            print("1. –ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞ –≤—ã–¥–∞–≤–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞")
            print("2. –í –∫–æ–¥–µ –µ—Å—Ç—å —è–≤–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ confidence –¥–æ –ø–æ—Ä–æ–≥–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è")
            print("3. –§–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á–µ—Ç–∞ confidence –¥–∞–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤")
            print("\n–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –î–ï–ô–°–¢–í–ò–Ø:")
            print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞—Å—á–µ—Ç confidence_scores –≤ –º–æ–¥–µ–ª–∏ (—Å—Ç—Ä–æ–∫–∏ 633-640 –≤ ml_manager.py)")
            print("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç—Å—è –ª–∏ confidence –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞")
            print(
                "3. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ - –≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
            )

    print("\n" + "=" * 80)


if __name__ == "__main__":
    asyncio.run(analyze())
