#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ML —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""

import asyncio
import sys
from pathlib import Path

sys.path.append(str(Path(__file__).parent))

from core.logger import setup_logger
from database.connections.postgres import AsyncPGPool
from ml.ml_manager import MLManager

logger = setup_logger("final_check")


async def final_check():
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ML —Å–∏—Å—Ç–µ–º—ã."""

    print("üèÅ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ML –°–ò–°–¢–ï–ú–´\n")

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –ë–î...")

    # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    query = """
    SELECT
        id,
        symbol,
        signal_type,
        strength,
        confidence,
        created_at,
        extra_data
    FROM signals
    WHERE created_at > NOW() - INTERVAL '1 hour'
    ORDER BY created_at DESC
    LIMIT 20
    """

    signals = await AsyncPGPool.fetch(query)

    if signals:
        signal_types = {}
        for sig in signals:
            sig_type = sig["signal_type"]
            signal_types[sig_type] = signal_types.get(sig_type, 0) + 1

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å")
        print(f"   –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {signal_types}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        if len(signal_types) > 1:
            print("   ‚úÖ –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!")
        else:
            print("   ‚ö†Ô∏è  –í—Å–µ —Å–∏–≥–Ω–∞–ª—ã –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞")
    else:
        print("‚ùå –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å")

    # 2. –¢–µ—Å—Ç ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π...")

    config = {"ml": {"model": {"device": "cuda"}, "model_directory": "models/saved"}}

    ml_manager = MLManager(config)
    await ml_manager.initialize()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_symbols = ["BTCUSDT", "ETHUSDT", "SOLUSDT"]
    predictions_summary = []

    for symbol in test_symbols:
        query = f"""
        SELECT * FROM raw_market_data
        WHERE symbol = '{symbol}'
        ORDER BY datetime DESC
        LIMIT 100
        """

        raw_data = await AsyncPGPool.fetch(query)

        if len(raw_data) >= 96:
            import pandas as pd

            df_data = [dict(row) for row in raw_data]
            df = pd.DataFrame(df_data)

            for col in ["open", "high", "low", "close", "volume"]:
                df[col] = df[col].astype(float)

            df = df.sort_values("datetime")

            try:
                prediction = await ml_manager.predict(df)

                directions = prediction.get("predictions", {}).get(
                    "directions_by_timeframe", []
                )

                predictions_summary.append(
                    {
                        "symbol": symbol,
                        "signal_type": prediction["signal_type"],
                        "confidence": prediction["confidence"],
                        "directions": directions,
                    }
                )

                print(f"\n   {symbol}:")
                print(f"   Signal: {prediction['signal_type']}")
                print(f"   Confidence: {prediction['confidence']:.1%}")
                print(f"   Directions: {directions}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è {symbol}: {e}")

    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if predictions_summary:
        unique_signals = set(p["signal_type"] for p in predictions_summary)
        all_directions = []
        for p in predictions_summary:
            all_directions.extend(p.get("directions", []))

        unique_directions = set(all_directions)

        print("\nüìä –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(
            f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(unique_signals)} ({list(unique_signals)})"
        )
        print(
            f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {len(unique_directions)} ({list(unique_directions)})"
        )

        if len(unique_signals) > 1 and len(unique_directions) > 1:
            print("   ‚úÖ ML —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã!")
        else:
            print("   ‚ö†Ô∏è  –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã")

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")

    import subprocess

    result = subprocess.run(["ps", "aux"], capture_output=True, text=True)
    processes = result.stdout

    required_processes = ["unified_launcher", "main.py", "web/launcher.py"]
    found_processes = []

    for proc in required_processes:
        if proc in processes and "grep" not in processes:
            found_processes.append(proc)

    print(f"   –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {len(found_processes)}/{len(required_processes)}")
    for proc in found_processes:
        print(f"   ‚úÖ {proc}")

    missing = set(required_processes) - set(found_processes)
    for proc in missing:
        print(f"   ‚ùå {proc}")

    # 4. –ò—Ç–æ–≥–æ–≤—ã–π –≤–µ—Ä–¥–∏–∫—Ç
    print("\n" + "=" * 60)
    print("üèÅ –ò–¢–û–ì–û–í–´–ô –í–ï–†–î–ò–ö–¢:")
    print("=" * 60)

    issues = []

    if not signals:
        issues.append("–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –ë–î")
    elif len(signal_types) == 1:
        issues.append("–í—Å–µ —Å–∏–≥–Ω–∞–ª—ã –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞")

    if len(unique_signals) == 1:
        issues.append("ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã")

    if len(found_processes) < len(required_processes):
        issues.append("–ù–µ –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–ø—É—â–µ–Ω—ã")

    if not issues:
        print("‚úÖ –í–°–ï –°–ò–°–¢–ï–ú–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        print("‚úÖ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã")
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ direction outputs —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:")
        for issue in issues:
            print(f"   - {issue}")

    print("\n" + "=" * 60)


if __name__ == "__main__":
    asyncio.run(final_check())
