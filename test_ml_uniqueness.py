#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from dotenv import load_dotenv

load_dotenv()


async def test_ml_uniqueness():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""

    print("=" * 60)
    print("üîç –¢–ï–°–¢ –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò ML –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ô")
    print("=" * 60)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    from core.config.config_manager import ConfigManager
    from ml.ml_manager import MLManager
    from ml.ml_signal_processor import MLSignalProcessor

    config_manager = ConfigManager("config/system.yaml")
    await config_manager.initialize()

    config = config_manager.get_config()

    # –°–æ–∑–¥–∞–µ–º ML manager
    ml_manager = MLManager(config)
    await ml_manager.initialize()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å!

    # –°–æ–∑–¥–∞–µ–º processor —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    processor = MLSignalProcessor(config_manager, config)
    processor.ml_manager = ml_manager  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ml_manager

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤
    symbols = ["BTCUSDT", "ETHUSDT", "BNBUSDT", "SOLUSDT"]
    predictions = {}
    features_hashes = {}

    print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤:")
    print("-" * 50)

    for symbol in symbols:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            ohlcv_df = await processor._fetch_latest_ohlcv(symbol, "bybit", 7200)

            if ohlcv_df is None or len(ohlcv_df) < 96:
                print(f"‚ùå {symbol}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
                continue

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
            (
                features_array,
                metadata,
            ) = await processor.indicator_calculator.prepare_ml_input(
                symbol=symbol, ohlcv_df=ohlcv_df, lookback=96
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–µ—à –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            features_hash = hash(features_array.tobytes())
            features_hashes[symbol] = features_hash

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            prediction = await processor.ml_manager.predict(features_array)
            predictions[symbol] = prediction

            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            print(f"\n‚úÖ {symbol}:")
            print(f"   ‚Ä¢ Features shape: {features_array.shape}")
            print(f"   ‚Ä¢ Features hash: {features_hash}")
            print(f"   ‚Ä¢ Signal type: {prediction.get('signal_type')}")
            print(f"   ‚Ä¢ Confidence: {prediction.get('confidence', 0):.4f}")
            print(
                f"   ‚Ä¢ Returns 15m: {prediction.get('predictions', {}).get('returns_15m', 0):.6f}"
            )
            print(f"   ‚Ä¢ Returns 1h: {prediction.get('predictions', {}).get('returns_1h', 0):.6f}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π features
            print(f"   ‚Ä¢ First 5 features: {features_array[0, -1, :5]}")
            print(f"   ‚Ä¢ Last close price: {ohlcv_df['close'].iloc[-1]:.2f}")

        except Exception as e:
            print(f"‚ùå {symbol}: –æ—à–∏–±–∫–∞ - {e}")

    # –ê–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    print("\n" + "=" * 60)
    print("üìà –ê–ù–ê–õ–ò–ó –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò:")
    print("-" * 50)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Ö–µ—à–µ–π –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    unique_hashes = len(set(features_hashes.values())) if features_hashes else 0
    print("\n1. –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(features_hashes)}")
    print(f"   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {unique_hashes}")

    if len(features_hashes) > 0:
        if unique_hashes == len(features_hashes):
            print("   ‚úÖ –í—Å–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã")
        else:
            print("   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è!")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    print("\n2. –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π:")

    all_different = True  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

    if len(predictions) < 2:
        print("   ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    else:
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ–ø–∞—Ä–Ω–æ
        symbols_list = list(predictions.keys())
        all_different = True

        for i in range(len(symbols_list)):
            for j in range(i + 1, len(symbols_list)):
                sym1, sym2 = symbols_list[i], symbols_list[j]
                pred1 = predictions[sym1]
                pred2 = predictions[sym2]

                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                same_type = pred1.get("signal_type") == pred2.get("signal_type")
                same_conf = abs(pred1.get("confidence", 0) - pred2.get("confidence", 0)) < 0.0001

                ret1_15m = pred1.get("predictions", {}).get("returns_15m", 0)
                ret2_15m = pred2.get("predictions", {}).get("returns_15m", 0)
                same_returns = abs(ret1_15m - ret2_15m) < 0.000001

                if same_type and same_conf and same_returns:
                    print(f"   ‚ùå {sym1} –∏ {sym2} –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è!")
                    all_different = False

        if all_different:
            print("   ‚úÖ –í—Å–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
    print("\n3. –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π:")
    for symbol, pred in predictions.items():
        timestamp = pred.get("timestamp", "N/A")
        print(f"   ‚Ä¢ {symbol}: {timestamp}")

    print("\n" + "=" * 60)

    # –ò—Ç–æ–≥–æ–≤—ã–π –≤—ã–≤–æ–¥
    if unique_hashes == len(features_hashes) and all_different:
        print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: ML –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
    else:
        print("‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
        print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        if unique_hashes != len(features_hashes):
            print("   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö - –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
        if not all_different:
            print("   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–¥–µ–ª—å - –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–æ–º")
            print("   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ - –≤–æ–∑–º–æ–∂–Ω–æ –∫–µ—à –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Å–∏–º–≤–æ–ª")

    print("=" * 60)


if __name__ == "__main__":
    asyncio.run(test_ml_uniqueness())
