#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –¢–û–ß–ù–´–ï –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑ –æ–±—É—á–∞—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ –≤ —Ç–µ–∫—É—â—É—é ML —Å–∏—Å—Ç–µ–º—É.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç exact_training_features.py –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.
"""

import asyncio

import numpy as np
import pandas as pd

from database.connections.postgres import AsyncPGPool
from exact_training_features import ExactTrainingFeatures


async def test_exact_features():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–æ—á–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –æ–±—É—á–µ–Ω–∏—è"""
    print("=" * 80)
    print("üéØ –¢–ï–°–¢ –¢–û–ß–ù–´–• –ü–†–ò–ó–ù–ê–ö–û–í –ò–ó –û–ë–£–ß–ï–ù–ò–Ø")
    print("=" * 80)

    # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –æ–±—É—á–µ–Ω–∏—è
    training_config = {
        "features": {
            "technical": [
                {"name": "sma", "periods": [10, 20, 50]},
                {"name": "ema", "periods": [10, 20, 50]},
                {"name": "rsi", "period": 14},
                {"name": "macd", "slow": 26, "fast": 12, "signal": 9},
                {"name": "bollinger_bands", "period": 20, "std_dev": 2},
                {"name": "atr", "period": 14},
                {"name": "stochastic", "period": 14, "smooth": 3},
                {"name": "adx", "period": 14},
            ]
        }
    }

    # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print("\nüìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    query = """
        SELECT datetime, symbol, open, high, low, close, volume, 
               COALESCE(volume * close, 0) as turnover
        FROM raw_market_data 
        WHERE symbol = $1 
        ORDER BY datetime DESC 
        LIMIT 500
    """

    symbol = "BTCUSDT"
    data = await AsyncPGPool.fetch(query, symbol)

    if not data:
        print(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
        return False

    df = pd.DataFrame([dict(record) for record in data])
    df = df.sort_values("datetime").reset_index(drop=True)

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Decimal –≤ float
    for col in ["open", "high", "low", "close", "volume", "turnover"]:
        df[col] = df[col].astype(float)

    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {symbol}")

    # 3. –°–æ–∑–¥–∞–µ–º –¢–û–ß–ù–´–ï –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑ –æ–±—É—á–µ–Ω–∏—è
    print("\nüîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¢–û–ß–ù–´–• –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –æ–±—É—á–µ–Ω–∏—è...")
    feature_engineer = ExactTrainingFeatures(training_config)
    feature_engineer.disable_progress = True

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–∫–∞–∫ –≤ –æ–±—É—á–µ–Ω–∏–∏)
    df_features = df.copy()

    # –ü–æ—Ä—è–¥–æ–∫ –í–ê–ñ–ï–ù - —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –æ–±—É—á–µ–Ω–∏–∏!
    df_features = feature_engineer._create_basic_features(df_features)
    df_features = feature_engineer._create_technical_indicators(df_features)
    df_features = feature_engineer._create_microstructure_features(df_features)
    df_features = feature_engineer._create_rally_detection_features(df_features)
    df_features = feature_engineer._create_signal_quality_features(df_features)
    df_features = feature_engineer._create_futures_specific_features(df_features)
    df_features = feature_engineer._create_ml_optimized_features(df_features)
    df_features = feature_engineer._create_temporal_features(df_features)

    # Cross-asset features (–µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤)
    if len(df_features["symbol"].unique()) > 1:
        df_features = feature_engineer._create_cross_asset_features(df_features)

    # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ NaN (–≤—Ä–µ–º–µ–Ω–Ω–æ, –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–º –ø–æ–ª–Ω—ã–π –º–µ—Ç–æ–¥)
    # –ó–∞–ø–æ–ª–Ω—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    numeric_cols = df_features.select_dtypes(include=[np.number]).columns
    for col in numeric_cols:
        if df_features[col].isna().any():
            # Forward fill, –∑–∞—Ç–µ–º backward fill, –∑–∞—Ç–µ–º 0
            df_features[col] = df_features[col].ffill().bfill().fillna(0)

    # 4. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\nüìà –ê–Ω–∞–ª–∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")

    # –°–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –æ–±—É—á–µ–Ω–∏—è
    critical_features = [
        "returns",  # LOG returns
        "rsi",  # –û–¥–∏–Ω RSI —Å –ø–µ—Ä–∏–æ–¥–æ–º 14
        "macd",  # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π!
        "volume_ratio",
        "vwap",
        "close_vwap_ratio",
        "atr_pct",  # –í –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        "bb_position",
        "volume_zscore",
        "price_impact",  # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞
        "amihud_illiquidity",  # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω–∞—è
    ]

    print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
    for feat in critical_features:
        if feat in df_features.columns:
            values = df_features[feat].dropna()
            if len(values) > 0:
                print(
                    f"  {feat:20s}: mean={values.mean():8.4f}, std={values.std():8.4f}, "
                    f"min={values.min():8.4f}, max={values.max():8.4f}"
                )
            else:
                print(f"  {feat:20s}: ‚ö†Ô∏è –í—Å–µ NaN")
        else:
            print(f"  {feat:20s}: ‚ùå –ù–ï –ù–ê–ô–î–ï–ù")

    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª
    print("\nüî¨ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª:")

    # MACD –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω (–º–∞–ª—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
    if "macd" in df_features.columns:
        macd_max = df_features["macd"].abs().max()
        if macd_max < 10:
            print(f"  ‚úÖ MACD –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω (max={macd_max:.2f}%)")
        else:
            print(f"  ‚ùå MACD –ù–ï –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω (max={macd_max:.2f})")

    # Returns –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å LOG
    if "returns" in df_features.columns:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è log —Ñ–æ—Ä–º—É–ª–∞
        test_close = df_features["close"].iloc[-10:]
        test_returns = np.log(test_close / test_close.shift(1))
        actual_returns = df_features["returns"].iloc[-10:]

        # –£–±–∏—Ä–∞–µ–º NaN –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º
        test_clean = test_returns.dropna().values
        actual_clean = actual_returns.dropna().values

        # –ë–µ—Ä–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        min_len = min(len(test_clean), len(actual_clean))
        if min_len > 0 and np.allclose(test_clean[:min_len], actual_clean[:min_len], rtol=1e-6):
            print("  ‚úÖ Returns –∏—Å–ø–æ–ª—å–∑—É—é—Ç LOG —Ñ–æ—Ä–º—É–ª—É")
        else:
            print("  ‚ùå Returns –ù–ï –∏—Å–ø–æ–ª—å–∑—É—é—Ç LOG —Ñ–æ—Ä–º—É–ª—É")

    # close_vwap_ratio –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω
    if "close_vwap_ratio" in df_features.columns:
        vwap_min = df_features["close_vwap_ratio"].min()
        vwap_max = df_features["close_vwap_ratio"].max()
        if vwap_min >= 0.7 and vwap_max <= 1.3:
            print(f"  ‚úÖ VWAP ratio –æ–≥—Ä–∞–Ω–∏—á–µ–Ω [{vwap_min:.2f}, {vwap_max:.2f}]")
        else:
            print(f"  ‚ö†Ô∏è VWAP ratio –≤–Ω–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö –≥—Ä–∞–Ω–∏—Ü [{vwap_min:.2f}, {vwap_max:.2f}]")

    # 6. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    total_features = len(df_features.columns)
    numeric_features = df_features.select_dtypes(include=[np.number]).columns
    nan_counts = df_features[numeric_features].isna().sum()
    features_with_nan = (nan_counts > 0).sum()

    print(f"  –í—Å–µ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {total_features}")
    print(f"  –ß–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(numeric_features)}")
    print(f"  –ü—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å NaN: {features_with_nan}")
    print(f"  –°—Ä–µ–¥–Ω–µ–µ NaN –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫: {nan_counts.mean():.1f}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
    zero_variance = []
    for col in numeric_features:
        if df_features[col].std() < 1e-10:
            zero_variance.append(col)

    print(f"  –ü—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å –Ω—É–ª–µ–≤–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–µ–π: {len(zero_variance)}")
    print(f"  –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(numeric_features) - len(zero_variance)}")

    return True


async def compare_with_current():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–æ—á–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    print("\n" + "=" * 80)
    print("üîç –°–†–ê–í–ù–ï–ù–ò–ï –° –¢–ï–ö–£–©–ï–ô –†–ï–ê–õ–ò–ó–ê–¶–ò–ï–ô")
    print("=" * 80)

    from ml.config.features_240 import REQUIRED_FEATURES_240

    print(f"\nüìä –¢–µ–∫—É—â–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–∂–∏–¥–∞–µ—Ç: {len(REQUIRED_FEATURES_240)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    print("üìä –û–±—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ: ~208 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

    print("\n‚ùå –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è:")
    print("  1. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (240 vs 208)")
    print("  2. RSI: –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã vs –æ–¥–∏–Ω")
    print("  3. ETH –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: –µ—Å—Ç—å vs –Ω–µ –±—ã–ª–æ")
    print("  4. –ú–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã")

    print("\n‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:")
    print("  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ExactTrainingFeatures –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    print("  –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏—Ç 100% —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–±—É—á–µ–Ω–∏—é")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ—á–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    success = await test_exact_features()

    if success:
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π
        await compare_with_current()

        print("\n" + "=" * 80)
        print("üéâ –ì–û–¢–û–í–û –ö –ò–ù–¢–ï–ì–†–ê–¶–ò–ò!")
        print("=" * 80)
        print("\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ—á–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
        print("1. –ó–∞–º–µ–Ω–∏—Ç–µ FeatureEngineer –Ω–∞ ExactTrainingFeatures")
        print("2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –æ–±—É—á–µ–Ω–∏—è")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ 208 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è")
        print("4. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
    else:
        print("\n‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")


if __name__ == "__main__":
    asyncio.run(main())
