#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∫—Ä–æ—Å—Å-–ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ Playwright MCP
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ ai_agents
sys.path.append(str(Path(__file__).parent))

from ai_agents import cross_verify, intelligent_ask, smart_ask


async def test_simple_query():
    """–¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å...")

    try:
        result = await smart_ask("–ß—Ç–æ —Ç–∞–∫–æ–µ Python?")

        print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω:")
        print(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {result['complexity_score']}/10")
        print(f"   –ö—Ä–æ—Å—Å-–ø—Ä–æ–≤–µ—Ä–∫–∞: {result['verification_used']}")
        print(f"   –ú–æ–¥–µ–ª–∏: {result['models_used']}")
        print(f"   –û—Ç–≤–µ—Ç: {result['response'][:200]}...")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


async def test_complex_query():
    """–¢–µ—Å—Ç —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å –∫—Ä–æ—Å—Å-–ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É—é —Å–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –∫—Ä–æ—Å—Å-–ø—Ä–æ–≤–µ—Ä–∫–æ–π...")

    try:
        result = await smart_ask(
            "!–∫—Ä–æ—Å—Å! –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
            force_cross_verify=True,
        )

        print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∫—Ä–æ—Å—Å-–ø—Ä–æ–≤–µ—Ä–∫–∏:")
        print(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {result['complexity_score']}/10")
        print(f"   –ö—Ä–æ—Å—Å-–ø—Ä–æ–≤–µ—Ä–∫–∞: {result['verification_used']}")
        print(f"   –ú–æ–¥–µ–ª–∏: {result['models_used']}")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence_score']:.2f}")

        if result.get("analysis"):
            analysis = result["analysis"]
            print(f"   –°–æ–≥–ª–∞—Å–∏–µ: {analysis.get('agreement_level', 'unknown')}")

        print(f"   –û—Ç–≤–µ—Ç: {result['response'][:300]}...")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


async def test_cross_verify_direct():
    """–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –∫—Ä–æ—Å—Å-–ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É—é –ø—Ä—è–º—É—é –∫—Ä–æ—Å—Å-–ø—Ä–æ–≤–µ—Ä–∫—É...")

    try:
        result = await cross_verify(
            "–ö–∞–∫–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —É —è–∑—ã–∫–∞ Python?", models=["grok4", "openai_pro"]
        )

        print("‚úÖ –ü—Ä—è–º–∞—è –∫—Ä–æ—Å—Å-–ø—Ä–æ–≤–µ—Ä–∫–∞:")

        for model, data in result.items():
            print(f"   {model}: {data['status']}")
            if data["status"] == "success":
                print(f"      –û—Ç–≤–µ—Ç: {data['response'][:150]}...")
            else:
                print(f"      –û—à–∏–±–∫–∞: {data['error']}")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


async def test_browser_tabs():
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å –±—Ä–∞—É–∑–µ—Ä–Ω—ã–º–∏ –≤–∫–ª–∞–¥–∫–∞–º–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É—é —Ä–∞–±–æ—Ç—É —Å –±—Ä–∞—É–∑–µ—Ä–Ω—ã–º–∏ –≤–∫–ª–∞–¥–∫–∞–º–∏...")

    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ Grok —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        await intelligent_ask("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?", force_cross_verify=False)

        print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
        return True

    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –±—Ä–∞—É–∑–µ—Ä–æ–º: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É –≤–∞—Å –æ—Ç–∫—Ä—ã—Ç—ã –≤–∫–ª–∞–¥–∫–∏ Grok 4 –∏ OpenAI 3 Pro")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –∫—Ä–æ—Å—Å-–ø—Ä–æ–≤–µ—Ä–∫–∏")
    print("=" * 60)

    tests = [
        ("–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å", test_simple_query),
        ("–°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å", test_complex_query),
        ("–ü—Ä—è–º–∞—è –∫—Ä–æ—Å—Å-–ø—Ä–æ–≤–µ—Ä–∫–∞", test_cross_verify_direct),
        ("–ë—Ä–∞—É–∑–µ—Ä–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏", test_browser_tabs),
    ]

    results = []

    for test_name, test_func in tests:
        print(f"\nüìã {test_name}")
        print("-" * 40)

        try:
            success = await test_func()
            results.append((test_name, success))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {test_name}: {e}")
            results.append((test_name, False))

    # –ò—Ç–æ–≥–∏
    print("\nüìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)

    passed = 0
    for test_name, success in results:
        status = "‚úÖ –ü–†–û–®–ï–õ" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status:10} {test_name}")
        if success:
            passed += 1

    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")

    if passed == len(results):
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏! –°–∏—Å—Ç–µ–º–∞ –∫—Ä–æ—Å—Å-–ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
    else:
        print(
            "‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –∏ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤."
        )

    return passed == len(results)


if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
