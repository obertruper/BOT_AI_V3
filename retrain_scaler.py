#!/usr/bin/env python3
"""
–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ scaler'–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ FeatureEngineer
"""

import asyncio
import pickle
import sys
from pathlib import Path

import numpy as np
from sklearn.preprocessing import RobustScaler

sys.path.append(str(Path(__file__).parent))

from core.config.config_manager import ConfigManager
from core.logger import setup_logger
from data.data_loader import DataLoader
from ml.logic.archive_old_versions.feature_engineering import FeatureEngineer

logger = setup_logger(__name__)


async def retrain_scaler():
    """–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ scaler'–∞ —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏"""
    try:
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ scaler'–∞...")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        config_manager = ConfigManager()
        data_loader = DataLoader(config_manager)
        feature_engineer = FeatureEngineer(config_manager._config)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
        symbols = [
            "BTCUSDT",
            "ETHUSDT",
            "BNBUSDT",
            "SOLUSDT",
            "XRPUSDT",
            "ADAUSDT",
            "DOGEUSDT",
            "DOTUSDT",
            "LINKUSDT",
        ]
        all_features = []

        for symbol in symbols:
            logger.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}...")
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                ohlcv_data = await data_loader.get_data_for_ml(symbol, limit=1000)

                if ohlcv_data is None or len(ohlcv_data) < 300:
                    logger.warning(
                        f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {len(ohlcv_data) if ohlcv_data is not None else 0}"
                    )
                    continue

                logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è {symbol}...")

                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º DataFrame –¥–ª—è FeatureEngineer
                df = ohlcv_data.copy().reset_index()  # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∏–Ω–¥–µ–∫—Å –≤ –∫–æ–ª–æ–Ω–∫–∏
                if "symbol" not in df.columns:
                    df["symbol"] = symbol
                # datetime —É–∂–µ –µ—Å—Ç—å –ø–æ—Å–ª–µ reset_index()

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ú FeatureEngineer
                features = feature_engineer.create_features(df)

                if features is not None and len(features) > 0:
                    logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {features.shape} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è {symbol}")
                    all_features.append(features)
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è {symbol}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {symbol}: {e}")
                continue

        if not all_features:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞!")
            return False

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        logger.info("üìä –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤...")
        combined_features = np.vstack(all_features)
        logger.info(f"–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {combined_features.shape}")

        # –£–±–∏—Ä–∞–µ–º NaN –∏ Inf
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        finite_mask = np.isfinite(combined_features).all(axis=1)
        clean_features = combined_features[finite_mask]
        logger.info(
            f"–ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {clean_features.shape} (—É–¥–∞–ª–µ–Ω–æ {combined_features.shape[0] - clean_features.shape[0]} —Å—Ç—Ä–æ–∫)"
        )

        # –û–±—É—á–∞–µ–º –Ω–æ–≤—ã–π scaler
        logger.info("üîß –û–±—É—á–∞–µ–º –Ω–æ–≤—ã–π RobustScaler...")
        scaler = RobustScaler()
        scaler.fit(clean_features)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º scaler
        scaler_path = Path("models/saved/data_scaler.pkl")
        scaler_path.parent.mkdir(parents=True, exist_ok=True)

        with open(scaler_path, "wb") as f:
            pickle.dump(scaler, f)

        logger.info(f"‚úÖ –ù–æ–≤—ã–π scaler —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {scaler_path}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        normalized = scaler.transform(clean_features[:100])  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –ø–µ—Ä–≤—ã—Ö 100 —Å—Ç—Ä–æ–∫–∞—Ö
        logger.info("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        logger.info(f"  –°—Ä–µ–¥–Ω–µ–µ: {np.mean(normalized):.6f}")
        logger.info(f"  –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {np.std(normalized):.6f}")
        logger.info(f"  –ú–∏–Ω: {np.min(normalized):.6f}")
        logger.info(f"  –ú–∞–∫—Å: {np.max(normalized):.6f}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        feature_vars = np.var(clean_features, axis=0)
        const_features = np.sum(feature_vars < 1e-8)
        logger.info("üéØ –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
        logger.info(f"  –í—Å–µ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {clean_features.shape[1]}")
        logger.info(f"  –ö–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {const_features}")
        logger.info(f"  –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {clean_features.shape[1] - const_features}")

        if const_features > clean_features.shape[1] * 0.5:
            logger.warning(
                f"‚ö†Ô∏è –ú–Ω–æ–≥–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {const_features}/{clean_features.shape[1]}"
            )
        else:
            logger.info(
                f"‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ: {const_features}/{clean_features.shape[1]} –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã—Ö"
            )

        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è scaler'–∞: {e}", exc_info=True)
        return False


if __name__ == "__main__":
    success = asyncio.run(retrain_scaler())
    if success:
        print("‚úÖ Scaler —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω!")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è scaler'–∞")
        sys.exit(1)
