#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤–ª–∏
"""

import asyncio
import os
from datetime import datetime

from dotenv import load_dotenv

load_dotenv()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ["PGPORT"] = "5555"
os.environ["PGUSER"] = "obertruper"
os.environ["PGDATABASE"] = "bot_trading_v3"


async def simple_monitor():
    """–ü—Ä–æ—Å—Ç–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
    from database.connections.postgres import AsyncPGPool

    print("\nüîç –ú–û–ù–ò–¢–û–†–ò–ù–ì –¢–û–†–ì–û–í–õ–ò")
    print("=" * 60)

    try:
        pool = await AsyncPGPool.get_pool()

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ Bybit API
        print("\nüí∞ –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê:")
        from exchanges.bybit.bybit_exchange import BybitExchange

        exchange = BybitExchange(
            api_key=os.getenv("BYBIT_API_KEY"),
            api_secret=os.getenv("BYBIT_API_SECRET"),
            sandbox=False,
        )

        try:
            await exchange.connect()
            balances = await exchange.get_balances()

            for balance in balances:
                if balance.total > 0:
                    print(
                        f"   {balance.currency}: ${balance.total:.2f} (–¥–æ—Å—Ç—É–ø–Ω–æ: ${balance.available:.2f})"
                    )
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        finally:
            await exchange.disconnect()

        # 2. ML —Å–∏–≥–Ω–∞–ª—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç
        print("\nü§ñ ML –°–ò–ì–ù–ê–õ–´ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç):")

        signals = await pool.fetch(
            """
            SELECT
                symbol,
                signal_type,
                strength,
                confidence,
                created_at
            FROM signals
            WHERE created_at > NOW() - INTERVAL '10 minutes'
                AND strategy_name LIKE '%ML%'
            ORDER BY created_at DESC
        """
        )

        if signals:
            long_count = sum(1 for s in signals if s["signal_type"] == "LONG")
            short_count = sum(1 for s in signals if s["signal_type"] == "SHORT")
            neutral_count = len(signals) - long_count - short_count

            print(
                f"   –í—Å–µ–≥–æ: {len(signals)} (LONG: {long_count} üü¢, SHORT: {short_count} üî¥, NEUTRAL: {neutral_count} ‚ö™)"
            )

            print("\n   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–∏–≥–Ω–∞–ª–æ–≤:")
            for signal in signals[:5]:
                emoji = (
                    "üü¢"
                    if signal["signal_type"] == "LONG"
                    else "üî¥"
                    if signal["signal_type"] == "SHORT"
                    else "‚ö™"
                )
                print(
                    f"   {emoji} {signal['symbol']} - {signal['signal_type']} "
                    f"(—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal['confidence']:.0%}, —Å–∏–ª–∞: {signal['strength']:.4f}) "
                    f"–≤ {signal['created_at'].strftime('%H:%M:%S')}"
                )
        else:
            print("   ‚ùå –ù–µ—Ç ML —Å–∏–≥–Ω–∞–ª–æ–≤")

        # 3. –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
        print("\nüí± –ü–û–°–õ–ï–î–ù–ò–ï –û–†–î–ï–†–ê (2 —á–∞—Å–∞):")

        orders = await pool.fetch(
            """
            SELECT
                id,
                symbol,
                side,
                order_type,
                price,
                quantity,
                status,
                created_at
            FROM orders
            WHERE created_at > NOW() - INTERVAL '2 hours'
            ORDER BY created_at DESC
            LIMIT 10
        """
        )

        if orders:
            market_count = sum(1 for o in orders if o["order_type"] == "MARKET")
            limit_count = sum(1 for o in orders if o["order_type"] == "LIMIT")

            print(
                f"   –í—Å–µ–≥–æ: {len(orders)} (MARKET: {market_count} üí≤, LIMIT: {limit_count} üìä)"
            )

            print("\n   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞:")
            for order in orders[:5]:
                status_emoji = (
                    "‚úÖ"
                    if order["status"] == "FILLED"
                    else "‚è≥"
                    if order["status"] in ["NEW", "OPEN"]
                    else "‚ùå"
                )
                order_type = "üí≤" if order["order_type"] == "MARKET" else "üìä"
                price_info = (
                    f" @ ${order['price']}"
                    if order["order_type"] == "LIMIT" and order["price"]
                    else ""
                )
                print(
                    f"   {status_emoji} {order_type} #{order['id']} {order['symbol']} {order['side']} "
                    f"{order['quantity']}{price_info} - {order['status']} "
                    f"–≤ {order['created_at'].strftime('%H:%M:%S')}"
                )
        else:
            print("   ‚ùå –ù–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤")

        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        print("\nüìä –ê–ö–¢–£–ê–õ–¨–ù–û–°–¢–¨ –î–ê–ù–ù–´–•:")

        data_stats = await pool.fetch(
            """
            SELECT
                symbol,
                MAX(datetime) as latest,
                COUNT(*) as count
            FROM raw_market_data
            WHERE interval_minutes = 15
                AND symbol IN ('BTCUSDT', 'ETHUSDT', 'SOLUSDT')
            GROUP BY symbol
            ORDER BY symbol
        """
        )

        for stat in data_stats:
            lag = datetime.now() - stat["latest"].replace(tzinfo=None)
            lag_minutes = int(lag.total_seconds() / 60)
            status = "‚úÖ" if lag_minutes < 30 else "‚ö†Ô∏è" if lag_minutes < 60 else "‚ùå"
            print(
                f"   {status} {stat['symbol']}: –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ {lag_minutes} –º–∏–Ω –Ω–∞–∑–∞–¥ ({stat['count']} —Å–≤–µ—á–µ–π)"
            )

        print("\n" + "=" * 60)

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()
    finally:
        await AsyncPGPool.close_pool()


if __name__ == "__main__":
    asyncio.run(simple_monitor())
