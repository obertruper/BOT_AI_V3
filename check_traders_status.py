#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ML —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import asyncio
import os
from datetime import datetime

from dotenv import load_dotenv

load_dotenv()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ["PGPORT"] = "5555"
os.environ["PGUSER"] = "obertruper"
os.environ["PGDATABASE"] = "bot_trading_v3"


async def check_traders():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    from core.config.config_manager import get_global_config_manager
    from database.connections.postgres import AsyncPGPool

    print(
        f"\nüîç –ü–†–û–í–ï–†–ö–ê –¢–†–ï–ô–î–ï–†–û–í –ò ML –°–ò–ì–ù–ê–õ–û–í - {datetime.now().strftime('%H:%M:%S')}"
    )
    print("=" * 60)

    try:
        pool = await AsyncPGPool.get_pool()
        config_manager = get_global_config_manager()
        config = config_manager.get_config()

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
        print("\n1Ô∏è‚É£ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –¢–†–ï–ô–î–ï–†–û–í:")

        traders = config.get("traders", [])
        ml_traders = [t for t in traders if t.get("strategy") == "ml_signal"]

        for trader in ml_traders:
            print(f"\n   ü§ñ {trader['id']}:")
            print(f"      Enabled: {trader.get('enabled', False)}")
            print(f"      Exchange: {trader.get('exchange', 'N/A')}")
            print(f"      Symbols: {trader.get('symbols', [])[:3]}...")

            strategy_config = trader.get("strategy_config", {})
            print(
                f"      Min confidence: {strategy_config.get('min_confidence', 0.6):.0%}"
            )
            print(
                f"      Signal interval: {strategy_config.get('signal_interval', 60)} —Å–µ–∫"
            )

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
        print("\n2Ô∏è‚É£ –ê–ö–¢–ò–í–ù–´–ï –ü–†–û–¶–ï–°–°–´:")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω—ã –ª–∏ —Ç—Ä–µ–π–¥–µ—Ä—ã
        from core.system.process_manager import ProcessManager

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        try:
            process_manager = ProcessManager()
            processes = process_manager.get_all_statuses()

            ml_processes = {k: v for k, v in processes.items() if "ml" in k.lower()}

            if ml_processes:
                for name, status in ml_processes.items():
                    print(f"   {name}: {status}")
            else:
                print("   ‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö ML –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        except Exception as e:
            print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã –≤ –ë–î
        print("\n3Ô∏è‚É£ –ü–û–°–õ–ï–î–ù–ò–ï –°–ò–ì–ù–ê–õ–´ –í –ë–î:")

        # –°–∏–≥–Ω–∞–ª—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        signals = await pool.fetch(
            """
            SELECT
                symbol,
                signal_type,
                confidence,
                strength,
                strategy_name,
                created_at
            FROM signals
            WHERE created_at > NOW() - INTERVAL '1 hour'
            ORDER BY created_at DESC
            LIMIT 20
        """
        )

        if signals:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            by_strategy = {}
            for sig in signals:
                strategy = sig["strategy_name"]
                if strategy not in by_strategy:
                    by_strategy[strategy] = []
                by_strategy[strategy].append(sig)

            for strategy, sigs in by_strategy.items():
                print(f"\n   üìä {strategy}: {len(sigs)} —Å–∏–≥–Ω–∞–ª–æ–≤")
                for sig in sigs[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    print(
                        f"      {sig['created_at'].strftime('%H:%M:%S')} - {sig['symbol']}: "
                        f"{sig['signal_type']} ({sig['confidence']:.0%})"
                    )
        else:
            print("   ‚ùå –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å")

        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –æ—à–∏–±–æ–∫
        print("\n4Ô∏è‚É£ –ü–û–°–õ–ï–î–ù–ò–ï –û–®–ò–ë–ö–ò ML:")

        # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ª–æ–≥–æ–≤
        log_file = "logs/core.log"
        if os.path.exists(log_file):
            with open(log_file, "r") as f:
                lines = f.readlines()

            # –ò—â–µ–º ML –æ—à–∏–±–∫–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 100 —Å—Ç—Ä–æ–∫–∞—Ö
            ml_errors = []
            for line in lines[-100:]:
                if "ERROR" in line and (
                    "ML" in line or "ml_" in line or "signal" in line
                ):
                    ml_errors.append(line.strip())

            if ml_errors:
                print(f"   –ù–∞–π–¥–µ–Ω–æ {len(ml_errors)} –æ—à–∏–±–æ–∫:")
                for error in ml_errors[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5
                    # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                    if len(error) > 100:
                        error = error[:97] + "..."
                    print(f"      {error}")
            else:
                print("   ‚úÖ –ù–µ—Ç ML –æ—à–∏–±–æ–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–∞—Ö")

        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
        print("\n5Ô∏è‚É£ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö ML –°–ò–ì–ù–ê–õ–û–í:")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É jobs –µ—Å–ª–∏ –µ—Å—Ç—å
        try:
            jobs = await pool.fetch(
                """
                SELECT name, status, last_run, next_run
                FROM scheduled_jobs
                WHERE name LIKE '%ml%' OR name LIKE '%signal%'
                ORDER BY next_run
                LIMIT 5
            """
            )

            if jobs:
                for job in jobs:
                    print(f"   {job['name']}: {job['status']}")
                    print(f"      Last run: {job['last_run']}")
                    print(f"      Next run: {job['next_run']}")
            else:
                print("   ‚ÑπÔ∏è –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö ML –∑–∞–¥–∞—á")
        except Exception:
            print("   ‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ scheduled_jobs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("\n6Ô∏è‚É£ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")

        if not ml_traders:
            print("   ‚ö†Ô∏è –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö ML —Ç—Ä–µ–π–¥–µ—Ä–æ–≤!")
            print("   üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ config/traders.yaml")
        elif not any(t.get("enabled") for t in ml_traders):
            print("   ‚ö†Ô∏è –í—Å–µ ML —Ç—Ä–µ–π–¥–µ—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã!")
            print("   üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ enabled: true –≤ config/traders.yaml")
        elif not signals:
            print("   ‚ö†Ô∏è ML —Ç—Ä–µ–π–¥–µ—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –Ω–æ —Å–∏–≥–Ω–∞–ª—ã –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è")
            print("   üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
            print("      - –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–≤–µ–∂–∏–µ —Å–≤–µ—á–∏)")
            print("      - –õ–æ–≥–∏ –æ—à–∏–±–æ–∫ –≤ logs/core.log")
            print("      - –ú–∏–Ω–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (–≤–æ–∑–º–æ–∂–Ω–æ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è)")
        else:
            print("   ‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–∏–≥–Ω–∞–ª—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è")

        print("\n" + "=" * 60)

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()
    finally:
        await AsyncPGPool.close_pool()


if __name__ == "__main__":
    asyncio.run(check_traders())
