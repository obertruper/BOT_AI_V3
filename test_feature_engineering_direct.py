#!/usr/bin/env python3
"""
–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç feature engineering —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É
"""

import asyncio

import numpy as np
import pandas as pd
from sqlalchemy import and_, select

from core.config.config_manager import ConfigManager
from core.logger import setup_logger
from database.connections import get_async_db
from database.models.market_data import RawMarketData
from ml.logic.feature_engineering_v2 import FeatureEngineer

logger = setup_logger(__name__)


async def test_feature_engineering_with_real_data():
    """–¢–µ—Å—Ç feature engineering —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î"""

    config_manager = ConfigManager()
    config = config_manager.get_config()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –¥–ª—è BTCUSDT
    symbol = "BTCUSDT"

    async with get_async_db() as db:
        stmt = (
            select(RawMarketData)
            .where(
                and_(
                    RawMarketData.symbol == symbol,
                    RawMarketData.exchange == "bybit",
                    RawMarketData.interval_minutes == 15,
                )
            )
            .order_by(RawMarketData.datetime.desc())
            .limit(200)
        )

        result = await db.execute(stmt)
        data = result.scalars().all()

        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {symbol}")

        if len(data) < 96:
            logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(data)} < 96")
            return

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
        df = pd.DataFrame(
            [
                {
                    "datetime": d.datetime,
                    "symbol": d.symbol,
                    "open": float(d.open),
                    "high": float(d.high),
                    "low": float(d.low),
                    "close": float(d.close),
                    "volume": float(d.volume),
                    "turnover": float(d.turnover) if d.turnover else 0,
                }
                for d in reversed(data)  # –†–µ–≤–µ—Ä—Å –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
            ]
        )

        logger.info(f"DataFrame —Å–æ–∑–¥–∞–Ω: {df.shape}")
        logger.info(f"–ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
        logger.info(f"–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞:\n{df.iloc[0]}")
        logger.info(f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞:\n{df.iloc[-1]}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º feature engineering
        try:
            fe = FeatureEngineer(config)
            logger.info("\n–ó–∞–ø—É—Å–∫–∞–µ–º create_features...")

            features = fe.create_features(df)

            logger.info("\n–†–µ–∑—É–ª—å—Ç–∞—Ç:")
            logger.info(f"  –¢–∏–ø: {type(features)}")
            if isinstance(features, np.ndarray):
                logger.info(f"  –§–æ—Ä–º–∞: {features.shape}")
                logger.info(
                    f"  –ü–µ—Ä–≤—ã–µ 10 –∑–Ω–∞—á–µ–Ω–∏–π: {features[:10] if features.ndim == 1 else features[0, :10]}"
                )
                logger.info(f"  –°–æ–¥–µ—Ä–∂–∏—Ç NaN: {np.isnan(features).any()}")
                logger.info(f"  –°–æ–¥–µ—Ä–∂–∏—Ç Inf: {np.isinf(features).any()}")
            elif isinstance(features, pd.DataFrame):
                logger.info(f"  –§–æ—Ä–º–∞: {features.shape}")
                logger.info(f"  –ö–æ–ª–æ–Ω–∫–∏: {list(features.columns)[:10]}...")
                logger.info(f"  –°–æ–¥–µ—Ä–∂–∏—Ç NaN: {features.isna().any().any()}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ feature engineering: {e}", exc_info=True)


async def test_simple_feature_engineering():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""

    config_manager = ConfigManager()
    config = config_manager.get_config()

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    dates = pd.date_range(start="2024-01-01", periods=100, freq="15min")

    df = pd.DataFrame(
        {
            "datetime": dates,
            "symbol": "BTCUSDT",
            "open": 42000 + np.random.randn(100) * 100,
            "high": 42100 + np.random.randn(100) * 100,
            "low": 41900 + np.random.randn(100) * 100,
            "close": 42000 + np.random.randn(100) * 100,
            "volume": 1000 + np.random.randn(100) * 10,
            "turnover": 42000000 + np.random.randn(100) * 100000,
        }
    )

    # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ high >= open,close –∏ low <= open,close
    df["high"] = df[["open", "high", "close"]].max(axis=1)
    df["low"] = df[["open", "low", "close"]].min(axis=1)

    logger.info("\n–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    logger.info(f"  –§–æ—Ä–º–∞: {df.shape}")
    logger.info(f"  –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:\n{df.dtypes}")

    try:
        fe = FeatureEngineer(config)
        features = fe.create_features(df)

        logger.info("\n–†–µ–∑—É–ª—å—Ç–∞—Ç create_features:")
        logger.info(f"  –í–æ–∑–≤—Ä–∞—â–µ–Ω —Ç–∏–ø: {type(features)}")

        if hasattr(features, "shape"):
            logger.info(f"  –§–æ—Ä–º–∞: {features.shape}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    logger.info("\n" + "=" * 80)
    logger.info("üß™ –¢–µ—Å—Ç Feature Engineering")
    logger.info("=" * 80 + "\n")

    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
    logger.info("1. –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    await test_simple_feature_engineering()

    # –¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    logger.info("\n2. –¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î")
    await test_feature_engineering_with_real_data()


if __name__ == "__main__":
    asyncio.run(main())
