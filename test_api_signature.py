#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å API –∑–∞–ø—Ä–æ—Å–æ–≤ Bybit
"""

import hashlib
import hmac
import json
import os
import time

from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


def test_signature():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ–¥–ø–∏—Å–∏"""

    api_key = os.getenv("BYBIT_API_KEY")
    api_secret = os.getenv("BYBIT_API_SECRET")

    print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–æ–¥–ø–∏—Å–∏ Bybit")
    print("=" * 50)
    print(f"API Key –∏–∑ .env: '{api_key}'")
    print(f"API Key –¥–ª–∏–Ω–∞: {len(api_key)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"API Secret –∏–∑ .env: '{api_secret}'")
    print(f"API Secret –¥–ª–∏–Ω–∞: {len(api_secret)} —Å–∏–º–≤–æ–ª–æ–≤")
    print("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –ª–∏ –∫–ª—é—á–∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã:")
    print(f"–ü–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª key: ord('{api_key[0]}') = {ord(api_key[0])}")
    print(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª key: ord('{api_key[-1]}') = {ord(api_key[-1])}")
    print(f"–ü–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª secret: ord('{api_secret[0]}') = {ord(api_secret[0])}")
    print(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª secret: ord('{api_secret[-1]}') = {ord(api_secret[-1])}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    import string

    printable = set(string.printable)

    non_printable_key = [c for c in api_key if c not in printable]
    non_printable_secret = [c for c in api_secret if c not in printable]

    if non_printable_key:
        print(f"‚ö†Ô∏è –ù–µ–ø–µ—á–∞—Ç–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ API key: {non_printable_key}")
    if non_printable_secret:
        print(f"‚ö†Ô∏è –ù–µ–ø–µ—á–∞—Ç–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ API secret: {non_printable_secret}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –∫–∞–∫ –≤ Bybit
    print("\nüìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∏:")
    timestamp = str(int(time.time() * 1000))
    recv_window = "5000"

    # –î–ª—è GET –∑–∞–ø—Ä–æ—Å–∞ –∫ /v5/account/wallet-balance
    params = "accountType=UNIFIED&coin=USDT"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ (GET –∑–∞–ø—Ä–æ—Å)
    param_str = timestamp + api_key + recv_window + params
    print(f"–°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏: {param_str[:50]}...")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
    signature = hmac.new(
        bytes(api_secret, "utf-8"), bytes(param_str, "utf-8"), hashlib.sha256
    ).hexdigest()

    print(f"–ü–æ–¥–ø–∏—Å—å: {signature}")
    print(f"–î–ª–∏–Ω–∞ –ø–æ–¥–ø–∏—Å–∏: {len(signature)} —Å–∏–º–≤–æ–ª–æ–≤")

    # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–±—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    print("\nüåê –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ Bybit API:")
    import asyncio

    import aiohttp

    async def test_request():
        url = "https://api.bybit.com/v5/account/wallet-balance"

        headers = {
            "X-BAPI-API-KEY": api_key,
            "X-BAPI-TIMESTAMP": timestamp,
            "X-BAPI-SIGN": signature,
            "X-BAPI-RECV-WINDOW": recv_window,
        }

        params = {"accountType": "UNIFIED", "coin": "USDT"}

        print(f"Headers: {json.dumps(headers, indent=2)}")
        print(f"Params: {params}")

        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers, params=params) as response:
                status = response.status
                text = await response.text()

                print("\nüì® –û—Ç–≤–µ—Ç –æ—Ç Bybit:")
                print(f"–°—Ç–∞—Ç—É—Å: {status}")
                print(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {text[:500]}")

                if status == 200:
                    data = json.loads(text)
                    if data.get("retCode") == 0:
                        print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ API: {data.get('retMsg')}")
                else:
                    print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {status}")

    asyncio.run(test_request())


if __name__ == "__main__":
    test_signature()
