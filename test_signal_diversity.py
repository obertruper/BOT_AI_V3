#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö LONG/SHORT —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

import numpy as np
import pandas as pd

from core.config.config_manager import ConfigManager
from core.logger import setup_logger
from database.connections import init_db
from ml.ml_manager import MLManager
from ml.ml_signal_processor import MLSignalProcessor

logger = setup_logger("test_signal_diversity")


async def test_signal_generation():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
    """
    try:
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        config_manager = ConfigManager()
        config = config_manager.get_config()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        await init_db()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML Manager
        ml_manager = MLManager(config)
        await ml_manager.initialize()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML Signal Processor
        signal_processor = MLSignalProcessor(ml_manager, config, config_manager)
        await signal_processor.initialize()

        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
        symbols = ["BTCUSDT", "ETHUSDT", "SOLUSDT", "BNBUSDT", "XRPUSDT"]

        # –°—á–µ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal_counts = {"LONG": 0, "SHORT": 0, "NEUTRAL": 0, "TOTAL": 0}

        logger.info("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤...")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        for symbol in symbols:
            logger.info(f"\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {symbol}...")

            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞
                # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ –∑–¥–µ—Å—å –±—É–¥—É—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ OHLCV –¥–∞–Ω–Ω—ã–µ
                np.random.seed(hash(symbol) % 1000)  # –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏

                # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ OHLCV –¥–∞–Ω–Ω—ã–µ
                dates = pd.date_range(end=pd.Timestamp.now(), periods=100, freq="15min")
                price_base = 100 * (1 + np.random.rand())
                price_changes = np.random.randn(100) * 0.01
                prices = price_base * np.cumprod(1 + price_changes)

                ohlcv_data = pd.DataFrame(
                    {
                        "datetime": dates,
                        "open": prices * (1 + np.random.randn(100) * 0.001),
                        "high": prices * (1 + np.abs(np.random.randn(100)) * 0.002),
                        "low": prices * (1 - np.abs(np.random.randn(100)) * 0.002),
                        "close": prices,
                        "volume": np.random.randint(1000, 10000, 100),
                        "symbol": symbol,
                    }
                )

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
                signal = await signal_processor.process_market_data(
                    symbol=symbol,
                    exchange="bybit",
                    ohlcv_data=ohlcv_data,
                    additional_data={"current_price": float(prices[-1])},
                )

                if signal:
                    signal_type = signal.signal_type.name
                    signal_counts[signal_type] = signal_counts.get(signal_type, 0) + 1
                    signal_counts["TOTAL"] += 1

                    logger.info(
                        f"‚úÖ {symbol}: {signal_type} —Å–∏–≥–Ω–∞–ª "
                        f"(confidence: {signal.confidence:.2f}, strength: {signal.strength:.2f})"
                    )
                else:
                    signal_counts["NEUTRAL"] += 1
                    signal_counts["TOTAL"] += 1
                    logger.info(f"‚ö™ {symbol}: –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ (NEUTRAL)")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {symbol}: {e}")
                continue

        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        logger.info("\n" + "=" * 60)
        logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê –†–ê–ó–ù–û–û–ë–†–ê–ó–ò–Ø –°–ò–ì–ù–ê–õ–û–í")
        logger.info("=" * 60)

        if signal_counts["TOTAL"] > 0:
            long_pct = (signal_counts.get("LONG", 0) / signal_counts["TOTAL"]) * 100
            short_pct = (signal_counts.get("SHORT", 0) / signal_counts["TOTAL"]) * 100
            neutral_pct = (signal_counts.get("NEUTRAL", 0) / signal_counts["TOTAL"]) * 100

            logger.info(f"üìà LONG —Å–∏–≥–Ω–∞–ª–æ–≤:    {signal_counts.get('LONG', 0)} ({long_pct:.1f}%)")
            logger.info(f"üìâ SHORT —Å–∏–≥–Ω–∞–ª–æ–≤:   {signal_counts.get('SHORT', 0)} ({short_pct:.1f}%)")
            logger.info(
                f"‚ö™ NEUTRAL —Å–∏–≥–Ω–∞–ª–æ–≤: {signal_counts.get('NEUTRAL', 0)} ({neutral_pct:.1f}%)"
            )
            logger.info(f"üìä –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤:   {signal_counts['TOTAL']}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
            if long_pct > 80:
                logger.error("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ LONG —Å–∏–≥–Ω–∞–ª–æ–≤!")
                logger.error("   –ú–æ–¥–µ–ª—å –≤—Å–µ –µ—â–µ –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π")
            elif short_pct > 80:
                logger.error("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ SHORT —Å–∏–≥–Ω–∞–ª–æ–≤!")
                logger.error("   –ú–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –ø–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω–∞")
            elif long_pct == 0:
                logger.error("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç LONG —Å–∏–≥–Ω–∞–ª–æ–≤ –≤–æ–æ–±—â–µ!")
            elif short_pct == 0:
                logger.error("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç SHORT —Å–∏–≥–Ω–∞–ª–æ–≤ –≤–æ–æ–±—â–µ!")
            else:
                logger.info("‚úÖ –£–°–ü–ï–•: –°–∏–≥–Ω–∞–ª—ã —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã!")
                logger.info(f"   –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ LONG/SHORT: {long_pct:.1f}% / {short_pct:.1f}%")

                if 30 <= long_pct <= 70 and 30 <= short_pct <= 70:
                    logger.info("üéØ –û–¢–õ–ò–ß–ù–û: –ò–¥–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏!")
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞")

        logger.info("\n" + "=" * 60)
        logger.info("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}", exc_info=True)
        raise


if __name__ == "__main__":
    asyncio.run(test_signal_generation())
