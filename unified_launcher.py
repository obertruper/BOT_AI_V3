#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã BOT_AI_V3

–£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏:
- Core System (—Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ + ML)
- Web API (FastAPI)
- Frontend (React/Vite)
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ health checks
"""

import argparse
import asyncio
import os
import signal
import subprocess
import sys
from datetime import datetime
from enum import Enum
from pathlib import Path
from typing import Any, Dict, Optional

import psutil
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from core.config.config_manager import ConfigManager
from core.logger import setup_logger
from core.system.health_monitor import HealthMonitor
from core.system.process_manager import ProcessManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logger("unified_launcher")


class LaunchMode(Enum):
    """–†–µ–∂–∏–º—ã –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""

    FULL = "full"  # –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    CORE = "core"  # –¢–æ–ª—å–∫–æ —Ç–æ—Ä–≥–æ–≤–ª—è
    DEV = "dev"  # –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    API = "api"  # –¢–æ–ª—å–∫–æ API + Frontend
    ML = "ml"  # Core + ML –±–µ–∑ frontend


class UnifiedLauncher:
    """
    –ì–ª–∞–≤–Ω—ã–π –ª–∞—É–Ω—á–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã
    """

    def __init__(self, mode: LaunchMode = LaunchMode.FULL):
        self.mode = mode
        self.config_manager = ConfigManager()
        self.process_manager = ProcessManager()
        self.health_monitor = HealthMonitor()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config = self.config_manager.get_config()
        self.unified_config = self.config.get("unified_system", {})

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        self.is_running = False
        self.startup_time: Optional[datetime] = None
        self.shutdown_event = asyncio.Event()

        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        self.components_config = self._get_components_config()

        # PID —Ñ–∞–π–ª—ã
        self.pid_dir = Path("logs/pids")
        self.pid_dir.mkdir(parents=True, exist_ok=True)

    def _get_components_config(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞"""
        base_config = self.unified_config.get("components", {})

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_config = {
            "core": {
                "enabled": True,
                "command": f"{sys.executable} main.py",
                "name": "Core System",
                "auto_restart": True,
                "health_check_endpoint": None,
                "startup_delay": 0,
                "env": {"UNIFIED_MODE": "true"},
            },
            "ml": {
                "enabled": True,
                "command": None,  # ML –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ Core
                "name": "ML System",
                "auto_restart": True,
                "health_check_endpoint": None,
                "startup_delay": 0,
                "integrated_with": "core",
            },
            "api": {
                "enabled": True,
                "command": f"{sys.executable} web/launcher.py",
                "name": "Web API",
                "port": 8080,
                "auto_restart": True,
                "health_check_endpoint": "http://localhost:8080/api/health",
                "startup_delay": 3,
                "env": {
                    "UNIFIED_MODE": "true",
                    "PYTHONPATH": str(Path(__file__).parent),
                },
            },
            "frontend": {
                "enabled": True,
                "command": "npm run dev -- --host",
                "name": "Frontend",
                "port": 5173,
                "auto_restart": False,
                "health_check_endpoint": "http://localhost:5173",
                "startup_delay": 5,
                "cwd": "web/frontend",
                "env": {"VITE_API_URL": "http://localhost:8080"},
            },
        }

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏–∑ —Ñ–∞–π–ª–∞
        for comp_name, comp_config in default_config.items():
            if comp_name in base_config:
                comp_config.update(base_config[comp_name])
            default_config[comp_name] = comp_config

        # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if self.mode == LaunchMode.CORE:
            default_config["api"]["enabled"] = False
            default_config["frontend"]["enabled"] = False
        elif self.mode == LaunchMode.API:
            default_config["core"]["enabled"] = False
            default_config["ml"]["enabled"] = False
        elif self.mode == LaunchMode.ML:
            default_config["frontend"]["enabled"] = False
        elif self.mode == LaunchMode.DEV:
            # –í dev —Ä–µ–∂–∏–º–µ –æ—Ç–∫–ª—é—á–∞–µ–º auto_restart
            for comp in default_config.values():
                comp["auto_restart"] = False

        return default_config

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("=" * 80)
        logger.info("üöÄ BOT_AI_V3 - –ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—Å–∫–∞")
        logger.info(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        logger.info(f"üéØ –†–µ–∂–∏–º: {self.mode.value}")
        logger.info("=" * 80)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        await self._check_dependencies()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        await self.process_manager.initialize()
        await self.health_monitor.initialize(self.components_config)

        self.startup_time = datetime.now()
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    async def _check_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
        try:
            import asyncpg

            conn = await asyncpg.connect(
                host=os.getenv("PGHOST", "localhost"),
                port=int(os.getenv("PGPORT", "5555")),
                user=os.getenv("PGUSER"),
                password=os.getenv("PGPASSWORD"),
                database=os.getenv("PGDATABASE"),
            )
            await conn.close()
            logger.info("‚úÖ PostgreSQL –¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js –¥–ª—è frontend
        if self.components_config["frontend"]["enabled"]:
            try:
                result = subprocess.run(
                    ["node", "--version"], capture_output=True, text=True
                )
                if result.returncode == 0:
                    logger.info(f"‚úÖ Node.js {result.stdout.strip()}")
                else:
                    raise Exception("Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω")
            except Exception as e:
                logger.error(f"‚ùå Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
                self.components_config["frontend"]["enabled"] = False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ ML –º–æ–¥–µ–ª–∏
        ml_model_path = Path("models/saved/best_model_20250728_215703.pth")
        if ml_model_path.exists():
            logger.info("‚úÖ ML –º–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞")
        else:
            logger.warning("‚ö†Ô∏è ML –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            if self.mode == LaunchMode.ML:
                logger.error("‚ùå ML —Ä–µ–∂–∏–º —Ç—Ä–µ–±—É–µ—Ç –Ω–∞–ª–∏—á–∏—è –º–æ–¥–µ–ª–∏")
                raise FileNotFoundError("ML –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        logger.info("\nüîÑ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        self.is_running = True

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        components_order = ["core", "api", "frontend"]  # ML –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ core

        for comp_name in components_order:
            comp_config = self.components_config.get(comp_name, {})

            if not comp_config.get("enabled", False):
                continue

            if comp_config.get("integrated_with"):
                # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ –¥—Ä—É–≥–æ–π
                logger.info(
                    f"üì¶ {comp_config['name']} –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ {comp_config['integrated_with']}"
                )
                continue

            try:
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
                if comp_config.get("startup_delay", 0) > 0:
                    await asyncio.sleep(comp_config["startup_delay"])

                # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
                pid = await self.process_manager.start_component(
                    name=comp_name,
                    command=comp_config["command"],
                    cwd=comp_config.get("cwd"),
                    env=comp_config.get("env", {}),
                    auto_restart=comp_config.get("auto_restart", True),
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º PID
                pid_file = self.pid_dir / f"{comp_name}.pid"
                pid_file.write_text(str(pid))

                logger.info(f"‚úÖ {comp_config['name']} –∑–∞–ø—É—â–µ–Ω (PID: {pid})")

                # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                if comp_config.get("health_check_endpoint"):
                    await self._wait_for_component(
                        comp_name, comp_config["health_check_endpoint"]
                    )

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {comp_config['name']}: {e}")
                if self.mode != LaunchMode.DEV:
                    raise

        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        asyncio.create_task(self._monitor_system())

        logger.info("\n‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        await self._print_system_info()

    async def _wait_for_component(self, name: str, endpoint: str, timeout: int = 30):
        """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        import aiohttp

        logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ {name}...")
        start_time = asyncio.get_event_loop().time()

        async with aiohttp.ClientSession() as session:
            while asyncio.get_event_loop().time() - start_time < timeout:
                try:
                    async with session.get(endpoint, timeout=2) as resp:
                        if resp.status < 500:
                            logger.info(f"‚úÖ {name} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
                            return
                except:
                    pass
                await asyncio.sleep(1)

        logger.warning(f"‚ö†Ô∏è {name} –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ {timeout} —Å–µ–∫—É–Ω–¥")

    async def _monitor_system(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        while self.is_running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º health –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                health_status = await self.health_monitor.check_all()

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–∑–¥–æ—Ä–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                for comp_name, status in health_status.items():
                    if not status["healthy"] and self.components_config[comp_name].get(
                        "auto_restart"
                    ):
                        logger.warning(
                            f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ {comp_name}: {status.get('error')}"
                        )
                        await self.process_manager.restart_component(comp_name)

                # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                metrics = await self._collect_metrics()
                if metrics["memory_percent"] > 80:
                    logger.warning(
                        f"‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {metrics['memory_percent']:.1f}%"
                    )

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

            # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
            await asyncio.sleep(30)

    async def _collect_metrics(self) -> Dict[str, float]:
        """–°–±–æ—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        metrics = {
            "cpu_percent": psutil.cpu_percent(interval=1),
            "memory_percent": psutil.virtual_memory().percent,
            "disk_usage": psutil.disk_usage("/").percent,
            "active_processes": len(self.process_manager.processes),
            "uptime_hours": (datetime.now() - self.startup_time).total_seconds() / 3600,
        }
        return metrics

    async def _print_system_info(self):
        """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
        logger.info("\n" + "=" * 60)
        logger.info("üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï")
        logger.info("=" * 60)

        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        logger.info("\nüîß –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
        for comp_name, comp_config in self.components_config.items():
            if comp_config.get("enabled"):
                status = (
                    "‚úÖ –ó–∞–ø—É—â–µ–Ω"
                    if comp_name in self.process_manager.processes
                    else "‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                )
                logger.info(f"  {comp_config['name']}: {status}")

        # URL-–∞–¥—Ä–µ—Å–∞
        logger.info("\nüåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:")
        if self.components_config["frontend"]["enabled"]:
            logger.info("  Dashboard: http://localhost:5173")
        if self.components_config["api"]["enabled"]:
            logger.info("  API: http://localhost:8080")
            logger.info("  API Docs: http://localhost:8080/api/docs")

        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics = await self._collect_metrics()
        logger.info("\nüíª –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
        logger.info(f"  CPU: {metrics['cpu_percent']:.1f}%")
        logger.info(f"  –ü–∞–º—è—Ç—å: {metrics['memory_percent']:.1f}%")
        logger.info(f"  –î–∏—Å–∫: {metrics['disk_usage']:.1f}%")

        logger.info("\n" + "=" * 60)

    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã"""
        logger.info("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        logger.info("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")

        # –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        await self.shutdown_event.wait()

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        logger.info("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        self.is_running = False

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        await self.health_monitor.stop()

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        await self.process_manager.stop_all()

        # –û—á–∏—â–∞–µ–º PID —Ñ–∞–π–ª—ã
        for pid_file in self.pid_dir.glob("*.pid"):
            pid_file.unlink()

        logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        logger.info("üëã BOT_AI_V3 –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

    def handle_signal(self, sig, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        logger.info(f"\nüì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {sig}")
        self.shutdown_event.set()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    parser = argparse.ArgumentParser(description="BOT_AI_V3 Unified Launcher")
    parser.add_argument(
        "--mode",
        type=str,
        choices=[mode.value for mode in LaunchMode],
        default=LaunchMode.FULL.value,
        help="–†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã",
    )
    parser.add_argument("--status", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
    parser.add_argument("--logs", action="store_true", help="–°–ª–µ–¥–∏—Ç—å –∑–∞ –ª–æ–≥–∞–º–∏")

    args = parser.parse_args()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    if args.status:
        await show_status()
        return

    # –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
    if args.logs:
        await follow_logs()
        return

    # –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
    launcher = UnifiedLauncher(mode=LaunchMode(args.mode))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, launcher.handle_signal)
    signal.signal(signal.SIGTERM, launcher.handle_signal)

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        await launcher.initialize()

        # –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        await launcher.start()

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        await launcher.run()

    except KeyboardInterrupt:
        logger.info("\n‚å®Ô∏è –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()
    finally:
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞
        await launcher.stop()


async def show_status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    logger.info("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã BOT_AI_V3")
    logger.info("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º PID —Ñ–∞–π–ª—ã
    pid_dir = Path("logs/pids")
    if not pid_dir.exists():
        logger.info("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞")
        return

    for pid_file in pid_dir.glob("*.pid"):
        try:
            pid = int(pid_file.read_text())
            process = psutil.Process(pid)

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            info = {
                "name": pid_file.stem,
                "pid": pid,
                "status": process.status(),
                "cpu_percent": process.cpu_percent(interval=0.1),
                "memory_mb": process.memory_info().rss / 1024 / 1024,
                "create_time": datetime.fromtimestamp(process.create_time()),
            }

            uptime = datetime.now() - info["create_time"]

            logger.info(f"\n‚úÖ {info['name'].upper()}")
            logger.info(f"  PID: {info['pid']}")
            logger.info(f"  –°—Ç–∞—Ç—É—Å: {info['status']}")
            logger.info(f"  CPU: {info['cpu_percent']:.1f}%")
            logger.info(f"  –ü–∞–º—è—Ç—å: {info['memory_mb']:.1f} MB")
            logger.info(f"  Uptime: {uptime}")

        except (psutil.NoSuchProcess, ValueError):
            logger.info(f"\n‚ùå {pid_file.stem.upper()} - –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            pid_file.unlink()


async def follow_logs():
    """–°–ª–µ–¥–∏—Ç—å –∑–∞ –ª–æ–≥–∞–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    logger.info("üìù –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)")
    logger.info("=" * 60)

    log_files = {
        "core": "logs/core.log",
        "api": "logs/api.log",
        "frontend": "logs/frontend.log",
        "unified": "logs/unified.log",
    }

    # –ó–∞–ø—É—Å–∫–∞–µ–º tail -f –¥–ª—è –≤—Å–µ—Ö –ª–æ–≥–æ–≤
    import subprocess

    procs = []
    for name, log_file in log_files.items():
        if Path(log_file).exists():
            cmd = f"tail -f {log_file} | sed 's/^/[{name.upper()}] /'"
            proc = subprocess.Popen(cmd, shell=True)
            procs.append(proc)

    try:
        # –ñ–¥–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        for proc in procs:
            proc.wait()
    except KeyboardInterrupt:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        for proc in procs:
            proc.terminate()


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
    if sys.version_info < (3, 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        sys.exit(1)

    # –ó–∞–ø—É—Å–∫
    asyncio.run(main())
