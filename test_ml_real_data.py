#!/usr/bin/env python3
"""
–¢–µ—Å—Ç ML —Å–∏—Å—Ç–µ–º—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""

import asyncio
import sys
from pathlib import Path

import numpy as np
import pandas as pd

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from core.config.config_manager import ConfigManager
from ml.ml_manager import MLManager
from ml.ml_signal_processor import MLSignalProcessor


async def test_ml_with_real_data():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç ML —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã
    """
    print("üìä –¢–ï–°–¢ ML –°–ò–°–¢–ï–ú–´ –° –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò")
    print("=" * 50)

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        config_manager = ConfigManager()
        config = config_manager.get_config()

        ml_manager = MLManager(config)
        await ml_manager.initialize()

        ml_processor = MLSignalProcessor(ml_manager, config, config_manager)
        await ml_processor.initialize()

        print("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

        # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ OHLCV
        print("\nüìà –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ OHLCV –¥–∞–Ω–Ω—ã–µ
        np.random.seed(42)  # –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏

        dates = pd.date_range(start="2024-01-01", periods=200, freq="15T")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –±–ª—É–∂–¥–∞–Ω–∏–µ –¥–ª—è —Ü–µ–Ω—ã
        base_price = 50000  # –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ BTC
        returns = np.random.normal(0, 0.002, 200)  # 0.2% —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
        prices = base_price * np.exp(np.cumsum(returns))

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º OHLCV
        data = []
        for i, price in enumerate(prices):
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–∏–±–∞—Ä–Ω—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            noise = np.random.normal(0, price * 0.001, 4)  # 0.1% –≤–Ω—É—Ç—Ä–∏–±–∞—Ä–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å

            open_price = prices[i - 1] if i > 0 else price
            close_price = price

            # High –∏ Low —Å –Ω–µ–∫–æ—Ç–æ—Ä–æ–π –ª–æ–≥–∏–∫–æ–π
            high_price = max(open_price, close_price) + abs(noise[0])
            low_price = min(open_price, close_price) - abs(noise[1])

            volume = np.random.exponential(1000000)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–º–∞

            data.append(
                {
                    "datetime": dates[i],
                    "open": open_price,
                    "high": high_price,
                    "low": low_price,
                    "close": close_price,
                    "volume": volume,
                    "symbol": "BTCUSDT",
                }
            )

        df = pd.DataFrame(data)
        df.set_index("datetime", inplace=True)

        print(f"üìä –°–æ–∑–¥–∞–Ω DataFrame: {df.shape}")
        print(f"üìà –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: ${df['close'].min():.2f} - ${df['close'].max():.2f}")
        print("üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–≤–µ—á–µ–π:")
        print(df[["open", "high", "low", "close", "volume"]].tail())

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º ML Manager –Ω–∞–ø—Ä—è–º—É—é
        print("\nüß† –¢–µ—Å—Ç ML Manager —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:")

        prediction = await ml_manager.predict(df)

        print("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:")
        print(f"   Signal type: {prediction['signal_type']}")
        print(f"   Confidence: {prediction['confidence']:.4f}")
        print(f"   Signal strength: {prediction['signal_strength']:.4f}")

        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        predictions_data = prediction.get("predictions", {})
        print("\nüìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        print(f"   Returns 15m: {predictions_data.get('returns_15m', 'N/A'):.6f}")
        print(f"   Returns 1h: {predictions_data.get('returns_1h', 'N/A'):.6f}")
        print(f"   Direction score: {predictions_data.get('direction_score', 'N/A'):.4f}")

        directions = predictions_data.get("directions_by_timeframe", [])
        direction_probs = predictions_data.get("direction_probabilities", [])

        if directions:
            print(f"   Directions: {directions}")
            for i, probs in enumerate(direction_probs):
                timeframe = ["15m", "1h", "4h", "12h"][i] if i < 4 else f"{i}"
                class_names = ["LONG", "SHORT", "NEUTRAL"]
                predicted_class = np.argmax(probs)
                print(
                    f"   {timeframe}: {class_names[predicted_class]} (p={probs[predicted_class]:.3f})"
                )

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º ML Signal Processor
        print("\nüîÑ –¢–µ—Å—Ç ML Signal Processor:")

        signal = await ml_processor.process_market_data(
            symbol="BTCUSDT", exchange="bybit", ohlcv_data=df
        )

        if signal:
            print("‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–∏–≥–Ω–∞–ª!")
            print(f"   Type: {signal.signal_type.value}")
            print(f"   Confidence: {signal.confidence:.4f}")
            print(f"   Strength: {signal.strength:.4f}")
            print(f"   Entry price: {signal.entry_price}")
            if signal.stop_loss:
                print(f"   Stop Loss: {signal.stop_loss}")
            if signal.take_profit:
                print(f"   Take Profit: {signal.take_profit}")
        else:
            print("‚ùå –°–∏–≥–Ω–∞–ª –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
            print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print(f"   - Confidence {prediction['confidence']:.4f} < {ml_processor.min_confidence}")
            print(
                f"   - Signal strength {prediction['signal_strength']:.4f} < {ml_processor.min_signal_strength}"
            )

        # –¢–µ—Å—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        print("\nüîÑ –¢–µ—Å—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç—Ä–µ–Ω–¥–∞–º–∏:")

        trends = ["bull", "bear", "sideways"]
        signals_generated = []

        for trend in trends:
            print(f"\nüìà –¢–µ—Å—Ç–∏—Ä—É–µ–º {trend} —Ç—Ä–µ–Ω–¥:")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç—Ä–µ–Ω–¥–∞–º–∏
            if trend == "bull":
                trend_returns = np.random.normal(0.001, 0.002, 200)  # –ë—ã—á–∏–π —Ç—Ä–µ–Ω–¥
            elif trend == "bear":
                trend_returns = np.random.normal(-0.001, 0.002, 200)  # –ú–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥
            else:
                trend_returns = np.random.normal(0, 0.001, 200)  # –ë–æ–∫–æ–≤–∏–∫

            trend_prices = base_price * np.exp(np.cumsum(trend_returns))

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π DataFrame
            trend_data = []
            for i, price in enumerate(trend_prices):
                noise = np.random.normal(0, price * 0.001, 4)
                open_price = trend_prices[i - 1] if i > 0 else price
                close_price = price
                high_price = max(open_price, close_price) + abs(noise[0])
                low_price = min(open_price, close_price) - abs(noise[1])
                volume = np.random.exponential(1000000)

                trend_data.append(
                    {
                        "datetime": dates[i],
                        "open": open_price,
                        "high": high_price,
                        "low": low_price,
                        "close": close_price,
                        "volume": volume,
                        "symbol": "BTCUSDT",
                    }
                )

            trend_df = pd.DataFrame(trend_data)
            trend_df.set_index("datetime", inplace=True)

            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            trend_prediction = await ml_manager.predict(trend_df)
            signal_type = trend_prediction["signal_type"]
            confidence = trend_prediction["confidence"]

            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {signal_type} (confidence: {confidence:.3f})")
            signals_generated.append(signal_type)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç—Ä–µ–Ω–¥–∞–º:")
        for trend, signal in zip(trends, signals_generated, strict=False):
            print(f"   {trend}: {signal}")

        unique_signals = set(signals_generated)
        print(f"\nüìà –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(unique_signals)}/3")

        if len(unique_signals) > 1:
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤!")
        else:
            print("‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –≤—Å–µ—Ö —Ç—Ä–µ–Ω–¥–æ–≤")

        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(test_ml_with_real_data())
