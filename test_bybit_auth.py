#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Bybit API
"""

import asyncio
import hashlib
import hmac
import os
import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

import aiohttp
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


async def test_bybit_auth():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å Bybit API"""

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –∏–∑ .env
    api_key = os.getenv("BYBIT_API_KEY")
    api_secret = os.getenv("BYBIT_API_SECRET")
    testnet = os.getenv("BYBIT_TESTNET", "false").lower() == "true"

    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Bybit API –∫–ª—é—á–µ–π")
    print(f"   API Key: {api_key[:10]}..." if api_key else "   ‚ùå API Key –Ω–µ –Ω–∞–π–¥–µ–Ω")
    print(f"   API Secret: {'*' * 10}" if api_secret else "   ‚ùå API Secret –Ω–µ –Ω–∞–π–¥–µ–Ω")
    print(f"   Testnet: {testnet}")
    print()

    if not api_key or not api_secret:
        print("‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ")
        return

    # URL –¥–ª—è API
    base_url = "https://api-testnet.bybit.com" if testnet else "https://api.bybit.com"

    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ (—Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
    print("üìä –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞")

    endpoint = "/v5/account/wallet-balance"
    url = f"{base_url}{endpoint}"

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    params = {"accountType": "UNIFIED"}

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏
    timestamp = str(int(time.time() * 1000))
    recv_window = "5000"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ (–¥–ª—è GET –∑–∞–ø—Ä–æ—Å–∞)
    param_str = "&".join([f"{k}={v}" for k, v in sorted(params.items())])
    sign_str = timestamp + api_key + recv_window + param_str

    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å
    signature = hmac.new(
        bytes(api_secret, "utf-8"), bytes(sign_str, "utf-8"), hashlib.sha256
    ).hexdigest()

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    headers = {
        "X-BAPI-API-KEY": api_key,
        "X-BAPI-TIMESTAMP": timestamp,
        "X-BAPI-SIGN": signature,
        "X-BAPI-RECV-WINDOW": recv_window,
    }

    print(f"   URL: {url}")
    print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
    print(f"   Timestamp: {timestamp}")
    print(f"   Signature: {signature[:20]}...")
    print()

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url, params=params, headers=headers) as response:
                data = await response.json()

                if data.get("retCode") == 0:
                    print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
                    if data.get("result", {}).get("list"):
                        for wallet in data["result"]["list"]:
                            print(f"\nüí∞ –ö–æ—à–µ–ª–µ–∫: {wallet.get('accountType')}")
                            if wallet.get("coin"):
                                for coin_info in wallet["coin"]:
                                    balance = float(coin_info.get("walletBalance", 0))
                                    if balance > 0:
                                        print(
                                            f"   ‚Ä¢ {coin_info['coin']}: {balance:.4f}"
                                        )
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
                    print(f"   –ö–æ–¥: {data.get('retCode')}")
                    print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {data.get('retMsg')}")

                    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
                    if data.get("retCode") == 10003:
                        print("\n‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                        print("   1. –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á –∏–ª–∏ —Å–µ–∫—Ä–µ—Ç")
                        print("   2. API –∫–ª—é—á–∏ –¥–ª—è testnet/mainnet –ø–µ—Ä–µ–ø—É—Ç–∞–Ω—ã")
                        print("   3. IP –∞–¥—Ä–µ—Å –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ")
                        print("   4. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

    # –¢–µ—Å—Ç 2: –ü—É–±–ª–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
    print("\nüìä –¢–µ—Å—Ç 2: –ü—É–±–ª–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å (—Ç–∏–∫–µ—Ä—ã)")

    public_url = f"{base_url}/v5/market/tickers"
    public_params = {"category": "linear", "symbol": "BTCUSDT"}

    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(public_url, params=public_params) as response:
                data = await response.json()

                if data.get("retCode") == 0:
                    print("‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π API —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    if data.get("result", {}).get("list"):
                        ticker = data["result"]["list"][0]
                        print(f"   BTCUSDT: ${ticker.get('lastPrice', 'N/A')}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ API: {data.get('retMsg')}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")


if __name__ == "__main__":
    print("=" * 60)
    print("üîß –¢–ï–°–¢ –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò BYBIT API")
    print("=" * 60)
    asyncio.run(test_bybit_auth())
    print("\n" + "=" * 60)
