#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Å—á–µ—Ç–∞ Bybit
"""

import asyncio
import os

from dotenv import load_dotenv

from exchanges.bybit.client import BybitClient

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


async def check_balance():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ Bybit"""

    api_key = os.getenv("BYBIT_API_KEY")
    api_secret = os.getenv("BYBIT_API_SECRET")
    testnet = os.getenv("BYBIT_TESTNET", "false").lower() == "true"

    print(f"üîë API Key: {api_key[:8]}... ({len(api_key)} —Å–∏–º–≤–æ–ª–æ–≤)")
    print(f"üîë API Secret: {api_secret[:8]}... ({len(api_secret)} —Å–∏–º–≤–æ–ª–æ–≤)")
    print(f"üåê –†–µ–∂–∏–º: {'Testnet' if testnet else 'Production'}")
    print("-" * 50)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∫–ª—é—á–µ–π
    if len(api_key) < 18:
        print(
            f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: API –∫–ª—é—á —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ({len(api_key)} —Å–∏–º–≤–æ–ª–æ–≤, –æ–∂–∏–¥–∞–µ—Ç—Å—è 18-20)"
        )
    if len(api_secret) < 40:
        print(
            f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: API —Å–µ–∫—Ä–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ({len(api_secret)} —Å–∏–º–≤–æ–ª–æ–≤, –æ–∂–∏–¥–∞–µ—Ç—Å—è 40-44)"
        )

    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        client = BybitClient(api_key=api_key, api_secret=api_secret, sandbox=testnet)

        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞...")

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å (–¥–ª—è USDT –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞)
        balance = await client.get_balance(currency="USDT")

        if balance:
            print("\nüí∞ –ë–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞:")
            print("-" * 50)

            total_equity = 0
            for coin, data in balance.items():
                if isinstance(data, dict):
                    equity = data.get("equity", 0)
                    available = data.get("available_balance", 0)
                    if equity > 0:
                        print(f"  {coin}:")
                        print(f"    ‚Ä¢ –í—Å–µ–≥–æ: {equity:.4f}")
                        print(f"    ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ: {available:.4f}")

                        if coin == "USDT":
                            total_equity = equity

            print("-" * 50)
            print(f"üíµ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤ USDT: {total_equity:.2f}")

            if total_equity < 10:
                print("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏!")
                print("   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –±–∞–ª–∞–Ω—Å: 10 USDT")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        print("\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏...")
        positions = await client.get_positions()

        if positions:
            open_positions = [p for p in positions if p.get("size", 0) != 0]
            if open_positions:
                print(f"–ù–∞–π–¥–µ–Ω–æ {len(open_positions)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π:")
                for pos in open_positions:
                    print(
                        f"  ‚Ä¢ {pos.get('symbol')}: {pos.get('size')} @ {pos.get('avg_price')}"
                    )
            else:
                print("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
        print("\nüìù –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞...")
        orders = await client.get_open_orders()

        if orders:
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(orders)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤:")
            for order in orders[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(
                    f"  ‚Ä¢ {order.get('symbol')}: {order.get('side')} {order.get('qty')} @ {order.get('price')}"
                )
        else:
            print("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print("\nüîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("  1. –ù–µ–≤–µ—Ä–Ω—ã–µ API –∫–ª—é—á–∏")
        print("  2. API –∫–ª—é—á–∏ –æ–±—Ä–µ–∑–∞–Ω—ã –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã")
        print("  3. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∫–ª—é—á–µ–π")
        print("  4. –ö–ª—é—á–∏ –¥–ª—è –¥—Ä—É–≥–æ–π —Å–µ—Ç–∏ (testnet/mainnet)")


if __name__ == "__main__":
    asyncio.run(check_balance())
