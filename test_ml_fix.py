#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π ML —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import sys
from pathlib import Path

import numpy as np
import torch

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from core.config.config_manager import ConfigManager
from ml.ml_manager import MLManager


async def test_ml_fixes():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ ML —Å–∏—Å—Ç–µ–º–µ
    """
    print("üîß –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô ML –°–ò–°–¢–ï–ú–´")
    print("=" * 40)

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        config_manager = ConfigManager()
        config = config_manager.get_config()

        ml_manager = MLManager(config)
        await ml_manager.initialize()

        print("‚úÖ ML Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"üíª Device: {ml_manager.device}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        print("\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏:")

        device = ml_manager.device
        test_input = torch.randn(1, 96, 240).to(device)

        ml_manager.model.eval()
        with torch.no_grad():
            raw_output = ml_manager.model(test_input)

        print(f"üìä –í—ã—Ö–æ–¥ –º–æ–¥–µ–ª–∏: {raw_output.shape}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
        prediction = ml_manager._interpret_predictions(raw_output)

        print("\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢ –ò–ù–¢–ï–†–ü–†–ï–¢–ê–¶–ò–ò:")
        print(f"üéØ Signal type: {prediction['signal_type']}")
        print(f"üìä Confidence: {prediction['confidence']:.4f}")
        print(f"üìä Signal strength: {prediction['signal_strength']:.4f}")

        predictions_data = prediction.get("predictions", {})
        directions = predictions_data.get("directions_by_timeframe", [])
        direction_probs = predictions_data.get("direction_probabilities", [])

        print("\nüéØ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:")
        print(f"üìä Directions: {directions}")

        if direction_probs:
            for i, probs in enumerate(direction_probs):
                timeframe = ["15m", "1h", "4h", "12h"][i] if i < 4 else f"{i}"
                class_names = ["LONG", "SHORT", "NEUTRAL"]
                predicted_class = np.argmax(probs)
                print(
                    f"   {timeframe}: {class_names[predicted_class]} (p={probs[predicted_class]:.3f})"
                )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤ –ø–æ–¥—Ä—è–¥ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        print("\nüîÑ –¢–µ—Å—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è (5 —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π):")

        signal_types = []
        for i in range(5):
            test_input = torch.randn(1, 96, 240).to(device)
            with torch.no_grad():
                raw_output = ml_manager.model(test_input)
            prediction = ml_manager._interpret_predictions(raw_output)
            signal_type = prediction["signal_type"]
            confidence = prediction["confidence"]
            signal_types.append(signal_type)
            print(f"   –¢–µ—Å—Ç {i + 1}: {signal_type} (confidence: {confidence:.3f})")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        unique_signals = set(signal_types)
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è:")
        print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(unique_signals)} –∏–∑ 5")
        for signal_type in ["LONG", "SHORT", "NEUTRAL"]:
            count = signal_types.count(signal_type)
            print(f"   {signal_type}: {count}/5 ({count / 5 * 100:.1f}%)")

        if "LONG" in signal_types or "SHORT" in signal_types:
            print("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –£–°–ü–ï–®–ù–û: –ì–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã!")
        else:
            print("‚ùå –í—Å–µ –µ—â–µ —Ç–æ–ª—å–∫–æ NEUTRAL —Å–∏–≥–Ω–∞–ª—ã")

        print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        raise


if __name__ == "__main__":
    asyncio.run(test_ml_fixes())
