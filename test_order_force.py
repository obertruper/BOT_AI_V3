#!/usr/bin/env python3
"""
–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ —Å hedge mode
"""

import asyncio
import os
import sys

from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

load_dotenv()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ["PGPORT"] = "5555"
os.environ["PGUSER"] = "obertruper"
os.environ["PGDATABASE"] = "bot_trading_v3"


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=== –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ ===\n")

    try:
        from exchanges.base.order_types import OrderRequest, OrderSide, OrderType
        from exchanges.bybit.client import BybitClient

        client = BybitClient(
            api_key=os.getenv("BYBIT_API_KEY"),
            api_secret=os.getenv("BYBIT_API_SECRET"),
            sandbox=False,
        )

        print("1Ô∏è‚É£ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        print(f"   Hedge mode: {client.hedge_mode}")
        print(f"   Default leverage: {client.default_leverage}x")
        print(f"   Trading category: {client.trading_category}")

        print("\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã BTC:")

        ticker = await client.get_ticker("BTCUSDT")
        current_price = ticker.price
        print(f"   BTC/USDT: ${current_price:.2f}")

        print("\n3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å):")

        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä
        order_request = OrderRequest(
            symbol="BTCUSDT",
            side=OrderSide.BUY,
            order_type=OrderType.LIMIT,
            quantity=0.001,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            price=current_price * 0.98,  # –ù–∞ 2% –Ω–∏–∂–µ —Ä—ã–Ω–∫–∞
            leverage=client.default_leverage,
        )

        print("\n   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞:")
        print(f"   - Symbol: {order_request.symbol}")
        print(f"   - Side: {order_request.side.value}")
        print(f"   - Quantity: {order_request.quantity} BTC")
        print(f"   - Price: ${order_request.price:.2f}")
        print(f"   - Notional: ${order_request.quantity * order_request.price:.2f}")
        print(
            f"   - Position idx: {client._get_position_idx(order_request.side.value)}"
        )
        print(f"   - Category: {client.trading_category}")
        print(f"   - Leverage: {order_request.leverage}x")

        print("\n4Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ä–¥–µ—Ä–∞:")

        try:
            response = await client.place_order(order_request)

            if response and response.success:
                print("   ‚úÖ –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω!")
                print(f"   Order ID: {response.order_id}")
                if hasattr(response, "exchange_order_id"):
                    print(f"   Exchange ID: {response.exchange_order_id}")
                print(f"   Status: {response.status}")

                # –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã
                await asyncio.sleep(3)

                print("\n5Ô∏è‚É£ –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞:")

                try:
                    cancel_result = await client.cancel_order(
                        "BTCUSDT", response.order_id
                    )
                    if cancel_result:
                        print("   ‚úÖ –û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω")
                except Exception as e:
                    print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã: {e}")

            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.error if response else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'}")

                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤, –ø–æ–∫–∞–∂–µ–º –¥–µ—Ç–∞–ª–∏
                if response and "Insufficient" in str(response.error):
                    print(
                        "\n   üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –í—Å–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ä–∂–∏"
                    )
                    print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
                    print("   - –ù–µ—Ç –ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
                    print("   - –ù–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
                    print("   - –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å–≤–æ–±–æ–¥–Ω–æ–π –º–∞—Ä–∂–∏ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback

            traceback.print_exc()

    except Exception as e:
        print(f"\n‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
