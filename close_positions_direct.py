#!/usr/bin/env python3
"""
–ü—Ä—è–º–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π —á–µ—Ä–µ–∑ API Bybit
"""

import asyncio
import hashlib
import hmac
import json
import os
import sys
import time

import aiohttp
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PATH
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

load_dotenv()


async def close_all_positions_direct():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ API"""

    api_key = os.getenv("BYBIT_API_KEY")
    api_secret = os.getenv("BYBIT_API_SECRET")

    base_url = "https://api.bybit.com"

    async with aiohttp.ClientSession() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
        timestamp = str(int(time.time() * 1000))
        sign_str = f"{timestamp}{api_key}5000category=linear&settleCoin=USDT"
        signature = hmac.new(api_secret.encode(), sign_str.encode(), hashlib.sha256).hexdigest()

        headers = {
            "X-BAPI-API-KEY": api_key,
            "X-BAPI-TIMESTAMP": timestamp,
            "X-BAPI-SIGN": signature,
            "X-BAPI-RECV-WINDOW": "5000",
        }

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
        async with session.get(
            f"{base_url}/v5/position/list",
            headers=headers,
            params={"category": "linear", "settleCoin": "USDT"},
        ) as resp:
            data = await resp.json()

        if data.get("retCode") != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {data}")
            return

        positions = data.get("result", {}).get("list", [])

        if not positions:
            print("üìä –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
            return

        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(positions)} –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø–æ–∑–∏—Ü–∏—é
        for pos in positions:
            symbol = pos["symbol"]
            side = pos["side"]  # Buy –∏–ª–∏ Sell
            size = pos["size"]

            if float(size) == 0:
                continue

            print(f"\n–ó–∞–∫—Ä—ã–≤–∞–µ–º {symbol}:")
            print(f"  –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {side}")
            print(f"  –†–∞–∑–º–µ—Ä: {size}")

            # –î–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π –æ—Ä–¥–µ—Ä
            close_side = "Sell" if side == "Buy" else "Buy"

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞
            order_params = {
                "category": "linear",
                "symbol": symbol,
                "side": close_side,
                "orderType": "Market",
                "qty": size,
                "timeInForce": "IOC",
                "reduceOnly": True,
                "positionIdx": 0,  # One-way mode –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
            }

            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è –æ—Ä–¥–µ—Ä–∞
            timestamp = str(int(time.time() * 1000))
            params_str = json.dumps(order_params, separators=(",", ":"))
            sign_str = f"{timestamp}{api_key}5000{params_str}"
            signature = hmac.new(api_secret.encode(), sign_str.encode(), hashlib.sha256).hexdigest()

            headers = {
                "X-BAPI-API-KEY": api_key,
                "X-BAPI-TIMESTAMP": timestamp,
                "X-BAPI-SIGN": signature,
                "X-BAPI-RECV-WINDOW": "5000",
                "Content-Type": "application/json",
            }

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä
            async with session.post(
                f"{base_url}/v5/order/create", headers=headers, json=order_params
            ) as resp:
                result = await resp.json()

            if result.get("retCode") == 0:
                print("  ‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
            else:
                print(f"  ‚ùå –û—à–∏–±–∫–∞: {result.get('retMsg', 'Unknown error')}")

        # –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        await asyncio.sleep(2)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        timestamp = str(int(time.time() * 1000))
        sign_str = f"{timestamp}{api_key}5000accountType=UNIFIED&coin=USDT"
        signature = hmac.new(api_secret.encode(), sign_str.encode(), hashlib.sha256).hexdigest()

        headers = {
            "X-BAPI-API-KEY": api_key,
            "X-BAPI-TIMESTAMP": timestamp,
            "X-BAPI-SIGN": signature,
            "X-BAPI-RECV-WINDOW": "5000",
        }

        async with session.get(
            f"{base_url}/v5/account/wallet-balance",
            headers=headers,
            params={"accountType": "UNIFIED", "coin": "USDT"},
        ) as resp:
            data = await resp.json()

        if data.get("retCode") == 0:
            balances = data.get("result", {}).get("list", [])
            if balances:
                coin_data = balances[0].get("coin", [])
                for coin in coin_data:
                    if coin.get("coin") == "USDT":
                        print("\nüíµ –ë–∞–ª–∞–Ω—Å USDT:")
                        print(f"  –í—Å–µ–≥–æ: {coin.get('walletBalance', 0)}")
                        print(f"  –î–æ—Å—Ç—É–ø–Ω–æ: {coin.get('availableToWithdraw', 0)}")
                        break


if __name__ == "__main__":
    asyncio.run(close_all_positions_direct())
