#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã BOT_AI_V3
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
- –ó–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é DataManager
- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit API
- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import os
import sys
from datetime import datetime, timedelta
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from colorama import Fore, Style, init
from dotenv import load_dotenv

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
init()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


async def test_system():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã"""

    print(f"{Fore.CYAN}{'=' * 60}{Style.RESET_ALL}")
    print(f"{Fore.CYAN}üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ BOT_AI_V3{Style.RESET_ALL}")
    print(f"{Fore.CYAN}{'=' * 60}{Style.RESET_ALL}\n")

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print(f"{Fore.YELLOW}1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...{Style.RESET_ALL}")
    try:
        from core.config.config_manager import ConfigManager

        config_manager = ConfigManager("config/system.yaml")
        await config_manager.initialize()
        config = config_manager.get_config()

        data_config = config.get("data_management", {})
        print(f"   {Fore.GREEN}‚úì{Style.RESET_ALL} –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        print(f"   ‚Ä¢ auto_update: {data_config.get('auto_update', False)}")
        print(f"   ‚Ä¢ update_interval: {data_config.get('update_interval', 900)}s")
        print(f"   ‚Ä¢ initial_load_days: {data_config.get('initial_load_days', 7)}")

    except Exception as e:
        print(f"   {Fore.RED}‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}{Style.RESET_ALL}")
        return False

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
    print(f"\n{Fore.YELLOW}2. –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π...{Style.RESET_ALL}")
    api_key = os.getenv("BYBIT_API_KEY")
    api_secret = os.getenv("BYBIT_API_SECRET")

    if api_key and api_secret:
        print(f"   {Fore.GREEN}‚úì{Style.RESET_ALL} API –∫–ª—é—á–∏ –Ω–∞–π–¥–µ–Ω—ã")
        print(f"   ‚Ä¢ API Key: {api_key[:8]}...")
    else:
        print(f"   {Fore.RED}‚úó API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env{Style.RESET_ALL}")
        return False

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    print(f"\n{Fore.YELLOW}3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...{Style.RESET_ALL}")
    try:
        from database.connections.postgres import AsyncPGPool

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        result = await AsyncPGPool.fetch("SELECT version()")
        print(f"   {Fore.GREEN}‚úì{Style.RESET_ALL} PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω (–ø–æ—Ä—Ç 5555)")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        data_count = await AsyncPGPool.fetch(
            "SELECT COUNT(*) as cnt FROM raw_market_data"
        )
        print(f"   ‚Ä¢ –ó–∞–ø–∏—Å–µ–π –≤ –ë–î: {data_count[0]['cnt']}")

    except Exception as e:
        print(f"   {Fore.RED}‚úó –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}{Style.RESET_ALL}")
        return False

    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ Bybit –∫–ª–∏–µ–Ω—Ç–∞
    print(f"\n{Fore.YELLOW}4. –ü—Ä–æ–≤–µ—Ä–∫–∞ Bybit API...{Style.RESET_ALL}")
    try:
        from exchanges.factory import exchange_factory

        client = await exchange_factory.create_exchange_client("bybit")
        if client:
            print(
                f"   {Fore.GREEN}‚úì{Style.RESET_ALL} Bybit –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
            try:
                balances = await client.get_balances()
                print(f"   {Fore.GREEN}‚úì{Style.RESET_ALL} –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                if balances:
                    for balance in balances[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã Balance –æ–±—ä–µ–∫—Ç–∞
                        amount = getattr(
                            balance,
                            "free",
                            getattr(
                                balance, "balance", getattr(balance, "available", 0)
                            ),
                        )
                        currency = getattr(
                            balance,
                            "currency",
                            getattr(
                                balance, "coin", getattr(balance, "asset", "UNKNOWN")
                            ),
                        )
                        if amount > 0:
                            print(f"   ‚Ä¢ {currency}: {amount:.4f}")
            except Exception as e:
                print(
                    f"   {Fore.YELLOW}‚ö†{Style.RESET_ALL} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å: {e}"
                )

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (–µ—Å–ª–∏ –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            if hasattr(client, "disconnect"):
                await client.disconnect()
            elif hasattr(client, "_close"):
                await client._close()
        else:
            print(f"   {Fore.RED}‚úó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Bybit –∫–ª–∏–µ–Ω—Ç{Style.RESET_ALL}")
            return False

    except Exception as e:
        print(f"   {Fore.RED}‚úó –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Bybit: {e}{Style.RESET_ALL}")
        return False

    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ DataManager
    print(f"\n{Fore.YELLOW}5. –ü—Ä–æ–≤–µ—Ä–∫–∞ DataManager...{Style.RESET_ALL}")
    try:
        from core.system.data_manager import DataManager

        data_manager = DataManager(config_manager)
        print(f"   {Fore.GREEN}‚úì{Style.RESET_ALL} DataManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(
            f"   ‚Ä¢ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {'–í–∫–ª—é—á–µ–Ω–æ' if data_manager.data_config['auto_update'] else '–û—Ç–∫–ª—é—á–µ–Ω–æ'}"
        )
        print(
            f"   ‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {data_manager.data_config['update_interval'] / 60:.1f} –º–∏–Ω—É—Ç"
        )
        print(f"   ‚Ä¢ –¢–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {len(data_manager.trading_pairs)}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        print("\n   –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö:")
        for symbol in data_manager.trading_pairs[:3]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–∏–º–≤–æ–ª–∞
            latest_time = await data_manager._get_latest_data_time(symbol)
            if latest_time:
                # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –æ–±–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ–¥–Ω–æ–º timezone
                from datetime import timezone

                if latest_time.tzinfo is None:
                    latest_time = latest_time.replace(tzinfo=timezone.utc)
                now = datetime.now(timezone.utc)
                age = now - latest_time
                if age < timedelta(hours=1):
                    print(
                        f"   {Fore.GREEN}‚úì{Style.RESET_ALL} {symbol}: –∞–∫—Ç—É–∞–ª—å–Ω–æ ({age.total_seconds() / 60:.1f} –º–∏–Ω)"
                    )
                else:
                    print(
                        f"   {Fore.YELLOW}‚ö†{Style.RESET_ALL} {symbol}: —É—Å—Ç–∞—Ä–µ–ª–æ ({age.total_seconds() / 3600:.1f} —á–∞—Å–æ–≤)"
                    )
            else:
                print(f"   {Fore.RED}‚úó{Style.RESET_ALL} {symbol}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

    except Exception as e:
        print(f"   {Fore.RED}‚úó –û—à–∏–±–∫–∞ DataManager: {e}{Style.RESET_ALL}")
        return False

    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    print(f"\n{Fore.YELLOW}6. –ü—Ä–æ–≤–µ—Ä–∫–∞ ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...{Style.RESET_ALL}")
    try:
        from ml.ml_manager import MLManager

        ml_manager = MLManager(config_manager)
        print(f"   {Fore.GREEN}‚úì{Style.RESET_ALL} MLManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏
        if hasattr(ml_manager, "model") and ml_manager.model:
            print(f"   {Fore.GREEN}‚úì{Style.RESET_ALL} ML –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        else:
            print(f"   {Fore.YELLOW}‚ö†{Style.RESET_ALL} ML –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

    except Exception as e:
        print(
            f"   {Fore.YELLOW}‚ö†{Style.RESET_ALL} ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {e}"
        )

    # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ Trading Engine
    print(f"\n{Fore.YELLOW}7. –ü—Ä–æ–≤–µ—Ä–∫–∞ Trading Engine...{Style.RESET_ALL}")
    try:
        # Trading Engine –ø—Ä–æ–≤–µ—Ä–∏–º —Ç–æ–ª—å–∫–æ –∏–º–ø–æ—Ä—Ç, —Ç–∞–∫ –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç orchestrator

        print(f"   {Fore.GREEN}‚úì{Style.RESET_ALL} TradingEngine –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω")

    except Exception as e:
        print(f"   {Fore.RED}‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ TradingEngine: {e}{Style.RESET_ALL}")
        return False

    print(f"\n{Fore.CYAN}{'=' * 60}{Style.RESET_ALL}")
    print(f"{Fore.GREEN}‚úÖ –í–°–ï –û–°–ù–û–í–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢{Style.RESET_ALL}")
    print(f"{Fore.CYAN}{'=' * 60}{Style.RESET_ALL}")

    print(f"\n{Fore.YELLOW}üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:{Style.RESET_ALL}")
    print(f"1. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É: {Fore.CYAN}./start_with_logs.sh{Style.RESET_ALL}")
    print(
        f"2. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤: {Fore.CYAN}tail -f data/logs/bot_trading_*.log{Style.RESET_ALL}"
    )
    print(f"3. –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {Fore.CYAN}http://localhost:5173{Style.RESET_ALL}")
    print(
        f"4. API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {Fore.CYAN}http://localhost:8080/api/docs{Style.RESET_ALL}"
    )

    return True


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    try:
        success = await test_system()

        if success:
            print(f"\n{Fore.GREEN}üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!{Style.RESET_ALL}")
            exit(0)
        else:
            print(f"\n{Fore.RED}‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ{Style.RESET_ALL}")
            exit(1)

    except KeyboardInterrupt:
        print(f"\n{Fore.YELLOW}‚ö†Ô∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Style.RESET_ALL}")
        exit(0)
    except Exception as e:
        print(f"\n{Fore.RED}‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}{Style.RESET_ALL}")
        exit(1)


if __name__ == "__main__":
    asyncio.run(main())
