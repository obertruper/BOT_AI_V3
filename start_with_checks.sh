#!/bin/bash

echo "=========================================="
echo "üöÄ –ó–ê–ü–£–°–ö BOT_AI_V3 –° –ü–û–õ–ù–´–ú–ò –ü–†–û–í–ï–†–ö–ê–ú–ò"
echo "=========================================="

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
if [ ! -f "venv/bin/activate" ]; then
    echo "‚ùå –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!"
    echo "–°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ: python3 -m venv venv && source venv/bin/activate && pip install -r requirements.txt"
    exit 1
fi

# –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
source venv/bin/activate
echo "‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
if [ ! -f ".env" ]; then
    echo "‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    echo "–°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example"
    exit 1
fi

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
source .env

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."
python3 -c "
import asyncio
import sys
sys.path.insert(0, '.')
from database.connections.postgres import AsyncPGPool

async def test_db():
    try:
        await AsyncPGPool.get_pool()
        result = await AsyncPGPool.fetch('SELECT 1 as test')
        print('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞')
        await AsyncPGPool.close_pool()
        return True
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}')
        return False

success = asyncio.run(test_db())
exit(0 if success else 1)
"

if [ $? -ne 0 ]; then
    echo "‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö!"
    exit 1
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã
echo "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã..."
python3 scripts/run_system_tests.py

if [ $? -ne 0 ]; then
    echo "‚ùå –¢–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å!"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ DOT
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–π DOT..."
python3 scripts/check_dot_positions.py

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ —Å–∏–≥–Ω–∞–ª—ã
echo "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤..."
python3 scripts/fix_duplicate_signals.py

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
mkdir -p data/logs

echo ""
echo "üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:"
echo "   –†–µ–∂–∏–º: core (—Ç–æ—Ä–≥–æ–≤–ª—è)"
echo "   –ü–ª–µ—á–æ: 5x (–∏–∑ config/trading.yaml)"
echo "   –†–∏—Å–∫: 2% –Ω–∞ —Å–¥–µ–ª–∫—É"
echo "   –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å: $500"

echo ""
echo "üîß –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã..."

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É –≤ —Ñ–æ–Ω–µ
nohup python unified_launcher.py --mode=core > data/logs/launcher.log 2>&1 &
LAUNCHER_PID=$!

echo "‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ (PID: $LAUNCHER_PID)"

# –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
sleep 5

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç–∞–µ—Ç
if ps -p $LAUNCHER_PID > /dev/null; then
    echo "‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–µ–Ω"
else
    echo "‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π!"
    echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: tail -f data/logs/launcher.log"
    exit 1
fi

echo ""
echo "=========================================="
echo "üìã –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–ò–°–¢–ï–ú–´"
echo "=========================================="
echo ""
echo "–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ª–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏..."
echo "–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (—Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å)"
echo ""

# –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤
tail -f data/logs/bot_trading_*.log | grep --line-buffered -E "signal|order|position|SL|TP|leverage|ERROR|WARNING"
