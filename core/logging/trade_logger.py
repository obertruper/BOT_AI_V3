#!/usr/bin/env python3
"""
Enhanced Trade Logger –¥–ª—è BOT Trading v3

–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
—Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞ —Å–¥–µ–ª–∫–∏.
"""

import json
import logging
import traceback
from datetime import datetime
from pathlib import Path
from typing import Any

import structlog
from structlog.processors import CallsiteParameter, CallsiteParameterAdder

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ structlog –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.processors.StackInfoRenderer(),
        structlog.processors.format_exc_info,
        structlog.processors.UnicodeDecoder(),
        CallsiteParameterAdder(parameters=[CallsiteParameter.FILENAME, CallsiteParameter.LINENO]),
        structlog.dev.ConsoleRenderer(),
    ],
    context_class=dict,
    logger_factory=structlog.stdlib.LoggerFactory(),
    cache_logger_on_first_use=True,
)


class TradeLogger:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.

    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:
    - –°–∏–≥–Ω–∞–ª–æ–≤ –∏ –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏
    - –°–æ–∑–¥–∞–Ω–∏—è –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤
    - –£—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è SL/TP
    - –ß–∞—Å—Ç–∏—á–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∏–π –ø–æ–∑–∏—Ü–∏–π
    - –†–∞–±–æ—Ç—ã trailing stop
    - PnL –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """

    def __init__(self, name: str = "trade_logger", log_dir: str = "data/logs"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞.

        Args:
            name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞
            log_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤
        """
        self.name = name
        self.log_dir = Path(log_dir)
        self.log_dir.mkdir(parents=True, exist_ok=True)

        # –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
        self.logger = structlog.get_logger(name)

        # –§–∞–π–ª–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        self.trade_log_file = self.log_dir / f"trades_{datetime.now().strftime('%Y%m%d')}.log"
        self._setup_file_logger()

        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stats = {
            "signals_received": 0,
            "orders_created": 0,
            "orders_executed": 0,
            "sltp_set": 0,
            "sltp_triggered": 0,
            "partial_closes": 0,
            "trailing_updates": 0,
            "errors": 0,
        }

    def _setup_file_logger(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞"""
        file_handler = logging.FileHandler(self.trade_log_file, encoding="utf-8")
        file_handler.setLevel(logging.DEBUG)

        formatter = logging.Formatter(
            "%(asctime)s | %(levelname)-8s | %(name)s | %(message)s",
            datefmt="%Y-%m-%d %H:%M:%S",
        )
        file_handler.setFormatter(formatter)

        file_logger = logging.getLogger(f"{self.name}_file")
        file_logger.addHandler(file_handler)
        file_logger.setLevel(logging.DEBUG)
        self.file_logger = file_logger

    def _log_to_file(self, level: str, message: str, data: dict = None):
        """–ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª —Å JSON –¥–∞–Ω–Ω—ã–º–∏"""
        if data:
            message = f"{message} | DATA: {json.dumps(data, default=str, ensure_ascii=False)}"

        getattr(self.file_logger, level.lower())(message)

    # ========== SIGNAL LOGGING ==========

    def log_signal_received(self, signal: dict[str, Any]):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞"""
        self.stats["signals_received"] += 1

        log_data = {
            "signal_id": signal.get("id"),
            "symbol": signal.get("symbol"),
            "signal_type": signal.get("signal_type"),
            "strength": signal.get("strength"),
            "confidence": signal.get("confidence"),
            "source": signal.get("source"),
            "timestamp": datetime.now().isoformat(),
        }

        self.logger.info(
            f"üì° –°–ò–ì–ù–ê–õ –ü–û–õ–£–ß–ï–ù: {signal.get('symbol')} {signal.get('signal_type')}",
            **log_data,
        )
        self._log_to_file("info", "SIGNAL_RECEIVED", log_data)

        return log_data

    def log_signal_processing(self, signal_id: str, action: str, details: dict = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞"""
        log_data = {
            "signal_id": signal_id,
            "action": action,
            "details": details or {},
            "timestamp": datetime.now().isoformat(),
        }

        self.logger.info(f"‚öôÔ∏è –û–ë–†–ê–ë–û–¢–ö–ê –°–ò–ì–ù–ê–õ–ê: {action}", **log_data)
        self._log_to_file("info", "SIGNAL_PROCESSING", log_data)

    def log_signal_rejected(self, signal_id: str, reason: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞"""
        log_data = {
            "signal_id": signal_id,
            "reason": reason,
            "timestamp": datetime.now().isoformat(),
        }

        self.logger.warning(f"‚ùå –°–ò–ì–ù–ê–õ –û–¢–ö–õ–û–ù–ï–ù: {reason}", **log_data)
        self._log_to_file("warning", "SIGNAL_REJECTED", log_data)

    # ========== ORDER LOGGING ==========

    def log_order_creation(self, order: dict[str, Any]):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞"""
        self.stats["orders_created"] += 1

        log_data = {
            "order_id": order.get("id"),
            "symbol": order.get("symbol"),
            "side": order.get("side"),
            "type": order.get("order_type"),
            "quantity": str(order.get("quantity", 0)),
            "price": str(order.get("price", 0)),
            "leverage": order.get("leverage"),
            "signal_id": order.get("signal_id"),
            "timestamp": datetime.now().isoformat(),
        }

        self.logger.info(
            f"üìù –û–†–î–ï–† –°–û–ó–î–ê–ù: {order.get('symbol')} {order.get('side')} "
            f"qty={order.get('quantity')} @ {order.get('price')}",
            **log_data,
        )
        self._log_to_file("info", "ORDER_CREATED", log_data)

        return log_data

    def log_order_submission(self, order_id: str, exchange: str, response: dict = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂—É"""
        log_data = {
            "order_id": order_id,
            "exchange": exchange,
            "response": response or {},
            "timestamp": datetime.now().isoformat(),
        }

        self.logger.info(f"üì§ –û–†–î–ï–† –û–¢–ü–†–ê–í–õ–ï–ù –Ω–∞ {exchange}", **log_data)
        self._log_to_file("info", "ORDER_SUBMITTED", log_data)

    def log_order_execution(self, order_id: str, execution_data: dict):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞"""
        self.stats["orders_executed"] += 1

        log_data = {
            "order_id": order_id,
            "executed_qty": str(execution_data.get("executed_qty", 0)),
            "executed_price": str(execution_data.get("executed_price", 0)),
            "commission": str(execution_data.get("commission", 0)),
            "status": execution_data.get("status"),
            "timestamp": datetime.now().isoformat(),
        }

        self.logger.info(
            f"‚úÖ –û–†–î–ï–† –ò–°–ü–û–õ–ù–ï–ù: {order_id} "
            f"qty={execution_data.get('executed_qty')} @ {execution_data.get('executed_price')}",
            **log_data,
        )
        self._log_to_file("info", "ORDER_EXECUTED", log_data)

    def log_order_cancelled(self, order_id: str, reason: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞"""
        log_data = {
            "order_id": order_id,
            "reason": reason,
            "timestamp": datetime.now().isoformat(),
        }

        self.logger.warning(f"üö´ –û–†–î–ï–† –û–¢–ú–ï–ù–ï–ù: {order_id} - {reason}", **log_data)
        self._log_to_file("warning", "ORDER_CANCELLED", log_data)

    # ========== SL/TP LOGGING ==========

    def log_sltp_setup(
        self,
        position_id: str,
        sl_price: float = None,
        tp_price: float = None,
        partial_levels: list = None,
    ):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ SL/TP"""
        self.stats["sltp_set"] += 1

        log_data = {
            "position_id": position_id,
            "sl_price": str(sl_price) if sl_price else None,
            "tp_price": str(tp_price) if tp_price else None,
            "partial_levels": partial_levels,
            "timestamp": datetime.now().isoformat(),
        }

        message = f"üéØ SL/TP –£–°–¢–ê–ù–û–í–õ–ï–ù –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {position_id}"
        if sl_price:
            message += f" | SL: {sl_price}"
        if tp_price:
            message += f" | TP: {tp_price}"
        if partial_levels:
            message += f" | –ß–∞—Å—Ç–∏—á–Ω—ã–µ —É—Ä–æ–≤–Ω–∏: {len(partial_levels)}"

        self.logger.info(message, **log_data)
        self._log_to_file("info", "SLTP_SETUP", log_data)

    def log_sltp_modification(
        self,
        position_id: str,
        modification_type: str,
        old_value: float,
        new_value: float,
        reason: str = "",
    ):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è SL/TP"""
        log_data = {
            "position_id": position_id,
            "type": modification_type,  # "SL" –∏–ª–∏ "TP"
            "old_value": str(old_value),
            "new_value": str(new_value),
            "reason": reason,
            "timestamp": datetime.now().isoformat(),
        }

        self.logger.info(
            f"üìù {modification_type} –ò–ó–ú–ï–ù–ï–ù: {old_value} ‚Üí {new_value} | {reason}",
            **log_data,
        )
        self._log_to_file("info", "SLTP_MODIFIED", log_data)

    def log_sltp_triggered(
        self, position_id: str, trigger_type: str, trigger_price: float, pnl: float
    ):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è SL/TP"""
        self.stats["sltp_triggered"] += 1

        log_data = {
            "position_id": position_id,
            "trigger_type": trigger_type,  # "SL" –∏–ª–∏ "TP"
            "trigger_price": str(trigger_price),
            "pnl": str(pnl),
            "timestamp": datetime.now().isoformat(),
        }

        emoji = "üî¥" if trigger_type == "SL" else "üü¢"
        self.logger.info(
            f"{emoji} {trigger_type} –°–†–ê–ë–û–¢–ê–õ @ {trigger_price} | PnL: {pnl}",
            **log_data,
        )
        self._log_to_file("info", "SLTP_TRIGGERED", log_data)

    # ========== PARTIAL CLOSE LOGGING ==========

    def log_partial_close(
        self,
        position_id: str,
        level: int,
        percent: float,
        quantity: float,
        price: float,
    ):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è"""
        self.stats["partial_closes"] += 1

        log_data = {
            "position_id": position_id,
            "level": level,
            "percent": percent,
            "quantity": str(quantity),
            "price": str(price),
            "timestamp": datetime.now().isoformat(),
        }

        self.logger.info(
            f"üìä –ß–ê–°–¢–ò–ß–ù–û–ï –ó–ê–ö–†–´–¢–ò–ï L{level}: {percent}% @ {price} | qty: {quantity}",
            **log_data,
        )
        self._log_to_file("info", "PARTIAL_CLOSE", log_data)

    def log_sl_moved_to_breakeven(self, position_id: str, entry_price: float, new_sl: float):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å–∞ SL –≤ –±–µ–∑—É–±—ã—Ç–æ–∫"""
        log_data = {
            "position_id": position_id,
            "entry_price": str(entry_price),
            "new_sl": str(new_sl),
            "timestamp": datetime.now().isoformat(),
        }

        self.logger.info(f"üîí SL –ü–ï–†–ï–ù–ï–°–ï–ù –í –ë–ï–ó–£–ë–´–¢–û–ö: {new_sl} (–≤—Ö–æ–¥: {entry_price})", **log_data)
        self._log_to_file("info", "SL_TO_BREAKEVEN", log_data)

    # ========== TRAILING STOP LOGGING ==========

    def log_trailing_activated(
        self, position_id: str, activation_price: float, profit_percent: float
    ):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ trailing stop"""
        log_data = {
            "position_id": position_id,
            "activation_price": str(activation_price),
            "profit_percent": profit_percent,
            "timestamp": datetime.now().isoformat(),
        }

        self.logger.info(
            f"üéØ TRAILING STOP –ê–ö–¢–ò–í–ò–†–û–í–ê–ù –ø—Ä–∏ +{profit_percent}% @ {activation_price}",
            **log_data,
        )
        self._log_to_file("info", "TRAILING_ACTIVATED", log_data)

    def log_trailing_update(
        self, position_id: str, old_sl: float, new_sl: float, current_price: float
    ):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è trailing stop"""
        self.stats["trailing_updates"] += 1

        log_data = {
            "position_id": position_id,
            "old_sl": str(old_sl),
            "new_sl": str(new_sl),
            "current_price": str(current_price),
            "timestamp": datetime.now().isoformat(),
        }

        self.logger.info(
            f"üìà TRAILING UPDATE: SL {old_sl} ‚Üí {new_sl} | –¶–µ–Ω–∞: {current_price}",
            **log_data,
        )
        self._log_to_file("info", "TRAILING_UPDATE", log_data)

    # ========== POSITION LOGGING ==========

    def log_position_opened(self, position: dict[str, Any]):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        log_data = {
            "position_id": position.get("id"),
            "symbol": position.get("symbol"),
            "side": position.get("side"),
            "size": str(position.get("size", 0)),
            "entry_price": str(position.get("entry_price", 0)),
            "leverage": position.get("leverage"),
            "timestamp": datetime.now().isoformat(),
        }

        self.logger.info(
            f"üü¢ –ü–û–ó–ò–¶–ò–Ø –û–¢–ö–†–´–¢–ê: {position.get('symbol')} {position.get('side')} "
            f"size={position.get('size')} @ {position.get('entry_price')}",
            **log_data,
        )
        self._log_to_file("info", "POSITION_OPENED", log_data)

    def log_position_closed(
        self, position_id: str, close_price: float, pnl: float, close_reason: str = ""
    ):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        log_data = {
            "position_id": position_id,
            "close_price": str(close_price),
            "pnl": str(pnl),
            "close_reason": close_reason,
            "timestamp": datetime.now().isoformat(),
        }

        emoji = "üü¢" if pnl > 0 else "üî¥"
        self.logger.info(
            f"{emoji} –ü–û–ó–ò–¶–ò–Ø –ó–ê–ö–†–´–¢–ê @ {close_price} | PnL: {pnl} | {close_reason}",
            **log_data,
        )
        self._log_to_file("info", "POSITION_CLOSED", log_data)

    def log_position_update(self, position_id: str, update_type: str, data: dict):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        log_data = {
            "position_id": position_id,
            "update_type": update_type,
            "data": data,
            "timestamp": datetime.now().isoformat(),
        }

        self.logger.debug(f"üìù –ü–û–ó–ò–¶–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ê: {update_type}", **log_data)
        self._log_to_file("debug", "POSITION_UPDATE", log_data)

    # ========== PNL LOGGING ==========

    def log_pnl_update(
        self,
        position_id: str,
        unrealized_pnl: float,
        realized_pnl: float = 0,
        pnl_percent: float = 0,
    ):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è PnL"""
        log_data = {
            "position_id": position_id,
            "unrealized_pnl": str(unrealized_pnl),
            "realized_pnl": str(realized_pnl),
            "pnl_percent": pnl_percent,
            "timestamp": datetime.now().isoformat(),
        }

        emoji = "üìà" if unrealized_pnl > 0 else "üìâ"
        self.logger.debug(
            f"{emoji} PNL: Unrealized={unrealized_pnl} ({pnl_percent}%) | Realized={realized_pnl}",
            **log_data,
        )

        # –í —Ñ–∞–π–ª –ø–∏—à–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if abs(pnl_percent) > 0.5:  # –ë–æ–ª–µ–µ 0.5%
            self._log_to_file("info", "PNL_UPDATE", log_data)

    # ========== ERROR LOGGING ==========

    def log_error(
        self,
        error_type: str,
        error_message: str,
        context: dict = None,
        exception: Exception = None,
    ):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
        self.stats["errors"] += 1

        log_data = {
            "error_type": error_type,
            "error_message": error_message,
            "context": context or {},
            "timestamp": datetime.now().isoformat(),
        }

        if exception:
            log_data["traceback"] = traceback.format_exc()

        self.logger.error(f"‚ùå –û–®–ò–ë–ö–ê [{error_type}]: {error_message}", **log_data)
        self._log_to_file("error", "ERROR", log_data)

    # ========== STATISTICS ==========

    def log_daily_summary(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        log_data = {"stats": self.stats.copy(), "timestamp": datetime.now().isoformat()}

        self.logger.info(
            f"üìä –î–ù–ï–í–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê: "
            f"–°–∏–≥–Ω–∞–ª–æ–≤: {self.stats['signals_received']} | "
            f"–û—Ä–¥–µ—Ä–æ–≤: {self.stats['orders_created']}/{self.stats['orders_executed']} | "
            f"SL/TP: {self.stats['sltp_set']}/{self.stats['sltp_triggered']} | "
            f"–û—à–∏–±–æ–∫: {self.stats['errors']}",
            **log_data,
        )
        self._log_to_file("info", "DAILY_SUMMARY", log_data)

    def get_statistics(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        return self.stats.copy()

    def reset_statistics(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        for key in self.stats:
            self.stats[key] = 0

        self.logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
_trade_logger: TradeLogger | None = None


def get_trade_logger() -> TradeLogger:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ trade logger"""
    global _trade_logger
    if _trade_logger is None:
        _trade_logger = TradeLogger()
    return _trade_logger


# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
def log_trade_event(event_type: str, **kwargs):
    """–ë—ã—Å—Ç—Ä–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
    logger = get_trade_logger()

    # –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –º–µ—Ç–æ–¥—ã –ª–æ–≥–≥–µ—Ä–∞
    event_methods = {
        "signal_received": logger.log_signal_received,
        "order_created": logger.log_order_creation,
        "order_executed": logger.log_order_execution,
        "sltp_setup": logger.log_sltp_setup,
        "position_opened": logger.log_position_opened,
        "position_closed": logger.log_position_closed,
        "partial_close": logger.log_partial_close,
        "trailing_update": logger.log_trailing_update,
        "error": logger.log_error,
    }

    method = event_methods.get(event_type)
    if method:
        return method(**kwargs)
    else:
        logger.logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: {event_type}", **kwargs)
