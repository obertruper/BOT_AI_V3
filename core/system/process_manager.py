#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import os
import signal
from datetime import datetime
from pathlib import Path
from typing import Any

import psutil

from core.logger import setup_logger

logger = setup_logger(__name__)


class ProcessInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ"""

    def __init__(
        self,
        name: str,
        pid: int,
        command: str,
        auto_restart: bool = True,
        cwd: str | None = None,
    ):
        self.name = name
        self.pid = pid
        self.command = command
        self.auto_restart = auto_restart
        self.cwd = cwd
        self.start_time = datetime.now()
        self.restart_count = 0
        self.process: asyncio.subprocess.Process | None = None


class ProcessManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—á–µ—Ä–Ω–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏

    –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
    - –ó–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ —Å–±–æ—è—Ö
    - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ stdout/stderr
    """

    def __init__(self):
        self.processes: dict[str, ProcessInfo] = {}
        self.log_dir = Path("logs/processes")
        self.log_dir.mkdir(parents=True, exist_ok=True)
        self._monitoring_tasks: dict[str, asyncio.Task] = {}
        self.is_running = False

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        self.is_running = True
        logger.info("‚úÖ ProcessManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def start_component(
        self,
        name: str,
        command: str,
        cwd: str | None = None,
        env: dict[str, str] | None = None,
        auto_restart: bool = True,
    ) -> int:
        """
        –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞

        Args:
            name: –ò–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            command: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
            cwd: –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            env: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            auto_restart: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ —Å–±–æ–µ

        Returns:
            PID –ø—Ä–æ—Ü–µ—Å—Å–∞
        """
        if name in self.processes:
            logger.warning(f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {name} —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return self.processes[name].pid

        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ {name}: {command}")

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        process_env = os.environ.copy()
        if env:
            process_env.update(env)
            logger.info(f"üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è {name}: {env}")

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if cwd:
            working_dir = Path(cwd).resolve()
            if not working_dir.exists():
                raise FileNotFoundError(f"–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {cwd}")
        else:
            working_dir = Path.cwd()

        # –õ–æ–≥-—Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        stdout_log = self.log_dir / f"{name}_stdout.log"
        stderr_log = self.log_dir / f"{name}_stderr.log"

        try:
            # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞
            process = await asyncio.create_subprocess_shell(
                command,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE,
                cwd=str(working_dir),
                env=process_env,
                preexec_fn=os.setsid if os.name != "nt" else None,
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            proc_info = ProcessInfo(
                name=name,
                pid=process.pid,
                command=command,
                auto_restart=auto_restart,
                cwd=str(working_dir),
            )
            proc_info.process = process
            self.processes[name] = proc_info

            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞
            monitor_task = asyncio.create_task(self._monitor_process(name, stdout_log, stderr_log))
            self._monitoring_tasks[name] = monitor_task

            logger.info(f"‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç {name} –∑–∞–ø—É—â–µ–Ω —Å PID {process.pid}")
            return process.pid

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {name}: {e}")
            raise

    async def _monitor_process(self, name: str, stdout_log: Path, stderr_log: Path):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        proc_info = self.processes.get(name)
        if not proc_info or not proc_info.process:
            return

        process = proc_info.process
        log_buffer = []
        last_flush = datetime.now()

        # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —á—Ç–µ–Ω–∏—è —Å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–µ–π
        async def read_stream_optimized(stream, file, prefix):
            nonlocal log_buffer, last_flush

            try:
                async for line in stream:
                    now = datetime.now()

                    # –ë—É—Ñ–µ—Ä–∏–∑—É–µ–º –ª–æ–≥–∏ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è I/O –æ–ø–µ—Ä–∞—Ü–∏–π
                    log_line = (
                        f"[{now.strftime('%H:%M:%S')}] {line.decode('utf-8', errors='replace')}"
                    )
                    log_buffer.append(log_line.encode("utf-8"))

                    # –°–±—Ä–æ—Å –±—É—Ñ–µ—Ä–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –∏–ª–∏ –ø—Ä–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–∏ 50 —Å—Ç—Ä–æ–∫
                    if (now - last_flush).total_seconds() > 5 or len(log_buffer) >= 50:
                        file.write(b"".join(log_buffer))
                        file.flush()
                        log_buffer.clear()
                        last_flush = now

                    # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —à—É–º–∞
                    line_str = line.decode("utf-8", errors="replace").strip()
                    if b"CRITICAL" in line or (b"ERROR" in line and b"BrokenPipeError" not in line):
                        logger.error(f"[{name}] {line_str}")
                    elif b"timeout" in line.lower() or b"connection" in line.lower():
                        logger.warning(f"[{name}] {line_str}")

            except Exception as e:
                logger.debug(f"Stream reading error for {name}: {e}")
            finally:
                # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –±—É—Ñ–µ—Ä–∞
                if log_buffer:
                    file.write(b"".join(log_buffer))
                    file.flush()

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–µ–π
        try:
            with (
                open(stdout_log, "ab", buffering=8192) as stdout_file,
                open(stderr_log, "ab", buffering=8192) as stderr_file,
            ):
                # –ó–∞–ø—É—Å–∫–∞–µ–º —á—Ç–µ–Ω–∏–µ –æ–±–æ–∏—Ö –ø–æ—Ç–æ–∫–æ–≤ —Å timeout protection
                await asyncio.wait_for(
                    asyncio.gather(
                        read_stream_optimized(process.stdout, stdout_file, "STDOUT"),
                        read_stream_optimized(process.stderr, stderr_file, "STDERR"),
                        return_exceptions=True,
                    ),
                    timeout=None,  # –£–±–∏—Ä–∞–µ–º –æ–±—â–∏–π timeout –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è BrokenPipeError
                )
        except Exception as e:
            logger.debug(f"Process monitoring error for {name}: {e}")

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        try:
            return_code = await process.wait()
        except Exception as e:
            logger.debug(f"Process wait error for {name}: {e}")
            return_code = -1

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        if name in self.processes:
            if return_code != 0:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                if return_code == -1 or "BrokenPipeError" in str(return_code):
                    logger.debug(f"üîÑ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç {name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∏–∑-–∑–∞ pipe/timeout –æ—à–∏–±–∫–∏")
                else:
                    logger.error(f"‚ùå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç {name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {return_code}")

                # –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
                if proc_info.auto_restart and self.is_running:
                    proc_info.restart_count += 1
                    max_restarts = 3 if name == "core" else 5  # –ú–µ–Ω—å—à–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ –¥–ª—è core

                    if proc_info.restart_count <= max_restarts:
                        # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 2^attempt —Å–µ–∫—É–Ω–¥ (2, 4, 8, 16...)
                        delay = min(2**proc_info.restart_count, 60)  # –ú–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥

                        logger.info(
                            f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ {name} —á–µ—Ä–µ–∑ {delay}—Å (–ø–æ–ø—ã—Ç–∫–∞ {proc_info.restart_count}/{max_restarts})"
                        )
                        await asyncio.sleep(delay)

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                        if not self.is_running:
                            return

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                        restart_count = proc_info.restart_count
                        command = proc_info.command
                        cwd = proc_info.cwd
                        auto_restart = proc_info.auto_restart

                        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        if name in self.processes:
                            del self.processes[name]

                        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—á–µ—Ç—á–∏–∫–∞
                        try:
                            pid = await self.start_component(
                                name=name,
                                command=command,
                                cwd=cwd,
                                auto_restart=auto_restart,
                            )
                            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                            if name in self.processes:
                                self.processes[name].restart_count = restart_count
                                logger.info(f"‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç {name} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ (PID: {pid})")
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ {name}: {e}")
                            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                            await asyncio.sleep(30)
                    else:
                        logger.error(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ –¥–ª—è {name} ({max_restarts})")
                        if name in self.processes:
                            del self.processes[name]
            else:
                logger.info(f"‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç {name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ")
                if name in self.processes:
                    del self.processes[name]

    async def stop_component(self, name: str, timeout: float = 10.0):
        """
        –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞

        Args:
            name: –ò–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            timeout: –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        """
        if name not in self.processes:
            logger.warning(f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        proc_info = self.processes[name]
        process = proc_info.process

        if not process or process.returncode is not None:
            logger.info(f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {name} —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            del self.processes[name]
            return

        logger.info(f"‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ {name}...")

        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º graceful shutdown
            if os.name != "nt":
                os.killpg(os.getpgid(process.pid), signal.SIGTERM)
            else:
                process.terminate()

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            try:
                await asyncio.wait_for(process.wait(), timeout=timeout)
                logger.info(f"‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except TimeoutError:
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                logger.warning(f"‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ {name}")
                if os.name != "nt":
                    os.killpg(os.getpgid(process.pid), signal.SIGKILL)
                else:
                    process.kill()
                await process.wait()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {name}: {e}")
        finally:
            # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            if name in self.processes:
                del self.processes[name]

            # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            if name in self._monitoring_tasks:
                self._monitoring_tasks[name].cancel()
                try:
                    del self._monitoring_tasks[name]
                except KeyError:
                    pass  # –£–∂–µ —É–¥–∞–ª–µ–Ω–æ

    async def restart_component(self, name: str):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        if name not in self.processes:
            logger.error(f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {name} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
            return

        proc_info = self.processes[name]
        logger.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ {name}")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        await self.stop_component(name)

        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
        await asyncio.sleep(2)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–Ω–æ–≤–æ
        await self.start_component(
            name=name,
            command=proc_info.command,
            cwd=proc_info.cwd,
            auto_restart=proc_info.auto_restart,
        )

    async def stop_all(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        self.is_running = False
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")

        # –ö–æ–ø–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
        components = list(self.processes.keys())

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        stop_tasks = []
        for name in components:
            stop_tasks.append(self.stop_component(name))

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö
        if stop_tasks:
            await asyncio.gather(*stop_tasks, return_exceptions=True)

        logger.info("‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

    def get_process_info(self, name: str) -> dict[str, Any] | None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ"""
        if name not in self.processes:
            return None

        proc_info = self.processes[name]

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ psutil
        try:
            process = psutil.Process(proc_info.pid)
            return {
                "name": name,
                "pid": proc_info.pid,
                "status": process.status(),
                "cpu_percent": process.cpu_percent(interval=0.1),
                "memory_mb": process.memory_info().rss / 1024 / 1024,
                "start_time": proc_info.start_time,
                "restart_count": proc_info.restart_count,
                "uptime": datetime.now() - proc_info.start_time,
            }
        except psutil.NoSuchProcess:
            return {
                "name": name,
                "pid": proc_info.pid,
                "status": "terminated",
                "start_time": proc_info.start_time,
                "restart_count": proc_info.restart_count,
            }

    def get_all_processes_info(self) -> list[dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö"""
        info_list = []
        for name in self.processes:
            info = self.get_process_info(name)
            if info:
                info_list.append(info)
        return info_list
