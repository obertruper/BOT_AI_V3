"""
–°–∏—Å—Ç–µ–º–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä BOT_Trading v3.0

–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–π –º—É–ª—å—Ç–∏-—Ç—Ä–µ–π–¥–µ—Ä —Å–∏—Å—Ç–µ–º–æ–π:
- –ó–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞–º–∏ –∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
- –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
"""

import asyncio
from contextlib import asynccontextmanager
from dataclasses import dataclass
from datetime import datetime
from typing import Dict, List, Optional, Set

from core.config.config_manager import ConfigManager, get_global_config_manager
from core.exceptions import ComponentInitializationError
from core.logging.logger_factory import get_global_logger_factory
from core.traders.trader_factory import TraderFactory, get_global_trader_factory
from core.traders.trader_manager import TraderManager, get_global_trader_manager
from utils.helpers import get_system_resources


@dataclass
class HealthStatus:
    """–°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""

    is_healthy: bool
    timestamp: datetime
    issues: List[str]
    warnings: List[str]
    system_resources: Dict[str, float]
    active_traders: int
    total_trades: int


class SystemOrchestrator:
    """
    –ì–ª–∞–≤–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã BOT_Trading v3.0

    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
    - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
    - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏
    - Graceful shutdown
    """

    def __init__(self, config_manager: Optional[ConfigManager] = None):
        self.config_manager = config_manager or get_global_config_manager()
        self.logger_factory = get_global_logger_factory()
        self.logger = self.logger_factory.get_logger(
            "orchestrator", component="system_orchestrator"
        )

        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.trader_manager: Optional[TraderManager] = None
        self.trader_factory: Optional[TraderFactory] = None

        # TODO: –≠—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —ç—Ç–∞–ø–∞—Ö
        # self.system_monitor: Optional[SystemMonitor] = None
        # self.db_manager: Optional[ConnectionManager] = None
        # self.api_server: Optional[APIServer] = None

        # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        self.is_initialized = False
        self.is_running = False
        self.startup_time: Optional[datetime] = None

        # –¢—Ä–µ–∫–∏–Ω–≥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.active_components: Set[str] = set()
        self.failed_components: Set[str] = set()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.system_config = config_manager.get_system_config()
        self.health_check_interval = self.system_config.get("monitoring", {}).get(
            "health_check_interval", 30
        )

        # –ó–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self._monitoring_tasks: List[asyncio.Task] = []

    async def initialize(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            self.logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã BOT_Trading v3.0...")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
            await self._check_system_requirements()

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–±—Ä–∏–∫–∏ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
            await self._initialize_trader_factory()

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
            await self._initialize_trader_manager()

            # TODO: –≠—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —ç—Ç–∞–ø–∞—Ö
            # await self._initialize_database()
            # await self._initialize_monitoring()
            # await self._initialize_api_servers()

            # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
            await self._start_background_tasks()

            self.is_initialized = True
            self.startup_time = datetime.now()

            self.logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
            await self._cleanup_on_error()
            raise SystemInitializationError(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É: {e}"
            ) from e

    async def start(self) -> None:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        try:
            if not self.is_initialized:
                raise SystemInitializationError("–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

            self.logger.info("üéØ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã BOT_Trading v3.0...")

            # –ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
            await self.trader_manager.start()
            self.active_components.add("trader_manager")

            # TODO: –≠—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —ç—Ç–∞–ø–∞—Ö
            # await self.system_monitor.start()
            # self.active_components.add("system_monitor")
            # await self._start_api_servers()

            self.is_running = True
            self.logger.info("üü¢ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã: {e}")
            await self._emergency_shutdown()
            raise

    async def shutdown(self) -> None:
        """Graceful shutdown –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        try:
            self.logger.info("üõë –ù–∞—á–∏–Ω–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Å–∏—Å—Ç–µ–º—ã...")
            self.is_running = False

            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
            await self._stop_background_tasks()

            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
            if self.trader_manager:
                await self.trader_manager.stop()
                self.active_components.discard("trader_manager")

            # TODO: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
            # if self.system_monitor:
            #     await self.system_monitor.stop()
            #     self.active_components.discard("system_monitor")

            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ API —Å–µ—Ä–≤–µ—Ä–æ–≤
            await self._stop_api_servers()

            # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            if self.db_manager:
                await self.db_manager.close_all()
                self.active_components.discard("database")

            self.logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∏—Å—Ç–µ–º—ã: {e}")
            raise SystemShutdownError(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É: {e}"
            ) from e

    async def health_check(self) -> HealthStatus:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        try:
            issues = []
            warnings = []

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            if not self.is_running:
                issues.append("–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞")

            if self.failed_components:
                issues.append(
                    f"–°–±–æ–π–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {', '.join(self.failed_components)}"
                )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
            if self.trader_manager:
                trader_health = await self.trader_manager.get_health_status()
                if trader_health.failed_traders:
                    issues.append(
                        f"–°–±–æ–π–Ω—ã–µ —Ç—Ä–µ–π–¥–µ—Ä—ã: {', '.join(trader_health.failed_traders)}"
                    )
                if trader_health.warnings:
                    warnings.extend(trader_health.warnings)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
            resources = get_system_resources()
            limits = self.system_config.get("limits", {})

            if resources["memory_percent"] > limits.get("max_memory_usage_mb", 80):
                warnings.append(
                    f"–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {resources['memory_percent']}%"
                )

            if resources["cpu_percent"] > limits.get("max_cpu_usage_percent", 80):
                warnings.append(
                    f"–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: {resources['cpu_percent']}%"
                )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if self.db_manager:
                db_health = await self.db_manager.health_check()
                if not db_health.is_healthy:
                    issues.append("–ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
            active_traders = 0
            total_trades = 0

            if self.trader_manager:
                stats = await self.trader_manager.get_statistics()
                active_traders = stats.active_traders
                total_trades = stats.total_trades

            return HealthStatus(
                is_healthy=len(issues) == 0,
                timestamp=datetime.now(),
                issues=issues,
                warnings=warnings,
                system_resources=resources,
                active_traders=active_traders,
                total_trades=total_trades,
            )

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
            raise HealthCheckError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã: {e}") from e

    async def get_system_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        uptime = None
        if self.startup_time:
            uptime = (datetime.now() - self.startup_time).total_seconds()

        health = await self.health_check()

        return {
            "system": {
                "version": "3.0.0",
                "is_running": self.is_running,
                "uptime_seconds": uptime,
                "startup_time": self.startup_time.isoformat()
                if self.startup_time
                else None,
            },
            "health": {
                "is_healthy": health.is_healthy,
                "issues": health.issues,
                "warnings": health.warnings,
                "last_check": health.timestamp.isoformat(),
            },
            "resources": health.system_resources,
            "traders": {
                "active": health.active_traders,
                "total_trades": health.total_trades,
            },
            "components": {
                "active": list(self.active_components),
                "failed": list(self.failed_components),
            },
        }

    # –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

    async def _check_system_requirements(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
        resources = get_system_resources()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
        if resources["memory_available_mb"] < 512:
            raise SystemInitializationError(
                "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø–∞–º—è—Ç–∏ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 512MB)"
            )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ
        if resources["disk_free_gb"] < 1:
            raise SystemInitializationError(
                "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 1GB)"
            )

        self.logger.info("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")

    async def _initialize_database(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.db_manager = ConnectionManager(
                self.config_manager.get_database_config()
            )
            await self.db_manager.initialize()
            self.active_components.add("database")
            self.logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            self.failed_components.add("database")
            raise SystemInitializationError(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}"
            ) from e

    async def _initialize_monitoring(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            self.system_monitor = SystemMonitor(self.config_manager)
            await self.system_monitor.initialize()
            self.active_components.add("system_monitor")
            self.logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            self.failed_components.add("system_monitor")
            self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {e}")

    async def _initialize_trader_factory(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–±—Ä–∏–∫–∏ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤"""
        try:
            self.trader_factory = get_global_trader_factory()
            self.active_components.add("trader_factory")
            self.logger.info("‚úÖ –§–∞–±—Ä–∏–∫–∞ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            self.failed_components.add("trader_factory")
            raise ComponentInitializationError("trader_factory", str(e)) from e

    async def _initialize_trader_manager(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤"""
        try:
            self.trader_manager = get_global_trader_manager()
            await self.trader_manager.initialize()
            self.active_components.add("trader_manager")
            self.logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            self.failed_components.add("trader_manager")
            raise ComponentInitializationError("trader_manager", str(e)) from e

    async def _start_background_tasks(self) -> None:
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
        # –ó–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è
        health_task = asyncio.create_task(self._health_monitoring_loop())
        self._monitoring_tasks.append(health_task)

        self.logger.info("‚úÖ –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã")

    async def _stop_background_tasks(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
        for task in self._monitoring_tasks:
            task.cancel()
            try:
                await task
            except asyncio.CancelledError:
                pass

        self._monitoring_tasks.clear()
        self.logger.info("‚úÖ –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

    async def _health_monitoring_loop(self) -> None:
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        while self.is_running:
            try:
                health = await self.health_check()

                if not health.is_healthy:
                    self.logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ: {health.issues}")

                if health.warnings:
                    self.logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {health.warnings}")

                await asyncio.sleep(self.health_check_interval)

            except asyncio.CancelledError:
                break
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
                await asyncio.sleep(self.health_check_interval)

    async def _start_api_servers(self) -> None:
        """–ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
        pass

    async def _stop_api_servers(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ API —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
        pass

    async def _cleanup_on_error(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        try:
            if self.db_manager:
                await self.db_manager.close_all()
            if self.system_monitor:
                await self.system_monitor.stop()
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")

    async def _emergency_shutdown(self) -> None:
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        self.logger.error("üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
        self.is_running = False

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        for task in self._monitoring_tasks:
            task.cancel()

        if self.trader_manager:
            await self.trader_manager.emergency_stop()

        if self.db_manager:
            await self.db_manager.close_all()

    @asynccontextmanager
    async def managed_lifecycle(self):
        """Context manager –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º"""
        try:
            await self.initialize()
            await self.start()
            yield self
        finally:
            await self.shutdown()
