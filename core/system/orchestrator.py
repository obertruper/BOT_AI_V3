"""
–°–∏—Å—Ç–µ–º–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä BOT_Trading v3.0

–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–π –º—É–ª—å—Ç–∏-—Ç—Ä–µ–π–¥–µ—Ä —Å–∏—Å—Ç–µ–º–æ–π:
- –ó–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞–º–∏ –∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
- –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
"""

import asyncio
import os
from contextlib import asynccontextmanager
from dataclasses import dataclass
from datetime import datetime

from core.config.config_manager import ConfigManager, get_global_config_manager
from core.exceptions import (
    ComponentInitializationError,
    HealthCheckError,
    SystemInitializationError,
    SystemShutdownError,
)
from core.logging.logger_factory import get_global_logger_factory
from core.traders.trader_factory import TraderFactory, get_global_trader_factory
from core.traders.trader_manager import TraderManager, get_global_trader_manager
from utils.helpers import get_system_resources

# –ò–º–ø–æ—Ä—Ç –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
from database.database_manager import DatabaseManager
from ml.ml_manager import MLManager


@dataclass
class HealthStatus:
    """–î–∞—Ç–∞–∫–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã.

    Attributes:
        is_healthy: True, –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–∞.
        timestamp: –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.
        issues: –°–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º.
        warnings: –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.
        system_resources: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ (CPU, –ø–∞–º—è—Ç—å).
        active_traders: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤.
        total_trades: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫.
    """

    is_healthy: bool
    timestamp: datetime
    issues: list[str]
    warnings: list[str]
    system_resources: dict[str, float]
    active_traders: int
    total_trades: int


class SystemOrchestrator:
    """–ì–ª–∞–≤–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã BOT_Trading v3.0.

    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, –∑–∞–ø—É—Å–∫, –æ—Å—Ç–∞–Ω–æ–≤–∫—É –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –≤—Å–µ—Ö
    –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã, —Ç–∞–∫–∏—Ö –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä —Ç—Ä–µ–π–¥–µ—Ä–æ–≤, —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫,
    —Å–µ—Ä–≤–∏—Å—ã –¥–∞–Ω–Ω—ã—Ö –∏ API. –£–ø—Ä–∞–≤–ª—è–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –∏ –ø—Ä–æ–≤–æ–¥–∏—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã.
    """

    def __init__(self, config_manager: ConfigManager | None = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä.

        Args:
            config_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω,
                –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä.
        """
        self.config_manager = config_manager or get_global_config_manager()
        self.config = self.config_manager.get_config()  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.logger_factory = get_global_logger_factory()
        self.logger = self.logger_factory.get_logger("system_orchestrator")

        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.trader_manager: TraderManager | None = None
        self.trader_factory: TraderFactory | None = None
        self.health_checker = None
        self.exchange_registry = None
        self.exchange_manager = None  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è TradingEngine
        self.risk_manager = None  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è TradingEngine
        self.trading_engine = None
        self.telegram_service = None
        self.ai_signal_generator = None
        self.signal_scheduler = None
        self.data_update_service = None
        self.data_manager = None
        self.system_monitor = None
        
        # –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.db_manager: DatabaseManager | None = None
        self.ml_manager: MLManager | None = None

        # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        self.is_initialized = False
        self.is_running = False
        self.startup_time: datetime | None = None

        # –¢—Ä–µ–∫–∏–Ω–≥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.active_components: set[str] = set()
        self.failed_components: set[str] = set()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.system_config = config_manager.get_system_config()
        self.health_check_interval = 30  # Default health check interval

        # –ó–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self._monitoring_tasks: list[asyncio.Task] = []

    async def initialize(self) -> None:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã.

        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç
        –≤—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∏ —Å–µ—Ä–≤–∏—Å—ã. –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        –∏ –≤—ã–∑—ã–≤–∞–µ—Ç SystemInitializationError.
        """
        try:
            self.logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã BOT_Trading v3.0...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            await self.config_manager.initialize()
            
            # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            await self._check_system_requirements()
            await self._initialize_database_manager()
            await self._initialize_ml_manager()
            
            # –¢–æ—Ä–≥–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            await self._initialize_trader_factory()
            await self._initialize_trader_manager()
            await self._initialize_exchange_registry()
            await self._initialize_trading_engine()
            
            # –°–µ—Ä–≤–∏—Å—ã
            await self._initialize_health_checker()
            await self._initialize_telegram_service()
            await self._initialize_ai_signal_generator()
            await self._initialize_data_manager()
            await self._initialize_data_update_service()
            await self._initialize_data_maintenance()
            await self._initialize_signal_scheduler()

            unified_mode = os.getenv("UNIFIED_MODE")
            self.logger.info(f"üîç UNIFIED_MODE = {unified_mode}")
            if unified_mode != "true":
                await self._initialize_api_servers()
            else:
                self.logger.info(
                    "‚è≠Ô∏è API —Å–µ—Ä–≤–µ—Ä—ã –±—É–¥—É—Ç –∑–∞–ø—É—â–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º (UNIFIED_MODE=true)"
                )

            await self._start_background_tasks()
            self.is_initialized = True
            self.startup_time = datetime.now()
            self.logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
            await self._cleanup_on_error()
            raise SystemInitializationError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É: {e}") from e

    async def start(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã.

        –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ API —Å–µ—Ä–≤–µ—Ä—ã.

        Raises:
            SystemInitializationError: –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –±—ã–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
                –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.
        """
        if not self.is_initialized:
            raise SystemInitializationError("–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        self.logger.info("üéØ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã BOT_Trading v3.0...")
        try:
            if self.trader_manager:
                await self.trader_manager.start()
                self.active_components.add("trader_manager")
            if self.trading_engine:
                await self.trading_engine.start()
                self.active_components.add("trading_engine")
            if self.ai_signal_generator:
                await self.ai_signal_generator.start()
            if self.signal_scheduler:
                await self.signal_scheduler.start()
            if self.data_manager:
                await self.data_manager.start()
                self.active_components.add("data_manager")
            if self.data_update_service:
                await self.data_update_service.start()
            if hasattr(self, "data_maintenance") and self.data_maintenance:
                await self.data_maintenance.start()

            if os.getenv("UNIFIED_MODE") != "true":
                await self._start_api_servers()

            self.is_running = True
            self.logger.info("üü¢ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã: {e}")
            await self._emergency_shutdown()
            raise

    async def shutdown(self) -> None:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã.

        –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã, —Ç—Ä–µ–π–¥–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã,
        –∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã.

        Raises:
            SystemShutdownError: –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ.
        """
        try:
            self.logger.info("üõë –ù–∞—á–∏–Ω–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Å–∏—Å—Ç–µ–º—ã...")
            self.is_running = False
            await self._stop_background_tasks()

            if self.trader_manager:
                await self.trader_manager.stop()
                self.active_components.discard("trader_manager")
            if self.trading_engine:
                await self.trading_engine.stop()
                self.active_components.discard("trading_engine")
            if self.telegram_service:
                await self.telegram_service.stop()
            if self.signal_scheduler:
                await self.signal_scheduler.stop()
            if self.data_manager:
                await self.data_manager.stop()
            if self.data_update_service:
                await self.data_update_service.stop()
            if hasattr(self, "data_maintenance") and self.data_maintenance:
                await self.data_maintenance.stop()

            await self._stop_api_servers()

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            if self.ml_manager:
                # ML Manager –º–æ–∂–µ—Ç –Ω–µ –∏–º–µ—Ç—å –º–µ—Ç–æ–¥–∞ stop, –Ω–æ —É –∞–¥–∞–ø—Ç–µ—Ä–∞ –µ—Å—Ç—å cleanup
                if hasattr(self.ml_manager, 'adapter') and self.ml_manager.adapter:
                    await self.ml_manager.adapter.cleanup()
                self.active_components.discard("ml_manager")
            
            if self.db_manager:
                await self.db_manager.close()
                self.active_components.discard("database_manager")

            self.logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∏—Å—Ç–µ–º—ã: {e}")
            raise SystemShutdownError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É: {e}") from e

    async def stop(self) -> None:
        """–ê–ª–∏–∞—Å –¥–ª—è shutdown() - –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º."""
        await self.shutdown()

    async def health_check(self) -> HealthStatus:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã.

        –°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.

        Returns:
            HealthStatus: –û–±—ä–µ–∫—Ç —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã.

        Raises:
            HealthCheckError: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É.
        """
        try:
            issues, warnings = [], []
            if not self.is_running:
                issues.append("–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞")
            if self.failed_components:
                issues.append(f"–°–±–æ–π–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {', '.join(self.failed_components)}")

            active_traders, total_trades = 0, 0
            if self.trader_manager:
                try:
                    trader_health = await self.trader_manager.get_health_status()
                    if trader_health.failed_traders:
                        issues.append(f"–°–±–æ–π–Ω—ã–µ —Ç—Ä–µ–π–¥–µ—Ä—ã: {', '.join(trader_health.failed_traders)}")
                    if trader_health.warnings:
                        warnings.extend(trader_health.warnings)
                    stats = await self.trader_manager.get_statistics()
                    active_traders = stats.active_traders
                    total_trades = stats.total_trades
                except Exception as e:
                    warnings.append(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ DatabaseManager
            if self.db_manager:
                try:
                    db_health = await self.db_manager.health_check()
                    if not db_health.get("healthy", False):
                        issues.append(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_health.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    elif db_health.get("active_connections", 0) > 8:
                        warnings.append(f"–í—ã—Å–æ–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î: {db_health['active_connections']}")
                except Exception as e:
                    warnings.append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ë–î: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ MLManager
            if self.ml_manager:
                try:
                    if hasattr(self.ml_manager, '_initialized') and not self.ml_manager._initialized:
                        warnings.append("ML Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                    elif hasattr(self.ml_manager, 'use_adapter') and self.ml_manager.use_adapter:
                        if hasattr(self.ml_manager, 'adapter') and self.ml_manager.adapter:
                            ml_info = await self.ml_manager.adapter.get_model_info()
                            if not ml_info.get('is_loaded', False):
                                warnings.append("ML –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                        else:
                            warnings.append("ML –∞–¥–∞–ø—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                except Exception as e:
                    warnings.append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ML Manager: {e}")

            resources = get_system_resources()
            limits = self.system_config.get("limits", {})
            if resources["memory_percent"] > limits.get("max_memory_usage_percent", 80):
                warnings.append(f"–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {resources['memory_percent']}%")
            if resources["cpu_percent"] > limits.get("max_cpu_usage_percent", 80):
                warnings.append(f"–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: {resources['cpu_percent']}%")

            return HealthStatus(
                is_healthy=not issues,
                timestamp=datetime.now(),
                issues=issues,
                warnings=warnings,
                system_resources=resources,
                active_traders=active_traders,
                total_trades=total_trades,
            )
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
            raise HealthCheckError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã: {e}") from e

    async def get_system_status(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è."""
        uptime = (datetime.now() - self.startup_time).total_seconds() if self.startup_time else None
        health = await self.health_check()
        return {
            "system": {
                "version": "3.0.0",
                "is_running": self.is_running,
                "uptime_seconds": uptime,
                "startup_time": self.startup_time.isoformat() if self.startup_time else None,
            },
            "health": {
                "is_healthy": health.is_healthy,
                "issues": health.issues,
                "warnings": health.warnings,
                "last_check": health.timestamp.isoformat(),
            },
            "resources": health.system_resources,
            "traders": {"active": health.active_traders, "total_trades": health.total_trades, "active_positions": 0},
            "components": {"active": list(self.active_components), "failed": list(self.failed_components)},
        }

    async def get_status(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –æ–∂–∏–¥–∞–µ–º–æ–º main.py –∏ web API."""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –≤–∏–¥–µ {–∏–º—è: bool} –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç main.py
            components = {}
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫–∞–∫ True
            for component in self.active_components:
                components[component] = True
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–±–æ–π–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫–∞–∫ False
            for component in self.failed_components:
                components[component] = False
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –¥–æ–±–∞–≤–∏–º –±–∞–∑–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            if not components:
                components = {
                    "ConfigManager": self.is_initialized,
                    "SystemOrchestrator": self.is_running,
                }
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏—Ä–∂–∞—Ö (–∑–∞–≥–ª—É—à–∫–∞)
            exchanges = []
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö (–∑–∞–≥–ª—É—à–∫–∞)  
            strategies = []
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            database = {
                "connected": True,  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                "status": "connected"
            }
            
            # –ü–æ–¥—Å—á–µ—Ç —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –∏ –ø–æ–∑–∏—Ü–∏–π
            traders_count = 0
            active_positions = 0
            if self.trader_manager:
                try:
                    stats = await self.trader_manager.get_statistics()
                    traders_count = stats.active_traders
                    active_positions = getattr(stats, 'active_positions', 0)
                except:
                    pass
            
            # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
            uptime = 0
            start_time = datetime.now()
            if self.startup_time:
                uptime = (datetime.now() - self.startup_time).total_seconds()
                start_time = self.startup_time
            
            return {
                "running": self.is_running,
                "components": components,
                "exchanges": exchanges,
                "strategies": strategies,
                "database": database,
                "traders_count": traders_count,
                "active_positions": active_positions,
                "uptime": uptime,
                "start_time": start_time
            }
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {
                "running": False,
                "components": {"SystemOrchestrator": False},
                "exchanges": [],
                "strategies": [],
                "database": {"connected": False, "error": str(e)},
                "traders_count": 0,
                "active_positions": 0,
                "uptime": 0,
                "start_time": datetime.now()
            }

    async def get_metrics(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
            resources = get_system_resources()
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è—Ö —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            db_connections = 0
            if self.db_manager:
                try:
                    db_connections = await self.db_manager.get_active_connections_count()
                except:
                    pass
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
            import threading
            active_threads = threading.active_count()
            
            # –°–µ—Ç–µ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞)
            network_io = {
                "bytes_sent": 0,
                "bytes_received": 0,
                "packets_sent": 0,
                "packets_received": 0
            }
            
            return {
                "cpu_usage": resources.get("cpu_percent", 0),
                "memory_usage": resources.get("memory_percent", 0),
                "disk_usage": resources.get("disk_percent", 0),
                "network_io": network_io,
                "database_connections": db_connections,
                "active_threads": active_threads,
                "timestamp": datetime.now()
            }
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
            return {
                "cpu_usage": 0,
                "memory_usage": 0,
                "disk_usage": 0,
                "network_io": {"bytes_sent": 0, "bytes_received": 0},
                "database_connections": 0,
                "active_threads": 0,
                "timestamp": datetime.now(),
                "error": str(e)
            }

    # –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    async def _check_system_requirements(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π."""
        self.logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ CPU, –ø–∞–º—è—Ç–∏, –¥–∏—Å–∫–∞ –∏ —Ç.–¥.
        pass
    
    async def _initialize_database_manager(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DatabaseManager —Å TransactionManager."""
        try:
            self.logger.info("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DatabaseManager...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db_config = self.config_manager.get_config("database")
            if hasattr(db_config, 'model_dump'):
                config_dict = {"database": db_config.model_dump()}
            elif hasattr(db_config, 'dict'):
                config_dict = {"database": db_config.dict()}
            else:
                config_dict = {"database": db_config} if db_config else {}
            
            self.db_manager = DatabaseManager(config_dict)
            await self.db_manager.initialize()
            
            self.active_components.add("database_manager")
            self.logger.info("‚úÖ DatabaseManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å TransactionManager")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DatabaseManager: {e}")
            self.failed_components.add("database_manager")
            raise ComponentInitializationError(f"DatabaseManager initialization failed: {e}")
    
    async def _initialize_ml_manager(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MLManager —Å –∞–¥–∞–ø—Ç–µ—Ä–∞–º–∏."""
        try:
            self.logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MLManager...")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è ML
            config = self.config_manager.get_config()
            
            self.ml_manager = MLManager(config)
            await self.ml_manager.initialize()
            
            self.active_components.add("ml_manager")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –∞–¥–∞–ø—Ç–µ—Ä
            if hasattr(self.ml_manager, 'use_adapter') and self.ml_manager.use_adapter:
                self.logger.info("‚úÖ MLManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Å–∏—Å—Ç–µ–º–æ–π –∞–¥–∞–ø—Ç–µ—Ä–æ–≤")
            else:
                self.logger.info("‚úÖ MLManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ legacy —Ä–µ–∂–∏–º–µ")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MLManager: {e}")
            self.failed_components.add("ml_manager")
            # ML Manager –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            self.logger.warning("ML Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É")
    
    async def _initialize_trader_factory(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TraderFactory."""
        try:
            self.logger.info("üè≠ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TraderFactory...")
            self.trader_factory = get_global_trader_factory()
            self.active_components.add("trader_factory")
            self.logger.info("‚úÖ TraderFactory –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TraderFactory: {e}")
            self.failed_components.add("trader_factory")
    
    async def _initialize_trader_manager(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TraderManager."""
        try:
            self.logger.info("üë• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TraderManager...")
            self.trader_manager = get_global_trader_manager()
            self.active_components.add("trader_manager")
            self.logger.info("‚úÖ TraderManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TraderManager: {e}")
            self.failed_components.add("trader_manager")
    
    async def _initialize_exchange_registry(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–µ—Å—Ç—Ä–∞ –±–∏—Ä–∂."""
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        self.logger.info("üè™ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–µ—Å—Ç—Ä–∞ –±–∏—Ä–∂...")
        pass
    
    async def _initialize_trading_engine(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞."""
        self.logger.info("‚ö° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞...")
        
        try:
            from trading.engine import TradingEngine
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Pydantic –º–æ–¥–µ–ª—å –≤ dict –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            config_dict = self.config
            if hasattr(self.config, 'model_dump'):
                config_dict = self.config.model_dump()
            elif hasattr(self.config, 'dict'):
                config_dict = self.config.dict()
            
            self.trading_engine = TradingEngine(
                orchestrator=self,  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–∞–º orchestrator
                config=config_dict  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞–∫ dict
            )
            
            await self.trading_engine.initialize()
            self.active_components.add("trading_engine")
            self.logger.info("‚úÖ TradingEngine —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TradingEngine: {e}")
            self.trading_engine = None
            self.failed_components.add("trading_engine")
    
    async def _initialize_health_checker(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è."""
        self.logger.info("üè• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è...")
        pass
    
    async def _initialize_telegram_service(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram —Å–µ—Ä–≤–∏—Å–∞."""
        self.logger.info("üì± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram —Å–µ—Ä–≤–∏—Å–∞...")
        pass
    
    async def _initialize_ai_signal_generator(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤."""
        self.logger.info("üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤...")
        pass
    
    async def _initialize_signal_scheduler(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤."""
        self.logger.info("üìÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ ML —Å–∏—Å—Ç–µ–º–∞
            # –†–∞–±–æ—Ç–∞–µ–º —Å Pydantic –º–æ–¥–µ–ª—å—é –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            ml_enabled = False
            if hasattr(self.config, 'ml'):
                ml_config = self.config.ml
                ml_enabled = getattr(ml_config, 'enabled', False)
            
            if not ml_enabled:
                self.logger.info("ML –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, SignalScheduler –Ω–µ –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Å–æ–∑–¥–∞–µ–º SignalScheduler
            from ml.signal_scheduler import SignalScheduler
            
            self.signal_scheduler = SignalScheduler(self.config_manager)
            await self.signal_scheduler.initialize()
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫ Trading Engine –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if self.trading_engine:
                self.signal_scheduler.set_trading_engine(self.trading_engine)
                self.logger.info("‚úÖ SignalScheduler –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ TradingEngine")
            else:
                self.logger.warning("‚ö†Ô∏è TradingEngine –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, SignalScheduler –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–∏–≥–Ω–∞–ª—ã")
            
            self.active_components.add("signal_scheduler")
            self.logger.info("‚úÖ SignalScheduler —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SignalScheduler: {e}")
            self.signal_scheduler = None
            self.failed_components.add("signal_scheduler")
    
    async def _initialize_data_manager(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö."""
        self.logger.info("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
        pass
    
    async def _initialize_data_update_service(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."""
        self.logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
        pass
    
    async def _initialize_data_maintenance(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."""
        self.logger.info("üßπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
        pass
    
    async def _initialize_api_servers(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API —Å–µ—Ä–≤–µ—Ä–æ–≤."""
        self.logger.info("üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        pass
    
    async def _start_background_tasks(self) -> None:
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á."""
        self.logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
        pass
    
    async def _stop_background_tasks(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á."""
        self.logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
        for task in self._monitoring_tasks:
            if not task.done():
                task.cancel()
        self._monitoring_tasks.clear()
    
    async def _health_monitoring_loop(self) -> None:
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è."""
        pass
    
    async def _start_api_servers(self) -> None:
        """–ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–æ–≤."""
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        pass
    
    async def _stop_api_servers(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ API —Å–µ—Ä–≤–µ—Ä–æ–≤."""
        self.logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ API —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        pass
    
    async def _cleanup_on_error(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ."""
        self.logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏...")
        try:
            if self.db_manager:
                await self.db_manager.close()
            if self.ml_manager and hasattr(self.ml_manager, 'adapter') and self.ml_manager.adapter:
                await self.ml_manager.adapter.cleanup()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
    
    async def _emergency_shutdown(self) -> None:
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã."""
        self.logger.error("üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
        await self._cleanup_on_error()

    @asynccontextmanager
    async def managed_lifecycle(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º."""
        try:
            await self.initialize()
            await self.start()
            yield self
        finally:
            await self.shutdown()
