"""
–î–µ–¥—É–ø–ª–∏–∫–∞—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import hashlib
import json
import logging
from dataclasses import dataclass
from datetime import datetime, timedelta
from typing import Any

import redis.asyncio as redis

from database.db_manager import get_db

logger = logging.getLogger(__name__)


@dataclass
class SignalFingerprint:
    """–û—Ç–ø–µ—á–∞—Ç–æ–∫ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏"""

    symbol: str
    direction: str  # 'BUY' –∏–ª–∏ 'SELL'
    strategy: str
    timestamp_minute: int  # –û–∫—Ä—É–≥–ª–µ–Ω–Ω–∞—è –¥–æ –º–∏–Ω—É—Ç—ã –º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    signal_strength: float | None = None
    price_level: float | None = None

    def to_hash(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ö–µ—à–∞ –æ—Ç–ø–µ—á–∞—Ç–∫–∞"""
        data = {
            "symbol": self.symbol,
            "direction": self.direction,
            "strategy": self.strategy,
            "timestamp_minute": self.timestamp_minute,
            "signal_strength": round(self.signal_strength, 4) if self.signal_strength else None,
            "price_level": round(self.price_level, 4) if self.price_level else None,
        }

        json_str = json.dumps(data, sort_keys=True)
        return hashlib.sha256(json_str.encode()).hexdigest()[:16]


class SignalDeduplicator:
    """
    –î–µ–¥—É–ø–ª–∏–∫–∞—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è

    –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –æ—Ç–ø–µ—á–∞—Ç–∫—É
    - –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ Redis –∏ PostgreSQL
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    """

    def __init__(self, redis_client: redis.Redis | None = None):
        self.db_manager = None
        self.redis_client = redis_client
        self.local_cache: dict[str, datetime] = {}  # –õ–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à –∫–∞–∫ fallback
        self.cache_ttl = timedelta(minutes=5)  # TTL –¥–ª—è –∫–µ—à–∞
        self.max_local_cache_size = 10000
        self.stats = {
            "total_checks": 0,
            "duplicates_found": 0,
            "unique_signals": 0,
            "cache_hits": 0,
            "cache_misses": 0,
        }

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
        if not self.redis_client:
            self._init_redis()

    def _init_redis(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            self.redis_client = redis.from_url("redis://localhost:6379/2")  # DB 2 –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
            logger.info("‚úÖ Redis –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ç–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ç–æ—Ä–∞: {e}")
            self.redis_client = None

    async def check_and_register_signal(self, signal_data: dict[str, Any]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–∏–≥–Ω–∞–ª–∞ –∏ –µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è

        Args:
            signal_data: –î–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞ (symbol, direction, strategy, etc.)

        Returns:
            True –µ—Å–ª–∏ —Å–∏–≥–Ω–∞–ª —É–Ω–∏–∫–∞–ª–µ–Ω, False –µ—Å–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç
        """
        self.stats["total_checks"] += 1

        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DBManager –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if not self.db_manager:
                self.db_manager = await get_db()
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–ø–µ—á–∞—Ç–æ–∫ —Å–∏–≥–Ω–∞–ª–∞
            fingerprint = self._create_fingerprint(signal_data)
            signal_hash = fingerprint.to_hash()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∫–µ—à–µ
            if await self._is_duplicate_cached(signal_hash):
                self.stats["duplicates_found"] += 1
                self.stats["cache_hits"] += 1
                logger.debug(
                    f"üîç –ù–∞–π–¥–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç —Å–∏–≥–Ω–∞–ª–∞: {fingerprint.symbol} {fingerprint.direction} ({signal_hash})"
                )
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if await self._is_duplicate_database(fingerprint):
                self.stats["duplicates_found"] += 1
                self.stats["cache_misses"] += 1
                logger.debug(
                    f"üîç –ù–∞–π–¥–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç –≤ –ë–î: {fingerprint.symbol} {fingerprint.direction} ({signal_hash})"
                )
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –±—É–¥—É—â–µ–º
                await self._cache_signal_hash(signal_hash)
                return False

            # –°–∏–≥–Ω–∞–ª —É–Ω–∏–∫–∞–ª–µ–Ω - —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ
            await self._register_signal(fingerprint, signal_hash)
            self.stats["unique_signals"] += 1

            logger.debug(
                f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª: {fingerprint.symbol} {fingerprint.direction} ({signal_hash})"
            )
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å–∏–≥–Ω–∞–ª (–±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞)
            return True

    async def get_recent_signals(
        self, symbol: str | None = None, minutes: int = 5
    ) -> list[dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤

        Args:
            symbol: –§–∏–ª—å—Ç—Ä –ø–æ —Å–∏–º–≤–æ–ª—É (–µ—Å–ª–∏ None - –≤—Å–µ —Å–∏–º–≤–æ–ª—ã)
            minutes: –ó–∞ –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç

        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        """
        try:
            since_time = datetime.now() - timedelta(minutes=minutes)

            query = """
                SELECT signal_hash, symbol, direction, strategy, created_at,
                       signal_strength, price_level, metadata
                FROM signal_fingerprints
                WHERE created_at >= $1
            """
            params = [since_time]

            if symbol:
                query += " AND symbol = $2"
                params.append(symbol)

            query += " ORDER BY created_at DESC LIMIT 1000"

            rows = await self.db_manager.fetch_all(query, *params)

            signals = []
            for row in rows:
                signals.append(
                    {
                        "signal_hash": row["signal_hash"],
                        "symbol": row["symbol"],
                        "direction": row["direction"],
                        "strategy": row["strategy"],
                        "created_at": row["created_at"],
                        "signal_strength": row["signal_strength"],
                        "price_level": row["price_level"],
                        "metadata": row["metadata"],
                    }
                )

            return signals

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return []

    async def cleanup_old_records(self, older_than_hours: int = 24):
        """
        –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π

        Args:
            older_than_hours: –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ —ç—Ç–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Å–æ–≤
        """
        try:
            cutoff_time = datetime.now() - timedelta(hours=older_than_hours)

            # –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            query = "DELETE FROM signal_fingerprints WHERE created_at < $1"
            result = await self.db_manager.execute(query, cutoff_time)

            deleted_count = 0
            if result and result.startswith("DELETE"):
                deleted_count = int(result.split()[-1])

            # –û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–µ—à–∞
            now = datetime.now()
            to_remove = []
            for signal_hash, timestamp in self.local_cache.items():
                if (now - timestamp) > timedelta(hours=older_than_hours):
                    to_remove.append(signal_hash)

            for signal_hash in to_remove:
                del self.local_cache[signal_hash]

            logger.info(
                f"üßπ –û—á–∏—â–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏: {deleted_count} –∏–∑ –ë–î, {len(to_remove)} –∏–∑ –∫–µ—à–∞"
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π: {e}")

    def get_stats(self) -> dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ç–æ—Ä–∞"""
        stats = self.stats.copy()
        stats["local_cache_size"] = len(self.local_cache)
        stats["duplicate_rate"] = (
            self.stats["duplicates_found"] / self.stats["total_checks"]
            if self.stats["total_checks"] > 0
            else 0
        )
        stats["cache_hit_rate"] = (
            self.stats["cache_hits"] / (self.stats["cache_hits"] + self.stats["cache_misses"])
            if (self.stats["cache_hits"] + self.stats["cache_misses"]) > 0
            else 0
        )

        return stats

    def reset_stats(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.stats = {
            "total_checks": 0,
            "duplicates_found": 0,
            "unique_signals": 0,
            "cache_hits": 0,
            "cache_misses": 0,
        }

    def _create_fingerprint(self, signal_data: dict[str, Any]) -> SignalFingerprint:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–ø–µ—á–∞—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞"""
        timestamp = signal_data.get("timestamp", datetime.now())
        if isinstance(timestamp, str):
            timestamp = datetime.fromisoformat(timestamp)

        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –º–∏–Ω—É—Ç—ã –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ—Ö–æ–∂–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        timestamp_minute = int(timestamp.replace(second=0, microsecond=0).timestamp())

        return SignalFingerprint(
            symbol=signal_data["symbol"],
            direction=signal_data["direction"],
            strategy=signal_data.get("strategy", "unknown"),
            timestamp_minute=timestamp_minute,
            signal_strength=signal_data.get("signal_strength"),
            price_level=signal_data.get("price", signal_data.get("price_level")),
        )

    async def _is_duplicate_cached(self, signal_hash: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ –≤ –∫–µ—à–µ"""
        now = datetime.now()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
        if signal_hash in self.local_cache:
            if (now - self.local_cache[signal_hash]) <= self.cache_ttl:
                return True
            else:
                # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à—É—é –∑–∞–ø–∏—Å—å
                del self.local_cache[signal_hash]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis –∫–µ—à
        if self.redis_client:
            try:
                exists = await self.redis_client.exists(f"signal:{signal_hash}")
                return bool(exists)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Redis –∫–µ—à–∞: {e}")

        return False

    async def _is_duplicate_database(self, fingerprint: SignalFingerprint) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
            since_time = datetime.now() - self.cache_ttl

            query = """
                SELECT 1 FROM signal_fingerprints
                WHERE signal_hash = $1 AND created_at >= $2
                LIMIT 1
            """

            result = await self.db_manager.fetch_one(query, fingerprint.to_hash(), since_time)
            return result is not None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞ –≤ –ë–î: {e}")
            return False

    async def _cache_signal_hash(self, signal_hash: str):
        """–ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–µ—à–∞ —Å–∏–≥–Ω–∞–ª–∞"""
        now = datetime.now()

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
        self.local_cache[signal_hash] = now

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–µ—à–∞
        if len(self.local_cache) > self.max_local_cache_size:
            # –£–¥–∞–ª—è–µ–º 10% —Å–∞–º—ã—Ö —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
            sorted_items = sorted(self.local_cache.items(), key=lambda x: x[1])
            remove_count = int(self.max_local_cache_size * 0.1)
            for signal_hash_to_remove, _ in sorted_items[:remove_count]:
                del self.local_cache[signal_hash_to_remove]

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ Redis
        if self.redis_client:
            try:
                ttl_seconds = int(self.cache_ttl.total_seconds())
                await self.redis_client.setex(f"signal:{signal_hash}", ttl_seconds, "1")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Redis: {e}")

    async def _register_signal(self, fingerprint: SignalFingerprint, signal_hash: str):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            query = """
                INSERT INTO signal_fingerprints
                (signal_hash, symbol, direction, strategy, timestamp_minute,
                 signal_strength, price_level, created_at)
                VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
                ON CONFLICT (signal_hash) DO NOTHING
            """

            await self.db_manager.execute(
                query,
                signal_hash,
                fingerprint.symbol,
                fingerprint.direction,
                fingerprint.strategy,
                fingerprint.timestamp_minute,
                fingerprint.signal_strength,
                fingerprint.price_level,
                datetime.now(),
            )

            # –ö–µ—à–∏—Ä—É–µ–º
            await self._cache_signal_hash(signal_hash)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–µ–¥—É–ø–ª–∏–∫–∞—Ç–æ—Ä–∞
signal_deduplicator = SignalDeduplicator()
