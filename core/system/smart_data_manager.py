"""
–£–º–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–µ–π API –∑–∞–ø—Ä–æ—Å–æ–≤
"""

import asyncio
from datetime import datetime, timezone
from typing import Any, Callable, Dict, List, Optional

import pandas as pd

from core.cache.market_data_cache import MarketDataCache
from core.config.config_manager import ConfigManager
from core.logger import setup_logger
from database.connections.postgres import AsyncPGPool
from exchanges.factory import ExchangeFactory

logger = setup_logger(__name__)


class SmartDataManager:
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö:
    - –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    - –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–≤–µ—á–∏ –≤ –ë–î
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–µ—à –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤
    """

    def __init__(self, config_manager: ConfigManager):
        self.config_manager = config_manager
        self.config = config_manager.get_config()

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.data_config = self.config.get(
            "data_management",
            {
                "auto_update": True,
                "update_interval": 60,  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                "initial_load_days": 7,
                "min_candles_for_ml": 96,
                "cache_size": 1000,
                "cache_ttl": 60,
            },
        )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–µ—à–∞
        self.cache = MarketDataCache(
            cache_size=self.data_config.get("cache_size", 1000),
            ttl_seconds=self.data_config.get("cache_ttl", 60),
        )

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_running = False
        self.update_task: Optional[asyncio.Task] = None
        self.exchanges = {}
        self.websocket_connections = {}

        # –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã
        self.trading_pairs = self.config.get(
            "trading_pairs",
            [
                "BTCUSDT",
                "ETHUSDT",
                "BNBUSDT",
                "ADAUSDT",
                "SOLUSDT",
                "XRPUSDT",
                "DOGEUSDT",
                "DOTUSDT",
                "LINKUSDT",
            ],
        )

        # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        self._last_db_save: Dict[str, datetime] = {}

        # –ö–æ–ª–±—ç–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        self._update_callbacks: List[Callable] = []

        logger.info(
            f"SmartDataManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è {len(self.trading_pairs)} –ø–∞—Ä"
        )

    async def start(self) -> None:
        """–ó–∞–ø—É—Å–∫ —É–º–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        if self.is_running:
            logger.warning("SmartDataManager —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        logger.info("üöÄ –ó–∞–ø—É—Å–∫ SmartDataManager...")

        try:
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂
            await self._initialize_exchanges()

            # 2. –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î –∏–ª–∏ API
            await self._load_initial_data()

            # 3. –ó–∞–ø—É—Å–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            await self._start_websockets()

            # 4. –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –º–∏–Ω—É—Ç–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            self.is_running = True
            self.update_task = asyncio.create_task(self._smart_update_loop())

            logger.info("‚úÖ SmartDataManager —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ SmartDataManager: {e}")
            raise

    async def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        if not self.is_running:
            return

        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ SmartDataManager...")
        self.is_running = False

        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á
        if self.update_task:
            self.update_task.cancel()
            try:
                await self.update_task
            except asyncio.CancelledError:
                pass

        # –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        for ws in self.websocket_connections.values():
            try:
                await ws.close()
            except:
                pass

        # –ó–∞–∫—Ä—ã—Ç–∏–µ –±–∏—Ä–∂
        for exchange in self.exchanges.values():
            try:
                await exchange.close()
            except:
                pass

        logger.info("SmartDataManager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def _ensure_utc_timestamp(self, timestamp) -> pd.Timestamp:
        """
        Ensure timestamp is UTC and timezone-naive for database storage.

        Args:
            timestamp: Input timestamp (can be timezone-aware or naive)

        Returns:
            pd.Timestamp: UTC timestamp without timezone info
        """
        if timestamp is None:
            return None

        # Convert to pandas Timestamp if not already
        if not isinstance(timestamp, pd.Timestamp):
            timestamp = pd.Timestamp(timestamp)

        # Handle timezone conversion properly
        if timestamp.tzinfo is not None:
            # Already timezone-aware - convert to UTC
            timestamp = timestamp.tz_convert("UTC")
            # Remove timezone info for database storage (PostgreSQL requirement)
            timestamp = timestamp.tz_localize(None)
        else:
            # Naive timestamp - assume it's already UTC
            pass

        return timestamp

    async def _initialize_exchanges(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∏—Ä–∂–∞–º"""
        try:
            exchange = await ExchangeFactory.create_exchange_client("bybit")
            if exchange:
                self.exchanges["bybit"] = exchange
                logger.info("‚úÖ –ë–∏—Ä–∂–∞ Bybit –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å Bybit")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∏—Ä–∂: {e}")
            raise

    async def _load_initial_data(self) -> None:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:
        1. –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ë–î
        2. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ —É—Å—Ç–∞—Ä–µ–ª–∏ - –∑–∞–≥—Ä—É–∂–∞–µ–º —Å API
        3. –ö–µ—à–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        """
        logger.info("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")

        tasks = []
        for symbol in self.trading_pairs:
            task = asyncio.create_task(self._load_symbol_data(symbol))
            tasks.append(task)

        results = await asyncio.gather(*tasks, return_exceptions=True)

        success_count = sum(1 for r in results if not isinstance(r, Exception))
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {success_count}/{len(self.trading_pairs)} —Å–∏–º–≤–æ–ª–æ–≤")

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
        for i, result in enumerate(results):
            if isinstance(result, Exception):
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {self.trading_pairs[i]}: {result}")

    async def _load_symbol_data(self, symbol: str) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        try:
            # 1. –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ë–î
            db_data = await self._load_from_database(symbol)

            if (
                db_data is not None
                and len(db_data) >= self.data_config["min_candles_for_ml"]
            ):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
                last_time = db_data.index[-1]
                age = (datetime.now(timezone.utc) - last_time).total_seconds() / 3600

                if age < 1:  # –î–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–∏–µ (–º–µ–Ω–µ–µ —á–∞—Å–∞)
                    await self.cache.update_data(symbol, db_data, is_complete=True)
                    logger.info(f"‚úÖ {symbol}: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(db_data)} —Å–≤–µ—á–µ–π –∏–∑ –ë–î")
                    return
                else:
                    logger.info(f"‚ö†Ô∏è {symbol}: –¥–∞–Ω–Ω—ã–µ –≤ –ë–î —É—Å—Ç–∞—Ä–µ–ª–∏ ({age:.1f} —á–∞—Å–æ–≤)")

            # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å API
            await self._load_from_api(symbol)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {symbol}: {e}")
            raise

    async def _load_from_database(self, symbol: str) -> Optional[pd.DataFrame]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î"""
        try:
            result = await AsyncPGPool.fetch(
                """
                SELECT timestamp, datetime, open, high, low, close, volume, turnover
                FROM raw_market_data
                WHERE symbol = $1
                  AND exchange = 'bybit'
                  AND interval_minutes = 15
                ORDER BY timestamp DESC
                LIMIT 1000
            """,
                symbol,
            )

            if not result:
                return None

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
            data = []
            for row in result:
                data.append(
                    {
                        "timestamp": row["timestamp"],
                        "datetime": row["datetime"],
                        "open": float(row["open"]),
                        "high": float(row["high"]),
                        "low": float(row["low"]),
                        "close": float(row["close"]),
                        "volume": float(row["volume"]),
                        "turnover": float(row["turnover"]) if row["turnover"] else 0,
                    }
                )

            df = pd.DataFrame(data)
            df["datetime"] = pd.to_datetime(df["datetime"], utc=True)
            df.set_index("datetime", inplace=True)
            df.sort_index(inplace=True)

            return df

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –ë–î –¥–ª—è {symbol}: {e}")
            return None

    async def _load_from_api(self, symbol: str) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å API"""
        try:
            exchange = self.exchanges.get("bybit")
            if not exchange:
                return

            logger.info(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ {symbol} —Å API...")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            candles = await exchange.get_klines(symbol, "15", limit=1000)

            if candles:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
                df = self._candles_to_dataframe(candles)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
                await self.cache.update_data(symbol, df, is_complete=True)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                await self._save_candles_to_db(symbol, candles)

                logger.info(f"‚úÖ {symbol}: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(candles)} —Å–≤–µ—á–µ–π —Å API")
            else:
                logger.warning(f"‚ö†Ô∏è {symbol}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å API")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å API –¥–ª—è {symbol}: {e}")
            raise

    async def _start_websockets(self) -> None:
        """–ó–∞–ø—É—Å–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–∏
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        logger.info("üì° WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")

    async def _smart_update_loop(self) -> None:
        """
        –£–º–Ω—ã–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:
        - –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–≤–µ—á–∏ –≤ –ë–î
        """
        while self.is_running:
            try:
                start_time = asyncio.get_event_loop().time()

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏
                await self._update_last_candles()

                # –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫–∏
                for callback in self._update_callbacks:
                    try:
                        await callback()
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback: {e}")

                # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞
                if asyncio.get_event_loop().time() % 300 < 60:  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                    stats = self.cache.get_stats()
                    logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞: {stats}")

                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –º–∏–Ω—É—Ç—ã
                elapsed = asyncio.get_event_loop().time() - start_time
                sleep_time = max(0, 60 - elapsed)
                await asyncio.sleep(sleep_time)

            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ smart_update_loop: {e}")
                await asyncio.sleep(10)

    async def _update_last_candles(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        tasks = []

        for symbol in self.trading_pairs:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            needs_update, update_type = self.cache.needs_update(symbol)

            if needs_update and update_type == "last":
                task = asyncio.create_task(self._update_last_candle(symbol))
                tasks.append(task)
            elif needs_update and update_type == "full":
                # –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
                task = asyncio.create_task(self._load_symbol_data(symbol))
                tasks.append(task)

        if tasks:
            results = await asyncio.gather(*tasks, return_exceptions=True)

            # –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            success_count = sum(1 for r in results if not isinstance(r, Exception))
            if success_count > 0:
                logger.debug(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ {success_count} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π")

    async def _update_last_candle(self, symbol: str) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        try:
            exchange = self.exchanges.get("bybit")
            if not exchange:
                return

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É
            candles = await exchange.get_klines(symbol, "15", limit=2)

            if candles and len(candles) > 0:
                last_candle = candles[-1]

                # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ Kline
                candle_data = {
                    "timestamp": self._ensure_utc_timestamp(last_candle.open_time),
                    "open": float(last_candle.open_price),
                    "high": float(last_candle.high_price),
                    "low": float(last_candle.low_price),
                    "close": float(last_candle.close_price),
                    "volume": float(last_candle.volume),
                    "turnover": (
                        float(last_candle.turnover)
                        if hasattr(last_candle, "turnover")
                        else 0
                    ),
                }

                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
                await self.cache.update_last_candle(symbol, candle_data)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ —Å–≤–µ—á–∞
                await self._check_and_save_completed_candle(symbol, candle_data)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏ {symbol}: {e}")

    async def _check_and_save_completed_candle(
        self, symbol: str, candle_data: Dict[str, Any]
    ) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–≤–µ—á–∏ –≤ –ë–î
        """
        try:
            current_time = datetime.now(timezone.utc)
            candle_time = candle_data["timestamp"].to_pydatetime()

            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ candle_time —Ç–∞–∫–∂–µ –≤ UTC timezone –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            if candle_time.tzinfo is None:
                candle_time = candle_time.replace(tzinfo=timezone.utc)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 15 –º–∏–Ω—É—Ç —Å –Ω–∞—á–∞–ª–∞ —Å–≤–µ—á–∏
            if (current_time - candle_time).total_seconds() >= 900:
                # –°–≤–µ—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏
                last_save = self._last_db_save.get(symbol)

                if last_save is None or candle_time > last_save:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                    await self._save_single_candle(symbol, candle_data)
                    self._last_db_save[symbol] = candle_time
                    logger.debug(f"üíæ {symbol}: –ó–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Å–≤–µ—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–≤–µ—á–∏ {symbol}: {e}")

    async def _save_single_candle(
        self, symbol: str, candle_data: Dict[str, Any]
    ) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–π —Å–≤–µ—á–∏ –≤ –ë–î"""
        try:
            timestamp = int(candle_data["timestamp"].timestamp() * 1000)

            await AsyncPGPool.execute(
                """
                INSERT INTO raw_market_data
                (symbol, timestamp, datetime, open, high, low, close, volume,
                 interval_minutes, exchange, turnover)
                VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
                ON CONFLICT (symbol, timestamp, interval_minutes, exchange) DO UPDATE
                SET open = EXCLUDED.open,
                    high = EXCLUDED.high,
                    low = EXCLUDED.low,
                    close = EXCLUDED.close,
                    volume = EXCLUDED.volume,
                    turnover = EXCLUDED.turnover,
                    updated_at = NOW()
            """,
                symbol,
                timestamp,
                candle_data["timestamp"],
                candle_data["open"],
                candle_data["high"],
                candle_data["low"],
                candle_data["close"],
                candle_data["volume"],
                15,
                "bybit",
                candle_data.get("turnover", 0),
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤–µ—á–∏ {symbol}: {e}")

    async def _save_candles_to_db(self, symbol: str, candles: List[Any]) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–≤–µ—á–µ–π –≤ –ë–î"""
        for candle in candles:
            try:
                candle_data = None
                if isinstance(candle, list) and len(candle) >= 6:
                    # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –º–∞—Å—Å–∏–≤
                    candle_data = {
                        "timestamp": self._ensure_utc_timestamp(
                            pd.Timestamp(int(candle[0]), unit="ms")
                        ),
                        "open": float(candle[1]),
                        "high": float(candle[2]),
                        "low": float(candle[3]),
                        "close": float(candle[4]),
                        "volume": float(candle[5]),
                        "turnover": float(candle[6]) if len(candle) > 6 else 0,
                    }
                elif hasattr(candle, "open_price"):
                    # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç - –æ–±—ä–µ–∫—Ç Kline
                    candle_data = {
                        "timestamp": self._ensure_utc_timestamp(candle.open_time),
                        "open": float(candle.open_price),
                        "high": float(candle.high_price),
                        "low": float(candle.low_price),
                        "close": float(candle.close_price),
                        "volume": float(candle.volume),
                        "turnover": float(candle.turnover)
                        if hasattr(candle, "turnover")
                        else 0,
                    }

                if candle_data:
                    await self._save_single_candle(symbol, candle_data)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤–µ—á–∏: {e}")

    def _candles_to_dataframe(self, candles: List[Any]) -> pd.DataFrame:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–≤–µ—á–µ–π –≤ DataFrame"""
        data = []
        for candle in candles:
            if isinstance(candle, list) and len(candle) >= 6:
                # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –º–∞—Å—Å–∏–≤
                data.append(
                    {
                        "datetime": self._ensure_utc_timestamp(
                            pd.Timestamp(int(candle[0]), unit="ms")
                        ),
                        "open": float(candle[1]),
                        "high": float(candle[2]),
                        "low": float(candle[3]),
                        "close": float(candle[4]),
                        "volume": float(candle[5]),
                        "turnover": float(candle[6]) if len(candle) > 6 else 0,
                    }
                )
            elif hasattr(candle, "open_price"):
                # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç - –æ–±—ä–µ–∫—Ç Kline
                data.append(
                    {
                        "datetime": self._ensure_utc_timestamp(candle.open_time),
                        "open": float(candle.open_price),
                        "high": float(candle.high_price),
                        "low": float(candle.low_price),
                        "close": float(candle.close_price),
                        "volume": float(candle.volume),
                        "turnover": float(candle.turnover)
                        if hasattr(candle, "turnover")
                        else 0,
                    }
                )

        df = pd.DataFrame(data)
        if not df.empty:
            df.set_index("datetime", inplace=True)
            df.sort_index(inplace=True)

        return df

    async def get_data(
        self, symbol: str, required_candles: int = 96
    ) -> Optional[pd.DataFrame]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ (–∏–∑ –∫–µ—à–∞)

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            required_candles: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π

        Returns:
            DataFrame —Å OHLCV –¥–∞–Ω–Ω—ã–º–∏
        """
        return await self.cache.get_data(symbol, required_candles)

    def register_update_callback(self, callback: Callable) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö"""
        self._update_callbacks.append(callback)

    def get_cache_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞"""
        return self.cache.get_stats()
