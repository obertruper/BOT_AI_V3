"""
–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö ML –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
"""

import asyncio
import logging
import os
import time
from dataclasses import dataclass, field
from datetime import datetime, timedelta
from typing import Any

import psutil

logger = logging.getLogger(__name__)


@dataclass
class WorkerInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ—Ä–∫–µ—Ä–µ"""

    worker_id: str
    process_id: int
    worker_type: str  # 'ml_manager', 'signal_processor', 'trading_engine'
    started_at: datetime
    last_heartbeat: datetime
    status: str  # 'starting', 'running', 'stopping', 'error'
    tasks: set[str] = field(default_factory=set)
    metadata: dict[str, Any] = field(default_factory=dict)


class WorkerCoordinator:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤

    –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
    - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–æ—Ä–∫–µ—Ä–æ–≤
    - –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–æ–≤
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É–ø–∞–≤—à–∏—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
    - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∑–∞–¥–∞—á –º–µ–∂–¥—É –≤–æ—Ä–∫–µ—Ä–∞–º–∏
    """

    def __init__(self):
        self.workers: dict[str, WorkerInfo] = {}
        self.worker_locks: dict[str, asyncio.Lock] = {}
        self.task_assignments: dict[str, str] = {}  # task_id -> worker_id
        self.heartbeat_timeout = timedelta(minutes=2)
        self.cleanup_interval = 60  # —Å–µ–∫—É–Ω–¥
        self._running = False
        self._cleanup_task = None
        self._lock = asyncio.Lock()

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞"""
        if self._running:
            logger.warning("WorkerCoordinator —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        self._running = True
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ WorkerCoordinator")

        # –û—á–∏—Å—Ç–∫–∞ zombie –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        await self._cleanup_dead_processes()

        # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
        self._cleanup_task = asyncio.create_task(self._periodic_cleanup())

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞"""
        if not self._running:
            return

        self._running = False
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ WorkerCoordinator")

        if self._cleanup_task:
            self._cleanup_task.cancel()
            try:
                await self._cleanup_task
            except asyncio.CancelledError:
                pass

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        for worker_id in list(self.workers.keys()):
            await self.unregister_worker(worker_id)

    async def register_worker(
        self,
        worker_type: str,
        worker_id: str | None = None,
        metadata: dict[str, Any] | None = None,
    ) -> str | None:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ—Ä–∫–µ—Ä–∞

        Args:
            worker_type: –¢–∏–ø –≤–æ—Ä–∫–µ—Ä–∞ ('ml_manager', 'signal_processor', etc.)
            worker_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –≤–æ—Ä–∫–µ—Ä–∞ (–µ—Å–ª–∏ None - –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è)
            metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–æ—Ä–∫–µ—Ä–∞

        Returns:
            worker_id –µ—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, None –µ—Å–ª–∏ —Ç–∞–∫–æ–π –≤–æ—Ä–∫–µ—Ä —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        """
        async with self._lock:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ—Ä–∫–µ—Ä –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
            active_workers = self._get_active_workers_by_type(worker_type)

            if active_workers:
                logger.warning(
                    f"‚ö†Ô∏è  –í–æ—Ä–∫–µ—Ä —Ç–∏–ø–∞ '{worker_type}' —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω: {[w.worker_id for w in active_workers]}"
                )
                return None

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
            if worker_id is None:
                worker_id = f"{worker_type}_{int(time.time())}_{os.getpid()}"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å ID
            if worker_id in self.workers:
                logger.error(f"‚ùå –í–æ—Ä–∫–µ—Ä —Å ID '{worker_id}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return None

            # –°–æ–∑–¥–∞–µ–º –≤–æ—Ä–∫–µ—Ä–∞
            worker_info = WorkerInfo(
                worker_id=worker_id,
                process_id=os.getpid(),
                worker_type=worker_type,
                started_at=datetime.now(),
                last_heartbeat=datetime.now(),
                status="starting",
                metadata=metadata or {},
            )

            self.workers[worker_id] = worker_info
            self.worker_locks[worker_id] = asyncio.Lock()

            logger.info(
                f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤–æ—Ä–∫–µ—Ä: {worker_id} (—Ç–∏–ø: {worker_type}, PID: {os.getpid()})"
            )
            return worker_id

    async def unregister_worker(self, worker_id: str):
        """–°–Ω—è—Ç–∏–µ –≤–æ—Ä–∫–µ—Ä–∞ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        async with self._lock:
            if worker_id not in self.workers:
                logger.warning(f"‚ö†Ô∏è  –í–æ—Ä–∫–µ—Ä '{worker_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–Ω—è—Ç–∏—è —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
                return

            worker = self.workers[worker_id]
            worker.status = "stopping"

            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∑–∞–¥–∞—á–∏
            tasks_to_reassign = []
            for task_id, assigned_worker in self.task_assignments.items():
                if assigned_worker == worker_id:
                    tasks_to_reassign.append(task_id)

            for task_id in tasks_to_reassign:
                del self.task_assignments[task_id]

            # –£–¥–∞–ª—è–µ–º –≤–æ—Ä–∫–µ—Ä–∞
            del self.workers[worker_id]
            if worker_id in self.worker_locks:
                del self.worker_locks[worker_id]

            logger.info(f"üóëÔ∏è  –°–Ω—è—Ç —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ—Ä–∫–µ—Ä: {worker_id}")

            if tasks_to_reassign:
                logger.info(f"üìã –û—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã –∑–∞–¥–∞—á–∏: {tasks_to_reassign}")

    async def heartbeat(
        self,
        worker_id: str,
        status: str | None = None,
        active_tasks: int | None = None,
        tasks: set[str] | None = None,
        metadata: dict[str, Any] | None = None,
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ heartbeat –æ—Ç –≤–æ—Ä–∫–µ—Ä–∞

        Args:
            worker_id: ID –≤–æ—Ä–∫–µ—Ä–∞
            status: –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤–æ—Ä–∫–µ—Ä–∞
            active_tasks: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            tasks: –¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏ –≤–æ—Ä–∫–µ—Ä–∞
            metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ

        Returns:
            True –µ—Å–ª–∏ heartbeat –ø—Ä–∏–Ω—è—Ç, False –µ—Å–ª–∏ –≤–æ—Ä–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        async with self._lock:
            if worker_id not in self.workers:
                logger.warning(f"‚ö†Ô∏è  Heartbeat –æ—Ç –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞: {worker_id}")
                return False

            worker = self.workers[worker_id]
            worker.last_heartbeat = datetime.now()

            if status:
                worker.status = status

            if tasks is not None:
                worker.tasks = tasks

            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
            if metadata:
                worker.metadata.update(metadata)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ
            if active_tasks is not None:
                worker.metadata["active_tasks"] = active_tasks

            return True

    async def can_assign_task(self, task_id: str, worker_type: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏

        Args:
            task_id: ID –∑–∞–¥–∞—á–∏
            worker_type: –¢—Ä–µ–±—É–µ–º—ã–π —Ç–∏–ø –≤–æ—Ä–∫–µ—Ä–∞

        Returns:
            True –µ—Å–ª–∏ –∑–∞–¥–∞—á—É –º–æ–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å
        """
        async with self._lock:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ª–∏ —É–∂–µ –∑–∞–¥–∞—á–∞
            if task_id in self.task_assignments:
                assigned_worker = self.task_assignments[task_id]
                if assigned_worker in self.workers:
                    logger.debug(f"üìã –ó–∞–¥–∞—á–∞ '{task_id}' —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≤–æ—Ä–∫–µ—Ä—É '{assigned_worker}'")
                    return False
                else:
                    # –í–æ—Ä–∫–µ—Ä —É–º–µ—Ä, –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∑–∞–¥–∞—á—É
                    del self.task_assignments[task_id]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞ –Ω—É–∂–Ω–æ–≥–æ —Ç–∏–ø–∞
            active_workers = self._get_active_workers_by_type(worker_type)
            return len(active_workers) > 0

    async def assign_task(self, task_id: str, worker_type: str) -> str | None:
        """
        –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤–æ—Ä–∫–µ—Ä—É

        Args:
            task_id: ID –∑–∞–¥–∞—á–∏
            worker_type: –¢—Ä–µ–±—É–µ–º—ã–π —Ç–∏–ø –≤–æ—Ä–∫–µ—Ä–∞

        Returns:
            worker_id –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞, None –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å
        """
        async with self._lock:
            if not await self.can_assign_task(task_id, worker_type):
                return None

            # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–º–µ–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ç–∏–ø–∞
            active_workers = self._get_active_workers_by_type(worker_type)
            if not active_workers:
                logger.error(
                    f"‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤ —Ç–∏–ø–∞ '{worker_type}' –¥–ª—è –∑–∞–¥–∞—á–∏ '{task_id}'"
                )
                return None

            # –í—ã–±–∏—Ä–∞–µ–º –≤–æ—Ä–∫–µ—Ä–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–¥–∞—á
            best_worker = min(active_workers, key=lambda w: len(w.tasks))

            # –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–¥–∞—á—É
            self.task_assignments[task_id] = best_worker.worker_id
            best_worker.tasks.add(task_id)

            logger.info(f"üìã –ù–∞–∑–Ω–∞—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞ '{task_id}' –≤–æ—Ä–∫–µ—Ä—É '{best_worker.worker_id}'")
            return best_worker.worker_id

    async def complete_task(self, task_id: str, worker_id: str):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤–æ—Ä–∫–µ—Ä–æ–º"""
        async with self._lock:
            if task_id in self.task_assignments:
                if self.task_assignments[task_id] == worker_id:
                    del self.task_assignments[task_id]

                    if worker_id in self.workers:
                        self.workers[worker_id].tasks.discard(task_id)

                    logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ '{task_id}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤–æ—Ä–∫–µ—Ä–æ–º '{worker_id}'")
                else:
                    logger.warning(
                        f"‚ö†Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É '{task_id}' –≤–æ—Ä–∫–µ—Ä–æ–º '{worker_id}', –Ω–æ –æ–Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥—Ä—É–≥–æ–º—É"
                    )

    def get_worker_stats(self) -> dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ—Ä–∫–µ—Ä–æ–≤"""
        stats = {
            "total_workers": len(self.workers),
            "workers_by_type": {},
            "workers_by_status": {},
            "active_tasks": len(self.task_assignments),
            "workers": [],
        }

        for worker in self.workers.values():
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º
            if worker.worker_type not in stats["workers_by_type"]:
                stats["workers_by_type"][worker.worker_type] = 0
            stats["workers_by_type"][worker.worker_type] += 1

            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            if worker.status not in stats["workers_by_status"]:
                stats["workers_by_status"][worker.status] = 0
            stats["workers_by_status"][worker.status] += 1

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ—Ä–∫–µ—Ä–µ
            stats["workers"].append(
                {
                    "worker_id": worker.worker_id,
                    "worker_type": worker.worker_type,
                    "process_id": worker.process_id,
                    "status": worker.status,
                    "started_at": worker.started_at.isoformat(),
                    "last_heartbeat": worker.last_heartbeat.isoformat(),
                    "active_tasks": len(worker.tasks),
                    "tasks": list(worker.tasks),
                    "uptime_seconds": (datetime.now() - worker.started_at).total_seconds(),
                }
            )

        return stats

    def _get_active_workers_by_type(self, worker_type: str) -> list[WorkerInfo]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        now = datetime.now()
        active_workers = []

        for worker in self.workers.values():
            if (
                worker.worker_type == worker_type
                and worker.status in ["running", "starting"]
                and (now - worker.last_heartbeat) < self.heartbeat_timeout
            ):
                active_workers.append(worker)

        return active_workers

    async def _cleanup_dead_processes(self):
        """–û—á–∏—Å—Ç–∫–∞ –º–µ—Ä—Ç–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        to_remove = []

        for worker_id, worker in self.workers.items():
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–∏–≤ –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
                if not psutil.pid_exists(worker.process_id):
                    logger.warning(
                        f"üíÄ –ü—Ä–æ—Ü–µ—Å—Å {worker.process_id} –≤–æ—Ä–∫–µ—Ä–∞ '{worker_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    )
                    to_remove.append(worker_id)
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º timeout heartbeat
                if (datetime.now() - worker.last_heartbeat) > self.heartbeat_timeout:
                    logger.warning(
                        f"üíî –í–æ—Ä–∫–µ—Ä '{worker_id}' –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–π heartbeat: {worker.last_heartbeat})"
                    )
                    to_remove.append(worker_id)

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ—Ä–∫–µ—Ä–∞ '{worker_id}': {e}")
                to_remove.append(worker_id)

        # –£–¥–∞–ª—è–µ–º –º–µ—Ä—Ç–≤—ã–µ –≤–æ—Ä–∫–µ—Ä—ã
        for worker_id in to_remove:
            await self.unregister_worker(worker_id)

    async def _periodic_cleanup(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –º–µ—Ä—Ç–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        while self._running:
            try:
                await asyncio.sleep(self.cleanup_interval)
                await self._cleanup_dead_processes()
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
worker_coordinator = WorkerCoordinator()
