"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏—Å—Ç–µ–º—ã
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç DataUpdateService —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
"""

import asyncio
from datetime import datetime, timedelta
from typing import Any, List, Optional

from core.config.config_manager import ConfigManager
from core.logger import setup_logger
from database.connections.postgres import AsyncPGPool
from exchanges.factory import ExchangeFactory

logger = setup_logger(__name__)


class DataManager:
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""

    def __init__(self, config_manager: ConfigManager):
        self.config_manager = config_manager
        self.config = config_manager.get_config()

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.data_config = self.config.get(
            "data_management",
            {
                "auto_update": True,
                "update_interval": 900,  # 15 –º–∏–Ω—É—Ç
                "initial_load_days": 7,
                "min_candles_for_ml": 96,
                "check_on_startup": True,
            },
        )

        self.is_running = False
        self.update_task: Optional[asyncio.Task] = None
        self.exchanges = {}

        # –°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.trading_pairs = self.config.get(
            "trading_pairs",
            [
                "BTCUSDT",
                "ETHUSDT",
                "BNBUSDT",
                "ADAUSDT",
                "SOLUSDT",
                "XRPUSDT",
                "DOGEUSDT",
                "DOTUSDT",
                "LINKUSDT",
            ],
        )

        logger.info(
            f"DataManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: auto_update={self.data_config['auto_update']}, interval={self.data_config['update_interval']}s"
        )

    async def start(self) -> None:
        """–ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        if self.is_running:
            logger.warning("DataManager —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        if not self.data_config.get("auto_update", True):
            logger.info("–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return

        logger.info(
            f"üîÑ –ó–∞–ø—É—Å–∫ DataManager (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ {self.data_config['update_interval'] / 60:.1f} –º–∏–Ω—É—Ç)"
        )

        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂
            await self._initialize_exchanges()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if self.data_config.get("check_on_startup", True):
                await self._check_and_load_initial_data()

            # –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.is_running = True
            self.update_task = asyncio.create_task(self._update_loop())

            logger.info("‚úÖ DataManager —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ DataManager: {e}")
            raise

    async def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        if not self.is_running:
            return

        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ DataManager...")
        self.is_running = False

        if self.update_task:
            self.update_task.cancel()
            try:
                await self.update_task
            except asyncio.CancelledError:
                pass

        # –ó–∞–∫—Ä—ã—Ç–∏–µ –±–∏—Ä–∂
        for exchange in self.exchanges.values():
            try:
                await exchange.close()
            except:
                pass

        logger.info("DataManager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _initialize_exchanges(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∏—Ä–∂–∞–º"""
        try:
            # –ü–æ–∫–∞ —Ç–æ–ª—å–∫–æ Bybit
            exchange = await ExchangeFactory.create_exchange_client("bybit")
            if exchange:
                self.exchanges["bybit"] = exchange
                logger.info("‚úÖ –ë–∏—Ä–∂–∞ Bybit –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å Bybit –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∏—Ä–∂: {e}")

    async def _check_and_load_initial_data(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...")

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ–∂–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            from datetime import timezone

            for symbol in self.trading_pairs:
                latest_data = await self._get_latest_data_time(symbol)

                if latest_data:
                    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º timezone - –µ—Å–ª–∏ naive, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ UTC
                    if latest_data.tzinfo is None:
                        latest_data = latest_data.replace(tzinfo=timezone.utc)

                    now = datetime.now(timezone.utc)
                    age = now - latest_data

                    if age > timedelta(hours=1):
                        logger.info(
                            f"‚ö†Ô∏è {symbol}: –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –Ω–∞ {age.total_seconds() / 3600:.1f} —á–∞—Å–æ–≤"
                        )
                        await self._load_historical_data(symbol)
                    else:
                        logger.debug(
                            f"‚úÖ {symbol}: –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã (–≤–æ–∑—Ä–∞—Å—Ç: {age.total_seconds() / 60:.1f} –º–∏–Ω—É—Ç)"
                        )
                else:
                    logger.info(f"‚ö†Ô∏è {symbol}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é")
                    await self._load_historical_data(symbol)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    async def _update_loop(self) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        while self.is_running:
            try:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
                await self._update_all_symbols()

                # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                await asyncio.sleep(self.data_config["update_interval"])

            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º

    async def _update_all_symbols(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        logger.debug(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(self.trading_pairs)} —Å–∏–º–≤–æ–ª–æ–≤...")

        update_tasks = []
        for symbol in self.trading_pairs:
            task = asyncio.create_task(self._update_symbol_data(symbol))
            update_tasks.append(task)

        if update_tasks:
            results = await asyncio.gather(*update_tasks, return_exceptions=True)

            # –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            success_count = sum(1 for r in results if not isinstance(r, Exception))
            if success_count > 0:
                logger.info(
                    f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {success_count}/{len(self.trading_pairs)} —Å–∏–º–≤–æ–ª–æ–≤"
                )

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
            for i, result in enumerate(results):
                if isinstance(result, Exception):
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {self.trading_pairs[i]}: {result}")

    async def _update_symbol_data(self, symbol: str) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        try:
            exchange = self.exchanges.get("bybit")
            if not exchange:
                return

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–∞–Ω–Ω—ã—Ö
            latest_time = await self._get_latest_data_time(symbol)

            if latest_time:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π timezone
                from datetime import timezone

                # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ latest_time –≤ UTC
                if latest_time.tzinfo is None:
                    # –ï—Å–ª–∏ naive, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ UTC
                    latest_time = latest_time.replace(tzinfo=timezone.utc)

                end_time = datetime.now(timezone.utc)
                start_time = latest_time + timedelta(minutes=15)

                if start_time >= end_time:
                    return  # –ù–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö

                # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–µ—á–µ–π
                candles = await exchange.get_klines(symbol, "15", limit=200)

                if candles:
                    await self._save_candles(symbol, candles)
                    logger.debug(f"üìä {symbol}: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(candles)} –Ω–æ–≤—ã—Ö —Å–≤–µ—á–µ–π")

            else:
                # –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
                await self._load_historical_data(symbol)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {symbol}: {e}")

    async def _load_historical_data(self, symbol: str) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            exchange = self.exchanges.get("bybit")
            if not exchange:
                return

            logger.info(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}...")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π 15-–º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π
            candles = await exchange.get_klines(symbol, "15", limit=1000)

            if candles:
                await self._save_candles(symbol, candles)
                logger.info(
                    f"‚úÖ {symbol}: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(candles)} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π"
                )
            else:
                logger.warning(f"‚ö†Ô∏è {symbol}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è {symbol}: {e}")

    async def _save_candles(self, symbol: str, candles: List[Any]) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        if not candles:
            return

        try:
            for candle in candles:
                # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–∏ (—Ñ–æ—Ä–º–∞—Ç Bybit)
                if isinstance(candle, list) and len(candle) >= 7:
                    timestamp = int(candle[0])
                    open_price = float(candle[1])
                    high_price = float(candle[2])
                    low_price = float(candle[3])
                    close_price = float(candle[4])
                    volume = float(candle[5])
                    turnover = float(candle[6]) if len(candle) > 6 else 0

                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
                    await AsyncPGPool.execute(
                        """
                        INSERT INTO raw_market_data
                        (symbol, timestamp, datetime, open, high, low, close, volume,
                         interval_minutes, exchange, turnover)
                        VALUES ($1, $2, to_timestamp($2/1000), $3, $4, $5, $6, $7, $8, $9, $10)
                        ON CONFLICT (symbol, timestamp, interval_minutes, exchange) DO UPDATE
                        SET open = EXCLUDED.open,
                            high = EXCLUDED.high,
                            low = EXCLUDED.low,
                            close = EXCLUDED.close,
                            volume = EXCLUDED.volume,
                            turnover = EXCLUDED.turnover,
                            updated_at = NOW()
                    """,
                        symbol,
                        timestamp,
                        open_price,
                        high_price,
                        low_price,
                        close_price,
                        volume,
                        15,
                        "bybit",
                        turnover,
                    )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤–µ—á–µ–π –¥–ª—è {symbol}: {e}")

    async def _get_latest_data_time(self, symbol: str) -> Optional[datetime]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            result = await AsyncPGPool.fetch(
                """
                SELECT MAX(datetime) as latest
                FROM raw_market_data
                WHERE symbol = $1
                  AND exchange = 'bybit'
                  AND interval_minutes = 15
            """,
                symbol,
            )

            if result and result[0]["latest"]:
                return result[0]["latest"]
            return None

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è {symbol}: {e}")
            return None

    async def force_update(self, symbols: Optional[List[str]] = None) -> None:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        if symbols is None:
            symbols = self.trading_pairs

        logger.info(f"üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤...")

        update_tasks = []
        for symbol in symbols:
            task = asyncio.create_task(self._update_symbol_data(symbol))
            update_tasks.append(task)

        if update_tasks:
            await asyncio.gather(*update_tasks, return_exceptions=True)
            logger.info("‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
