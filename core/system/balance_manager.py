"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤
"""

import asyncio
import logging
from dataclasses import dataclass, field
from datetime import datetime, timedelta
from decimal import Decimal
from typing import Any

import redis.asyncio as redis

logger = logging.getLogger(__name__)


@dataclass
class ExchangeBalance:
    """–ë–∞–ª–∞–Ω—Å –Ω–∞ –±–∏—Ä–∂–µ"""

    exchange: str
    symbol: str  # 'USDT', 'BTC', etc.
    total: Decimal
    available: Decimal  # –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
    locked: Decimal  # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –≤ –æ—Ä–¥–µ—Ä–∞—Ö
    last_updated: datetime


@dataclass
class BalanceReservation:
    """–†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –æ—Ä–¥–µ—Ä–∞"""

    reservation_id: str
    exchange: str
    symbol: str
    amount: Decimal
    reserved_at: datetime
    expires_at: datetime
    purpose: str  # 'order', 'withdraw', etc.
    metadata: dict[str, Any] = field(default_factory=dict)


class BalanceManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤

    –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
    - –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –≤—Å–µ—Ö –±–∏—Ä–∂
    - –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –æ—Ä–¥–µ—Ä–æ–≤
    - –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
    - –ó–∞—â–∏—Ç–∞ –æ—Ç race conditions –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–∞—Ö
    """

    def __init__(self, redis_client: redis.Redis | None = None):
        self.redis_client = redis_client
        self.balances: dict[str, dict[str, ExchangeBalance]] = {}  # exchange -> symbol -> balance
        self.reservations: dict[str, BalanceReservation] = {}  # reservation_id -> reservation
        self.update_intervals: dict[str, int] = {}  # exchange -> interval in seconds
        self.last_updates: dict[str, datetime] = {}  # exchange -> last_update_time

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.default_update_interval = 30  # —Å–µ–∫—É–Ω–¥
        self.reservation_ttl = timedelta(minutes=5)
        self.balance_cache_ttl = timedelta(minutes=1)
        self.minimum_balance_threshold = Decimal("0.001")  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "total_checks": 0,
            "successful_reservations": 0,
            "failed_reservations": 0,
            "balance_updates": 0,
            "cache_hits": 0,
            "cache_misses": 0,
        }

        # –ó–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self._update_tasks: dict[str, asyncio.Task] = {}
        self._cleanup_task: asyncio.Task | None = None
        self._running = False

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
        if not self.redis_client:
            self._init_redis()

    def _init_redis(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            self.redis_client = redis.from_url("redis://localhost:6379/5")  # DB 5 –¥–ª—è –±–∞–ª–∞–Ω—Å–æ–≤
            logger.info("‚úÖ Redis –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–ª–∞–Ω—Å–æ–≤")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–ª–∞–Ω—Å–æ–≤: {e}")
            self.redis_client = None

    def set_exchange_manager(self, exchange_manager):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∏—Ä–∂ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤"""
        self.exchange_manager = exchange_manager
        logger.info("‚úÖ Exchange Manager —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ BalanceManager")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–ª–∞–Ω—Å–æ–≤"""
        if self._running:
            logger.warning("BalanceManager —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        self._running = True
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ BalanceManager")

        # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–∏ - –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å exchange_manager
        if self.exchange_manager:
            exchanges = ["bybit", "binance", "okx", "gate", "kucoin", "htx", "bingx"]
            for exchange in exchanges:
                self.update_intervals[exchange] = self.default_update_interval
                self._update_tasks[exchange] = asyncio.create_task(
                    self._balance_update_loop(exchange)
                )
            logger.info("‚úÖ –ó–∞–ø—É—â–µ–Ω—ã –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è –≤—Å–µ—Ö –±–∏—Ä–∂")
        else:
            logger.warning("‚ö†Ô∏è Exchange Manager –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–æ")

        # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ—á–∏—Å—Ç–∫–∏
        self._cleanup_task = asyncio.create_task(self._cleanup_loop())

        logger.info("‚úÖ BalanceManager –∑–∞–ø—É—â–µ–Ω")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–ª–∞–Ω—Å–æ–≤"""
        if not self._running:
            return

        self._running = False
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ BalanceManager")

        # –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        for task in self._update_tasks.values():
            task.cancel()
            try:
                await task
            except asyncio.CancelledError:
                pass

        # –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏ –æ—á–∏—Å—Ç–∫–∏
        if self._cleanup_task:
            self._cleanup_task.cancel()
            try:
                await self._cleanup_task
            except asyncio.CancelledError:
                pass

        self._update_tasks.clear()
        logger.info("‚úÖ BalanceManager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def check_balance_availability(
        self, exchange: str, symbol: str, amount: Decimal, include_reservations: bool = True
    ) -> tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞

        Args:
            exchange: –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏
            symbol: –°–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã
            amount: –¢—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            include_reservations: –£—á–∏—Ç—ã–≤–∞—Ç—å –ª–∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è

        Returns:
            (–¥–æ—Å—Ç—É–ø–Ω–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –µ—Å–ª–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ)
        """
        self.stats["total_checks"] += 1

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
            balance = await self._get_balance(exchange, symbol)
            if not balance:
                return False, f"–ë–∞–ª–∞–Ω—Å –¥–ª—è {symbol} –Ω–∞ {exchange} –Ω–µ –Ω–∞–π–¥–µ–Ω"

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Decimal –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            available = Decimal(str(balance.available))

            # –£—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
            if include_reservations:
                reserved_amount = self._get_reserved_amount(exchange, symbol)
                available -= reserved_amount

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º amount –≤ Decimal –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            amount_decimal = Decimal(str(amount)) if not isinstance(amount, Decimal) else amount

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
            if available < amount_decimal:
                return (
                    False,
                    f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: –¥–æ—Å—Ç—É–ø–Ω–æ {available}, —Ç—Ä–µ–±—É–µ—Ç—Å—è {amount_decimal}",
                )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫
            remaining = available - amount_decimal
            if remaining < self.minimum_balance_threshold:
                return False, f"–û–ø–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–≤–∏—Ç —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ —Å—Ä–µ–¥—Å—Ç–≤: {remaining}"

            return True, ""

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞: {e!s}"

    async def reserve_balance(
        self,
        exchange: str,
        symbol: str,
        amount: Decimal,
        purpose: str = "order",
        metadata: dict[str, Any] | None = None,
        ttl_minutes: int = 5,
    ) -> str | None:
        """
        –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞

        Args:
            exchange: –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏
            symbol: –°–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã
            amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
            purpose: –¶–µ–ª—å —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
            metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            ttl_minutes: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö

        Returns:
            ID —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            available, error_msg = await self.check_balance_availability(exchange, symbol, amount)
            if not available:
                logger.warning(
                    f"‚ö†Ô∏è  –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å {amount} {symbol} –Ω–∞ {exchange}: {error_msg}"
                )
                self.stats["failed_reservations"] += 1
                return None

            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ
            reservation_id = f"{exchange}_{symbol}_{int(datetime.now().timestamp())}_{id(self)}"

            reservation = BalanceReservation(
                reservation_id=reservation_id,
                exchange=exchange,
                symbol=symbol,
                amount=amount,
                reserved_at=datetime.now(),
                expires_at=datetime.now() + timedelta(minutes=ttl_minutes),
                purpose=purpose,
                metadata=metadata or {},
            )

            self.reservations[reservation_id] = reservation
            self.stats["successful_reservations"] += 1

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if self.redis_client:
                await self._save_reservation_to_redis(reservation)

            logger.info(
                f"‚úÖ –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ {amount} {symbol} –Ω–∞ {exchange} (ID: {reservation_id})"
            )
            return reservation_id

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            self.stats["failed_reservations"] += 1
            return None

    async def release_reservation(self, reservation_id: str) -> bool:
        """
        –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è

        Args:
            reservation_id: ID —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è

        Returns:
            True –µ—Å–ª–∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ
        """
        try:
            if reservation_id not in self.reservations:
                logger.warning(f"‚ö†Ô∏è  –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ {reservation_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return False

            reservation = self.reservations[reservation_id]
            del self.reservations[reservation_id]

            # –£–¥–∞–ª—è–µ–º –∏–∑ Redis
            if self.redis_client:
                await self.redis_client.delete(f"reservation:{reservation_id}")

            logger.info(
                f"‚úÖ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ {reservation.amount} {reservation.symbol} –Ω–∞ {reservation.exchange}"
            )
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False

    async def update_balance(
        self,
        exchange: str,
        symbol: str,
        total: Decimal,
        available: Decimal,
        locked: Decimal = Decimal("0"),
    ) -> bool:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞

        Args:
            exchange: –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏
            symbol: –°–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã
            total: –û–±—â–∏–π –±–∞–ª–∞–Ω—Å
            available: –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
            locked: –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å

        Returns:
            True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            if exchange not in self.balances:
                self.balances[exchange] = {}

            balance = ExchangeBalance(
                exchange=exchange,
                symbol=symbol,
                total=total,
                available=available,
                locked=locked,
                last_updated=datetime.now(),
            )

            self.balances[exchange][symbol] = balance
            self.last_updates[exchange] = datetime.now()
            self.stats["balance_updates"] += 1

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
            if self.redis_client:
                await self._save_balance_to_redis(balance)

            logger.debug(f"üí∞ –û–±–Ω–æ–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å {symbol} –Ω–∞ {exchange}: –¥–æ—Å—Ç—É–ø–Ω–æ {available}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return False

    async def get_all_balances(self, exchange: str | None = None) -> dict[str, dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –±–∞–ª–∞–Ω—Å–æ–≤

        Args:
            exchange: –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –±–∏—Ä–∂–∞ (–µ—Å–ª–∏ None - –≤—Å–µ –±–∏—Ä–∂–∏)

        Returns:
            –°–ª–æ–≤–∞—Ä—å –±–∞–ª–∞–Ω—Å–æ–≤
        """
        result = {}

        exchanges_to_check = [exchange] if exchange else list(self.balances.keys())

        for exch in exchanges_to_check:
            if exch not in self.balances:
                continue

            result[exch] = {}
            for symbol, balance in self.balances[exch].items():
                reserved = self._get_reserved_amount(exch, symbol)

                # üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–º–µ—à–∏–≤–∞–Ω–∏—è float –∏ Decimal —Ç–∏–ø–æ–≤
                try:
                    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è Decimal
                    balance_available = Decimal(str(balance.available))
                    reserved_decimal = Decimal(str(reserved))

                    result[exch][symbol] = {
                        "total": float(balance.total),
                        "available": float(balance.available),
                        "locked": float(balance.locked),
                        "reserved": float(reserved),
                        "effective_available": float(balance_available - reserved_decimal),
                        "last_updated": balance.last_updated.isoformat(),
                    }
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤ –¥–ª—è {exch} {symbol}: {e}")
                    # Fallback –∑–Ω–∞—á–µ–Ω–∏—è
                    result[exch][symbol] = {
                        "total": float(balance.total),
                        "available": float(balance.available),
                        "locked": float(balance.locked),
                        "reserved": 0.0,
                        "effective_available": float(balance.available),
                        "last_updated": balance.last_updated.isoformat(),
                    }

        return result

    async def get_balance_summary(self) -> dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –±–∞–ª–∞–Ω—Å–∞–º"""
        total_exchanges = len(self.balances)
        total_symbols = sum(len(balances) for balances in self.balances.values())
        total_reservations = len(self.reservations)

        # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ USDT (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        total_usdt_value = Decimal("0")
        for exchange_balances in self.balances.values():
            if "USDT" in exchange_balances:
                total_usdt_value += exchange_balances["USDT"].available

        # –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –±–∏—Ä–∂–∞–º
        reservations_by_exchange = {}
        for reservation in self.reservations.values():
            if reservation.exchange not in reservations_by_exchange:
                reservations_by_exchange[reservation.exchange] = 0
            reservations_by_exchange[reservation.exchange] += 1

        return {
            "total_exchanges": total_exchanges,
            "total_symbols": total_symbols,
            "total_reservations": total_reservations,
            "reservations_by_exchange": reservations_by_exchange,
            "estimated_usdt_value": float(total_usdt_value),
            "last_update_times": {
                exchange: update_time.isoformat()
                for exchange, update_time in self.last_updates.items()
            },
            "stats": self.stats.copy(),
        }

    def _get_reserved_amount(self, exchange: str, symbol: str) -> Decimal:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
        reserved = Decimal("0")
        now = datetime.now()

        for reservation in self.reservations.values():
            if (
                reservation.exchange == exchange
                and reservation.symbol == symbol
                and reservation.expires_at > now
            ):
                reserved += reservation.amount

        return reserved

    async def _get_balance(self, exchange: str, symbol: str) -> ExchangeBalance | None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
        if exchange in self.balances and symbol in self.balances[exchange]:
            balance = self.balances[exchange][symbol]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
            if (datetime.now() - balance.last_updated) <= self.balance_cache_ttl:
                self.stats["cache_hits"] += 1
                return balance

        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Redis
        if self.redis_client:
            try:
                balance_data = await self.redis_client.get(f"balance:{exchange}:{symbol}")
                if balance_data:
                    # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ Redis
                    import json

                    data = json.loads(balance_data)
                    balance = ExchangeBalance(
                        exchange=exchange,
                        symbol=symbol,
                        total=Decimal(data.get("total", "0")),
                        available=Decimal(data.get("available", "0")),
                        locked=Decimal(data.get("locked", "0")),
                        last_updated=datetime.now(),  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
                    )

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
                    if exchange not in self.balances:
                        self.balances[exchange] = {}
                    self.balances[exchange][symbol] = balance

                    self.stats["cache_hits"] += 1
                    logger.debug(
                        f"üí∞ –ó–∞–≥—Ä—É–∂–µ–Ω –±–∞–ª–∞–Ω—Å {symbol} –Ω–∞ {exchange} –∏–∑ Redis: {balance.available}"
                    )
                    return balance
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∏–∑ Redis: {e}")

        self.stats["cache_misses"] += 1

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –±–∞–ª–∞–Ω—Å –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ None
        if exchange in self.balances and symbol in self.balances[exchange]:
            return self.balances[exchange][symbol]

        return None

    async def _balance_update_loop(self, exchange: str):
        """–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è –±–∏—Ä–∂–∏"""
        while self._running:
            try:
                await self._update_exchange_balances(exchange)
                interval = self.update_intervals.get(exchange, self.default_update_interval)
                await asyncio.sleep(interval)
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è {exchange}: {e}")
                await asyncio.sleep(self.default_update_interval)

    async def _update_exchange_balances(self, exchange: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∏—Ä–∂–∏"""
        try:
            logger.debug(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è {exchange}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ exchange_manager
            if not self.exchange_manager:
                logger.debug(
                    f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è {exchange} - exchange_manager –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –±–∏—Ä–∂–∏
            exchange_client = await self.exchange_manager.get_exchange(exchange)
            if not exchange_client:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –±–∏—Ä–∂–∏ {exchange}")
                return

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å—ã —á–µ—Ä–µ–∑ API
            try:
                balances = await exchange_client.get_balances()
                logger.debug(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(balances)} –±–∞–ª–∞–Ω—Å–æ–≤ —Å {exchange}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ —Å {exchange}: {e}")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
            if exchange not in self.balances:
                self.balances[exchange] = {}

            for balance in balances:
                symbol = balance.currency.upper()

                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç ExchangeBalance
                exchange_balance = ExchangeBalance(
                    exchange=exchange,
                    symbol=symbol,
                    total=Decimal(str(balance.total)),
                    available=Decimal(str(balance.available)),
                    locked=Decimal(str(balance.frozen)),
                    last_updated=datetime.now(),
                )

                self.balances[exchange][symbol] = exchange_balance

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                if self.redis_client:
                    try:
                        import json

                        balance_data = json.dumps(
                            {
                                "total": str(exchange_balance.total),
                                "available": str(exchange_balance.available),
                                "locked": str(exchange_balance.locked),
                            }
                        )
                        await self.redis_client.set(
                            f"balance:{exchange}:{symbol}", balance_data, ex=300  # TTL 5 –º–∏–Ω—É—Ç
                        )
                    except Exception as e:
                        logger.debug(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤ Redis: {e}")

                # –õ–æ–≥–∏—Ä—É–µ–º –∑–Ω–∞—á–∏–º—ã–µ –±–∞–ª–∞–Ω—Å—ã
                if exchange_balance.total > 0:
                    logger.info(
                        f"üí∞ {exchange} {symbol}: total={exchange_balance.total:.4f}, "
                        f"available={exchange_balance.available:.4f}, locked={exchange_balance.locked:.4f}"
                    )

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.last_updates[exchange] = datetime.now()
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –±–∞–ª–∞–Ω—Å—ã –¥–ª—è {exchange}: {len(balances)} –≤–∞–ª—é—Ç")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è {exchange}: {e}")

    async def _cleanup_loop(self):
        """–¶–∏–∫–ª –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–π"""
        while self._running:
            try:
                await self._cleanup_expired_reservations()
                await asyncio.sleep(60)  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–π: {e}")
                await asyncio.sleep(60)

    async def _cleanup_expired_reservations(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–π"""
        now = datetime.now()
        expired_reservations = []

        for reservation_id, reservation in self.reservations.items():
            if reservation.expires_at <= now:
                expired_reservations.append(reservation_id)

        for reservation_id in expired_reservations:
            reservation = self.reservations[reservation_id]
            del self.reservations[reservation_id]

            # –£–¥–∞–ª—è–µ–º –∏–∑ Redis
            if self.redis_client:
                try:
                    await self.redis_client.delete(f"reservation:{reservation_id}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ Redis: {e}")

            logger.info(
                f"üßπ –£–¥–∞–ª–µ–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ: {reservation.amount} {reservation.symbol} –Ω–∞ {reservation.exchange}"
            )

        if expired_reservations:
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–π: {len(expired_reservations)}")

    async def _save_balance_to_redis(self, balance: ExchangeBalance):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ Redis"""
        try:
            if not self.redis_client:
                return

            balance_data = {
                "total": str(balance.total),
                "available": str(balance.available),
                "locked": str(balance.locked),
                "last_updated": balance.last_updated.isoformat(),
            }

            key = f"balance:{balance.exchange}:{balance.symbol}"
            await self.redis_client.setex(
                key, int(self.balance_cache_ttl.total_seconds()), str(balance_data)
            )

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ Redis: {e}")

    async def _save_reservation_to_redis(self, reservation: BalanceReservation):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Redis"""
        try:
            if not self.redis_client:
                return

            reservation_data = {
                "exchange": reservation.exchange,
                "symbol": reservation.symbol,
                "amount": str(reservation.amount),
                "reserved_at": reservation.reserved_at.isoformat(),
                "expires_at": reservation.expires_at.isoformat(),
                "purpose": reservation.purpose,
                "metadata": reservation.metadata,
            }

            ttl = int((reservation.expires_at - datetime.now()).total_seconds())
            if ttl > 0:
                await self.redis_client.setex(
                    f"reservation:{reservation.reservation_id}", ttl, str(reservation_data)
                )

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Redis: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–ª–∞–Ω—Å–æ–≤
balance_manager = BalanceManager()
