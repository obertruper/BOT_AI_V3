"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import asyncio
import logging
import os
from collections import deque
from dataclasses import dataclass, field
from datetime import datetime, timedelta
from typing import Any

import psutil
import redis.asyncio as redis

from database.db_manager import get_db

logger = logging.getLogger(__name__)


@dataclass
class ComponentHealth:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""

    component_name: str
    status: str  # 'healthy', 'warning', 'critical', 'unknown'
    last_heartbeat: datetime
    error_count: int = 0
    warning_count: int = 0
    uptime_seconds: float = 0
    memory_usage_mb: float = 0
    cpu_usage_percent: float = 0
    active_tasks: int = 0
    last_error: str | None = None
    metadata: dict[str, Any] = field(default_factory=dict)


@dataclass
class SystemMetrics:
    """–°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""

    timestamp: datetime
    total_memory_mb: float
    used_memory_mb: float
    memory_percent: float
    cpu_percent: float
    disk_usage_percent: float
    active_connections: int
    redis_connections: int = 0
    postgres_connections: int = 0
    network_io: dict[str, int] = field(default_factory=dict)


class ProcessMonitor:
    """
    –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã

    –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
    - –°–±–æ—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ (CPU, –ø–∞–º—è—Ç—å, –¥–∏—Å–∫)
    - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    - –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π –∏ –ø—Ä–æ–±–ª–µ–º
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∞–ª–µ—Ä—Ç—ã
    - –í–µ–¥–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –º–µ—Ç—Ä–∏–∫
    """

    def __init__(self, redis_client: redis.Redis | None = None):
        self.redis_client = redis_client
        self.db_manager = None
        self.components: dict[str, ComponentHealth] = {}
        self.system_metrics: deque = deque(maxlen=1000)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–º–µ—Ä–æ–≤
        self.alert_rules: dict[str, dict] = {}
        self.active_alerts: dict[str, datetime] = {}

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.monitoring_interval = 30  # —Å–µ–∫—É–Ω–¥
        self.heartbeat_timeout = timedelta(minutes=5)
        self.metrics_retention_hours = 24

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "monitoring_started": datetime.now(),
            "total_heartbeats": 0,
            "total_alerts": 0,
            "system_checks": 0,
        }

        # –ó–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self._monitoring_tasks: list[asyncio.Task] = []
        self._running = False

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
        if not self.redis_client:
            self._init_redis()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤–∏–ª –∞–ª–µ—Ä—Ç–æ–≤
        self._init_alert_rules()

    def _init_redis(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            self.redis_client = redis.from_url("redis://localhost:6379/4")  # DB 4 –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            logger.info("‚úÖ Redis –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            self.redis_client = None

    def _init_alert_rules(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤"""
        self.alert_rules = {
            "high_memory_usage": {
                "condition": lambda metrics: metrics.memory_percent > 85,
                "severity": "warning",
                "message": "–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_percent:.1f}%",
            },
            "critical_memory_usage": {
                "condition": lambda metrics: metrics.memory_percent > 95,
                "severity": "critical",
                "message": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_percent:.1f}%",
            },
            "high_cpu_usage": {
                "condition": lambda metrics: metrics.cpu_percent > 80,
                "severity": "warning",
                "message": "–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: {cpu_percent:.1f}%",
            },
            "disk_space_low": {
                "condition": lambda metrics: metrics.disk_usage_percent > 90,
                "severity": "critical",
                "message": "–ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: {disk_usage_percent:.1f}%",
            },
            "component_not_responding": {
                "condition": lambda component: (datetime.now() - component.last_heartbeat)
                > timedelta(minutes=5),
                "severity": "critical",
                "message": "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {component_name} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç",
            },
            "high_error_rate": {
                "condition": lambda component: component.error_count > 10,
                "severity": "warning",
                "message": "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {component_name} –∏–º–µ–µ—Ç {error_count} –æ—à–∏–±–æ–∫",
            },
        }

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if self._running:
            logger.warning("ProcessMonitor —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        self._running = True
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DBManager
        self.db_manager = await get_db()
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ ProcessMonitor")

        # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self._monitoring_tasks = [
            asyncio.create_task(self._system_metrics_loop()),
            asyncio.create_task(self._component_health_check_loop()),
            asyncio.create_task(self._alert_processor_loop()),
            asyncio.create_task(self._cleanup_loop()),
        ]

        logger.info("‚úÖ ProcessMonitor –∑–∞–ø—É—â–µ–Ω")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if not self._running:
            return

        self._running = False
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ ProcessMonitor")

        # –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á
        for task in self._monitoring_tasks:
            task.cancel()
            try:
                await task
            except asyncio.CancelledError:
                pass

        self._monitoring_tasks.clear()
        logger.info("‚úÖ ProcessMonitor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def register_component(
        self, component_name: str, metadata: dict[str, Any] | None = None
    ) -> bool:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

        Args:
            component_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ

        Returns:
            True –µ—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        try:
            if component_name in self.components:
                logger.warning(f"‚ö†Ô∏è  –ö–æ–º–ø–æ–Ω–µ–Ω—Ç '{component_name}' —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                return False

            self.components[component_name] = ComponentHealth(
                component_name=component_name,
                status="unknown",
                last_heartbeat=datetime.now(),
                metadata=metadata or {},
            )

            logger.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {component_name}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ '{component_name}': {e}")
            return False

    async def heartbeat(
        self,
        component_name: str,
        status: str | None = None,
        active_tasks: int | None = None,
        metadata: dict[str, Any] | None = None,
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ heartbeat –æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞

        Args:
            component_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            status: –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å ('healthy', 'warning', 'critical')
            active_tasks: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
            metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ

        Returns:
            True –µ—Å–ª–∏ heartbeat –ø—Ä–∏–Ω—è—Ç
        """
        try:
            if component_name not in self.components:
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
                await self.register_component(component_name, metadata)

            component = self.components[component_name]
            component.last_heartbeat = datetime.now()

            if status:
                component.status = status
            elif component.status == "unknown":
                component.status = "healthy"

            if active_tasks is not None:
                component.active_tasks = active_tasks

            if metadata:
                component.metadata.update(metadata)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            await self._update_component_metrics(component)

            self.stats["total_heartbeats"] += 1

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if self.redis_client:
                await self._save_component_to_redis(component)

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ heartbeat –æ—Ç '{component_name}': {e}")
            return False

    async def report_error(
        self, component_name: str, error_message: str, is_critical: bool = False
    ):
        """
        –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ

        Args:
            component_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            is_critical: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π
        """
        try:
            if component_name not in self.components:
                await self.register_component(component_name)

            component = self.components[component_name]
            component.error_count += 1
            component.last_error = error_message

            if is_critical:
                component.status = "critical"
            elif component.status == "healthy":
                component.status = "warning"

            logger.warning(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ '{component_name}': {error_message}")

            # –°–æ–∑–¥–∞–µ–º –∞–ª–µ—Ä—Ç
            await self._create_alert(
                f"error_{component_name}",
                "error" if not is_critical else "critical",
                f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ {component_name}: {error_message}",
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –¥–ª—è '{component_name}': {e}")

    async def report_warning(self, component_name: str, warning_message: str):
        """–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–∏ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ"""
        try:
            if component_name not in self.components:
                await self.register_component(component_name)

            component = self.components[component_name]
            component.warning_count += 1

            if component.status == "healthy":
                component.status = "warning"

            logger.info(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ '{component_name}': {warning_message}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–∏ –¥–ª—è '{component_name}': {e}")

    def get_component_health(self, component_name: str | None = None) -> dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

        Args:
            component_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–µ—Å–ª–∏ None - –≤—Å–µ)

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–¥–æ—Ä–æ–≤—å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        """
        if component_name:
            component = self.components.get(component_name)
            if not component:
                return {}

            return {
                "component_name": component.component_name,
                "status": component.status,
                "last_heartbeat": component.last_heartbeat.isoformat(),
                "uptime_seconds": component.uptime_seconds,
                "error_count": component.error_count,
                "warning_count": component.warning_count,
                "memory_usage_mb": component.memory_usage_mb,
                "cpu_usage_percent": component.cpu_usage_percent,
                "active_tasks": component.active_tasks,
                "last_error": component.last_error,
                "metadata": component.metadata,
            }
        else:
            # –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            health_data = {}
            for name, component in self.components.items():
                health_data[name] = {
                    "status": component.status,
                    "last_heartbeat": component.last_heartbeat.isoformat(),
                    "uptime_seconds": component.uptime_seconds,
                    "error_count": component.error_count,
                    "warning_count": component.warning_count,
                    "memory_usage_mb": component.memory_usage_mb,
                    "cpu_usage_percent": component.cpu_usage_percent,
                    "active_tasks": component.active_tasks,
                    "last_error": component.last_error,
                }

            return health_data

    def get_system_metrics(self, last_n_minutes: int = 5) -> list[dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥

        Args:
            last_n_minutes: –ó–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏

        Returns:
            –°–ø–∏—Å–æ–∫ –º–µ—Ç—Ä–∏–∫
        """
        cutoff_time = datetime.now() - timedelta(minutes=last_n_minutes)

        filtered_metrics = []
        for metrics in self.system_metrics:
            if metrics.timestamp >= cutoff_time:
                filtered_metrics.append(
                    {
                        "timestamp": metrics.timestamp.isoformat(),
                        "memory_percent": metrics.memory_percent,
                        "cpu_percent": metrics.cpu_percent,
                        "disk_usage_percent": metrics.disk_usage_percent,
                        "active_connections": metrics.active_connections,
                        "redis_connections": metrics.redis_connections,
                        "postgres_connections": metrics.postgres_connections,
                    }
                )

        return filtered_metrics

    def get_alerts(self, active_only: bool = True) -> list[dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤

        Args:
            active_only: –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã

        Returns:
            –°–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤
        """
        if active_only:
            alerts = []
            for alert_id, alert_time in self.active_alerts.items():
                alerts.append(
                    {
                        "alert_id": alert_id,
                        "created_at": alert_time.isoformat(),
                        "age_seconds": (datetime.now() - alert_time).total_seconds(),
                    }
                )
            return alerts
        else:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–ª–µ—Ä—Ç–æ–≤ –∏–∑ –±–∞–∑—ã/Redis
            return []

    def get_stats(self) -> dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        now = datetime.now()
        uptime = (now - self.stats["monitoring_started"]).total_seconds()

        return {
            "monitoring_started": self.stats["monitoring_started"].isoformat(),
            "uptime_seconds": uptime,
            "total_components": len(self.components),
            "healthy_components": len(
                [c for c in self.components.values() if c.status == "healthy"]
            ),
            "warning_components": len(
                [c for c in self.components.values() if c.status == "warning"]
            ),
            "critical_components": len(
                [c for c in self.components.values() if c.status == "critical"]
            ),
            "total_heartbeats": self.stats["total_heartbeats"],
            "total_alerts": self.stats["total_alerts"],
            "system_checks": self.stats["system_checks"],
            "active_alerts": len(self.active_alerts),
            "metrics_collected": len(self.system_metrics),
        }

    async def _system_metrics_loop(self):
        """–¶–∏–∫–ª —Å–±–æ—Ä–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        while self._running:
            try:
                await self._collect_system_metrics()
                await asyncio.sleep(self.monitoring_interval)
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫: {e}")
                await asyncio.sleep(self.monitoring_interval)

    async def _component_health_check_loop(self):
        """–¶–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        while self._running:
            try:
                await self._check_component_health()
                await asyncio.sleep(30)  # –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
                await asyncio.sleep(30)

    async def _alert_processor_loop(self):
        """–¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
        while self._running:
            try:
                await self._process_alerts()
                await asyncio.sleep(60)  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
                await asyncio.sleep(60)

    async def _cleanup_loop(self):
        """–¶–∏–∫–ª –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        while self._running:
            try:
                await self._cleanup_old_data()
                await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                await asyncio.sleep(3600)

    async def _collect_system_metrics(self):
        """–°–±–æ—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        try:
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            memory = psutil.virtual_memory()
            cpu_percent = psutil.cpu_percent(interval=1)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º SSD path –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ root
            disk_path = "/mnt/SSD" if os.path.exists("/mnt/SSD") else "/"
            disk = psutil.disk_usage(disk_path)

            # –°–µ—Ç–µ–≤—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            connections = len(psutil.net_connections(kind="inet"))

            # Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            redis_connections = 0
            if self.redis_client:
                try:
                    info = await self.redis_client.info()
                    redis_connections = info.get("connected_clients", 0)
                except:
                    pass

            # PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            postgres_connections = 0
            try:
                result = await self.db_manager.fetch_one(
                    "SELECT count(*) as connections FROM pg_stat_activity"
                )
                if result:
                    postgres_connections = result["connections"]
            except:
                pass

            metrics = SystemMetrics(
                timestamp=datetime.now(),
                total_memory_mb=memory.total / (1024 * 1024),
                used_memory_mb=memory.used / (1024 * 1024),
                memory_percent=memory.percent,
                cpu_percent=cpu_percent,
                disk_usage_percent=disk.percent,
                active_connections=connections,
                redis_connections=redis_connections,
                postgres_connections=postgres_connections,
            )

            self.system_metrics.append(metrics)
            self.stats["system_checks"] += 1

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if self.redis_client:
                await self._save_metrics_to_redis(metrics)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫: {e}")

    async def _check_component_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        now = datetime.now()

        for component_name, component in list(self.components.items()):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º timeout heartbeat
                if (now - component.last_heartbeat) > self.heartbeat_timeout:
                    if component.status != "critical":
                        component.status = "critical"
                        await self._create_alert(
                            f"heartbeat_timeout_{component_name}",
                            "critical",
                            f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {component_name} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –±–æ–ª–µ–µ {self.heartbeat_timeout}",
                        )

                # –û–±–Ω–æ–≤–ª—è–µ–º uptime
                component.uptime_seconds = (now - component.last_heartbeat).total_seconds()

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ '{component_name}': {e}")

    async def _process_alerts(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
            if self.system_metrics:
                latest_metrics = self.system_metrics[-1]

                for rule_name, rule in self.alert_rules.items():
                    if rule_name.startswith("component_"):
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

                    try:
                        if rule["condition"](latest_metrics):
                            alert_id = f"system_{rule_name}"
                            if alert_id not in self.active_alerts:
                                message = rule["message"].format(**latest_metrics.__dict__)
                                await self._create_alert(alert_id, rule["severity"], message)
                        else:
                            # –£–±–∏—Ä–∞–µ–º –∞–ª–µ—Ä—Ç –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –±–æ–ª—å—à–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
                            alert_id = f"system_{rule_name}"
                            if alert_id in self.active_alerts:
                                del self.active_alerts[alert_id]
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª–∞ '{rule_name}': {e}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            for component_name, component in self.components.items():
                for rule_name, rule in self.alert_rules.items():
                    if not rule_name.startswith("component_"):
                        continue

                    try:
                        if rule["condition"](component):
                            alert_id = f"component_{rule_name}_{component_name}"
                            if alert_id not in self.active_alerts:
                                message = rule["message"].format(**component.__dict__)
                                await self._create_alert(alert_id, rule["severity"], message)
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ '{rule_name}': {e}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤: {e}")

    async def _create_alert(self, alert_id: str, severity: str, message: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞"""
        try:
            if alert_id in self.active_alerts:
                return  # –ê–ª–µ—Ä—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

            self.active_alerts[alert_id] = datetime.now()
            self.stats["total_alerts"] += 1

            # –õ–æ–≥–∏—Ä—É–µ–º –∞–ª–µ—Ä—Ç
            if severity == "critical":
                logger.critical(f"üö® CRITICAL ALERT: {message}")
            elif severity == "warning":
                logger.warning(f"‚ö†Ô∏è  WARNING ALERT: {message}")
            else:
                logger.info(f"‚ÑπÔ∏è  INFO ALERT: {message}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis/–ë–î –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if self.redis_client:
                alert_data = {
                    "alert_id": alert_id,
                    "severity": severity,
                    "message": message,
                    "created_at": datetime.now().isoformat(),
                }
                await self.redis_client.setex(
                    f"alert:{alert_id}",
                    3600,
                    str(alert_data),  # TTL 1 —á–∞—Å
                )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞: {e}")

    async def _update_component_metrics(self, component: ComponentHealth):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
            current_process = psutil.Process()
            component.memory_usage_mb = current_process.memory_info().rss / (1024 * 1024)
            component.cpu_usage_percent = current_process.cpu_percent()

        except Exception as e:
            logger.debug(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ '{component.component_name}': {e}"
            )

    async def _save_component_to_redis(self, component: ComponentHealth):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤ Redis"""
        try:
            if not self.redis_client:
                return

            component_data = {
                "status": component.status,
                "last_heartbeat": component.last_heartbeat.isoformat(),
                "error_count": component.error_count,
                "warning_count": component.warning_count,
                "uptime_seconds": component.uptime_seconds,
                "memory_usage_mb": component.memory_usage_mb,
                "cpu_usage_percent": component.cpu_usage_percent,
                "active_tasks": component.active_tasks,
            }

            await self.redis_client.setex(
                f"component:{component.component_name}",
                300,
                str(component_data),  # TTL 5 –º–∏–Ω—É—Ç
            )

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤ Redis: {e}")

    async def _save_metrics_to_redis(self, metrics: SystemMetrics):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –≤ Redis"""
        try:
            if not self.redis_client:
                return

            metrics_data = {
                "timestamp": metrics.timestamp.isoformat(),
                "memory_percent": metrics.memory_percent,
                "cpu_percent": metrics.cpu_percent,
                "disk_usage_percent": metrics.disk_usage_percent,
                "active_connections": metrics.active_connections,
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∫–ª—é—á–æ–º
            key = f"metrics:{int(metrics.timestamp.timestamp())}"
            await self.redis_client.setex(key, 3600, str(metrics_data))  # TTL 1 —á–∞—Å

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –≤ Redis: {e}")

    async def _cleanup_old_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
            cutoff_time = datetime.now() - timedelta(hours=24)
            expired_alerts = []

            for alert_id, alert_time in self.active_alerts.items():
                if alert_time < cutoff_time:
                    expired_alerts.append(alert_id)

            for alert_id in expired_alerts:
                del self.active_alerts[alert_id]

            if expired_alerts:
                logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤: {len(expired_alerts)}")

            # –û—á–∏—Å—Ç–∫–∞ Redis
            if self.redis_client:
                # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –º–µ—Ç—Ä–∏–∫
                cutoff_timestamp = int(cutoff_time.timestamp())
                keys = await self.redis_client.keys("metrics:*")

                deleted_count = 0
                for key in keys:
                    try:
                        timestamp = int(key.decode().split(":")[1])
                        if timestamp < cutoff_timestamp:
                            await self.redis_client.delete(key)
                            deleted_count += 1
                    except:
                        continue

                if deleted_count > 0:
                    logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –º–µ—Ç—Ä–∏–∫ –∏–∑ Redis: {deleted_count}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
process_monitor = ProcessMonitor()
