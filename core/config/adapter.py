#!/usr/bin/env python3
"""–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–∏—Å—Ç–µ–º—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ v3.

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞ —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏,
–ø–æ–∑–≤–æ–ª—è—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
"""

import logging
from typing import Any, Dict, Optional

from core.config.config_manager import ConfigManager, get_global_config_manager
from core.config.loader import ConfigLoader
from core.config.models import RootConfig
from core.exceptions import ConfigurationError

logger = logging.getLogger(__name__)


class ConfigAdapter:
    """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ —Å—Ç–∞—Ä—ã–π ConfigManager, —Ç–∞–∫ –∏ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
    —Å Pydantic –º–æ–¥–µ–ª—è–º–∏, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –ø–ª–∞–≤–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é.
    """
    
    def __init__(self, use_new_system: bool = False, profile: str = "development"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–¥–∞–ø—Ç–µ—Ä.
        
        Args:
            use_new_system: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–π
            profile: –ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (dev/staging/prod)
        """
        self.use_new_system = use_new_system
        self.profile = profile
        
        # –°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        self._old_manager: Optional[ConfigManager] = None
        
        # –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞
        self._loader: Optional[ConfigLoader] = None
        self._config: Optional[RootConfig] = None
        
        # –ö–µ—à –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self._cache: Dict[str, Any] = {}
        
        # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö –∫–ª—é—á–µ–π –Ω–∞ –Ω–æ–≤—ã–µ (–¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏)
        self._key_mappings = self._create_key_mappings()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self._initialize()
    
    def _create_key_mappings(self) -> Dict[str, str]:
        """–°–æ–∑–¥–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö –∫–ª—é—á–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ –Ω–æ–≤—ã–µ.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å –º–∞–ø–ø–∏–Ω–≥–æ–≤ old_key -> new_key
        """
        return {
            # –°—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏ -> –Ω–æ–≤—ã–µ –∫–ª—é—á–∏
            "trading.leverage": "trading.orders.default_leverage",
            "trading.min_order_size": "trading.orders.min_order_size",
            "trading.risk_management": "risk_management",
            "ml.enabled": "ml.enabled",
            "ml.model_path": "ml.model.path",
            "ml.scaler_path": "ml.model.scaler_path",
            "database.postgres": "database",
            "system.database": "database",
            # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –º–∞–ø–ø–∏–Ω–≥–∏ –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        }
    
    def _initialize(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        if self.use_new_system:
            try:
                # –ü—Ä–æ–±—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
                self._loader = ConfigLoader()
                self._config = self._loader.load(profile=self.profile)
                logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø—Ä–æ—Ñ–∏–ª—å: {self.profile})")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É: {e}, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å—Ç–∞—Ä—É—é")
                self.use_new_system = False
                self._initialize_old_system()
        else:
            self._initialize_old_system()
    
    def _initialize_old_system(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        try:
            self._old_manager = get_global_config_manager()
            logger.info("üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (ConfigManager)")
        except Exception as e:
            raise ConfigurationError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def get_config(self, key: str = None, default: Any = None, force_reload: bool = False) -> Any:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API).
        
        Args:
            key: –ö–ª—é—á –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ—á–µ—á–Ω—É—é –Ω–æ—Ç–∞—Ü–∏—é)
            default: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            force_reload: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
            
        Returns:
            –ó–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ default
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        if not force_reload and key in self._cache:
            return self._cache[key]
        
        value = None
        
        if self.use_new_system and self._config:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
            value = self._get_from_new_system(key, default)
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
            value = self._get_from_old_system(key, default, force_reload)
        
        # –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if key:
            self._cache[key] = value
        
        return value
    
    def _get_from_new_system(self, key: str = None, default: Any = None) -> Any:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
        
        Args:
            key: –ö–ª—é—á –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            default: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
        Returns:
            –ó–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        if not self._config:
            return default
        
        if key is None:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            return self._config.model_dump()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–ø–ø–∏–Ω–≥–∏
        if key in self._key_mappings:
            key = self._key_mappings[key]
        
        # –ü–∞—Ä—Å–∏–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
        keys = key.split(".")
        value = self._config.model_dump()
        
        for k in keys:
            if isinstance(value, dict) and k in value:
                value = value[k]
            else:
                return default
        
        return value
    
    def _get_from_old_system(self, key: str = None, default: Any = None, force_reload: bool = False) -> Any:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
        
        Args:
            key: –ö–ª—é—á –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            default: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            force_reload: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
            
        Returns:
            –ó–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        if not self._old_manager:
            return default
        
        return self._old_manager.get_config(key, default, force_reload)
    
    def get_leverage(self, model_score: int = None, default: float = None) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç leverage (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API).
        
        Args:
            model_score: –°–∫–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ score_configs
            default: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
        Returns:
            –ó–Ω–∞—á–µ–Ω–∏–µ leverage
        """
        if self.use_new_system and self._config:
            # –ò–∑ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
            return self._config.trading.orders.default_leverage
        elif self._old_manager:
            # –ò–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã
            return self._old_manager.get_leverage(model_score, default)
        else:
            return default if default is not None else 5.0
    
    def get_trader_config(self, trader_id: str, key: str = None, default: Any = None) -> Any:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç—Ä–µ–π–¥–µ—Ä–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API).
        
        Args:
            trader_id: ID —Ç—Ä–µ–π–¥–µ—Ä–∞
            key: –ö–ª—é—á –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–π–¥–µ—Ä–∞
            default: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
        Returns:
            –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç—Ä–µ–π–¥–µ—Ä–∞ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É
        """
        if self._old_manager:
            return self._old_manager.get_trader_config(trader_id, key, default)
        
        # –í –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ —Ç—Ä–µ–π–¥–µ—Ä—ã –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ
        # –≠—Ç–æ –Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        return default
    
    def migrate_to_new_system(self) -> bool:
        """–ü—ã—Ç–∞–µ—Ç—Å—è –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
        
        Returns:
            True –µ—Å–ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        """
        if self.use_new_system:
            logger.info("‚úÖ –£–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞")
            return True
        
        try:
            # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
            self._loader = ConfigLoader()
            self._config = self._loader.load(profile=self.profile)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã
            test_keys = [
                "system.name",
                "database.port",
                "trading.orders.default_leverage"
            ]
            
            for key in test_keys:
                value = self._get_from_new_system(key)
                if value is None:
                    raise ConfigurationError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å {key} –∏–∑ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã")
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
            self.use_new_system = True
            self._cache.clear()  # –û—á–∏—â–∞–µ–º –∫–µ—à
            
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É: {e}")
            return False
    
    def get_validation_report(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—á–µ—Ç –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
        
        Returns:
            –û—Ç—á–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã
        """
        if self.use_new_system and self._loader:
            return self._loader.get_validation_report()
        else:
            return "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"
    
    def clear_cache(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –∫–µ—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        self._cache.clear()
        logger.debug("üóëÔ∏è –ö–µ—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω")
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å ConfigManager
    
    def get_system_config(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."""
        return self.get_config("system", {})
    
    def get_database_config(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ë–î."""
        return self.get_config("database", {})
    
    def get_ml_config(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç ML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."""
        return self.get_config("ml", {})
    
    def get_risk_management_config(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏."""
        return self.get_config("risk_management", {})
    
    def get_exchange_config(self, exchange_name: str = None) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–∏—Ä–∂–∏."""
        if exchange_name:
            return self.get_config(f"exchanges.{exchange_name}", {})
        return self.get_config("exchanges", {})