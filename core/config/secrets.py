#!/usr/bin/env python3
"""–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞–º–∏ –¥–ª—è BOT_AI_V3.

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –¥–æ—Å—Ç—É–ø –∫ —Å–µ–∫—Ä–µ—Ç–Ω—ã–º –¥–∞–Ω–Ω—ã–º
—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –±—ç–∫–µ–Ω–¥–æ–≤ –∏ –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ –ª–æ–≥–∞—Ö.
"""

import json
import os
import re
from abc import ABC, abstractmethod
from pathlib import Path
from typing import Any, Dict, List, Optional, Set

from cryptography.fernet import Fernet
from dotenv import load_dotenv

from core.exceptions import ConfigurationError


class SecretBackend(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –±—ç–∫–µ–Ω–¥–æ–≤ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–æ–≤."""

    @abstractmethod
    def get_secret(self, key: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ–∫—Ä–µ—Ç –ø–æ –∫–ª—é—á—É."""
        pass

    @abstractmethod
    def set_secret(self, key: str, value: str) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ–∫—Ä–µ—Ç."""
        pass

    @abstractmethod
    def delete_secret(self, key: str) -> None:
        """–£–¥–∞–ª—è–µ—Ç —Å–µ–∫—Ä–µ—Ç."""
        pass

    @abstractmethod
    def list_secrets(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª—é—á–µ–π —Å–µ–∫—Ä–µ—Ç–æ–≤."""
        pass


class EnvFileBackend(SecretBackend):
    """–ë—ç–∫–µ–Ω–¥ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ .env —Ñ–∞–π–ª–µ."""

    def __init__(self, env_file: Optional[Path] = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±—ç–∫–µ–Ω–¥.

        Args:
            env_file: –ü—É—Ç—å –∫ .env —Ñ–∞–π–ª—É. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—â–µ—Ç –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞.
        """
        if env_file is None:
            # –ò—â–µ–º .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
            project_root = Path(__file__).parent.parent.parent
            env_file = project_root / ".env"

        self.env_file = env_file
        self._load_env()

    def _load_env(self) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞."""
        if self.env_file.exists():
            load_dotenv(self.env_file, override=True)

    def get_secret(self, key: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ–∫—Ä–µ—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        return os.getenv(key)

    def set_secret(self, key: str, value: str) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ–∫—Ä–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ .env —Ñ–∞–π–ª."""
        os.environ[key] = value
        self._update_env_file(key, value)

    def delete_secret(self, key: str) -> None:
        """–£–¥–∞–ª—è–µ—Ç —Å–µ–∫—Ä–µ—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ .env —Ñ–∞–π–ª–∞."""
        if key in os.environ:
            del os.environ[key]
        self._remove_from_env_file(key)

    def list_secrets(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π."""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π
        secret_patterns = [
            r".*_API_KEY$",
            r".*_API_SECRET$",
            r".*_PASSWORD$",
            r".*_TOKEN$",
            r".*_SECRET$",
            r"^JWT_.*",
            r"^DATABASE_URL$",
            r"^REDIS_URL$",
        ]

        secrets = []
        for key in os.environ:
            for pattern in secret_patterns:
                if re.match(pattern, key):
                    secrets.append(key)
                    break

        return sorted(secrets)

    def _update_env_file(self, key: str, value: str) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç .env —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º."""
        lines = []
        key_found = False

        if self.env_file.exists():
            with open(self.env_file, "r") as f:
                for line in f:
                    if line.startswith(f"{key}="):
                        lines.append(f"{key}={value}\n")
                        key_found = True
                    else:
                        lines.append(line)

        if not key_found:
            lines.append(f"{key}={value}\n")

        with open(self.env_file, "w") as f:
            f.writelines(lines)

    def _remove_from_env_file(self, key: str) -> None:
        """–£–¥–∞–ª—è–µ—Ç –∫–ª—é—á –∏–∑ .env —Ñ–∞–π–ª–∞."""
        if not self.env_file.exists():
            return

        lines = []
        with open(self.env_file, "r") as f:
            for line in f:
                if not line.startswith(f"{key}="):
                    lines.append(line)

        with open(self.env_file, "w") as f:
            f.writelines(lines)


class EncryptedFileBackend(SecretBackend):
    """–ë—ç–∫–µ–Ω–¥ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ."""

    def __init__(self, secrets_file: Optional[Path] = None, key_file: Optional[Path] = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±—ç–∫–µ–Ω–¥.

        Args:
            secrets_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–µ–∫—Ä–µ—Ç–∞–º–∏.
            key_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∫–ª—é—á–æ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è.
        """
        if secrets_file is None:
            project_root = Path(__file__).parent.parent.parent
            secrets_file = project_root / ".secrets.enc"

        if key_file is None:
            project_root = Path(__file__).parent.parent.parent
            key_file = project_root / ".secrets.key"

        self.secrets_file = secrets_file
        self.key_file = key_file
        self._cipher = self._get_or_create_cipher()
        self._secrets: Dict[str, str] = self._load_secrets()

    def _get_or_create_cipher(self) -> Fernet:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è."""
        if self.key_file.exists():
            with open(self.key_file, "rb") as f:
                key = f.read()
        else:
            key = Fernet.generate_key()
            with open(self.key_file, "wb") as f:
                f.write(key)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
            self.key_file.chmod(0o600)
            print(f"üîê –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {self.key_file}")

        return Fernet(key)

    def _load_secrets(self) -> Dict[str, str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç —Å–µ–∫—Ä–µ—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞."""
        if not self.secrets_file.exists():
            return {}

        try:
            with open(self.secrets_file, "rb") as f:
                encrypted_data = f.read()

            decrypted_data = self._cipher.decrypt(encrypted_data)
            return json.loads(decrypted_data.decode())

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤: {e}")
            return {}

    def _save_secrets(self) -> None:
        """–®–∏—Ñ—Ä—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ–∫—Ä–µ—Ç—ã –≤ —Ñ–∞–π–ª."""
        data = json.dumps(self._secrets).encode()
        encrypted_data = self._cipher.encrypt(data)

        with open(self.secrets_file, "wb") as f:
            f.write(encrypted_data)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
        self.secrets_file.chmod(0o600)

    def get_secret(self, key: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç."""
        return self._secrets.get(key)

    def set_secret(self, key: str, value: str) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏ —à–∏—Ñ—Ä—É–µ—Ç —Å–µ–∫—Ä–µ—Ç."""
        self._secrets[key] = value
        self._save_secrets()

    def delete_secret(self, key: str) -> None:
        """–£–¥–∞–ª—è–µ—Ç —Å–µ–∫—Ä–µ—Ç."""
        if key in self._secrets:
            del self._secrets[key]
            self._save_secrets()

    def list_secrets(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª—é—á–µ–π —Å–µ–∫—Ä–µ—Ç–æ–≤."""
        return sorted(self._secrets.keys())


class SecretsManager:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞–º–∏."""

    def __init__(self, backend: Optional[SecretBackend] = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ–∫—Ä–µ—Ç–æ–≤.

        Args:
            backend: –ë—ç–∫–µ–Ω–¥ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–æ–≤.
                    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è EnvFileBackend.
        """
        self.backend = backend or EnvFileBackend()
        self._masked_patterns: Set[re.Pattern] = self._create_mask_patterns()
        self._cache: Dict[str, Optional[str]] = {}
        self._required_secrets: Dict[str, str] = self._define_required_secrets()

    def _create_mask_patterns(self) -> Set[re.Pattern]:
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ –ª–æ–≥–∞—Ö."""
        patterns = [
            # API –∫–ª—é—á–∏ –∏ —Ç–æ–∫–µ–Ω—ã
            r"(['\"]?)([A-Za-z0-9]{32,})\1",
            r"(api[_-]?key|token|secret)['\"]?\s*[:=]\s*['\"]?([A-Za-z0-9\-_]{20,})['\"]?",
            # –ü–∞—Ä–æ–ª–∏
            r"(password|pwd)['\"]?\s*[:=]\s*['\"]?([^\s'\"]+)['\"]?",
            # JWT —Ç–æ–∫–µ–Ω—ã
            r"Bearer\s+([A-Za-z0-9\-_]+\.[A-Za-z0-9\-_]+\.[A-Za-z0-9\-_]+)",
            # URL —Å credentials
            r"(https?|ftp)://([^:]+):([^@]+)@",
        ]
        return {re.compile(pattern, re.IGNORECASE) for pattern in patterns}

    def _define_required_secrets(self) -> Dict[str, str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è."""
        return {
            # –ë–∏—Ä–∂–∏
            "BYBIT_API_KEY": "API –∫–ª—é—á –¥–ª—è Bybit",
            "BYBIT_API_SECRET": "API —Å–µ–∫—Ä–µ—Ç –¥–ª—è Bybit",
            "BINANCE_API_KEY": "API –∫–ª—é—á –¥–ª—è Binance",
            "BINANCE_API_SECRET": "API —Å–µ–∫—Ä–µ—Ç –¥–ª—è Binance",
            # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
            "DB_PASSWORD": "–ü–∞—Ä–æ–ª—å –¥–ª—è PostgreSQL",
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            "TELEGRAM_BOT_TOKEN": "–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞",
            "TELEGRAM_CHAT_ID": "ID —á–∞—Ç–∞ Telegram",
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            "SENTRY_DSN": "DSN –¥–ª—è Sentry",
        }

    def get(self, key: str, default: Optional[str] = None, required: bool = False) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ–∫—Ä–µ—Ç –ø–æ –∫–ª—é—á—É.

        Args:
            key: –ö–ª—é—á —Å–µ–∫—Ä–µ—Ç–∞.
            default: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
            required: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–µ–∫—Ä–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º.

        Returns:
            –ó–Ω–∞—á–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–∞ –∏–ª–∏ default.

        Raises:
            ConfigurationError: –ï—Å–ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        if key in self._cache:
            return self._cache[key]

        # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –±—ç–∫–µ–Ω–¥–∞
        value = self.backend.get_secret(key)

        if value is None:
            if required:
                raise ConfigurationError(
                    f"–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç '{key}' –Ω–µ –Ω–∞–π–¥–µ–Ω. "
                    f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ .env —Ñ–∞–π–ª–µ –∏–ª–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è."
                )
            value = default

        # –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self._cache[key] = value
        return value

    def set(self, key: str, value: str) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ–∫—Ä–µ—Ç.

        Args:
            key: –ö–ª—é—á —Å–µ–∫—Ä–µ—Ç–∞.
            value: –ó–Ω–∞—á–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–∞.
        """
        self.backend.set_secret(key, value)
        self._cache[key] = value
        print(f"‚úÖ –°–µ–∫—Ä–µ—Ç '{key}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def delete(self, key: str) -> None:
        """–£–¥–∞–ª—è–µ—Ç —Å–µ–∫—Ä–µ—Ç.

        Args:
            key: –ö–ª—é—á —Å–µ–∫—Ä–µ—Ç–∞.
        """
        self.backend.delete_secret(key)
        if key in self._cache:
            del self._cache[key]
        print(f"üóëÔ∏è –°–µ–∫—Ä–µ—Ç '{key}' —É–¥–∞–ª–µ–Ω")

    def list(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤."""
        return self.backend.list_secrets()

    def validate_required(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤.

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞.
        """
        results = {}
        for key, description in self._required_secrets.items():
            value = self.get(key)
            results[key] = value is not None
            if not results[key]:
                print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ä–µ—Ç: {key} - {description}")

        return results

    def mask_secrets_in_text(self, text: str) -> str:
        """–ú–∞—Å–∫–∏—Ä—É–µ—Ç —Å–µ–∫—Ä–µ—Ç—ã –≤ —Ç–µ–∫—Å—Ç–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.

        Args:
            text: –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–µ–∫—Ä–µ—Ç—ã.

        Returns:
            –¢–µ–∫—Å—Ç —Å –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–µ–∫—Ä–µ—Ç–∞–º–∏.
        """
        masked_text = text

        # –ú–∞—Å–∫–∏—Ä—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã
        for key in self.list():
            value = self.get(key)
            if value and len(value) > 4:
                # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 2 –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–∏–º–≤–æ–ª–∞
                masked_value = f"{value[:2]}{'*' * (len(value) - 4)}{value[-2:]}"
                masked_text = masked_text.replace(value, masked_value)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è
        for pattern in self._masked_patterns:
            masked_text = pattern.sub(lambda m: self._mask_match(m), masked_text)

        return masked_text

    def _mask_match(self, match: re.Match) -> str:
        """–ú–∞—Å–∫–∏—Ä—É–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è.

        Args:
            match: –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è.

        Returns:
            –ó–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.
        """
        groups = match.groups()
        if len(groups) >= 2:
            # –ú–∞—Å–∫–∏—Ä—É–µ–º –≤—Ç–æ—Ä—É—é –≥—Ä—É–ø–ø—É (–æ–±—ã—á–Ω–æ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ)
            value = groups[-1]
            if len(value) > 4:
                masked = f"{value[:2]}{'*' * (len(value) - 4)}{value[-2:]}"
                return match.group(0).replace(value, masked)
        return match.group(0)

    def export_template(self, output_path: Path) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —à–∞–±–ª–æ–Ω .env —Ñ–∞–π–ª–∞ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏.

        Args:
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞.
        """
        lines = [
            "# –®–∞–±–ª–æ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤ –¥–ª—è BOT_AI_V3\n",
            "# –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è\n",
            "\n",
        ]

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {
            "–ë–∏—Ä–∂–∏": ["BYBIT", "BINANCE", "OKX", "GATEIO", "KUCOIN", "HTX", "BINGX"],
            "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö": ["DB", "PGPORT", "PGUSER"],
            "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è": ["TELEGRAM", "EMAIL", "DISCORD"],
            "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥": ["SENTRY", "PROMETHEUS"],
            "–û–±—â–∏–µ": [],
        }

        for category, prefixes in categories.items():
            category_secrets = []
            for key, description in self._required_secrets.items():
                if any(key.startswith(prefix) for prefix in prefixes):
                    category_secrets.append((key, description))
                elif category == "–û–±—â–∏–µ" and not any(
                    key.startswith(p) for cat_prefixes in categories.values() for p in cat_prefixes
                ):
                    category_secrets.append((key, description))

            if category_secrets:
                lines.append(f"# === {category} ===\n")
                for key, description in sorted(category_secrets):
                    lines.append(f"# {description}\n")
                    lines.append(f"{key}=\n")
                lines.append("\n")

        with open(output_path, "w") as f:
            f.writelines(lines)

        print(f"‚úÖ –®–∞–±–ª–æ–Ω .env —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ {output_path}")

    def get_status_report(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤.

        Returns:
            –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç.
        """
        lines = ["=" * 50, "üîê –û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤", "=" * 50]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã
        validation_results = self.validate_required()
        
        configured = sum(1 for v in validation_results.values() if v)
        total = len(validation_results)
        
        lines.append(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        lines.append(f"  - –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ: {configured}/{total}")
        lines.append(f"  - –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {total - configured}")

        # –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        lines.append("\nüìã –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        
        categories = {
            "–ë–∏—Ä–∂–∏": ["BYBIT", "BINANCE"],
            "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö": ["DB"],
            "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è": ["TELEGRAM"],
        }

        for category, prefixes in categories.items():
            category_results = {
                k: v for k, v in validation_results.items()
                if any(k.startswith(p) for p in prefixes)
            }
            if category_results:
                configured = sum(1 for v in category_results.values() if v)
                total = len(category_results)
                status = "‚úÖ" if configured == total else "‚ö†Ô∏è"
                lines.append(f"  {status} {category}: {configured}/{total}")

        # –í—Å–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã (–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
        all_secrets = self.list()
        if all_secrets:
            lines.append(f"\nüîë –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã ({len(all_secrets)}):")
            for key in all_secrets[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                value = self.get(key)
                if value:
                    masked = f"{value[:2]}{'*' * min(8, len(value) - 4)}{value[-2:] if len(value) > 4 else ''}"
                    lines.append(f"  - {key}: {masked}")
            if len(all_secrets) > 10:
                lines.append(f"  ... –∏ –µ—â–µ {len(all_secrets) - 10}")

        lines.append("=" * 50)
        return "\n".join(lines)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤
_secrets_manager: Optional[SecretsManager] = None


def get_secrets_manager() -> SecretsManager:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤."""
    global _secrets_manager
    if _secrets_manager is None:
        _secrets_manager = SecretsManager()
    return _secrets_manager


# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
def get_secret(key: str, default: Optional[str] = None, required: bool = False) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ–∫—Ä–µ—Ç –ø–æ –∫–ª—é—á—É."""
    return get_secrets_manager().get(key, default, required)


def set_secret(key: str, value: str) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ–∫—Ä–µ—Ç."""
    get_secrets_manager().set(key, value)


def mask_secrets(text: str) -> str:
    """–ú–∞—Å–∫–∏—Ä—É–µ—Ç —Å–µ–∫—Ä–µ—Ç—ã –≤ —Ç–µ–∫—Å—Ç–µ."""
    return get_secrets_manager().mask_secrets_in_text(text)