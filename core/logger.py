"""
–ú–æ–¥—É–ª—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è BOT_AI_V3
"""

import logging
import os
import sys
from datetime import datetime
from pathlib import Path


def setup_logger(name: str, level: str = None) -> logging.Logger:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ —Å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π

    Args:
        name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞
        level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG, INFO, WARNING, ERROR, CRITICAL)

    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
    """
    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º INFO –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if level is None:
        level = os.getenv("BOT_AI_V3_LOG_LEVEL", os.getenv("LOG_LEVEL", "INFO"))

    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger(name)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
    logger.setLevel(getattr(logging, level.upper(), logging.INFO))

    # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
    if logger.handlers:
        return logger

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    log_dir = Path("data/logs")
    log_dir.mkdir(parents=True, exist_ok=True)

    # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä (—É–∫–æ—Ä–æ—á–µ–Ω–Ω—ã–π timestamp)
    # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    if os.getenv("BOT_AI_V3_LOG_TO_CONSOLE", "false").lower() == "true":
        formatter = logging.Formatter(
            "%(asctime)s - %(name)s - %(levelname)s - [%(filename)s:%(lineno)d] - %(message)s",
            datefmt="%Y-%m-%d %H:%M:%S",
        )
    else:
        formatter = logging.Formatter(
            "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
            datefmt="%Y-%m-%d %H:%M:%S",  # –ü–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ª—É—á—à–µ–π –æ—Ç–ª–∞–¥–∫–∏
        )

    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ - –≤—ã–≤–æ–¥–∏–º –≤—Å–µ –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω BOT_AI_V3_LOG_TO_CONSOLE
    if os.getenv("BOT_AI_V3_LOG_TO_CONSOLE", "false").lower() == "true":
        console_level = logger.level  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —É—Ä–æ–≤–µ–Ω—å, —á—Ç–æ –∏ —É –ª–æ–≥–≥–µ—Ä–∞
    else:
        console_level = (
            logging.WARNING if os.getenv("ENVIRONMENT") == "production" else logging.INFO
        )
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(console_level)
    console_handler.setFormatter(formatter)
    logger.addHandler(console_handler)

    # –ë—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—â–∏—Ö –ª–æ–≥–æ–≤
    file_handler = logging.FileHandler(
        log_dir / f"bot_trading_{datetime.now().strftime('%Y%m%d')}.log",
        encoding="utf-8",
    )
    file_handler.setFormatter(formatter)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è —à—É–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    def noise_filter(record):
        message = record.getMessage()
        # –ò—Å–∫–ª—é—á–∞–µ–º —á–∞—Å—Ç—ã–µ –Ω–µ–≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        noise_keywords = [
            "BrokenPipeError",
            "–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ 0 –∑–∞–ø–∏—Å–µ–π",
            "WebSocket heartbeat",
            "Health check passed",
        ]
        return not any(keyword in message for keyword in noise_keywords)

    file_handler.addFilter(noise_filter)
    logger.addHandler(file_handler)

    # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—à–∏–±–æ–∫ (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞)
    error_handler = logging.FileHandler(log_dir / "errors.log", encoding="utf-8")
    error_handler.setLevel(logging.ERROR)
    error_handler.setFormatter(formatter)
    logger.addHandler(error_handler)

    return logger


def setup_risk_management_logger() -> logging.Logger:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏"""
    logger = logging.getLogger("risk_management")

    if not logger.handlers:
        logger.setLevel(logging.DEBUG)

        # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å —ç–º–æ–¥–∑–∏ –∏ —Ü–≤–µ—Ç–∞–º–∏
        formatter = logging.Formatter(
            "%(asctime)s - %(name)s - %(levelname)s - üõ°Ô∏è %(message)s",
            datefmt="%Y-%m-%d %H:%M:%S",
        )

        # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        file_handler = logging.FileHandler("logs/risk_management.log")
        file_handler.setLevel(logging.DEBUG)
        file_handler.setFormatter(formatter)

        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        console_handler.setFormatter(formatter)

        logger.addHandler(file_handler)
        logger.addHandler(console_handler)

    return logger


# –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –º–æ–¥—É–ª—è
logger = setup_logger(__name__)
