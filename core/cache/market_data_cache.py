"""
–ö–µ—à —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤
"""

import asyncio
from collections import defaultdict
from datetime import UTC, datetime
from typing import Any

import pandas as pd

from core.logger import setup_logger

logger = setup_logger(__name__)


class MarketDataCache:
    """
    –£–º–Ω—ã–π –∫–µ—à –¥–ª—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    - –•—Ä–∞–Ω–∏—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏
    - –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É
    - –ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ—Ç API –∑–∞–ø—Ä–æ—Å—ã
    """

    def __init__(self, cache_size: int = 1000, ttl_seconds: int = 60):
        """
        Args:
            cache_size: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            ttl_seconds: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏ (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
        """
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–µ—à: symbol -> DataFrame —Å OHLCV –¥–∞–Ω–Ω—ã–º–∏
        self._data_cache: dict[str, pd.DataFrame] = {}

        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–µ—à–∞
        self._cache_metadata: dict[str, dict] = {}

        # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        self._last_update: dict[str, datetime] = {}

        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self._locks: dict[str, asyncio.Lock] = defaultdict(asyncio.Lock)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.cache_size = cache_size
        self.ttl_seconds = ttl_seconds

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "cache_hits": 0,
            "cache_misses": 0,
            "api_calls_saved": 0,
            "last_candles_updated": 0,
        }

        logger.info(f"MarketDataCache –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: size={cache_size}, ttl={ttl_seconds}s")

    async def get_data(self, symbol: str, required_candles: int = 96) -> pd.DataFrame | None:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            required_candles: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–±—É–µ–º—ã—Ö —Å–≤–µ—á–µ–π

        Returns:
            DataFrame —Å OHLCV –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ None
        """
        async with self._locks[symbol]:
            if symbol in self._data_cache:
                df = self._data_cache[symbol]

                if len(df) >= required_candles:
                    self.stats["cache_hits"] += 1
                    self.stats["api_calls_saved"] += 1

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
                    if self._is_last_candle_stale(symbol):
                        # –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É
                        self._cache_metadata[symbol]["needs_last_update"] = True

                    return df.copy()

            self.stats["cache_misses"] += 1
            return None

    async def update_data(
        self, symbol: str, new_data: pd.DataFrame, is_complete: bool = False
    ) -> None:
        """
        –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à–µ

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            new_data: –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            is_complete: True –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞, False –¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        async with self._locks[symbol]:
            current_time = datetime.now(UTC)

            if is_complete:
                # –ü–æ–ª–Ω–∞—è –∑–∞–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö
                self._data_cache[symbol] = new_data.copy()
                self._cache_metadata[symbol] = {
                    "loaded_at": current_time,
                    "candles_count": len(new_data),
                    "needs_last_update": False,
                }
                logger.info(f"üìä {symbol}: –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(new_data)} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π –≤ –∫–µ—à")

            else:
                # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                if symbol in self._data_cache:
                    existing_df = self._data_cache[symbol]

                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ, —É–¥–∞–ª—è—è –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ timestamp
                    combined_df = pd.concat([existing_df, new_data])
                    combined_df = combined_df[~combined_df.index.duplicated(keep="last")]
                    combined_df = combined_df.sort_index()

                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞
                    if len(combined_df) > self.cache_size:
                        combined_df = combined_df.iloc[-self.cache_size :]

                    self._data_cache[symbol] = combined_df
                    self.stats["last_candles_updated"] += 1

                    logger.debug(f"üîÑ {symbol}: –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞ –≤ –∫–µ—à–µ")
                else:
                    # –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
                    self._data_cache[symbol] = new_data.copy()
                    self._cache_metadata[symbol] = {
                        "loaded_at": current_time,
                        "candles_count": len(new_data),
                        "needs_last_update": False,
                    }

            self._last_update[symbol] = current_time

    async def update_last_candle(self, symbol: str, last_candle: dict[str, Any]) -> None:
        """
        –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É (real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            last_candle: –î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
        """
        async with self._locks[symbol]:
            if symbol not in self._data_cache:
                return

            df = self._data_cache[symbol]

            # –°–æ–∑–¥–∞–µ–º timestamp –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
            timestamp = pd.Timestamp(last_candle.get("timestamp", datetime.now(UTC)), tz="UTC")

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ timestamp —Å–æ–≤–ø–∞–¥–∞–µ—Ç
            if len(df) > 0 and df.index[-1] == timestamp:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–≤–µ—á—É
                df.loc[timestamp, "open"] = last_candle["open"]
                df.loc[timestamp, "high"] = last_candle["high"]
                df.loc[timestamp, "low"] = last_candle["low"]
                df.loc[timestamp, "close"] = last_candle["close"]
                df.loc[timestamp, "volume"] = last_candle["volume"]

                self.stats["last_candles_updated"] += 1
                logger.debug(f"üìà {symbol}: –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è —Å–≤–µ—á–∞ {timestamp}")
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–≤–µ—á—É
                new_row = pd.DataFrame([last_candle], index=[timestamp])
                self._data_cache[symbol] = pd.concat([df, new_row])

                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
                if len(self._data_cache[symbol]) > self.cache_size:
                    self._data_cache[symbol] = self._data_cache[symbol].iloc[-self.cache_size :]

                logger.debug(f"üìä {symbol}: –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Å–≤–µ—á–∞ {timestamp}")

            self._last_update[symbol] = datetime.now(UTC)
            self._cache_metadata[symbol]["needs_last_update"] = False

    def _is_last_candle_stale(self, symbol: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —É—Å—Ç–∞—Ä–µ–ª–∞ –ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª

        Returns:
            True –µ—Å–ª–∏ —Å–≤–µ—á–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        """
        if symbol not in self._last_update:
            return True

        age = (datetime.now(UTC) - self._last_update[symbol]).total_seconds()
        return age > self.ttl_seconds

    def needs_update(self, symbol: str) -> tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö

        Returns:
            (needs_update, update_type) –≥–¥–µ update_type: 'full', 'last', 'none'
        """
        if symbol not in self._data_cache:
            return True, "full"

        df = self._data_cache[symbol]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        if len(df) < 96:  # –ú–∏–Ω–∏–º—É–º –¥–ª—è ML
            return True, "full"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
        if self._is_last_candle_stale(symbol):
            return True, "last"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        metadata = self._cache_metadata.get(symbol, {})
        if metadata.get("needs_last_update", False):
            return True, "last"

        return False, "none"

    def get_stats(self) -> dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞"""
        total_requests = self.stats["cache_hits"] + self.stats["cache_misses"]
        hit_rate = (self.stats["cache_hits"] / total_requests * 100) if total_requests > 0 else 0

        return {
            "cache_hits": self.stats["cache_hits"],
            "cache_misses": self.stats["cache_misses"],
            "hit_rate": f"{hit_rate:.1f}%",
            "api_calls_saved": self.stats["api_calls_saved"],
            "last_candles_updated": self.stats["last_candles_updated"],
            "symbols_cached": len(self._data_cache),
            "total_candles": sum(len(df) for df in self._data_cache.values()),
        }

    def clear_cache(self, symbol: str | None = None) -> None:
        """
        –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à

        Args:
            symbol: –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω, –æ—á–∏—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        """
        if symbol:
            self._data_cache.pop(symbol, None)
            self._cache_metadata.pop(symbol, None)
            self._last_update.pop(symbol, None)
            logger.info(f"üóëÔ∏è –ö–µ—à –æ—á–∏—â–µ–Ω –¥–ª—è {symbol}")
        else:
            self._data_cache.clear()
            self._cache_metadata.clear()
            self._last_update.clear()
            self.stats = {
                "cache_hits": 0,
                "cache_misses": 0,
                "api_calls_saved": 0,
                "last_candles_updated": 0,
            }
            logger.info("üóëÔ∏è –í–µ—Å—å –∫–µ—à –æ—á–∏—â–µ–Ω")

    async def preload_symbols(
        self, symbols: list[str], data_loader_func, required_candles: int = 1000
    ) -> None:
        """
        –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤

        Args:
            symbols: –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            data_loader_func: Async —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            required_candles: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        """
        logger.info(f"üì• –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤...")

        tasks = []
        for symbol in symbols:
            if symbol not in self._data_cache:
                task = asyncio.create_task(
                    self._preload_single(symbol, data_loader_func, required_candles)
                )
                tasks.append(task)

        if tasks:
            results = await asyncio.gather(*tasks, return_exceptions=True)
            success_count = sum(1 for r in results if not isinstance(r, Exception))
            logger.info(f"‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–æ {success_count}/{len(tasks)} —Å–∏–º–≤–æ–ª–æ–≤")

    async def _preload_single(self, symbol: str, data_loader_func, required_candles: int) -> None:
        """–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        try:
            data = await data_loader_func(symbol, limit=required_candles)
            if data is not None and len(data) > 0:
                await self.update_data(symbol, data, is_complete=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ {symbol}: {e}")
            raise
