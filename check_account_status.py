#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
"""

import asyncio
import os

from dotenv import load_dotenv

load_dotenv()


async def check_account():
    from exchanges.bybit.bybit_exchange import BybitExchange

    exchange = BybitExchange(
        api_key=os.getenv("BYBIT_API_KEY"),
        api_secret=os.getenv("BYBIT_API_SECRET"),
        sandbox=False,
    )

    try:
        await exchange.connect()

        print("üîç –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –ê–ö–ö–ê–£–ù–¢–ê")
        print("=" * 60)

        # 1. –ë–∞–ª–∞–Ω—Å—ã
        print("\nüí∞ –ë–ê–õ–ê–ù–°–´:")
        balances = await exchange.get_balances()
        for balance in balances:
            if balance.total > 0:
                available_pct = (
                    (balance.available / balance.total * 100)
                    if balance.total > 0
                    else 0
                )
                print(
                    f"   {balance.currency}: ${balance.total:.2f} "
                    f"(–¥–æ—Å—Ç—É–ø–Ω–æ: ${balance.available:.2f} = {available_pct:.0f}%)"
                )

        # 2. –ü–æ–∑–∏—Ü–∏–∏
        print("\nüìä –ü–û–ó–ò–¶–ò–ò:")
        positions = await exchange.get_positions()
        position_count = 0
        for pos in positions:
            if pos.size > 0:
                position_count += 1
                print(f"   {pos.symbol}: {pos.side} {pos.size} @ ${pos.entry_price}")
                print(f"      –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${pos.mark_price}")
                print(f"      PnL: ${pos.unrealized_pnl}")

        if position_count == 0:
            print("   –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –æ—Ä–¥–µ—Ä–æ–≤
        print("\nüí± –û–¢–ö–†–´–¢–´–ï –û–†–î–ï–†–ê:")
        symbols = ["BTCUSDT", "ETHUSDT", "SOLUSDT"]
        order_count = 0

        for symbol in symbols:
            try:
                orders = await exchange.get_open_orders(symbol)
                for order in orders:
                    order_count += 1
                    print(
                        f"   {order.symbol}: {order.side} {order.type} "
                        f"{order.quantity} @ ${order.price}"
                    )
                    print(f"      ID: {order.id}")
                    print(f"      –°—Ç–∞—Ç—É—Å: {order.status}")
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤ –±–µ–∑ –æ—Ä–¥–µ—Ä–æ–≤

        if order_count == 0:
            print("   –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")

        # 4. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
        print("\nüìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –ê–ö–ö–ê–£–ù–¢–ï:")

        # –ü–æ–ª—É—á–∞–µ–º raw API –æ—Ç–≤–µ—Ç –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        try:
            import ccxt

            ccxt_exchange = ccxt.bybit(
                {
                    "apiKey": os.getenv("BYBIT_API_KEY"),
                    "secret": os.getenv("BYBIT_API_SECRET"),
                }
            )

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
            account_info = await ccxt_exchange.fetch_balance()

            if "info" in account_info:
                info = account_info["info"]
                if "result" in info and "list" in info["result"]:
                    for acc in info["result"]["list"]:
                        if acc["coin"] == "USDT":
                            print(f"   –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞: {acc.get('accountType', 'N/A')}")
                            print(
                                f"   –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${float(acc.get('locked', 0)):.2f}"
                            )
                            print(
                                f"   –û—Ä–¥–µ—Ä –º–∞—Ä–∂–∞: ${float(acc.get('orderIM', 0)):.2f}"
                            )
                            print(
                                f"   –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ä–∂–∞: ${float(acc.get('positionIM', 0)):.2f}"
                            )

        except Exception as e:
            print(f"   –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {e}")

        print("\n" + "=" * 60)

    finally:
        await exchange.disconnect()


if __name__ == "__main__":
    asyncio.run(check_account())
