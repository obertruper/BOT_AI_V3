#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å—á–µ—Ç–∞ Bybit
"""

import asyncio
import hashlib
import hmac
import os
import time

import aiohttp
from dotenv import load_dotenv

load_dotenv()


async def check_account():
    api_key = os.getenv("BYBIT_API_KEY")
    api_secret = os.getenv("BYBIT_API_SECRET")

    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—á–µ—Ç–∞ Bybit")
    print("=" * 50)

    timestamp = str(int(time.time() * 1000))
    recv_window = "5000"

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    print("\nüí∞ –ë–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞:")
    params = "accountType=UNIFIED"
    param_str = timestamp + api_key + recv_window + params
    signature = hmac.new(
        bytes(api_secret, "utf-8"), bytes(param_str, "utf-8"), hashlib.sha256
    ).hexdigest()

    headers = {
        "X-BAPI-API-KEY": api_key,
        "X-BAPI-TIMESTAMP": timestamp,
        "X-BAPI-SIGN": signature,
        "X-BAPI-RECV-WINDOW": recv_window,
    }

    async with aiohttp.ClientSession() as session:
        # –ë–∞–ª–∞–Ω—Å
        url = "https://api.bybit.com/v5/account/wallet-balance"
        async with session.get(
            url, headers=headers, params={"accountType": "UNIFIED"}
        ) as response:
            if response.status == 200:
                data = await response.json()
                if data.get("retCode") == 0:
                    for account in data["result"]["list"]:
                        print(f"  –¢–∏–ø —Å—á–µ—Ç–∞: {account['accountType']}")
                        print(f"  –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${account['totalEquity']}")
                        print(
                            f"  –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${account['totalAvailableBalance']}"
                        )
                        print(f"  –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–∞—Ä–∂–∞: ${account['totalInitialMargin']}")

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
                        available = float(account["totalAvailableBalance"])
                        if available < 10:
                            print(
                                "  ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º $10"
                            )
                        else:
                            print("  ‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
        print("\nüìä –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:")
        timestamp = str(int(time.time() * 1000))
        params = "category=linear&settleCoin=USDT"
        param_str = timestamp + api_key + recv_window + params
        signature = hmac.new(
            bytes(api_secret, "utf-8"), bytes(param_str, "utf-8"), hashlib.sha256
        ).hexdigest()

        headers["X-BAPI-TIMESTAMP"] = timestamp
        headers["X-BAPI-SIGN"] = signature

        url = "https://api.bybit.com/v5/position/list"
        async with session.get(
            url, headers=headers, params={"category": "linear", "settleCoin": "USDT"}
        ) as response:
            if response.status == 200:
                data = await response.json()
                if data.get("retCode") == 0:
                    positions = data["result"]["list"]
                    open_positions = [
                        p for p in positions if float(p.get("size", "0")) != 0
                    ]

                    if open_positions:
                        for pos in open_positions:
                            print(
                                f"  ‚Ä¢ {pos['symbol']}: {pos['side']} {pos['size']} @ {pos['avgPrice']}"
                            )
                            print(f"    PnL: ${pos['unrealisedPnl']}")
                    else:
                        print("  –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
        print("\nüìù –ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞:")
        timestamp = str(int(time.time() * 1000))
        params = "category=linear&settleCoin=USDT"
        param_str = timestamp + api_key + recv_window + params
        signature = hmac.new(
            bytes(api_secret, "utf-8"), bytes(param_str, "utf-8"), hashlib.sha256
        ).hexdigest()

        headers["X-BAPI-TIMESTAMP"] = timestamp
        headers["X-BAPI-SIGN"] = signature

        url = "https://api.bybit.com/v5/order/realtime"
        async with session.get(
            url, headers=headers, params={"category": "linear", "settleCoin": "USDT"}
        ) as response:
            if response.status == 200:
                data = await response.json()
                if data.get("retCode") == 0:
                    orders = data["result"]["list"]
                    if orders:
                        for order in orders[:5]:
                            print(
                                f"  ‚Ä¢ {order['symbol']}: {order['side']} {order['qty']} @ {order.get('price', 'Market')}"
                            )
                            print(f"    –°—Ç–∞—Ç—É—Å: {order['orderStatus']}")
                    else:
                        print("  –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")


if __name__ == "__main__":
    asyncio.run(check_account())
