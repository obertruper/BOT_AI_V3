#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ–∂–∏–¥–∞–µ–º—ã–º 240 –ø—Ä–∏–∑–Ω–∞–∫–∞–º –¥–ª—è –º–æ–¥–µ–ª–∏
"""

import asyncio
import sys
from pathlib import Path

import numpy as np
import pandas as pd

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

from core.logger import setup_logger
from ml.config.features_240 import get_feature_groups
from ml.realtime_indicator_calculator import RealTimeIndicatorCalculator

logger = setup_logger("test_feature_count")


async def test_feature_generation():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    """
    try:
        logger.info("=" * 60)
        logger.info("üß™ –¢–ï–°–¢ –ö–û–õ–ò–ß–ï–°–¢–í–ê –ü–†–ò–ó–ù–ê–ö–û–í")
        logger.info("=" * 60)

        # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        logger.info("\n1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö OHLCV –¥–∞–Ω–Ω—ã—Ö...")

        dates = pd.date_range(end=pd.Timestamp.now(), periods=300, freq="15min")
        price_base = 50000  # BTC —Ü–µ–Ω–∞
        price_changes = np.random.randn(300) * 0.001
        prices = price_base * np.cumprod(1 + price_changes)

        test_data = pd.DataFrame(
            {
                "datetime": dates,
                "open": prices * (1 + np.random.randn(300) * 0.0001),
                "high": prices * (1 + np.abs(np.random.randn(300)) * 0.0002),
                "low": prices * (1 - np.abs(np.random.randn(300)) * 0.0002),
                "close": prices,
                "volume": np.random.randint(100, 1000, 300).astype(float),
                "symbol": "BTCUSDT",
            }
        )
        test_data["turnover"] = test_data["close"] * test_data["volume"]
        test_data = test_data.set_index("datetime")

        logger.info(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(test_data)} —Å–≤–µ—á–µ–π –¥–ª—è BTCUSDT")

        # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
        logger.info("\n2Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RealTimeIndicatorCalculator...")

        calculator = RealTimeIndicatorCalculator(cache_ttl=0)  # –ë–µ–∑ –∫—ç—à–∞ –¥–ª—è —Ç–µ—Å—Ç–∞

        # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        logger.info("\n3Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")

        features = await calculator.get_features_for_ml("BTCUSDT", test_data)

        logger.info(f"  üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(features)}")

        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        logger.info("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ–∂–∏–¥–∞–Ω–∏—è–º...")

        if len(features) == 240:
            logger.info("  ‚úÖ –£–°–ü–ï–•: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ä–æ–≤–Ω–æ 240 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤!")
        else:
            logger.error(f"  ‚ùå –û–®–ò–ë–ö–ê: –û–∂–∏–¥–∞–ª–æ—Å—å 240, –ø–æ–ª—É—á–µ–Ω–æ {len(features)}")

            if len(features) > 240:
                logger.warning(f"  ‚ö†Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {len(features) - 240} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –±–æ–ª—å—à–µ")
            else:
                logger.warning(f"  ‚ö†Ô∏è –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {240 - len(features)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

        # 5. –ê–Ω–∞–ª–∏–∑ –ø–æ –≥—Ä—É–ø–ø–∞–º
        logger.info("\n5Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º...")

        feature_groups = get_feature_groups()

        for group_name, expected_features in feature_groups.items():
            logger.info(f"\n  üìÅ {group_name.upper()}:")
            logger.info(f"     –û–∂–∏–¥–∞–µ—Ç—Å—è: {len(expected_features)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã
            missing = []
            for feat in expected_features[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                logger.info(f"     - {feat}")
            if len(expected_features) > 5:
                logger.info(f"     ... –∏ –µ—â–µ {len(expected_features) - 5}")

        # 6. –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º features_240.py
        logger.info("\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å—ã)
        feature_names = [f"feature_{i}" for i in range(len(features))]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
        if len(feature_names) == 240:
            logger.info("  ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        else:
            logger.error("  ‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

        # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π
        logger.info("\n7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        non_zero = np.sum(features != 0)
        non_nan = np.sum(~np.isnan(features))
        finite = np.sum(np.isfinite(features))

        logger.info("  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
        logger.info(
            f"     - –ù–µ–Ω—É–ª–µ–≤—ã—Ö: {non_zero}/{len(features)} ({non_zero / len(features) * 100:.1f}%)"
        )
        logger.info(
            f"     - –ù–µ NaN: {non_nan}/{len(features)} ({non_nan / len(features) * 100:.1f}%)"
        )
        logger.info(
            f"     - –ö–æ–Ω–µ—á–Ω—ã—Ö: {finite}/{len(features)} ({finite / len(features) * 100:.1f}%)"
        )

        # –î–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π
        if finite > 0:
            valid_features = features[np.isfinite(features)]
            logger.info(f"     - Min: {valid_features.min():.6f}")
            logger.info(f"     - Max: {valid_features.max():.6f}")
            logger.info(f"     - Mean: {valid_features.mean():.6f}")
            logger.info(f"     - Std: {valid_features.std():.6f}")

        # 8. –¢–µ—Å—Ç —Å –ø–æ–ª–Ω—ã–º —Ü–∏–∫–ª–æ–º (calculator.calculate_indicators)
        logger.info("\n8Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")

        indicators = await calculator.calculate_indicators("BTCUSDT", test_data, save_to_db=False)

        if "ml_features" in indicators:
            ml_features = indicators["ml_features"]
            logger.info(f"  üìä ML –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: {len(ml_features)}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            feature_list = list(ml_features.keys())[:10]
            for feat in feature_list:
                logger.info(f"     - {feat}: {ml_features[feat]:.6f}")
            if len(ml_features) > 10:
                logger.info(f"     ... –∏ –µ—â–µ {len(ml_features) - 10} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

        # 9. –ò—Ç–æ–≥–æ–≤—ã–π –≤–µ—Ä–¥–∏–∫—Ç
        logger.info("\n" + "=" * 60)
        logger.info("üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
        logger.info("=" * 60)

        issues = []

        if len(features) != 240:
            issues.append(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(features)} –≤–º–µ—Å—Ç–æ 240")

        if non_zero < len(features) * 0.5:
            issues.append(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω—É–ª–µ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(features) - non_zero}")

        if non_nan < len(features) * 0.95:
            issues.append(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ NaN: {len(features) - non_nan}")

        if issues:
            logger.error("‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù:")
            for issue in issues:
                logger.error(f"  - {issue}")
            logger.info("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            logger.info("  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ feature_engineering_v2.py")
            logger.info("  2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏")
            logger.info("  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–∫—É –≤ realtime_indicator_calculator.py")
            logger.info("  4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ ml/config/features_240.py")
        else:
            logger.info("‚úÖ –¢–ï–°–¢ –£–°–ü–ï–®–ù–û –ü–†–û–ô–î–ï–ù!")
            logger.info("  - –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —Ä–æ–≤–Ω–æ 240 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
            logger.info("  - –ü—Ä–∏–∑–Ω–∞–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
            logger.info("  - –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å –º–æ–¥–µ–ª—å—é")

        return len(features) == 240

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}", exc_info=True)
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    success = await test_feature_generation()

    if success:
        logger.info("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        logger.error("\n‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
