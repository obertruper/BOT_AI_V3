#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Claude Code SDK
–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ SDK —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–∏ –∫ Claude CLI
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

from ai_agents.claude_code_sdk import ClaudeCodeOptions, ClaudeCodeSDK, ThinkingMode


async def test_sdk_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è SDK"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Claude Code SDK...\n")

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SDK —Å –ø–∞–∫–µ—Ç–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
        print("1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SDK...")
        sdk = ClaudeCodeSDK(use_package_auth=True)
        print("‚úÖ SDK —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"   Claude CLI –Ω–∞–π–¥–µ–Ω: {sdk.claude_cmd}")

        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        print("\n2. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
        options = ClaudeCodeOptions(
            thinking_mode=ThinkingMode.NORMAL, max_turns=1, allowed_tools=["Read"]
        )

        result = await sdk.query(
            "–°–∫–∞–∂–∏ '–ü—Ä–∏–≤–µ—Ç! Claude Code SDK —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!' –∏ –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ.",
            options=options,
            agent_name="test_agent",
        )

        print("‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"   –û—Ç–≤–µ—Ç: {result.strip()}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
        print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏...")
        usage = sdk.get_token_usage("daily")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ç–æ–∫–µ–Ω–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {usage.get('total_tokens', 0):,}")
        print(f"   –°—Ç–æ–∏–º–æ—Å—Ç—å: ${usage.get('total_cost_usd', 0):.4f}")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        print("\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è...")
        # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ—à
        cached_result = await sdk.query(
            "–°–∫–∞–∂–∏ '–ü—Ä–∏–≤–µ—Ç! Claude Code SDK —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!' –∏ –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ.",
            options=options,
            agent_name="test_agent",
        )
        print("‚úÖ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫–µ—à–∞: {result.strip() == cached_result.strip()}")

        print("\n‚ú® –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("Claude Code SDK –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")

        return True

    except FileNotFoundError as e:
        print("‚ùå –û—à–∏–±–∫–∞: Claude CLI –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print(f"   –î–µ—Ç–∞–ª–∏: {e}")
        print("\nüí° –†–µ—à–µ–Ω–∏–µ:")
        print(
            "   1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Claude Code —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: npm install -g @anthropics/claude-code"
        )
        print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'claude' –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        return False

    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        print("\nüí° –†–µ—à–µ–Ω–∏–µ:")
        print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'claude' –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ")
        print("   2. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –≤–∞—à–∏–º API –∫–ª—é—á–æ–º")
        return False

    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {type(e).__name__}: {e}")
        import traceback

        traceback.print_exc()
        return False


async def test_agent_creation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤"""
    print("\n\nüì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤...\n")

    try:
        from ai_agents import ClaudeAgentBuilder

        sdk = ClaudeCodeSDK(use_package_auth=True)
        builder = ClaudeAgentBuilder(sdk)

        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∞–≥–µ–Ω—Ç–æ–≤
        agents = {
            "Code Reviewer": builder.create_code_reviewer(),
            "Test Generator": builder.create_test_generator(),
            "Autonomous Developer": builder.create_autonomous_developer(),
            "Performance Optimizer": builder.create_performance_optimizer(),
        }

        for name, agent_options in agents.items():
            print(f"‚úÖ {name}:")
            print(f"   - –ú–æ–¥–µ–ª—å: {agent_options.model}")
            print(f"   - –†–µ–∂–∏–º –º—ã—à–ª–µ–Ω–∏—è: {agent_options.thinking_mode.value}")
            print(f"   - –ú–∞–∫—Å. –∏—Ç–µ—Ä–∞—Ü–∏–π: {agent_options.max_turns}")
            print(f"   - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {', '.join(agent_options.allowed_tools)}")

        print("\n‚ú® –í—Å–µ –∞–≥–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤: {e}")
        return False


async def test_mcp_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("\n\nüîå –ü—Ä–æ–≤–µ—Ä–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤...\n")

    try:
        from ai_agents.utils.mcp_manager import get_mcp_manager

        mcp_manager = get_mcp_manager()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        print("1. –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ MCP —Å–µ—Ä–≤–µ—Ä—ã:")
        for server_name, config in mcp_manager.servers.items():
            status = "‚úÖ –í–∫–ª—é—á–µ–Ω" if config.enabled else "‚ùå –í—ã–∫–ª—é—á–µ–Ω"
            print(f"   - {server_name}: {status}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –∞–≥–µ–Ω—Ç–æ–≤
        print("\n2. –ü—Ä–æ—Ñ–∏–ª–∏ –∞–≥–µ–Ω—Ç–æ–≤:")
        for profile_name, profile in mcp_manager.agent_profiles.items():
            servers = ", ".join(profile.get("mcp_servers", []))
            print(f"   - {profile_name}: {servers}")

        print("\n‚úÖ MCP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ MCP: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 60)
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CLAUDE CODE SDK INTEGRATION")
    print("=" * 60)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    results = []

    # –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    results.append(await test_sdk_connection())

    # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤
    results.append(await test_agent_creation())

    # MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    results.append(await test_mcp_integration())

    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("=" * 60)

    total_tests = len(results)
    passed_tests = sum(results)

    if passed_tests == total_tests:
        print(f"\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ ({passed_tests}/{total_tests})")
        print("\nüéâ Claude Code SDK –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –æ—à–∏–±–æ–∫!")
        print("üí° –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.")
    else:
        print(f"\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´ ({passed_tests}/{total_tests})")
        print("üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é.")

    print("\n" + "=" * 60)


if __name__ == "__main__":
    asyncio.run(main())
