#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π ML —Ü–µ–ø–æ—á–∫–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API –∫–ª—é—á–∞–º–∏
"""

import asyncio
import os

import pandas as pd
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

from core.logger import setup_logger
from core.signals.unified_signal_processor import UnifiedSignalProcessor
from database.connections.postgres import AsyncPGPool
from ml.ml_manager import MLManager
from trading.order_executor import OrderExecutor

logger = setup_logger("test_real_ml_chain")


async def test_full_chain():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é —Ü–µ–ø–æ—á–∫—É —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API –∫–ª—é—á–∞–º–∏"""

    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        logger.info("1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...")
        # AsyncPGPool –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ get_pool()

        # 2. –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        logger.info("2. –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        pool = await AsyncPGPool.get_pool()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 96 —Å–≤–µ—á–µ–π –¥–ª—è BTCUSDT
        candles = await pool.fetch(
            """
            SELECT datetime, open, high, low, close, volume
            FROM raw_market_data
            WHERE symbol = 'BTCUSDT'
            AND exchange = 'bybit'
            ORDER BY datetime DESC
            LIMIT 96
        """
        )

        if len(candles) < 96:
            logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(candles)} —Å–≤–µ—á–µ–π")
            return

        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(candles)} —Å–≤–µ—á–µ–π")

        # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML Manager
        logger.info("3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML Manager...")
        # –ó–∞–≥—Ä—É–∂–∞–µ–º ML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        import yaml

        with open("config/ml/ml_config.yaml", "r") as f:
            ml_config = yaml.safe_load(f)

        ml_manager = MLManager(ml_config)
        await ml_manager.initialize()

        # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Order Executor
        logger.info("4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Order Executor...")
        order_executor = OrderExecutor()
        await order_executor.initialize()

        # 5. –°–æ–∑–¥–∞–Ω–∏–µ Unified Signal Processor
        logger.info("5. –°–æ–∑–¥–∞–Ω–∏–µ Unified Signal Processor...")
        signal_processor = UnifiedSignalProcessor(
            ml_manager=ml_manager,
            trading_engine=None,  # –î–ª—è —Ç–µ—Å—Ç–∞ –Ω–µ –Ω—É–∂–µ–Ω
            config={
                "min_confidence_threshold": 0.3,
                "max_daily_trades": 100,
                "position_size": 0.001,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∞
                "exchange": "bybit",
            },
        )

        # 6. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ML
        logger.info("6. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ML...")
        market_data = {
            "candles": [dict(row) for row in candles],
            "current_price": float(candles[0]["close"]),
            "symbol": "BTCUSDT",
        }

        # 7. –û–±—Ä–∞–±–æ—Ç–∫–∞ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        logger.info("7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ML —Å–∏–≥–Ω–∞–ª–∞...")
        order = await signal_processor.process_ml_prediction("BTCUSDT", market_data)

        if order:
            logger.info(
                f"‚úÖ –°–æ–∑–¥–∞–Ω –æ—Ä–¥–µ—Ä: {order.symbol} {order.side} {order.quantity} @ {order.price}"
            )

            # 8. –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂–µ
            logger.info("8. –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂–µ...")
            success = await order_executor.execute_order(order)

            if success:
                logger.info("üéâ –û–†–î–ï–† –£–°–ü–ï–®–ù–û –ò–°–ü–û–õ–ù–ï–ù –ù–ê –ë–ò–†–ñ–ï!")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
                order_status = await pool.fetchval(
                    "SELECT status FROM orders WHERE id = $1", order.id
                )
                logger.info(f"–°—Ç–∞—Ç—É—Å –≤ –ë–î: {order_status}")
            else:
                logger.error("‚ùå –û—Ä–¥–µ—Ä –æ—Ç–∫–ª–æ–Ω–µ–Ω –±–∏—Ä–∂–µ–π")

                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
                error = await pool.fetchval(
                    "SELECT metadata->>'error_message' FROM orders WHERE id = $1",
                    order.id,
                )
                logger.error(f"–ü—Ä–∏—á–∏–Ω–∞: {error}")
        else:
            logger.warning("ML –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª")

            # –î–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º —á—Ç–æ –≤–µ—Ä–Ω—É–ª ML
            logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ ML –Ω–∞–ø—Ä—è–º—É—é...")
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Decimal –≤ float
            candles_data = []
            for row in candles:
                candles_data.append(
                    {
                        "datetime": row["datetime"],
                        "open": float(row["open"]),
                        "high": float(row["high"]),
                        "low": float(row["low"]),
                        "close": float(row["close"]),
                        "volume": float(row["volume"]),
                    }
                )
            df = pd.DataFrame(candles_data).sort_values("datetime")
            prediction = await ml_manager.predict(df)

            logger.info(f"ML Prediction: {prediction}")

            # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞
            if prediction:
                logger.info(
                    f"ML –≤–µ—Ä–Ω—É–ª: signal_type={prediction.get('signal_type')}, confidence={prediction.get('confidence')}, strength={prediction.get('signal_strength')}"
                )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await signal_processor.get_stats()
            logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {stats}")

        # 9. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info("\n=== –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ML Manager
        if hasattr(ml_manager, "get_stats"):
            ml_stats = await ml_manager.get_stats()
            logger.info(f"ML Manager: {ml_stats}")
        else:
            logger.info("ML Manager —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Signal Processor
        sp_stats = await signal_processor.get_stats()
        logger.info(f"Signal Processor: {sp_stats}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Order Executor
        oe_stats = await order_executor.get_stats()
        logger.info(f"Order Executor: {oe_stats}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞ –±–∏—Ä–∂–µ
        if order_executor.exchanges.get("bybit"):
            logger.info("\n=== –ë–ê–õ–ê–ù–° –ù–ê –ë–ò–†–ñ–ï ===")
            exchange = order_executor.exchanges["bybit"]
            balance = await exchange.fetch_balance()

            for currency, info in balance.items():
                if info.get("total", 0) > 0:
                    logger.info(f"{currency}: {info['total']} (free: {info['free']})")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        import traceback

        traceback.print_exc()
    finally:
        await AsyncPGPool.close_pool()


if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–æ–ª–Ω–æ–π ML —Ü–µ–ø–æ—á–∫–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API –∫–ª—é—á–∞–º–∏")
    logger.info(f"BYBIT_API_KEY: {os.getenv('BYBIT_API_KEY')[:10]}...")
    asyncio.run(test_full_chain())
