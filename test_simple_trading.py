#!/usr/bin/env python3
"""–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""

import asyncio
import os
import sys
from pathlib import Path

sys.path.append(str(Path(__file__).parent))

from dotenv import load_dotenv

from core.logger import setup_logger

logger = setup_logger("test_simple")


async def main():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    load_dotenv()

    try:
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ
        logger.info("üöÄ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit...")
        from exchanges.bybit.client import BybitClient

        client = BybitClient(
            api_key=os.getenv("BYBIT_API_KEY"),
            api_secret=os.getenv("BYBIT_API_SECRET"),
            sandbox=False,
        )

        await client.connect()
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Bybit")

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
        balance = await client.get_balance("USDT")
        balance_amount = float(balance.total) if hasattr(balance, "total") else 0
        logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å: ${balance_amount:.2f} USDT")

        # –ü–æ–ª—É—á–∞–µ–º ticker
        ticker = await client.get_ticker("BTCUSDT")
        logger.info(f"üìä BTC/USDT: ${ticker.last_price}")

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–∏–≥–Ω–∞–ª
        logger.info("üì° –°–æ–∑–¥–∞–Ω–∏–µ ML —Å–∏–≥–Ω–∞–ª–∞...")
        from database.models.base_models import SignalType
        from database.models.signal import Signal

        signal = Signal(
            symbol="BTCUSDT",
            exchange="bybit",
            signal_type=SignalType.LONG,
            strength=0.7,
            confidence=0.65,
            strategy_name="ML_Test",
            suggested_quantity=0.001,
        )

        logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω: {signal.symbol} {signal.signal_type}")

        # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä
        if balance_amount > 10:
            logger.info("üí∏ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞...")
            from exchanges.base.order_types import OrderRequest, OrderSide, OrderType

            # –†–∞—Å—Å—á–∏—Ç–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ 1% –æ—Ç –±–∞–ª–∞–Ω—Å–∞
            btc_price = float(ticker.last_price)
            position_size_usd = balance_amount * 0.01  # 1% –æ—Ç –±–∞–ª–∞–Ω—Å–∞
            quantity = position_size_usd / btc_price

            # –û–∫—Ä—É–≥–ª–∏–º –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            quantity = max(0.001, round(quantity, 6))

            logger.info(
                f"üìè –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {quantity} BTC (${quantity * btc_price:.2f})"
            )

            order_request = OrderRequest(
                symbol="BTCUSDT",
                side=OrderSide.BUY,
                order_type=OrderType.MARKET,
                quantity=quantity,
                leverage=5,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–µ—á–æ –∫–∞–∫ –≤ –∫–æ–Ω—Ñ–∏–≥–µ
            )

            result = await client.place_order(order_request)
            if result and hasattr(result, "order_id"):
                logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω! ID: {result.order_id}")
            else:
                logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞")

        await client.disconnect()
        logger.info("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback

        logger.error(traceback.format_exc())


if __name__ == "__main__":
    asyncio.run(main())
