#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ML —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import asyncio
import sys
from datetime import datetime, timezone
from pathlib import Path

sys.path.append(str(Path(__file__).parent))

from core.logger import setup_logger
from database.connections.postgres import AsyncPGPool

logger = setup_logger("signal_monitor")


async def monitor_signals():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤."""

    print("üîç –ú–û–ù–ò–¢–û–†–ò–ù–ì ML –°–ò–ì–ù–ê–õ–û–í –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò\n")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")

    last_signal_id = 0
    signal_count = {"LONG": 0, "SHORT": 0, "NEUTRAL": 0}

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ID —Å–∏–≥–Ω–∞–ª–∞
    result = await AsyncPGPool.fetchval("SELECT MAX(id) FROM signals")
    if result:
        last_signal_id = result

    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            query = """
            SELECT
                id,
                symbol,
                signal_type,
                strength,
                confidence,
                extra_data,
                created_at
            FROM signals
            WHERE id > $1
            ORDER BY id ASC
            """

            new_signals = await AsyncPGPool.fetch(query, last_signal_id)

            if new_signals:
                print(f"\n{'=' * 80}")
                print(f"‚ö° –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(new_signals)} –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤!")
                print(f"{'=' * 80}\n")

                for signal in new_signals:
                    last_signal_id = signal["id"]
                    signal_type = signal["signal_type"]
                    signal_count[signal_type] = signal_count.get(signal_type, 0) + 1

                    print(f"üìä –°–∏–≥–Ω–∞–ª #{signal['id']}")
                    print(f"   Symbol: {signal['symbol']}")
                    print(f"   Type: {signal_type}")
                    print(f"   Strength: {signal['strength']:.3f}")
                    print(f"   Confidence: {signal['confidence']:.1%}")
                    print(f"   Time: {signal['created_at']}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º predictions –≤ extra_data
                    if signal["extra_data"] and "predictions" in signal["extra_data"]:
                        predictions = signal["extra_data"]["predictions"]
                        if "directions_by_timeframe" in predictions:
                            print(
                                f"   Directions: {predictions['directions_by_timeframe']}"
                            )
                        if "direction_score" in predictions:
                            print(
                                f"   Direction score: {predictions['direction_score']:.3f}"
                            )

                    print("-" * 40)

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                total_signals = sum(signal_count.values())
                print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ (–≤—Å–µ–≥–æ: {total_signals}):")
                for sig_type, count in signal_count.items():
                    if total_signals > 0:
                        percentage = count / total_signals * 100
                        print(f"   {sig_type}: {count} ({percentage:.1f}%)")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
                unique_types = sum(1 for count in signal_count.values() if count > 0)
                if unique_types > 1:
                    print("\n‚úÖ –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!")
                else:
                    print("\n‚ö†Ô∏è  –ü–æ–∫–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–æ–≤")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–∫–∂–µ –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã
            ml_status = await AsyncPGPool.fetchrow(
                """
                SELECT COUNT(*) as total_predictions,
                       MAX(created_at) as last_prediction
                FROM processed_market_data
                WHERE created_at > NOW() - INTERVAL '5 minutes'
            """
            )

            if ml_status and ml_status["total_predictions"] > 0:
                print(
                    f"\nü§ñ ML –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {ml_status['total_predictions']} –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∑–∞ 5 –º–∏–Ω—É—Ç"
                )
                if ml_status["last_prediction"]:
                    time_diff = (
                        datetime.now(timezone.utc) - ml_status["last_prediction"]
                    )
                    print(
                        f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {time_diff.total_seconds():.0f} —Å–µ–∫ –Ω–∞–∑–∞–¥"
                    )

            # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(10)

        except KeyboardInterrupt:
            print("\n\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            await asyncio.sleep(10)


if __name__ == "__main__":
    asyncio.run(monitor_signals())
