#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å SL/TP –¥–ª—è SHORT –ø–æ–∑–∏—Ü–∏–π
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å—é —Ü–µ–ø–æ—á–∫—É –ø–µ—Ä–µ–¥–∞—á–∏ –∑–Ω–∞—á–µ–Ω–∏–π
"""

import asyncio

from core.logger import setup_logger
from database.connections.postgres import AsyncPGPool

logger = setup_logger("diagnose_sl_tp")


async def check_recent_signals():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã –≤ –ë–î"""

    print("\n" + "=" * 80)
    print(" –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï–î–ù–ò–• –°–ò–ì–ù–ê–õ–û–í –í –ë–î ".center(80, "="))
    print("=" * 80 + "\n")

    query = """
        SELECT
            symbol,
            signal_type,
            suggested_price,
            suggested_stop_loss,
            suggested_take_profit,
            created_at
        FROM signals
        WHERE signal_type = 'SHORT'
        ORDER BY created_at DESC
        LIMIT 5
    """

    try:
        rows = await AsyncPGPool.fetch(query)

        if rows:
            print("üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ SHORT —Å–∏–≥–Ω–∞–ª—ã:")
            print("-" * 80)

            for row in rows:
                symbol = row["symbol"]
                price = row["suggested_price"]
                sl = row["suggested_stop_loss"]
                tp = row["suggested_take_profit"]

                print(f"\n{symbol}:")
                print(f"  –¶–µ–Ω–∞: {price:.6f}")
                print(f"  SL: {sl:.6f} ({'‚úÖ –í–´–®–ï' if sl > price else '‚ùå –ù–ò–ñ–ï'} —Ü–µ–Ω—ã)")
                print(f"  TP: {tp:.6f} ({'‚úÖ –ù–ò–ñ–ï' if tp < price else '‚ùå –í–´–®–ï'} —Ü–µ–Ω—ã)")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏
                if sl <= price:
                    print("  ‚ö†Ô∏è –û–®–ò–ë–ö–ê: SL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –í–´–®–ï —Ü–µ–Ω—ã –¥–ª—è SHORT!")
                if tp >= price:
                    print("  ‚ö†Ô∏è –û–®–ò–ë–ö–ê: TP –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ù–ò–ñ–ï —Ü–µ–Ω—ã –¥–ª—è SHORT!")

        else:
            print("–ù–µ—Ç SHORT —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –ë–î")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")


async def check_recent_orders():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –≤ –ë–î"""

    print("\n" + "=" * 80)
    print(" –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï–î–ù–ò–• –û–†–î–ï–†–û–í –í –ë–î ".center(80, "="))
    print("=" * 80 + "\n")

    query = """
        SELECT
            symbol,
            side,
            price,
            stop_loss,
            take_profit,
            status,
            created_at
        FROM orders
        WHERE side = 'SELL'
        ORDER BY created_at DESC
        LIMIT 5
    """

    try:
        rows = await AsyncPGPool.fetch(query)

        if rows:
            print("üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ SELL –æ—Ä–¥–µ—Ä–∞:")
            print("-" * 80)

            for row in rows:
                symbol = row["symbol"]
                price = row["price"] or 0
                sl = row["stop_loss"]
                tp = row["take_profit"]
                status = row["status"]

                if sl and tp and price > 0:
                    print(f"\n{symbol} [{status}]:")
                    print(f"  –¶–µ–Ω–∞: {price:.6f}")
                    print(f"  SL: {sl:.6f} ({'‚úÖ –í–´–®–ï' if sl > price else '‚ùå –ù–ò–ñ–ï'} —Ü–µ–Ω—ã)")
                    print(f"  TP: {tp:.6f} ({'‚úÖ –ù–ò–ñ–ï' if tp < price else '‚ùå –í–´–®–ï'} —Ü–µ–Ω—ã)")

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏
                    if sl <= price:
                        print("  ‚ö†Ô∏è –û–®–ò–ë–ö–ê: SL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –í–´–®–ï —Ü–µ–Ω—ã –¥–ª—è SELL!")
                    if tp >= price:
                        print("  ‚ö†Ô∏è –û–®–ò–ë–ö–ê: TP –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ù–ò–ñ–ï —Ü–µ–Ω—ã –¥–ª—è SELL!")

        else:
            print("–ù–µ—Ç SELL –æ—Ä–¥–µ—Ä–æ–≤ –≤ –ë–î")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ä–¥–µ—Ä–æ–≤: {e}")


async def analyze_error_pattern():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω –æ—à–∏–±–æ–∫"""

    print("\n" + "=" * 80)
    print(" –ê–ù–ê–õ–ò–ó –ü–ê–¢–¢–ï–†–ù–ê –û–®–ò–ë–û–ö ".center(80, "="))
    print("=" * 80 + "\n")

    print("üìã –ò–∑ –ª–æ–≥–æ–≤ –≤–∏–¥–Ω–æ:")
    print("-" * 40)
    print("1. API Bybit –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –æ—Ä–¥–µ—Ä–∞ —Å –æ—à–∏–±–∫–æ–π:")
    print("   'StopLoss should greater base_price'")
    print("")
    print("2. –í –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –æ—Ä–¥–µ—Ä–∞ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è:")
    print("   - stopLoss: 0.9918612")
    print("   - takeProfit: 0.9565776")
    print("   - base_price: ~1.0062")
    print("")
    print("3. –î–ª—è SHORT –ø–æ–∑–∏—Ü–∏–∏ (Sell):")
    print("   ‚ùå stopLoss (0.9918) < base_price (1.0062) - –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û!")
    print("   ‚úÖ –î–æ–ª–∂–Ω–æ –±—ã—Ç—å: stopLoss > base_price")
    print("")

    print("üí° –í–´–í–û–î:")
    print("-" * 40)
    print("–ó–Ω–∞—á–µ–Ω–∏—è SL –∏ TP —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –ü–†–ê–í–ò–õ–¨–ù–û –≤ ml_signal_processor,")
    print("–Ω–æ –≥–¥–µ-—Ç–æ –≤ —Ü–µ–ø–æ—á–∫–µ –ø–µ—Ä–µ–¥–∞—á–∏ –æ–Ω–∏ –ú–ï–ù–Ø–Æ–¢–°–Ø –ú–ï–°–¢–ê–ú–ò –∏–ª–∏")
    print("–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è SHORT –ø–æ–∑–∏—Ü–∏–π.")
    print("")

    print("üîç –ü–†–û–í–ï–†–ò–¢–¨:")
    print("-" * 40)
    print("1. trading/orders/order_manager.py - —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞")
    print("2. exchanges/bybit/client.py - –ø–µ—Ä–µ–¥–∞—á–∞ –≤ API")
    print("3. trading/execution/executor.py - –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞")
    print("4. –í–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ SL/TP")


async def suggest_fix():
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"""

    print("\n" + "=" * 80)
    print(" –ü–†–ï–î–õ–ê–ì–ê–ï–ú–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ".center(80, "="))
    print("=" * 80 + "\n")

    print("üîß –í–ê–†–ò–ê–ù–¢ 1: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º—É–ª—ã –≤ ml_signal_processor.py")
    print("-" * 40)
    print(
        """
# –¢–µ–∫—É—â–∏–π –∫–æ–¥ (–ü–†–ê–í–ò–õ–¨–ù–´–ô):
if signal_type == SignalType.SHORT:
    stop_loss = current_price * (1 + stop_loss_pct)  # SL –≤—ã—à–µ
    take_profit = current_price * (1 - take_profit_pct)  # TP –Ω–∏–∂–µ
"""
    )

    print("\nüîß –í–ê–†–ò–ê–ù–¢ 2: –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π")
    print("-" * 40)
    print(
        """
# –í exchanges/bybit/client.py –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:
if order_request.side == OrderSide.SELL:
    # –î–ª—è SHORT –ø–æ–∑–∏—Ü–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
    if stop_loss and stop_loss < current_price:
        logger.error(f"SHORT: SL {stop_loss} < price {current_price}")
        # –í–æ–∑–º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏
        stop_loss, take_profit = take_profit, stop_loss
"""
    )

    print("\nüîß –í–ê–†–ò–ê–ù–¢ 3: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á—É –≤ order_manager.py")
    print("-" * 40)
    print(
        """
# –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –º–µ–Ω—è—é—Ç—Å—è –º–µ—Å—Ç–∞–º–∏:
stop_loss = signal.suggested_stop_loss  # –ù–µ –ø–µ—Ä–µ–ø—É—Ç–∞–Ω–æ —Å TP?
take_profit = signal.suggested_take_profit
"""
    )


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""

    print("\n" + "=" * 80)
    print(" –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ SL/TP –î–õ–Ø SHORT –ü–û–ó–ò–¶–ò–ô ".center(80, "="))
    print("=" * 80)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—ã
    await check_recent_signals()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–¥–µ—Ä–∞
    await check_recent_orders()

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω
    await analyze_error_pattern()

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    await suggest_fix()

    print("\n" + "=" * 80)
    print(" –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ".center(80, "‚úÖ"))
    print("=" * 80 + "\n")


if __name__ == "__main__":
    asyncio.run(main())
