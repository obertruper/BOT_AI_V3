#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç ML —Å–∏—Å—Ç–µ–º—ã –≤ production –æ–∫—Ä—É–∂–µ–Ω–∏–∏
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent))

import numpy as np
import pandas as pd

from core.config.config_manager import ConfigManager
from ml.ml_manager import MLManager
from ml.ml_signal_processor import MLSignalProcessor


async def test_production_ml():
    """–¢–µ—Å—Ç ML —Å–∏—Å—Ç–µ–º—ã –≤ production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""

    print("üöÄ === –¢–ï–°–¢ PRODUCTION ML –°–ò–°–¢–ï–ú–´ ===")

    try:
        # === 1. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
        print("\n1Ô∏è‚É£ === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ===")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π config manager
        config_manager = ConfigManager()
        config = config_manager.get_config()

        # –°–æ–∑–¥–∞–µ–º ML Manager
        ml_manager = MLManager(config)
        await ml_manager.initialize()
        print("‚úÖ ML Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –°–æ–∑–¥–∞–µ–º ML Signal Processor
        ml_signal_processor = MLSignalProcessor(ml_manager, config, config_manager)
        await ml_signal_processor.initialize()
        print("‚úÖ ML Signal Processor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # === 2. –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï ===
        print("\n2Ô∏è‚É£ === –ì–ï–ù–ï–†–ê–¶–ò–Ø –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–• –î–ê–ù–ù–´–• ===")

        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–µ BTCUSDT
        dates = pd.date_range(start="2024-01-01", periods=150, freq="15min")

        # –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ Bitcoin
        base_price = 52000.0

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é –¥–∏–Ω–∞–º–∏–∫—É —Ü–µ–Ω—ã
        np.random.seed(123)  # –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏

        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–¥ + –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å + –º–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä—ã–Ω–∫–∞
        prices = [base_price]
        volumes = []

        for i in range(1, len(dates)):
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–µ–Ω–¥ (–Ω–µ–±–æ–ª—å—à–æ–π —Ä–æ—Å—Ç)
            trend = 0.0001  # 0.01% —Ä–æ—Å—Ç –∑–∞ 15 –º–∏–Ω—É—Ç

            # –î–Ω–µ–≤–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            daily_vol = 0.008  # 0.8% –¥–Ω–µ–≤–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            minute_vol = daily_vol / np.sqrt(96)  # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –Ω–∞ 15 –º–∏–Ω—É—Ç

            # –°–ª—É—á–∞–π–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
            random_change = np.random.normal(0, minute_vol)

            # –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è (–∏–Ω–µ—Ä—Ü–∏—è —Ü–µ–Ω—ã)
            if i > 1:
                prev_change = (prices[-1] - prices[-2]) / prices[-2]
                autocorr = 0.05 * prev_change  # 5% –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
            else:
                autocorr = 0

            # –ò—Ç–æ–≥–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            total_change = trend + random_change + autocorr

            # –ù–æ–≤–∞—è —Ü–µ–Ω–∞
            new_price = prices[-1] * (1 + total_change)
            prices.append(new_price)

            # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –æ–±—ä–µ–º (–∫–æ—Ä—Ä–µ–ª–∏—Ä—É–µ—Ç —Å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é)
            vol_base = 150
            vol_multiplier = (
                1 + abs(random_change) * 10
            )  # –ë–æ–ª—å—à–µ –æ–±—ä–µ–º–∞ –ø—Ä–∏ –±–æ–ª—å—à–∏—Ö –¥–≤–∏–∂–µ–Ω–∏—è—Ö
            volume = vol_base * vol_multiplier * np.random.uniform(0.5, 2.0)
            volumes.append(volume)

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –æ–±—ä–µ–º
        volumes.insert(0, 150)

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–µ OHLCV –¥–∞–Ω–Ω—ã–µ
        test_data = []
        for i, (date, close) in enumerate(zip(dates, prices)):
            # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ high/low —Å —É—á–µ—Ç–æ–º –≤–Ω—É—Ç—Ä–∏–¥–Ω–µ–≤–Ω–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            hl_spread = close * np.random.uniform(0.001, 0.005)  # 0.1-0.5% spread

            high = close + hl_spread * np.random.uniform(0.3, 1.0)
            low = close - hl_spread * np.random.uniform(0.3, 1.0)

            # Open —Ä–∞–≤–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É close
            open_price = prices[i - 1] if i > 0 else close

            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ OHLC –ª–æ–≥–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
            high = max(high, close, open_price)
            low = min(low, close, open_price)

            test_data.append(
                {
                    "datetime": date,
                    "open": open_price,
                    "high": high,
                    "low": low,
                    "close": close,
                    "volume": volumes[i],
                    "symbol": "BTCUSDT",
                }
            )

        test_df = pd.DataFrame(test_data)
        print(f"üìä –°–æ–∑–¥–∞–Ω–æ {len(test_df)} —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö OHLCV –∑–∞–ø–∏—Å–µ–π")
        print(
            f"üìà –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: ${test_df['close'].min():.2f} - ${test_df['close'].max():.2f}"
        )
        print(f"üìä –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º: {test_df['volume'].mean():.1f}")

        # === 3. –ü–†–Ø–ú–û–ô –¢–ï–°–¢ ML MANAGER ===
        print("\n3Ô∏è‚É£ === –¢–ï–°–¢ ML MANAGER ===")

        prediction = await ml_manager.predict(test_df)

        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:")
        print(f"   –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞: {prediction['signal_type']}")
        print(f"   –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {prediction['signal_strength']:.3f}")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction['confidence']:.3f}")
        print(f"   –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞: {prediction['success_probability']:.1%}")
        print(f"   Stop Loss: {prediction['stop_loss']}")
        print(f"   Take Profit: {prediction['take_profit']}")
        print(f"   –†–∏—Å–∫: {prediction['risk_level']}")

        # === 4. –¢–ï–°–¢ ML SIGNAL PROCESSOR ===
        print("\n4Ô∏è‚É£ === –¢–ï–°–¢ ML SIGNAL PROCESSOR ===")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        current_price = test_df["close"].iloc[-1]
        signal = await ml_signal_processor.process_market_data(
            symbol="BTCUSDT",
            exchange="bybit",
            ohlcv_data=test_df,
            additional_data={"current_price": current_price},
        )

        if signal:
            print("üìä –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω:")
            print(f"   –°–∏–º–≤–æ–ª: {signal.symbol}")
            print(f"   –ë–∏—Ä–∂–∞: {signal.exchange}")
            print(f"   –¢–∏–ø: {signal.signal_type}")
            print(f"   –°–∏–ª–∞: {signal.strength}")
            print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence}")
            print(f"   –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {signal.strategy_name}")
            print(f"   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {signal.suggested_price}")
            print(f"   Stop Loss: {signal.suggested_stop_loss}")
            print(f"   Take Profit: {signal.suggested_take_profit}")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if signal.indicators and "success_probability" in signal.indicators:
                print(
                    f"   –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞: {signal.indicators['success_probability']:.1%}"
                )
        else:
            print("‚ö†Ô∏è  –°–∏–≥–Ω–∞–ª –Ω–µ —Å–æ–∑–¥–∞–Ω (–Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é)")

        # === 5. –°–¢–†–ï–°–°-–¢–ï–°–¢ –†–ê–ó–ù–û–û–ë–†–ê–ó–ò–Ø ===
        print("\n5Ô∏è‚É£ === –°–¢–†–ï–°–°-–¢–ï–°–¢ –†–ê–ó–ù–û–û–ë–†–ê–ó–ò–Ø ===")

        prediction_results = []
        signal_results = []

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 10 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        for scenario in range(10):
            print(f"\nüìä –°—Ü–µ–Ω–∞—Ä–∏–π {scenario + 1}/10", end="")

            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
            np.random.seed(scenario * 42)

            # –†–∞–∑–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã
            scenario_base_price = 45000 + scenario * 2000

            # –†–∞–∑–Ω—ã–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            scenario_volatility = 0.005 + scenario * 0.002

            # –†–∞–∑–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã
            scenario_trend = -0.001 + scenario * 0.0002

            scenario_prices = [scenario_base_price]
            scenario_volumes = []

            for i in range(1, 150):
                change = scenario_trend + np.random.normal(0, scenario_volatility)
                new_price = scenario_prices[-1] * (1 + change)
                scenario_prices.append(new_price)

                volume = 100 + scenario * 20 + np.random.uniform(0, 200)
                scenario_volumes.append(volume)

            scenario_volumes.insert(0, 100 + scenario * 20)

            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            scenario_data = []
            for i, (date, close) in enumerate(zip(dates, scenario_prices)):
                hl_spread = close * 0.003
                high = close + hl_spread * np.random.uniform(0.2, 0.8)
                low = close - hl_spread * np.random.uniform(0.2, 0.8)
                open_price = scenario_prices[i - 1] if i > 0 else close

                high = max(high, close, open_price)
                low = min(low, close, open_price)

                scenario_data.append(
                    {
                        "datetime": date,
                        "open": open_price,
                        "high": high,
                        "low": low,
                        "close": close,
                        "volume": scenario_volumes[i],
                        "symbol": "BTCUSDT",
                    }
                )

            scenario_df = pd.DataFrame(scenario_data)

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            try:
                pred = await ml_manager.predict(scenario_df)
                prediction_results.append(
                    {
                        "scenario": scenario,
                        "signal_type": pred["signal_type"],
                        "signal_strength": pred["signal_strength"],
                        "confidence": pred["confidence"],
                        "direction_score": pred["predictions"]["direction_score"],
                    }
                )

                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
                current_price = scenario_df["close"].iloc[-1]
                sig = await ml_signal_processor.process_market_data(
                    symbol="BTCUSDT",
                    exchange="bybit",
                    ohlcv_data=scenario_df,
                    additional_data={"current_price": current_price},
                )

                if sig:
                    signal_results.append(
                        {
                            "scenario": scenario,
                            "signal_type": sig.signal_type.value,
                            "strength": sig.strength,
                            "confidence": sig.confidence,
                        }
                    )

                print(f" ‚Üí {pred['signal_type']}")

            except Exception as e:
                print(f" ‚Üí –û—à–∏–±–∫–∞: {e}")

        # === 6. –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===
        print("\n6Ô∏è‚É£ === –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===")

        if prediction_results:
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            signal_types = [r["signal_type"] for r in prediction_results]
            unique_signals = set(signal_types)

            print("üìä –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è ML Manager:")
            print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(prediction_results)}")
            print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤: {len(unique_signals)}")
            print(f"   –¢–∏–ø—ã: {unique_signals}")

            from collections import Counter

            type_counts = Counter(signal_types)
            for sig_type, count in type_counts.items():
                percentage = (count / len(prediction_results)) * 100
                print(f"   {sig_type}: {count} ({percentage:.1f}%)")

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
            directions = [r["direction_score"] for r in prediction_results]
            if directions:
                directions_array = np.array(directions)
                print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π:")
                print(f"   Min: {directions_array.min():.3f}")
                print(f"   Max: {directions_array.max():.3f}")
                print(f"   Mean: {directions_array.mean():.3f}")
                print(f"   Std: {directions_array.std():.3f}")

        if signal_results:
            # –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            trading_signal_types = [r["signal_type"] for r in signal_results]
            unique_trading_signals = set(trading_signal_types)

            print("\nüìä –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã:")
            print(f"   –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {len(signal_results)}")
            print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤: {len(unique_trading_signals)}")
            print(f"   –¢–∏–ø—ã: {unique_trading_signals}")

        # === 7. –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï ===
        print("\n7Ô∏è‚É£ === –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï ===")

        if len(unique_signals) >= 2:
            print("‚úÖ ML –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
            print("   ‚úì –ú–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
            print("   ‚úì –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
            print("   ‚úì –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã —Å–æ–∑–¥–∞—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
            print("   ‚úì –ü—Ä–æ–±–ª–µ–º–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π —Ä–µ—à–µ–Ω–∞")
        else:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–´ –í–°–ï –ï–©–ï –ï–°–¢–¨!")
            print("   –°–∏—Å—Ç–µ–º–∞ –¥–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        if len(prediction_results) >= 8 and len(signal_results) >= 5:
            print("   ‚úì –°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞ –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        else:
            print("   ‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞")

        print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("   1. –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫")
        print("   2. –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–æ—Ä–æ–≥–∏ confidence –∏ signal_strength")
        print("   3. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(test_production_ml())
