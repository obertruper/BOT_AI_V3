#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –∏—Ö —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
"""


# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
import sys
from pathlib import Path

import numpy as np
import yaml

sys.path.append(str(Path(__file__).parent))

from core.logger import setup_logger
from ml.logic.signal_quality_analyzer import SignalQualityAnalyzer

logger = setup_logger("demo_strategy_switching")


def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
    config_path = Path("config/ml/ml_config.yaml")

    if config_path.exists():
        with open(config_path, encoding="utf-8") as f:
            return yaml.safe_load(f)
    else:
        logger.error("‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None


def create_sample_signal():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —Å —É–º–µ—Ä–µ–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º"""
    return {
        "name": "Real-world example",
        "directions": np.array([0, 0, 1, 2]),  # LONG, LONG, SHORT, NEUTRAL
        "direction_probs": [
            np.array([0.65, 0.25, 0.10]),  # 15m: —Ö–æ—Ä–æ—à–∏–π LONG
            np.array([0.70, 0.20, 0.10]),  # 1h: —Ö–æ—Ä–æ—à–∏–π LONG
            np.array([0.30, 0.60, 0.10]),  # 4h: —Å—Ä–µ–¥–Ω–∏–π SHORT
            np.array([0.35, 0.30, 0.35]),  # 12h: –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å
        ],
        "future_returns": np.array([0.008, 0.006, -0.004, 0.002]),
        "risk_metrics": np.array([0.3, 0.4, 0.5, 0.35]),
    }


def analyze_with_strategy(analyzer: SignalQualityAnalyzer, signal: dict, strategy: str):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª —Å –∑–∞–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π"""
    logger.info(f"\n{'='*50}")
    logger.info(f"üîç –ê–ù–ê–õ–ò–ó –° –°–¢–†–ê–¢–ï–ì–ò–ï–ô: {strategy.upper()}")
    logger.info(f"{'='*50}")

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    analyzer.switch_strategy(strategy)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º weighted_direction
    weights = np.array([0.4, 0.3, 0.2, 0.1])
    weighted_direction = np.sum(signal["directions"] * weights)

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
    result = analyzer.analyze_signal_quality(
        directions=signal["directions"],
        direction_probs=signal["direction_probs"],
        future_returns=signal["future_returns"],
        risk_metrics=signal["risk_metrics"],
        weighted_direction=weighted_direction,
    )

    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if result.passed:
        logger.info(f"‚úÖ –°–ò–ì–ù–ê–õ –ü–†–ò–ù–Ø–¢: {result.signal_type}")
        metrics = result.quality_metrics
        logger.info(f"üìä –ö–∞—á–µ—Å—Ç–≤–æ: {metrics.quality_score:.3f}")
        logger.info(f"üéØ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å: {metrics.agreement_score:.3f}")
        logger.info(f"üé≤ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {metrics.confidence_score:.3f}")
        logger.info(f"üìà –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {metrics.return_score:.3f}")
        logger.info(f"‚ö†Ô∏è –†–∏—Å–∫: {metrics.risk_level}")
    else:
        logger.info("‚ùå –°–ò–ì–ù–ê–õ –û–¢–ö–õ–û–ù–ï–ù")
        logger.info("üö´ –ü—Ä–∏—á–∏–Ω—ã:")
        for reason in result.rejection_reasons:
            logger.info(f"   - {reason}")

    return result


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    logger.info("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()
    if not config:
        return

    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = SignalQualityAnalyzer(config)

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä —Å–∏–≥–Ω–∞–ª–∞
    signal = create_sample_signal()

    logger.info("\nüìä –ò–°–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï –°–ò–ì–ù–ê–õ–ê:")
    logger.info(f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –¢–§: {signal['directions']} [0=LONG, 1=SHORT, 2=NEUTRAL]")
    logger.info(f"   –î–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏: {signal['future_returns']}")
    logger.info(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏: {[np.max(p) for p in signal['direction_probs']]}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    strategies = ["conservative", "moderate", "aggressive"]
    results = {}

    for strategy in strategies:
        result = analyze_with_strategy(analyzer, signal, strategy)
        results[strategy] = result

    # –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
    logger.info(f"\n{'='*60}")
    logger.info("üìã –°–í–û–î–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    logger.info(f"{'='*60}")

    logger.info(f"{'–°—Ç—Ä–∞—Ç–µ–≥–∏—è':<15} {'–†–µ–∑—É–ª—å—Ç–∞—Ç':<15} {'–ö–∞—á–µ—Å—Ç–≤–æ':<10} {'–ü—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è'}")
    logger.info("-" * 80)

    for strategy, result in results.items():
        if result.passed:
            status = f"‚úÖ {result.signal_type}"
            quality = f"{result.quality_metrics.quality_score:.3f}"
            reasons = "–ù/–î"
        else:
            status = "‚ùå –û–¢–ö–õ–û–ù–ï–ù"
            quality = "0.000"
            reasons = "; ".join(result.rejection_reasons[:2])  # –ü–µ—Ä–≤—ã–µ 2 –ø—Ä–∏—á–∏–Ω—ã
            if len(result.rejection_reasons) > 2:
                reasons += "..."

        logger.info(f"{strategy:<15} {status:<15} {quality:<10} {reasons}")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    logger.info(f"\n{'='*40}")
    logger.info("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê")
    logger.info(f"{'='*40}")

    stats = analyzer.get_strategy_statistics()
    for key, value in stats.items():
        if key != "top_rejection_reasons":
            logger.info(f"{key}: {value}")

    if stats.get("top_rejection_reasons"):
        logger.info("\nüö´ –¢–æ–ø –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:")
        for reason, count in stats["top_rejection_reasons"].items():
            logger.info(f"   - {reason}: {count}")

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    logger.info(f"\n{'='*50}")
    logger.info("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ")
    logger.info(f"{'='*50}")

    passed_strategies = [s for s, r in results.items() if r.passed]

    if len(passed_strategies) == 3:
        logger.info("‚úÖ –°–∏–≥–Ω–∞–ª –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ - –ø–æ–¥—Ö–æ–¥—è—Ç –≤—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        logger.info("üí∞ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ conservative –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏")
    elif len(passed_strategies) == 2:
        logger.info(f"‚ö° –°–∏–≥–Ω–∞–ª —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ - –ø–æ–¥—Ö–æ–¥—è—Ç: {', '.join(passed_strategies)}")
        logger.info("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: Moderate —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞")
    elif len(passed_strategies) == 1:
        logger.info(f"‚ö†Ô∏è –°–∏–≥–Ω–∞–ª –Ω–∏–∑–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ - –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ: {passed_strategies[0]}")
        logger.info("üö® –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é")
    else:
        logger.info("‚ùå –°–∏–≥–Ω–∞–ª –æ—á–µ–Ω—å –Ω–∏–∑–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ - –æ—Ç–∫–ª–æ–Ω–µ–Ω –≤—Å–µ–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏")
        logger.info("üõë –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ù–ï —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –ø–æ —ç—Ç–æ–º—É —Å–∏–≥–Ω–∞–ª—É")

    logger.info("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


if __name__ == "__main__":
    main()
