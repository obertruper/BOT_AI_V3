#!/usr/bin/env python3
"""–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç API Bybit"""

import asyncio
import os
import sys
from pathlib import Path

sys.path.append(str(Path(__file__).parent))

from dotenv import load_dotenv

from core.logger import setup_logger
from exchanges.bybit.client import BybitClient

logger = setup_logger("test_direct")


async def test_direct_order():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ API"""
    load_dotenv()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    client = BybitClient(
        api_key=os.getenv("BYBIT_API_KEY"),
        api_secret=os.getenv("BYBIT_API_SECRET"),
        sandbox=False,
    )

    try:
        await client.connect()
        logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Bybit")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        logger.info(f"hedge_mode –≤ –∫–æ–Ω—Ñ–∏–≥–µ: {client.hedge_mode}")
        logger.info(f"trading_category: {client.trading_category}")

        # –ù–∞–ø—Ä—è–º—É—é –≤—ã–∑—ã–≤–∞–µ–º API
        params = {
            "category": "linear",
            "symbol": "ETHUSDT",
            "side": "Buy",
            "orderType": "Market",
            "qty": "0.01",
            "timeInForce": "IOC",
            # –ù–µ —É–∫–∞–∑—ã–≤–∞–µ–º positionIdx –≤–æ–æ–±—â–µ
        }

        logger.info(f"üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")

        try:
            response = await client._make_request(
                "POST", "/v5/order/create", params, auth=True
            )
            logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ! –û—Ç–≤–µ—Ç: {response}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

            # –ü—Ä–æ–±—É–µ–º —Å positionIdx=0
            params["positionIdx"] = 0
            logger.info(f"üìù –ü—Ä–æ–±—É–µ–º —Å positionIdx=0: {params}")

            try:
                response = await client._make_request(
                    "POST", "/v5/order/create", params, auth=True
                )
                logger.info(
                    f"‚úÖ –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å positionIdx=0! –û—Ç–≤–µ—Ç: {response}"
                )
            except Exception as e2:
                logger.error(f"‚ùå –°–Ω–æ–≤–∞ –æ—à–∏–±–∫–∞: {e2}")

                # –ü—Ä–æ–±—É–µ–º —Å positionIdx=1
                params["positionIdx"] = 1
                logger.info(f"üìù –ü—Ä–æ–±—É–µ–º —Å positionIdx=1: {params}")

                try:
                    response = await client._make_request(
                        "POST", "/v5/order/create", params, auth=True
                    )
                    logger.info(
                        f"‚úÖ –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å positionIdx=1! –û—Ç–≤–µ—Ç: {response}"
                    )
                except Exception as e3:
                    logger.error(f"‚ùå –ò —ç—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e3}")

                    # –ü—Ä–æ–±—É–µ–º —Å positionIdx=2
                    params["positionIdx"] = 2
                    logger.info(f"üìù –ü—Ä–æ–±—É–µ–º —Å positionIdx=2: {params}")

                    try:
                        response = await client._make_request(
                            "POST", "/v5/order/create", params, auth=True
                        )
                        logger.info(
                            f"‚úÖ –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å positionIdx=2! –û—Ç–≤–µ—Ç: {response}"
                        )
                    except Exception as e4:
                        logger.error(f"‚ùå –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e4}")

    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback

        logger.error(traceback.format_exc())

    finally:
        await client.disconnect()
        logger.info("üîå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç Bybit")


if __name__ == "__main__":
    asyncio.run(test_direct_order())
