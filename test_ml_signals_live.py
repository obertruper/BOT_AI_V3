#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ML —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
"""

import asyncio
import sys

sys.path.append("/mnt/SSD/PYCHARMPRODJECT/BOT_AI_V3")

from core.config.config_manager import ConfigManager
from core.logger import setup_logger
from ml.ml_manager import MLManager
from ml.ml_signal_processor import MLSignalProcessor

logger = setup_logger(__name__)


async def test_ml_signals():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤."""

    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML —Å–∏–≥–Ω–∞–ª–æ–≤...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    config_manager = ConfigManager()
    config = config_manager.get_config()

    # ML Manager
    ml_manager = MLManager(config)
    await ml_manager.initialize()
    print("‚úÖ ML Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    # ML Signal Processor
    signal_processor = MLSignalProcessor(ml_manager, config, config_manager)
    await signal_processor.initialize()
    print("‚úÖ ML Signal Processor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    test_symbols = ["BTCUSDT", "ETHUSDT", "SOLUSDT"]

    print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤:")
    for symbol in test_symbols:
        print(f"\n  –û–±—Ä–∞–±–æ—Ç–∫–∞ {symbol}...")
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
            signal = await signal_processor.process_realtime_signal(symbol, "bybit")

            if signal:
                print(f"    ‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω {signal.signal_type.value} —Å–∏–≥–Ω–∞–ª")
                print(f"    üìà –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.2%}")
                print(f"    üí™ –°–∏–ª–∞: {signal.strength:.2f}")
                print(f"    üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {signal.suggested_price}")
                print(f"    üõë Stop Loss: {signal.suggested_stop_loss}")
                print(f"    üéØ Take Profit: {signal.suggested_take_profit}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
                if config.get("ml", {}).get("save_signals", True):
                    saved = await signal_processor.save_signal(signal)
                    if saved:
                        print("    üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
                    else:
                        print("    ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î")
            else:
                print("    ‚ö†Ô∏è –°–∏–≥–Ω–∞–ª –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)")

        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞: {e}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    metrics = await signal_processor.get_metrics()
    print("\nüìä –ú–µ—Ç—Ä–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    print(f"  –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {metrics['total_processed']}")
    print(f"  –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {metrics['success_rate']:.1%}")
    print(f"  –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {metrics['save_rate']:.1%}")
    print(f"  –û—à–∏–±–æ–∫: {metrics['error_rate']:.1%}")


if __name__ == "__main__":
    asyncio.run(test_ml_signals())
