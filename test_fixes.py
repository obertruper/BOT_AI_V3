#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:
1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è SHORT —Å–∏–≥–Ω–∞–ª–æ–≤
2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –¥–ª—è XRPUSDT 
3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤
5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ SL/TP –¥–ª—è SHORT –ø–æ–∑–∏—Ü–∏–π
"""

import asyncio
import sys
from decimal import Decimal
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.insert(0, str(Path(__file__).parent))

from core.logger import setup_logger
from trading.instrument_manager import InstrumentManager
from ml.logic.signal_quality_analyzer import SignalQualityAnalyzer

logger = setup_logger("test_fixes")


def test_instrument_rounding():
    """–¢–µ—Å—Ç –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –¥–ª—è XRPUSDT"""
    logger.info("=" * 60)
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è XRPUSDT")
    logger.info("=" * 60)
    
    manager = InstrumentManager()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è XRPUSDT
    test_values = [
        3.230,   # –î–æ–ª–∂–Ω–æ –æ–∫—Ä—É–≥–ª–∏—Ç—å—Å—è –¥–æ 3.2
        3.256,   # –î–æ–ª–∂–Ω–æ –æ–∫—Ä—É–≥–ª–∏—Ç—å—Å—è –¥–æ 3.2
        3.289,   # –î–æ–ª–∂–Ω–æ –æ–∫—Ä—É–≥–ª–∏—Ç—å—Å—è –¥–æ 3.2
        3.15,    # –î–æ–ª–∂–Ω–æ –æ–∫—Ä—É–≥–ª–∏—Ç—å—Å—è –¥–æ 3.1
        0.09,    # –î–æ–ª–∂–Ω–æ –æ–∫—Ä—É–≥–ª–∏—Ç—å—Å—è –¥–æ –º–∏–Ω–∏–º—É–º–∞ 0.1
        10.567,  # –î–æ–ª–∂–Ω–æ –æ–∫—Ä—É–≥–ª–∏—Ç—å—Å—è –¥–æ 10.5
    ]
    
    for value in test_values:
        rounded = manager.round_qty("XRPUSDT", value, round_up=False)
        formatted = manager.format_qty("XRPUSDT", rounded)
        logger.info(f"  {value} -> {rounded} -> '{formatted}'")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
        if value == 3.230:
            assert formatted == "3.2", f"–û—à–∏–±–∫–∞: {value} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å '3.2', –∞ –Ω–µ '{formatted}'"
            logger.info(f"  ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ: 3.230 -> '3.2'")
    
    logger.info("‚úÖ –¢–µ—Å—Ç –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è XRPUSDT –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    return True


def test_signal_determination():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è SHORT —Å–∏–≥–Ω–∞–ª–æ–≤"""
    logger.info("=" * 60)
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è SHORT —Å–∏–≥–Ω–∞–ª–æ–≤")
    logger.info("=" * 60)
    
    analyzer = SignalQualityAnalyzer()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏: timeframe -> (direction, confidence)
    test_cases = [
        {
            "name": "–Ø–≤–Ω—ã–π SHORT (3 –∏–∑ 4)",
            "predictions": {
                "5m": {"direction": -0.8, "confidence": 0.7},
                "15m": {"direction": -0.9, "confidence": 0.8},
                "1h": {"direction": -0.85, "confidence": 0.75},
                "12h": {"direction": 0.3, "confidence": 0.4},  # –û–¥–∏–Ω LONG
            },
            "expected": "SHORT"
        },
        {
            "name": "–Ø–≤–Ω—ã–π LONG (3 –∏–∑ 4)",
            "predictions": {
                "5m": {"direction": 0.85, "confidence": 0.8},
                "15m": {"direction": 0.9, "confidence": 0.85},
                "1h": {"direction": 0.8, "confidence": 0.7},
                "12h": {"direction": -0.3, "confidence": 0.4},  # –û–¥–∏–Ω SHORT
            },
            "expected": "LONG"
        },
        {
            "name": "–†–∞–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å (2 LONG, 2 SHORT)",
            "predictions": {
                "5m": {"direction": 0.8, "confidence": 0.7},
                "15m": {"direction": 0.85, "confidence": 0.75},
                "1h": {"direction": -0.8, "confidence": 0.7},
                "12h": {"direction": -0.85, "confidence": 0.75},
            },
            "expected": "NEUTRAL"
        },
        {
            "name": "–°–ª–∞–±—ã–µ —Å–∏–≥–Ω–∞–ª—ã",
            "predictions": {
                "5m": {"direction": 0.2, "confidence": 0.3},
                "15m": {"direction": -0.1, "confidence": 0.2},
                "1h": {"direction": 0.15, "confidence": 0.25},
                "12h": {"direction": -0.2, "confidence": 0.3},
            },
            "expected": "NEUTRAL"
        }
    ]
    
    for test_case in test_cases:
        logger.info(f"\n  –¢–µ—Å—Ç: {test_case['name']}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        result = analyzer.analyze_predictions(
            symbol="BTCUSDT",
            predictions_by_timeframe=test_case["predictions"]
        )
        
        signal_type = result.get("signal_type", "UNKNOWN")
        logger.info(f"    –†–µ–∑—É–ª—å—Ç–∞—Ç: {signal_type}")
        logger.info(f"    –û–∂–∏–¥–∞–ª–æ—Å—å: {test_case['expected']}")
        
        if signal_type == test_case["expected"]:
            logger.info(f"    ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!")
        else:
            logger.error(f"    ‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω! {signal_type} != {test_case['expected']}")
            return False
    
    logger.info("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    return True


def test_sl_tp_logic():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ SL/TP –¥–ª—è SHORT –ø–æ–∑–∏—Ü–∏–π"""
    logger.info("=" * 60)
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ SL/TP –¥–ª—è SHORT –ø–æ–∑–∏—Ü–∏–π")
    logger.info("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    current_price = 100.0
    stop_loss_pct = 0.02  # 2%
    take_profit_pct = 0.03  # 3%
    
    # –î–ª—è LONG –ø–æ–∑–∏—Ü–∏–∏
    long_sl = current_price * (1 - stop_loss_pct)  # 98
    long_tp = current_price * (1 + take_profit_pct)  # 103
    
    logger.info(f"  LONG –ø–æ–∑–∏—Ü–∏—è (—Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞: {current_price}):")
    logger.info(f"    SL: {long_sl:.2f} (–Ω–∏–∂–µ –Ω–∞ {stop_loss_pct:.1%})")
    logger.info(f"    TP: {long_tp:.2f} (–≤—ã—à–µ –Ω–∞ {take_profit_pct:.1%})")
    
    # –î–ª—è SHORT –ø–æ–∑–∏—Ü–∏–∏
    short_sl = current_price * (1 + stop_loss_pct)  # 102
    short_tp = current_price * (1 - take_profit_pct)  # 97
    
    logger.info(f"\n  SHORT –ø–æ–∑–∏—Ü–∏—è (—Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞: {current_price}):")
    logger.info(f"    SL: {short_sl:.2f} (–≤—ã—à–µ –Ω–∞ {stop_loss_pct:.1%})")
    logger.info(f"    TP: {short_tp:.2f} (–Ω–∏–∂–µ –Ω–∞ {take_profit_pct:.1%})")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
    assert long_sl < current_price, "LONG SL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∏–∂–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞"
    assert long_tp > current_price, "LONG TP –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞"
    assert short_sl > current_price, "SHORT SL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞"
    assert short_tp < current_price, "SHORT TP –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∏–∂–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞"
    
    logger.info("\n‚úÖ –õ–æ–≥–∏–∫–∞ SL/TP –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!")
    return True


async def test_position_closing():
    """–¢–µ—Å—Ç –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
    logger.info("=" * 60)
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
    logger.info("=" * 60)
    
    logger.info("  –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ï—Å—Ç—å LONG –ø–æ–∑–∏—Ü–∏—è, –ø—Ä–∏—Ö–æ–¥–∏—Ç SHORT —Å–∏–≥–Ω–∞–ª")
    logger.info("    - –î–æ–ª–∂–Ω–∞ –∑–∞–∫—Ä—ã—Ç—å—Å—è LONG –ø–æ–∑–∏—Ü–∏—è")
    logger.info("    - –ó–∞—Ç–µ–º –æ—Ç–∫—Ä—ã—Ç—å—Å—è SHORT –ø–æ–∑–∏—Ü–∏—è")
    
    logger.info("\n  –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ï—Å—Ç—å SHORT –ø–æ–∑–∏—Ü–∏—è, –ø—Ä–∏—Ö–æ–¥–∏—Ç LONG —Å–∏–≥–Ω–∞–ª")
    logger.info("    - –î–æ–ª–∂–Ω–∞ –∑–∞–∫—Ä—ã—Ç—å—Å—è SHORT –ø–æ–∑–∏—Ü–∏—è")
    logger.info("    - –ó–∞—Ç–µ–º –æ—Ç–∫—Ä—ã—Ç—å—Å—è LONG –ø–æ–∑–∏—Ü–∏—è")
    
    logger.info("\n  ‚úÖ –õ–æ–≥–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ trading/engine.py")
    return True


def test_order_deduplication():
    """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤"""
    logger.info("=" * 60)
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è")
    logger.info("=" * 60)
    
    logger.info("  –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã –∑–∞—â–∏—Ç—ã:")
    logger.info("    1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π –≤ —Ç–æ–º –∂–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏")
    logger.info("    2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
    logger.info("    3. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏ (5 –º–∏–Ω—É—Ç)")
    logger.info("    4. –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ ml_signal_processor")
    
    logger.info("\n  ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
    return True


async def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
    logger.info("=" * 60)
    
    results = []
    
    # –¢–µ—Å—Ç 1: –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ
    results.append(("–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ XRPUSDT", test_instrument_rounding()))
    
    # –¢–µ—Å—Ç 2: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
    results.append(("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ SHORT —Å–∏–≥–Ω–∞–ª–æ–≤", test_signal_determination()))
    
    # –¢–µ—Å—Ç 3: SL/TP –ª–æ–≥–∏–∫–∞
    results.append(("–õ–æ–≥–∏–∫–∞ SL/TP", test_sl_tp_logic()))
    
    # –¢–µ—Å—Ç 4: –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π
    results.append(("–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π", await test_position_closing()))
    
    # –¢–µ—Å—Ç 5: –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    results.append(("–ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è", test_order_deduplication()))
    
    # –ò—Ç–æ–≥–∏
    logger.info("\n" + "=" * 60)
    logger.info("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    logger.info("=" * 60)
    
    all_passed = True
    for name, passed in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if passed else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        logger.info(f"  {name}: {status}")
        if not passed:
            all_passed = False
    
    if all_passed:
        logger.info("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        logger.info("\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        logger.info("  1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        logger.info("  2. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç SHORT —Å–∏–≥–Ω–∞–ª–æ–≤")
        logger.info("  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –¥–ª—è XRPUSDT")
        logger.info("  4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã—Ö")
    else:
        logger.error("\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´!")
        logger.error("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
    
    return all_passed


if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)