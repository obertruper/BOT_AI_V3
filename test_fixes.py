#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –æ—à–∏–±–∫–∏ sqrt –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
"""

import asyncio
import traceback

import numpy as np
import pandas as pd

from core.logger import setup_logger
from ml.config.features_240 import get_required_features_list

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
from ml.logic.feature_engineering_v2 import FeatureEngineer

logger = setup_logger(__name__)


async def test_fixes():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""

    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—à–∏–±–æ–∫ sqrt –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")

    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å datetime –≤ –∏–Ω–¥–µ–∫—Å–µ
        dates = pd.date_range(start="2024-01-01", periods=300, freq="15min")

        np.random.seed(42)
        close_prices = 50000 + np.cumsum(np.random.randn(300) * 100)

        df = pd.DataFrame(
            {
                "open": close_prices * (1 + np.random.randn(300) * 0.001),
                "high": close_prices * (1 + np.abs(np.random.randn(300)) * 0.002),
                "low": close_prices * (1 - np.abs(np.random.randn(300)) * 0.002),
                "close": close_prices,
                "volume": np.random.rand(300) * 1000000,
                "turnover": np.random.rand(300) * 50000000,
                "symbol": "BTCUSDT",
            },
            index=dates,
        )

        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π DataFrame: {df.shape}")
        print(f"üìÖ Index type: {type(df.index)}")
        print(f"üìã Columns: {list(df.columns)}")

        # –°–æ–∑–¥–∞–µ–º FeatureEngineer
        config = {"inference_mode": True, "disable_progress": False}

        feature_engineer = FeatureEngineer(config, inference_mode=True)
        print("‚úÖ FeatureEngineer —Å–æ–∑–¥–∞–Ω")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º create_features...")

        features_result = feature_engineer.create_features(df)

        print(f"‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã: {type(features_result)}")

        if isinstance(features_result, pd.DataFrame):
            print(f"üìä Shape: {features_result.shape}")
            print(f"üìä Columns: {len(features_result.columns)}")
            print(f"üìä NaN count: {features_result.isna().sum().sum()}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            required_features = get_required_features_list()
            present_features = list(features_result.columns)

            missing_features = [f for f in required_features if f not in present_features]

            print(f"üìã –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(required_features)}")
            print(f"üìã –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(present_features)}")
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(missing_features)}")

            if missing_features:
                print(f"üîç –ü–µ—Ä–≤—ã–µ 10 –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö: {missing_features[:10]}")
            else:
                print("üéâ –í—Å–µ —Ç—Ä–µ–±—É–µ–º—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç!")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º volatility_2, volatility_3
            vol_features = [f for f in present_features if "volatility_" in f]
            print(f"üåä Volatility –ø—Ä–∏–∑–Ω–∞–∫–∏: {len(vol_features)}")

            if "volatility_2" in present_features and "volatility_3" in present_features:
                print("‚úÖ volatility_2 –∏ volatility_3 –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç!")
            else:
                print("‚ùå volatility_2 –∏–ª–∏ volatility_3 –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

        elif isinstance(features_result, np.ndarray):
            print(f"üìä Array shape: {features_result.shape}")
            print(f"üìä NaN count: {np.isnan(features_result).sum()}")

    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï: {e}")
        print("üìú –ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:")
        traceback.print_exc()

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        if "sqrt" in str(e).lower():
            print("\nüéØ –≠—Ç–æ –æ—à–∏–±–∫–∞ sqrt! –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–∞–ª—å–Ω–µ–π—à–∏–π –∞–Ω–∞–ª–∏–∑...")
        elif "datetime" in str(e).lower():
            print("\nüìÖ –≠—Ç–æ –æ—à–∏–±–∫–∞ datetime! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö...")

    print("\n‚úÖ –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω")


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")
    asyncio.run(test_fixes())
