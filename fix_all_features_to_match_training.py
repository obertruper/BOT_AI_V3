#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –í–°–ï 240 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, —á—Ç–æ–±—ã –æ–Ω–∏ –¢–û–ß–ù–û —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ –æ–±—É—á–∞—é—â–µ–º—É —Ñ–∞–π–ª—É.
–û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:
1. Returns - –∏—Å–ø–æ–ª—å–∑—É–µ–º LOG (—É–∂–µ –µ—Å—Ç—å)
2. BTC correlation - –û–î–ù–ê —Å window=96, min_periods=50 (—É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
3. ETH correlation - –∑–∞–≥–ª—É—à–∫–∏ 0.5 (—É–∂–µ –µ—Å—Ç—å)
4. RSI - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –û–î–ò–ù, –Ω–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ
5. MACD - –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—ã
6. BTC Beta - rolling(100)
"""


import numpy as np
import pandas as pd


def get_training_exact_features():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¢–û–ß–ù–´–ô —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –æ–±—É—á–∞—é—â–µ–≥–æ —Ñ–∞–π–ª–∞"""

    # –ò–∑ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—É—á–∞—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ (–∞–∞–∞.py) –Ω–∞–π–¥–µ–Ω–æ 208 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    training_features = {
        # –ë–∞–∑–æ–≤—ã–µ
        "basic": [
            "returns",
            "high_low_ratio",
            "close_open_ratio",
            "close_position",
            "volume_ratio",
            "turnover_ratio",
            "vwap",
            "close_vwap_ratio",
            "vwap_extreme_deviation",
        ],
        # Returns —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏ (LOG returns!)
        "returns_periods": ["returns_5", "returns_10", "returns_20"],
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–∫–∞–∫ –≤ –æ–±—É—á–µ–Ω–∏–∏)
        "technical": {
            "sma": [20, 50],  # –¢–û–õ–¨–ö–û —ç—Ç–∏ –ø–µ—Ä–∏–æ–¥—ã –≤ –æ–±—É—á–µ–Ω–∏–∏!
            "ema": [20, 50],  # –¢–û–õ–¨–ö–û —ç—Ç–∏ –ø–µ—Ä–∏–æ–¥—ã –≤ –æ–±—É—á–µ–Ω–∏–∏!
            "rsi": 14,  # –û–î–ò–ù RSI —Å –ø–µ—Ä–∏–æ–¥–æ–º 14!
            "macd": {
                "slow": 26,
                "fast": 12,
                "signal": 9,
                "normalized": True,  # –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—ã!
            },
            "bollinger": {"period": 20, "std_dev": 2},
        },
        # Cross-asset (–ö–†–ò–¢–ò–ß–ù–û!)
        "cross_asset": {
            "btc_correlation": {"window": 96, "min_periods": 50},
            "btc_beta": {"window": 100},  # rolling(100).cov / rolling(100).var
            "relative_strength_btc": True,
            "rs_btc_ma": 20,
            "idio_vol": 50,  # –∏–¥–∏–æ—Å–∏–Ω–∫—Ä–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        },
        # Volatility
        "volatility": {
            "window": 96,  # –û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            "returns_based": True,  # –ù–∞ –æ—Å–Ω–æ–≤–µ log returns
        },
        # Microstructure
        "microstructure": [
            "spread",
            "bid_ask_imbalance",
            "order_flow_imbalance",
            "kyle_lambda",
            "amihud_illiquidity",
            "roll_measure",
            "hasbrouck_measure",
            "microprice",
            "effective_spread",
            "realized_spread",
            "price_impact",
            "temporary_impact",
            "permanent_impact",
            "ofi",
            "ofi_ma",
            "ofi_persistence",
            "directed_volume",
            "net_order_flow",
            "order_flow_toxicity",
        ],
    }

    return training_features


def create_feature_mapping():
    """–°–æ–∑–¥–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ –∏ –æ–±—É—á–∞—é—â–∏–º–∏"""

    mapping = {
        # RSI - –≤ –æ–±—É—á–µ–Ω–∏–∏ –û–î–ò–ù, —É –Ω–∞—Å –¢–†–ò
        "rsi_5": "REMOVE",  # –£–¥–∞–ª–∏—Ç—å
        "rsi_14": "rsi",  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≤ rsi
        "rsi_21": "REMOVE",  # –£–¥–∞–ª–∏—Ç—å
        # SMA - –≤ –æ–±—É—á–µ–Ω–∏–∏ —Ç–æ–ª—å–∫–æ 20 –∏ 50
        "sma_5": "REMOVE",
        "sma_10": "REMOVE",
        "sma_20": "sma_20",  # –û—Å—Ç–∞–≤–∏—Ç—å
        "sma_50": "sma_50",  # –û—Å—Ç–∞–≤–∏—Ç—å
        "sma_100": "REMOVE",
        "sma_200": "REMOVE",
        # EMA - –≤ –æ–±—É—á–µ–Ω–∏–∏ —Ç–æ–ª—å–∫–æ 20 –∏ 50
        "ema_5": "REMOVE",
        "ema_10": "REMOVE",
        "ema_20": "ema_20",  # –û—Å—Ç–∞–≤–∏—Ç—å
        "ema_50": "ema_50",  # –û—Å—Ç–∞–≤–∏—Ç—å
        "ema_100": "REMOVE",
        "ema_200": "REMOVE",
        # MACD - –Ω—É–∂–Ω–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å
        "macd_12_26": "macd",  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å
        "macd_signal_12_26": "macd_signal",  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å
        "macd_hist_12_26": "macd_diff",  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å
        # BTC features
        "btc_correlation_15m": "btc_correlation",  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é
        "btc_correlation_1h": "DUPLICATE",  # –î—É–±–ª–∏–∫–∞—Ç –æ—Å–Ω–æ–≤–Ω–æ–π
        "btc_correlation_4h": "DUPLICATE",  # –î—É–±–ª–∏–∫–∞—Ç –æ—Å–Ω–æ–≤–Ω–æ–π
        # ETH features - –ù–ï –ë–´–õ–û –≤ –æ–±—É—á–µ–Ω–∏–∏
        "eth_correlation_15m": "PLACEHOLDER_0.5",
        "eth_correlation_1h": "PLACEHOLDER_0.5",
        "eth_correlation_4h": "PLACEHOLDER_0.5",
        # Market beta
        "market_beta_1h": "btc_beta",  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å btc_beta
        "market_beta_4h": "btc_beta_duplicate",  # –î—É–±–ª–∏–∫–∞—Ç
    }

    return mapping


def calculate_exact_features(df: pd.DataFrame) -> pd.DataFrame:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –¢–û–ß–ù–û –∫–∞–∫ –≤ –æ–±—É—á–∞—é—â–µ–º —Ñ–∞–π–ª–µ"""

    result = df.copy()

    # 1. Returns - LOG returns (—É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ)
    result["returns"] = np.log(result["close"] / result["close"].shift(1))

    # –ü–µ—Ä–∏–æ–¥–Ω—ã–µ returns
    for period in [5, 10, 20]:
        result[f"returns_{period}"] = np.log(result["close"] / result["close"].shift(period))

    # 2. RSI - –û–î–ò–ù —Å –ø–µ—Ä–∏–æ–¥–æ–º 14
    import ta

    result["rsi"] = ta.momentum.RSIIndicator(result["close"], window=14).rsi()
    result["rsi_oversold"] = (result["rsi"] < 30).astype(int)
    result["rsi_overbought"] = (result["rsi"] > 70).astype(int)

    # 3. SMA - —Ç–æ–ª—å–∫–æ 20 –∏ 50
    for period in [20, 50]:
        result[f"sma_{period}"] = ta.trend.sma_indicator(result["close"], period)
        result[f"close_sma_{period}_ratio"] = result["close"] / result[f"sma_{period}"]

    # 4. EMA - —Ç–æ–ª—å–∫–æ 20 –∏ 50
    for period in [20, 50]:
        result[f"ema_{period}"] = ta.trend.ema_indicator(result["close"], period)
        result[f"close_ema_{period}_ratio"] = result["close"] / result[f"ema_{period}"]

    # 5. MACD - –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–ù–´–ô!
    macd = ta.trend.MACD(result["close"], window_slow=26, window_fast=12, window_sign=9)
    # –ö–†–ò–¢–ò–ß–ù–û: –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—ã!
    result["macd"] = macd.macd() / result["close"] * 100
    result["macd_signal"] = macd.macd_signal() / result["close"] * 100
    result["macd_diff"] = macd.macd_diff() / result["close"] * 100

    # 6. Bollinger Bands
    bb = ta.volatility.BollingerBands(result["close"], window=20, window_dev=2)
    result["bb_high"] = bb.bollinger_hband()
    result["bb_low"] = bb.bollinger_lband()
    result["bb_middle"] = bb.bollinger_mavg()
    result["bb_width"] = (result["bb_high"] - result["bb_low"]) / result["close"]

    # 7. Volatility - —Å –æ–∫–Ω–æ–º 96 –∫–∞–∫ –≤ –æ–±—É—á–µ–Ω–∏–∏
    result["volatility"] = result["returns"].rolling(96).std()

    # 8. BTC correlation - –¢–û–ß–ù–û –∫–∞–∫ –≤ –æ–±—É—á–µ–Ω–∏–∏
    # window=96, min_periods=50
    # (—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ _create_cross_asset_features)

    # 9. BTC Beta - rolling(100)
    if "btc_returns" in result.columns:
        result["btc_beta"] = (
            result["returns"].rolling(100).cov(result["btc_returns"])
            / result["btc_returns"].rolling(100).var()
        )

        # –ò–¥–∏–æ—Å–∏–Ω–∫—Ä–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        result["idio_vol"] = (
            (result["returns"] - result["btc_beta"] * result["btc_returns"]).rolling(50).std()
        )

    return result


def validate_features_match_training(features_df: pd.DataFrame) -> dict:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –æ–±—É—á–∞—é—â–µ–º—É —Ñ–∞–π–ª—É"""

    training_features = get_training_exact_features()
    current_features = list(features_df.columns)

    validation_result = {
        "missing_critical": [],
        "incorrect_calculation": [],
        "extra_features": [],
        "correct_features": [],
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    critical_features = [
        "returns",  # LOG returns
        "rsi",  # –û–¥–∏–Ω RSI, –Ω–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ
        "macd",  # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π
        "btc_correlation",  # –° –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–∫–Ω–æ–º
        "btc_beta",  # rolling(100)
    ]

    for feat in critical_features:
        if feat not in current_features:
            validation_result["missing_critical"].append(feat)
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
            if feat == "returns":
                # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å log returns
                test_val = features_df[feat].iloc[-1]
                if np.isnan(test_val):
                    validation_result["incorrect_calculation"].append(f"{feat}: NaN values")
            elif feat == "macd":
                # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω (–º–∞–ª—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
                max_val = features_df[feat].abs().max()
                if max_val > 10:  # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 10%, –≤–µ—Ä–æ—è—Ç–Ω–æ –Ω–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω
                    validation_result["incorrect_calculation"].append(f"{feat}: not normalized")

            validation_result["correct_features"].append(feat)

    return validation_result


if __name__ == "__main__":
    print("=" * 80)
    print("üìã –ü–õ–ê–ù –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –í–°–ï–• 240 –ü–†–ò–ó–ù–ê–ö–û–í")
    print("=" * 80)

    training_features = get_training_exact_features()
    mapping = create_feature_mapping()

    print("\n1Ô∏è‚É£ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø:")
    print("  ‚Ä¢ RSI: –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ rsi_14 ‚Üí rsi")
    print("  ‚Ä¢ SMA: –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ sma_20, sma_50")
    print("  ‚Ä¢ EMA: –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ ema_20, ema_50")
    print("  ‚Ä¢ MACD: –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—ã (* 100)")
    print("  ‚Ä¢ BTC correlation: –æ–¥–Ω–∞ —Å window=96")
    print("  ‚Ä¢ BTC beta: rolling(100)")
    print("  ‚Ä¢ ETH correlations: –∑–∞–≥–ª—É—à–∫–∏ 0.5")

    print("\n2Ô∏è‚É£ –£–î–ê–õ–ò–¢–¨ –õ–ò–®–ù–ò–ï –ü–†–ò–ó–ù–ê–ö–ò:")
    remove_count = sum(1 for v in mapping.values() if v == "REMOVE")
    print(f"  –í—Å–µ–≥–æ –∫ —É–¥–∞–ª–µ–Ω–∏—é: {remove_count} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

    print("\n3Ô∏è‚É£ –î–û–ë–ê–í–ò–¢–¨ –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï:")
    print("  ‚Ä¢ relative_strength_btc")
    print("  ‚Ä¢ rs_btc_ma")
    print("  ‚Ä¢ idio_vol")
    print("  ‚Ä¢ Microstructure features –∏–∑ –æ–±—É—á–µ–Ω–∏—è")

    print("\n4Ô∏è‚É£ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:")
    print("  ‚Ä¢ –í—Å–µ returns –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å LOG")
    print("  ‚Ä¢ MACD –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω")
    print("  ‚Ä¢ BTC features —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏")
    print("  ‚Ä¢ –ù–µ—Ç NaN –∑–Ω–∞—á–µ–Ω–∏–π")

    print("\n" + "=" * 80)
    print("‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π!")
    print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ fix_feature_engineering.py –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    print("=" * 80)
