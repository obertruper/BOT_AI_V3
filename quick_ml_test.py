#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""

import asyncio
import sys
from pathlib import Path

sys.path.append(str(Path(__file__).parent))

from core.config.config_manager import ConfigManager
from data.data_loader import DataLoader
from ml.ml_manager_singleton import get_ml_manager


async def quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
    print("üöÄ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ML —Å–∏—Å—Ç–µ–º—ã...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    config_manager = ConfigManager()
    data_loader = DataLoader(config_manager)

    # –ü–æ–ª—É—á–∞–µ–º ML Manager —á–µ—Ä–µ–∑ singleton
    print("üîÑ –ü–æ–ª—É—á–∞–µ–º ML Manager (singleton)...")
    ml_manager = await get_ml_manager(config_manager._config)
    print(f"‚úÖ ML Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –Ω–∞ {ml_manager.device}")

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ GPU –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    if ml_manager.device.type == "cuda":
        import torch

        gpu_idx = ml_manager.device.index or 0
        props = torch.cuda.get_device_properties(gpu_idx)
        print(f"   GPU: {props.name}")
        print(f"   Memory: {props.total_memory / 1024**3:.1f}GB")
        print(f"   Compute Capability: {props.major}.{props.minor}")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    symbol = "BTCUSDT"
    print(f"\nüìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ {symbol}...")
    data = await data_loader.get_data_for_ml(symbol, limit=300)

    if data is None or len(data) < 240:
        print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(data) if data else 0}")
        return

    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} —Å–≤–µ—á–µ–π")
    print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${data['close'].iloc[-1]:,.2f}")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    print("\nüîÆ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ...")
    prediction = await ml_manager.predict(data)

    if not prediction:
        print("‚ùå –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
        return

    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø:")
    print(f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {prediction['signal_type']}")
    if "weighted_direction" in prediction:
        print(f"   –°–∏–ª–∞: {prediction['weighted_direction']:.6f}")
    print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction['confidence']:.2%}")
    print(f"   Stop Loss: ${prediction['stop_loss']:,.2f}")
    print(f"   Take Profit: ${prediction['take_profit']:,.2f}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    print("\nüìä –í—Å–µ –ø–æ–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:")
    for key, value in prediction.items():
        if key not in ["signal_type", "confidence", "stop_loss", "take_profit"]:
            print(f"   {key}: {value}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
    if prediction["signal_type"] == "NEUTRAL":
        print("\n‚ö†Ô∏è –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ NEUTRAL")
    else:
        print(f"\n‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ: {prediction['signal_type']}!")


if __name__ == "__main__":
    asyncio.run(quick_test())
