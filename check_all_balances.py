#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –±–∞–ª–∞–Ω—Å–æ–≤ –Ω–∞ Bybit
"""

import asyncio
import os
import sys

from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

load_dotenv()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ["PGPORT"] = "5555"
os.environ["PGUSER"] = "obertruper"
os.environ["PGDATABASE"] = "bot_trading_v3"


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –±–∞–ª–∞–Ω—Å–æ–≤ Bybit ===\n")

    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit
        from exchanges.factory import ExchangeFactory

        factory = ExchangeFactory()
        exchange = await factory.create_and_connect(
            exchange_type="bybit",
            api_key=os.getenv("BYBIT_API_KEY"),
            api_secret=os.getenv("BYBIT_API_SECRET"),
            sandbox=False,
        )
        await exchange.initialize()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º client –Ω–∞–ø—Ä—è–º—É—é
        client = exchange.client if hasattr(exchange, "client") else exchange

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∏–ø—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ —Ç–∏–ø–∞–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤:\n")

        # 1. Unified Trading Account (–æ—Å–Ω–æ–≤–Ω–æ–π)
        print("1Ô∏è‚É£ Unified Trading Account:")
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ API
            response = await client._make_request(
                "GET", "/v5/account/wallet-balance", {"accountType": "UNIFIED"}
            )

            if response and "list" in response:
                for wallet in response["list"]:
                    print(f"\n   –¢–∏–ø —Å—á–µ—Ç–∞: {wallet.get('accountType')}")

                    coins = wallet.get("coin", [])
                    for coin in coins:
                        if float(coin.get("walletBalance", 0)) > 0:
                            name = coin.get("coin")
                            total = float(coin.get("walletBalance", 0))
                            available = float(coin.get("availableToWithdraw", 0))
                            locked = total - available

                            print(f"   {name}:")
                            print(f"      –í—Å–µ–≥–æ: {total:.4f}")
                            print(f"      –î–æ—Å—Ç—É–ø–Ω–æ: {available:.4f}")
                            print(f"      –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {locked:.4f}")

                            if locked > 0:
                                print(f"      ‚ö†Ô∏è –í –æ—Ä–¥–µ—Ä–∞—Ö/–ø–æ–∑–∏—Ü–∏—è—Ö: {locked:.4f}")
        except Exception as e:
            print(f"   –û—à–∏–±–∫–∞: {e}")

        # 2. Spot Account
        print("\n2Ô∏è‚É£ Spot Account:")
        try:
            response = await client._make_request(
                "GET", "/v5/account/wallet-balance", {"accountType": "SPOT"}
            )

            if response and "list" in response:
                for wallet in response["list"]:
                    coins = wallet.get("coin", [])
                    for coin in coins:
                        if float(coin.get("walletBalance", 0)) > 0:
                            name = coin.get("coin")
                            total = float(coin.get("walletBalance", 0))
                            free = float(coin.get("free", 0))
                            locked = float(coin.get("locked", 0))

                            print(
                                f"   {name}: {total:.4f} (—Å–≤–æ–±–æ–¥–Ω–æ: {free:.4f}, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {locked:.4f})"
                            )
        except Exception:
            print("   –û—à–∏–±–∫–∞ –∏–ª–∏ –Ω–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤")

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ
        print("\n3Ô∏è‚É£ –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–π:")
        try:
            response = await client._make_request(
                "GET", "/v5/position/list", {"category": "linear", "settleCoin": "USDT"}
            )

            if response and "list" in response:
                positions = response["list"]
                if positions:
                    print(f"   –ù–∞–π–¥–µ–Ω–æ {len(positions)} –ø–æ–∑–∏—Ü–∏–π:")
                    for pos in positions:
                        if float(pos.get("size", 0)) > 0:
                            print(
                                f"   {pos.get('symbol')}: —Ä–∞–∑–º–µ—Ä={pos.get('size')}, PnL={pos.get('unrealisedPnl')}"
                            )
                else:
                    print("   –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
        except Exception as e:
            print(f"   –û—à–∏–±–∫–∞: {e}")

        # 4. –í—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
        print("\n4Ô∏è‚É£ –í—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞:")
        try:
            response = await client._make_request(
                "GET",
                "/v5/order/realtime",
                {"category": "linear", "settleCoin": "USDT"},
            )

            if response and "list" in response:
                orders = response["list"]
                if orders:
                    print(f"   –ù–∞–π–¥–µ–Ω–æ {len(orders)} –æ—Ä–¥–µ—Ä–æ–≤:")
                    for order in orders[:5]:
                        print(
                            f"   {order.get('symbol')}: {order.get('side')} {order.get('qty')} @ {order.get('price')} (—Å—Ç–∞—Ç—É—Å: {order.get('orderStatus')})"
                        )
                else:
                    print("   –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
        except Exception as e:
            print(f"   –û—à–∏–±–∫–∞: {e}")

    except Exception as e:
        print(f"\n‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()

    finally:
        if "exchange" in locals():
            # BybitExchange –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ close
            pass


if __name__ == "__main__":
    asyncio.run(main())
