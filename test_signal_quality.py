#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Signal Quality Analyzer
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import numpy as np

from ml.logic.signal_quality_analyzer import SignalQualityAnalyzer


def test_signal_quality():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""

    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Signal Quality Analyzer\n")
    print("=" * 60)

    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    from pathlib import Path

    import yaml

    config_path = Path("config/ml/ml_config.yaml")
    if config_path.exists():
        with open(config_path, encoding="utf-8") as f:
            config = yaml.safe_load(f)
    else:
        config = {}

    analyzer = SignalQualityAnalyzer(config)

    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    scenarios = [
        {
            "name": "üìà –û–¢–õ–ò–ß–ù–´–ô –°–ò–ì–ù–ê–õ (3 LONG –∏–∑ 4)",
            "directions": np.array([0, 0, 0, 2]),  # 3 LONG, 1 NEUTRAL
            "confidences": np.array([0.75, 0.80, 0.85, 0.55]),
            "returns": np.array([0.015, 0.012, 0.018, 0.003]),
            "probs": [
                np.array([0.7, 0.2, 0.1]),  # 15m - —É–≤–µ—Ä–µ–Ω–Ω—ã–π LONG
                np.array([0.8, 0.15, 0.05]),  # 1h - —É–≤–µ—Ä–µ–Ω–Ω—ã–π LONG
                np.array([0.85, 0.1, 0.05]),  # 4h - –æ—á–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω—ã–π LONG
                np.array([0.3, 0.3, 0.4]),  # 12h - —Å–ª–∞–±—ã–π NEUTRAL
            ],
        },
        {
            "name": "üìâ –•–û–†–û–®–ò–ô SHORT (3 SHORT –∏–∑ 4)",
            "directions": np.array([1, 1, 1, 0]),  # 3 SHORT, 1 LONG
            "confidences": np.array([0.70, 0.75, 0.72, 0.45]),
            "returns": np.array([-0.012, -0.015, -0.013, 0.002]),
            "probs": [
                np.array([0.15, 0.70, 0.15]),  # 15m - —É–≤–µ—Ä–µ–Ω–Ω—ã–π SHORT
                np.array([0.1, 0.75, 0.15]),  # 1h - —É–≤–µ—Ä–µ–Ω–Ω—ã–π SHORT
                np.array([0.12, 0.72, 0.16]),  # 4h - —É–≤–µ—Ä–µ–Ω–Ω—ã–π SHORT
                np.array([0.45, 0.35, 0.20]),  # 12h - —Å–ª–∞–±—ã–π LONG
            ],
        },
        {
            "name": "‚ö†Ô∏è –°–õ–ê–ë–´–ô –°–ò–ì–ù–ê–õ (—Ä–∞–∑–Ω–æ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ)",
            "directions": np.array([2, 1, 0, 0]),  # NEUTRAL, SHORT, 2 LONG
            "confidences": np.array([0.40, 0.45, 0.48, 0.42]),
            "returns": np.array([0.001, -0.003, 0.005, 0.004]),
            "probs": [
                np.array([0.32, 0.33, 0.35]),  # 15m - NEUTRAL (–Ω–µ—É–≤–µ—Ä–µ–Ω–Ω—ã–π)
                np.array([0.30, 0.45, 0.25]),  # 1h - —Å–ª–∞–±—ã–π SHORT
                np.array([0.48, 0.27, 0.25]),  # 4h - —Å–ª–∞–±—ã–π LONG
                np.array([0.42, 0.33, 0.25]),  # 12h - —Å–ª–∞–±—ã–π LONG
            ],
        },
        {
            "name": "‚ùå –ü–õ–û–•–û–ô –°–ò–ì–ù–ê–õ (–≤—Å–µ —Ä–∞–∑–Ω—ã–µ)",
            "directions": np.array([0, 1, 2, 1]),  # LONG, SHORT, NEUTRAL, SHORT
            "confidences": np.array([0.35, 0.38, 0.33, 0.36]),
            "returns": np.array([0.002, -0.001, 0.0005, -0.0015]),
            "probs": [
                np.array([0.35, 0.33, 0.32]),  # 15m - –æ—á–µ–Ω—å —Å–ª–∞–±—ã–π LONG
                np.array([0.32, 0.38, 0.30]),  # 1h - –æ—á–µ–Ω—å —Å–ª–∞–±—ã–π SHORT
                np.array([0.32, 0.33, 0.35]),  # 4h - –æ—á–µ–Ω—å —Å–ª–∞–±—ã–π NEUTRAL
                np.array([0.31, 0.36, 0.33]),  # 12h - –æ—á–µ–Ω—å —Å–ª–∞–±—ã–π SHORT
            ],
        },
    ]

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
    for i, scenario in enumerate(scenarios, 1):
        print(f"\n–°—Ü–µ–Ω–∞—Ä–∏–π {i}: {scenario['name']}")
        print("-" * 60)

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
        result = analyzer.analyze_signal(
            directions=scenario["directions"],
            confidences=scenario["confidences"],
            returns=scenario["returns"],
            direction_probs=scenario["probs"],
        )

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"üìä –ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞: {result['quality_level']} ({result['quality_score']:.3f})")
        print(f"   - –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å: {result['agreement_score']:.3f}")
        print(f"   - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence_score']:.3f}")
        print(f"   - –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {result['return_score']:.3f}")
        print(f"   - –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: {result['consistency_score']:.3f}")

        print(f"\nüìå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {result['recommendation']['action']}")
        print(f"   –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞: {result['recommendation']['signal_type']}")
        print(
            f"   –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {result['recommendation']['position_size_multiplier'] * 100:.0f}%"
        )

        print("\nüìù –ü—Ä–∏—á–∏–Ω—ã:")
        for reason in result["recommendation"]["reasons"]:
            print(f"   {reason}")

        print("\nüéØ –î–µ—Ç–∞–ª–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤:")
        details = result["details"]["timeframe_agreement"]
        print(
            f"   15m: {details['15m']}, 1h: {details['1h']}, 4h: {details['4h']}, 12h: {details['12h']}"
        )

        if "LONG_count" in details:
            print(
                f"   LONG: {details.get('LONG_count', 0)}, "
                f"SHORT: {details.get('SHORT_count', 0)}, "
                f"NEUTRAL: {details.get('NEUTRAL_count', 0)}"
            )

    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 60)

    stats = analyzer.get_statistics()
    print(f"–í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {stats['total_analyzed']}")
    print(f"–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {stats['high_quality']} ({stats.get('high_quality_pct', 0):.1f}%)")
    print(
        f"–°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {stats['medium_quality']} ({stats.get('medium_quality_pct', 0):.1f}%)"
    )
    print(f"–ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {stats['low_quality']} ({stats.get('low_quality_pct', 0):.1f}%)")
    print(f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats['rejected']} ({stats.get('rejected_pct', 0):.1f}%)")

    print("\n" + "=" * 60)
    print("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û")
    print("=" * 60)

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
    print("\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ù–ê–°–¢–†–û–ô–ö–ï:")
    print("1. –î–ª—è –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏:")
    print("   - –¢—Ä–µ–±–æ–≤–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–æ–≥–ª–∞—Å–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞")
    print("   - Quality score >= 0.75")
    print("   - –¢–æ—Ä–≥–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ EXCELLENT —Å–∏–≥–Ω–∞–ª—ã")

    print("\n2. –î–ª—è —É–º–µ—Ä–µ–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏:")
    print("   - –¢—Ä–µ–±–æ–≤–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–æ–≥–ª–∞—Å–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞")
    print("   - Quality score >= 0.60")
    print("   - –¢–æ—Ä–≥–æ–≤–∞—Ç—å EXCELLENT –∏ GOOD —Å–∏–≥–Ω–∞–ª—ã")

    print("\n3. –î–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏:")
    print("   - –û—Å–Ω–æ–≤—ã–≤–∞—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ (4h)")
    print("   - Quality score >= 0.45")
    print("   - –¢–æ—Ä–≥–æ–≤–∞—Ç—å –≤—Å–µ –∫—Ä–æ–º–µ REJECT —Å–∏–≥–Ω–∞–ª–æ–≤")


if __name__ == "__main__":
    test_signal_quality()
