#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ç–æ–ª—å–∫–æ NEUTRAL —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import asyncio
import sys
from pathlib import Path

import numpy as np
import torch

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from core.config.config_manager import ConfigManager
from core.logger import setup_logger
from data.data_loader import DataLoader
from ml.ml_manager import MLManager
from ml.ml_signal_processor import MLSignalProcessor

logger = setup_logger("ml_debug", level="INFO")


async def test_ml_pipeline():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–µ—Å—å ML –ø–∞–π–ø–ª–∞–π–Ω –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å NEUTRAL —Å–∏–≥–Ω–∞–ª–∞–º–∏
    """
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ML –°–ò–°–¢–ï–ú–´ - –ê–ù–ê–õ–ò–ó NEUTRAL –°–ò–ì–ù–ê–õ–û–í")
    print("=" * 60)

    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_manager = ConfigManager()
        config = config_manager.get_config()

        # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML Manager
        ml_manager = MLManager(config)
        await ml_manager.initialize()

        # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML Signal Processor
        ml_processor = MLSignalProcessor(ml_manager, config, config_manager)
        await ml_processor.initialize()

        # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Data Loader
        data_loader = DataLoader(config)

        # 5. –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        test_symbols = ["BTCUSDT", "ETHUSDT", "SOLUSDT"]

        print(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã: {test_symbols}")
        print(f"üìè –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π confidence: {ml_processor.min_confidence}")
        print(f"üìà –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {ml_processor.min_signal_strength}")
        print()

        for symbol in test_symbols:
            print(f"\nüîÑ –ê–Ω–∞–ª–∏–∑ {symbol}:")
            print("-" * 40)

            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                df = await data_loader.load_historical_data(
                    symbol=symbol,
                    interval="15m",
                    limit=200,  # 200 —Å–≤–µ—á–µ–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    end_time=None,
                )

                if df is None or df.empty:
                    print(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                    continue

                print(f"üìà –ü–æ–ª—É—á–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π")
                print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {df.index[0]} - {df.index[-1]}")

                # –î–µ–ª–∞–µ–º –ø—Ä—è–º–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —á–µ—Ä–µ–∑ ML Manager
                print("\nüß† –ü—Ä—è–º–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ ML Manager:")
                prediction = await ml_manager.predict(df)

                print(f"üìä –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞: {prediction.get('signal_type', 'UNKNOWN')}")
                print(f"üìä Confidence: {prediction.get('confidence', 0):.4f}")
                print(f"üìä Signal strength: {prediction.get('signal_strength', 0):.4f}")
                print(
                    f"üìä Direction score: {prediction.get('predictions', {}).get('direction_score', 'N/A')}"
                )

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º raw model outputs
                predictions_data = prediction.get("predictions", {})
                returns_15m = predictions_data.get("returns_15m", 0)
                directions = predictions_data.get("directions_by_timeframe", [])
                direction_probs = predictions_data.get("direction_probabilities", [])

                print("\nüîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:")
                print(f"üìà Returns 15m: {returns_15m:.6f}")
                print(f"üéØ Directions: {directions}")

                if direction_probs:
                    for i, probs in enumerate(direction_probs):
                        timeframe = ["15m", "1h", "4h", "12h"][i] if i < 4 else f"{i}"
                        print(
                            f"üìä {timeframe}: LONG={probs[0]:.3f}, SHORT={probs[1]:.3f}, NEUTRAL={probs[2]:.3f}"
                        )

                # –¢–µ—Å—Ç–∏—Ä—É–µ–º ML Signal Processor
                print("\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ ML Signal Processor:")
                signal = await ml_processor.process_market_data(
                    symbol=symbol, exchange="bybit", ohlcv_data=df
                )

                if signal:
                    print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–∏–≥–Ω–∞–ª: {signal.signal_type.value}")
                    print(f"üìä Confidence: {signal.confidence:.4f}")
                    print(f"üìä Strength: {signal.strength:.4f}")
                    print(f"üí∞ Entry price: {signal.entry_price}")
                    if signal.stop_loss:
                        print(f"üõë Stop Loss: {signal.stop_loss}")
                    if signal.take_profit:
                        print(f"üéØ Take Profit: {signal.take_profit}")
                else:
                    print("‚ùå –°–∏–≥–Ω–∞–ª –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã
                print("\nüîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º:")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏
                conf = prediction.get("confidence", 0)
                strength = prediction.get("signal_strength", 0)

                print(
                    f"üìè Confidence check: {conf:.4f} {'‚â•' if conf >= ml_processor.min_confidence else '<'} {ml_processor.min_confidence} - {'‚úÖ' if conf >= ml_processor.min_confidence else '‚ùå'}"
                )
                print(
                    f"üìè Strength check: {strength:.4f} {'‚â•' if strength >= ml_processor.min_signal_strength else '<'} {ml_processor.min_signal_strength} - {'‚úÖ' if strength >= ml_processor.min_signal_strength else '‚ùå'}"
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                signal_type = prediction.get("signal_type", "NEUTRAL")
                print(
                    f"üéØ Signal type: {signal_type} ({'–¢–û–†–ì–û–í–´–ô' if signal_type in ['LONG', 'SHORT'] else '–ù–ï –¢–û–†–ì–û–í–´–ô'})"
                )

                if signal_type == "NEUTRAL":
                    print("‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –ú–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ NEUTRAL —Å–∏–≥–Ω–∞–ª—ã!")

                    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
                    if directions:
                        long_count = directions.count(0)
                        short_count = directions.count(1)
                        neutral_count = directions.count(2)

                        print("üìä –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º:")
                        print(f"   LONG: {long_count}/4 ({long_count / 4 * 100:.1f}%)")
                        print(
                            f"   SHORT: {short_count}/4 ({short_count / 4 * 100:.1f}%)"
                        )
                        print(
                            f"   NEUTRAL: {neutral_count}/4 ({neutral_count / 4 * 100:.1f}%)"
                        )

                        if neutral_count >= 3:
                            print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞: 3+ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç NEUTRAL")
                        elif long_count < 3 and short_count < 3:
                            print(
                                "‚ùå –ü—Ä–æ–±–ª–µ–º–∞: –ù–µ—Ç —è–≤–Ω–æ–≥–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ (–Ω—É–∂–Ω–æ 3+ –≥–æ–ª–æ—Å–æ–≤)"
                            )

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {symbol}: {e}")
                logger.exception(f"Error processing {symbol}")

        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å –Ω–∞–ø—Ä—è–º—É—é
        print("\nüîß –ü–†–Ø–ú–ê–Ø –ü–†–û–í–ï–†–ö–ê –ú–û–î–ï–õ–ò:")
        print("-" * 40)

        if ml_manager.model is None:
            print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
            return

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–Ω–∑–æ—Ä
        device = ml_manager.device
        test_input = torch.randn(1, 96, 240).to(
            device
        )  # batch_size=1, context=96, features=240

        print(f"üß† –ú–æ–¥–µ–ª—å: {type(ml_manager.model).__name__}")
        print(f"üíª Device: {device}")
        print(f"üìä Input shape: {test_input.shape}")

        # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –º–æ–¥–µ–ª–∏
        ml_manager.model.eval()
        with torch.no_grad():
            raw_output = ml_manager.model(test_input)

        print(f"üìä Output shape: {raw_output.shape}")
        print(
            f"üìä Output range: [{raw_output.min().item():.6f}, {raw_output.max().item():.6f}]"
        )
        print(f"üìä Output mean: {raw_output.mean().item():.6f}")
        print(f"üìä Output std: {raw_output.std().item():.6f}")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤—ã—Ö–æ–¥—ã
        output_np = raw_output.cpu().numpy()[0]

        print("\nüîç –ê–Ω–∞–ª–∏–∑ 20 –≤—ã—Ö–æ–¥–æ–≤ –º–æ–¥–µ–ª–∏:")
        future_returns = output_np[0:4]
        direction_logits = output_np[4:16]
        risk_metrics = output_np[16:20]

        print(f"üìà Future returns (0-3): {future_returns}")
        print(f"üéØ Direction logits (4-15): {direction_logits}")
        print(f"‚ö†Ô∏è  Risk metrics (16-19): {risk_metrics}")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        direction_logits_reshaped = direction_logits.reshape(4, 3)
        print("\nüéØ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º:")

        for i, logits in enumerate(direction_logits_reshaped):
            timeframe = ["15m", "1h", "4h", "12h"][i]
            exp_logits = np.exp(logits - np.max(logits))
            probs = exp_logits / exp_logits.sum()
            predicted_class = np.argmax(probs)
            class_name = ["LONG", "SHORT", "NEUTRAL"][predicted_class]

            print(f"   {timeframe}: logits={logits} -> probs={probs} -> {class_name}")

        # 7. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:")
        print("-" * 40)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        all_neutral = all(
            np.argmax(direction_logits_reshaped[i]) == 2 for i in range(4)
        )
        small_returns = all(abs(r) < 0.001 for r in future_returns)

        if all_neutral:
            print("üî¥ –ö–†–ò–¢–ò–ß–ù–û: –í—Å–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç NEUTRAL")
            print("   -> –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞ –Ω–∞ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã")
            print("   -> –†–µ—à–µ–Ω–∏–µ: –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ class weights")

        if small_returns:
            print("üî¥ –ö–†–ò–¢–ò–ß–ù–û: –í—Å–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –±–ª–∏–∑–∫–∏ –∫ –Ω—É–ª—é")
            print("   -> –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏–ª–∏ scaler")
            print("   -> –†–µ—à–µ–Ω–∏–µ: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏
        if ml_processor.min_confidence > 0.5:
            print("üü° –í–ù–ò–ú–ê–ù–ò–ï: –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥ confidence")
            print(f"   -> –¢–µ–∫—É—â–∏–π: {ml_processor.min_confidence}")
            print("   -> –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —Å–Ω–∏–∑–∏—Ç—å –¥–æ 0.3-0.4 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

        if ml_processor.min_signal_strength > 0.3:
            print("üü° –í–ù–ò–ú–ê–ù–ò–ï: –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥ signal_strength")
            print(f"   -> –¢–µ–∫—É—â–∏–π: {ml_processor.min_signal_strength}")
            print("   -> –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —Å–Ω–∏–∑–∏—Ç—å –¥–æ 0.1-0.2 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

        print("\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.exception("Critical error in ML pipeline test")


if __name__ == "__main__":
    asyncio.run(test_ml_pipeline())
