#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π ML –ª–æ–≥–∏–∫–∏
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent))

import numpy as np
import pandas as pd

from ml.ml_manager import MLManager


async def test_fixed_ml_logic():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π ML –ª–æ–≥–∏–∫–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏"""

    print("üß™ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô ML –õ–û–ì–ò–ö–ò ===")

    # –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = {"ml": {"model": {"device": "auto"}, "model_directory": "models/saved"}}

    # –°–æ–∑–¥–∞–µ–º ML Manager
    ml_manager = MLManager(config)
    await ml_manager.initialize()

    print("‚úÖ ML Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    # === –¢–ï–°–¢ 1: –†–∞–∑–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π ===
    print("\nüéØ === –¢–ï–°–¢ 1: –†–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π ===")

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    dates = pd.date_range(start="2024-01-01", periods=120, freq="15min")
    test_scenarios = [
        {
            "name": "–†–∞—Å—Ç—É—â–∏–π —Ç—Ä–µ–Ω–¥",
            "price_trend": 0.002,
            "volatility": 0.01,
        },  # 0.2% —Ä–æ—Å—Ç –∑–∞ —Å–≤–µ—á—É
        {
            "name": "–ü–∞–¥–∞—é—â–∏–π —Ç—Ä–µ–Ω–¥",
            "price_trend": -0.002,  # 0.2% –ø–∞–¥–µ–Ω–∏–µ –∑–∞ —Å–≤–µ—á—É
            "volatility": 0.01,
        },
        {
            "name": "–ë–æ–∫–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ",
            "price_trend": 0.0,
            "volatility": 0.005,
        },  # –ù–µ—Ç —Ç—Ä–µ–Ω–¥–∞
        {
            "name": "–í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å",
            "price_trend": 0.0,
            "volatility": 0.03,  # 3% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        },
    ]

    for scenario in test_scenarios:
        print(f"\nüìä –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario['name']}")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è
        base_price = 50000.0
        prices = [base_price]

        np.random.seed(42)  # –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
        for i in range(1, len(dates)):
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥ + —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
            trend_change = scenario["price_trend"]
            random_change = np.random.normal(0, scenario["volatility"])
            total_change = trend_change + random_change

            new_price = prices[-1] * (1 + total_change)
            prices.append(new_price)

        # –°–æ–∑–¥–∞–µ–º OHLCV –¥–∞–Ω–Ω—ã–µ
        test_data = []
        for i, (date, close) in enumerate(zip(dates, prices)):
            high = close * (1 + abs(np.random.normal(0, 0.003)))
            low = close * (1 - abs(np.random.normal(0, 0.003)))
            open_price = prices[i - 1] if i > 0 else close
            volume = np.random.uniform(100, 1000)

            test_data.append(
                {
                    "datetime": date,
                    "open": open_price,
                    "high": max(high, close, open_price),
                    "low": min(low, close, open_price),
                    "close": close,
                    "volume": volume,
                    "symbol": "BTCUSDT",
                }
            )

        test_df = pd.DataFrame(test_data)

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        try:
            prediction = await ml_manager.predict(test_df)

            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {prediction['signal_type']}")
            print(f"   –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {prediction['signal_strength']:.3f}")
            print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction['confidence']:.3f}")
            print(f"   –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞: {prediction['success_probability']:.1%}")
            print(
                f"   –í–∑–≤–µ—à–µ–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {prediction['predictions']['direction_score']:.3f}"
            )

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

    # === –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ===
    print("\nüéØ === –¢–ï–°–¢ 2: –†–∞–∑–ª–∏—á–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ===")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 5 —Ä–∞–∑–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    for test_num in range(1, 6):
        print(f"\nüìä –¢–µ—Å—Ç #{test_num}")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ seed –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        np.random.seed(test_num * 10)

        # –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ OHLCV –¥–∞–Ω–Ω—ã–µ
        base_price = 45000 + test_num * 2000  # –†–∞–∑–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã
        prices = [base_price]

        for i in range(1, 120):
            change = np.random.normal(0, 0.015)  # 1.5% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            new_price = prices[-1] * (1 + change)
            prices.append(new_price)

        test_data = []
        for i, (date, close) in enumerate(zip(dates, prices)):
            high = close * (1 + abs(np.random.normal(0, 0.004)))
            low = close * (1 - abs(np.random.normal(0, 0.004)))
            open_price = prices[i - 1] if i > 0 else close
            volume = np.random.uniform(50, 1500)

            test_data.append(
                {
                    "datetime": date,
                    "open": open_price,
                    "high": max(high, close, open_price),
                    "low": min(low, close, open_price),
                    "close": close,
                    "volume": volume,
                    "symbol": "BTCUSDT",
                }
            )

        test_df = pd.DataFrame(test_data)

        try:
            prediction = await ml_manager.predict(test_df)

            print(f"   –°–∏–≥–Ω–∞–ª: {prediction['signal_type']}")
            print(f"   –°–∏–ª–∞: {prediction['signal_strength']:.3f}")
            print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction['confidence']:.3f}")
            print(f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {prediction['predictions']['direction_score']:.3f}")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

    # === –¢–ï–°–¢ 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è ===
    print("\nüéØ === –¢–ï–°–¢ 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ ===")

    signals = []
    signal_types = []
    directions = []

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 20 —Ä–∞–∑–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    for i in range(20):
        np.random.seed(i * 7)  # –†–∞–∑–Ω—ã–µ —Å–µ–º–µ–Ω–∞ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è

        # –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        base_price = 40000 + i * 1000
        prices = [base_price]

        for j in range(1, 120):
            change = np.random.normal(0, 0.01 + i * 0.001)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            new_price = prices[-1] * (1 + change)
            prices.append(new_price)

        test_data = []
        for j, (date, close) in enumerate(zip(dates, prices)):
            high = close * (1 + abs(np.random.normal(0, 0.003 + i * 0.0001)))
            low = close * (1 - abs(np.random.normal(0, 0.003 + i * 0.0001)))
            open_price = prices[j - 1] if j > 0 else close
            volume = np.random.uniform(100 + i * 10, 1000 + i * 50)

            test_data.append(
                {
                    "datetime": date,
                    "open": open_price,
                    "high": max(high, close, open_price),
                    "low": min(low, close, open_price),
                    "close": close,
                    "volume": volume,
                    "symbol": "BTCUSDT",
                }
            )

        test_df = pd.DataFrame(test_data)

        try:
            prediction = await ml_manager.predict(test_df)
            signals.append(prediction)
            signal_types.append(prediction["signal_type"])
            directions.append(prediction["predictions"]["direction_score"])

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {i}: {e}")

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
    unique_signals = set(signal_types)
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è:")
    print(f"   –í—Å–µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(signals)}")
    print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(unique_signals)}")
    print(f"   –¢–∏–ø—ã —Å–∏–≥–Ω–∞–ª–æ–≤: {unique_signals}")

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    from collections import Counter

    signal_counts = Counter(signal_types)
    for signal_type, count in signal_counts.items():
        percentage = (count / len(signals)) * 100
        print(f"   {signal_type}: {count} ({percentage:.1f}%)")

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–±—Ä–æ—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    if directions:
        directions_array = np.array(directions)
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π:")
        print(f"   Min: {directions_array.min():.3f}")
        print(f"   Max: {directions_array.max():.3f}")
        print(f"   Mean: {directions_array.mean():.3f}")
        print(f"   Std: {directions_array.std():.3f}")
        print(
            f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {len(np.unique(np.round(directions_array, 3)))}"
        )

    # === –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï ===
    print("\nüéâ === –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï ===")

    if len(unique_signals) > 1:
        print("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –£–°–ü–ï–®–ù–û!")
        print("   –ú–æ–¥–µ–ª—å —Ç–µ–ø–µ—Ä—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
        print("   –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏ —Ä–µ—à–µ–Ω–∞")
    else:
        print("‚ùå –ü–†–û–ë–õ–ï–ú–ê –ù–ï –†–ï–®–ï–ù–ê!")
        print("   –ú–æ–¥–µ–ª—å –≤—Å–µ –µ—â–µ –¥–∞–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
        print("   –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")

    if directions and np.std(directions) > 0.1:
        print("‚úÖ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–µ—é—Ç —Ö–æ—Ä–æ—à–µ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ")
    else:
        print("‚ö†Ô∏è  –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ –µ—â–µ –∏–º–µ—é—Ç –Ω–∏–∑–∫–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ")


if __name__ == "__main__":
    asyncio.run(test_fixed_ml_logic())
