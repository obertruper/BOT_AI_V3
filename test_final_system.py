#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã BOT_AI_V3
"""

import asyncio
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


async def test_system():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""

    print("=" * 60)
    print("üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ BOT_AI_V3")
    print("=" * 60)

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
    print("\nüìä 1. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (PostgreSQL:5555)")
    try:
        from database.connections.postgres import AsyncPGPool

        result = await AsyncPGPool.fetch("SELECT version()")
        print("   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        data_check = await AsyncPGPool.fetch(
            "SELECT COUNT(*) as cnt FROM raw_market_data WHERE timestamp > EXTRACT(EPOCH FROM NOW() - INTERVAL '1 hour') * 1000"
        )
        fresh_data = data_check[0]["cnt"] > 0
        print(
            f"   {'‚úÖ' if fresh_data else '‚ö†Ô∏è'} –°–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ: {'–î–∞' if fresh_data else '–ù–µ—Ç'} ({data_check[0]['cnt']} –∑–∞–ø–∏—Å–µ–π)"
        )

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Bybit API
    print("\nüè¶ 2. Bybit API")
    try:
        from exchanges.factory import ExchangeFactory

        factory = ExchangeFactory()

        api_key = os.getenv("BYBIT_API_KEY")
        api_secret = os.getenv("BYBIT_API_SECRET")

        if api_key and api_secret:
            client = factory.create_client(
                exchange_type="bybit",
                api_key=api_key,
                api_secret=api_secret,
                sandbox=False,
            )

            await client.connect()

            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
            balance = await client.get_balance()
            if balance:
                print("   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
                usdt_balance = next((b for b in balance if b.currency == "USDT"), None)
                if usdt_balance:
                    print(f"   üí∞ –ë–∞–ª–∞–Ω—Å USDT: {usdt_balance.free:.2f}")
            else:
                print("   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å")

            await client.disconnect()
        else:
            print("   ‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ ML —Å–∏—Å—Ç–µ–º—ã
    print("\nü§ñ 3. ML —Å–∏—Å—Ç–µ–º–∞")
    try:
        from core.config.config_manager import ConfigManager
        from ml.ml_manager import MLManager

        config_manager = ConfigManager()
        ml_manager = MLManager(config_manager.get_config())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        await ml_manager.initialize()
        print("   ‚úÖ ML Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å
        if ml_manager.model:
            print("   ‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: UnifiedPatchTST")
        else:
            print("   ‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("\n‚öôÔ∏è 4. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
    try:
        from core.config.config_manager import ConfigManager

        config_manager = ConfigManager()
        config = config_manager.get_config()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        data_management = config.get("data_management", {})
        print(
            f"   ‚úÖ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: {data_management.get('auto_update', False)}"
        )
        print(
            f"   ‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {data_management.get('update_interval', 60)} —Å–µ–∫"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º exchanges
        exchanges = config.get("exchanges", {})
        enabled_exchanges = [
            name for name, conf in exchanges.items() if conf.get("enabled")
        ]
        print(f"   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –±–∏—Ä–∂–∏: {', '.join(enabled_exchanges)}")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
    print("\nüåê 5. –°–µ—Ç–µ–≤—ã–µ –ø–æ—Ä—Ç—ã")
    import socket

    ports_to_check = [
        (5555, "PostgreSQL"),
        (8080, "API —Å–µ—Ä–≤–µ—Ä"),
        (5173, "–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"),
    ]

    for port, name in ports_to_check:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        result = sock.connect_ex(("localhost", port))
        sock.close()

        if result == 0:
            print(f"   ‚úÖ –ü–æ—Ä—Ç {port} ({name}): –ó–∞–Ω—è—Ç/–†–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print(f"   ‚ö†Ô∏è –ü–æ—Ä—Ç {port} ({name}): –°–≤–æ–±–æ–¥–µ–Ω")

    print("\n" + "=" * 60)
    print("‚úÖ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 60)
    print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print("   ./start_with_logs.sh")
    print("\nüõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:")
    print("   ./stop_all.sh")


if __name__ == "__main__":
    asyncio.run(test_system())
