#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ —Å –ø—Ä—è–º—ã—Ö –≤—ã–∑–æ–≤–æ–≤ AsyncPGPool –Ω–∞ MCP postgres tools
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∑–∞–º–µ–Ω—ã
"""

import os
import re
from datetime import datetime


def find_asyncpgpool_usage() -> list[tuple[str, int, str]]:
    """–ù–∞–π—Ç–∏ –≤—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AsyncPGPool –≤ –ø—Ä–æ–µ–∫—Ç–µ"""

    usage_list = []
    patterns = [
        r"AsyncPGPool\.(fetch|fetchrow|fetchval|execute)",
        r"from database\.connections\.postgres import AsyncPGPool",
        r"import AsyncPGPool",
    ]

    # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    exclude_dirs = {".git", "venv", "__pycache__", "node_modules", ".idea"}

    for root, dirs, files in os.walk("."):
        # –£–±–∏—Ä–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        dirs[:] = [d for d in dirs if d not in exclude_dirs]

        for file in files:
            if file.endswith(".py"):
                filepath = os.path.join(root, file)
                try:
                    with open(filepath, encoding="utf-8") as f:
                        content = f.read()
                        lines = content.split("\n")

                        for i, line in enumerate(lines, 1):
                            for pattern in patterns:
                                if re.search(pattern, line):
                                    usage_list.append((filepath, i, line.strip()))
                except Exception as e:
                    print(f"Error reading {filepath}: {e}")

    return usage_list


def generate_mcp_wrapper():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è wrapper —Ñ–∞–π–ª–∞ –¥–ª—è MCP"""

    wrapper_code = '''#!/usr/bin/env python3
"""
MCP Database Wrapper - –∑–∞–º–µ–Ω–∞ AsyncPGPool –Ω–∞ MCP postgres tools
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ migrate_to_mcp.py
"""

import os
from typing import List, Dict, Any, Optional
from datetime import datetime
import asyncio

# –≠–º—É–ª—è—Ü–∏—è MCP tools –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
# –í production –∑–¥–µ—Å—å –±—É–¥—É—Ç —Ä–µ–∞–ª—å–Ω—ã–µ MCP –≤—ã–∑–æ–≤—ã —á–µ—Ä–µ–∑ Claude Code API

class MCPDatabaseWrapper:
    """
    Wrapper –¥–ª—è MCP postgres tools —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º AsyncPGPool
    """

    def __init__(self):
        self.host = "localhost"
        self.port = 5555
        self.database = "bot_trading_v3"
        self.user = "obertruper"
        # Password –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.password = os.getenv("PGPASSWORD", "your-password-here")  # –ó–∞–º–µ–Ω–µ–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ MCP (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)"""
        # mcp__postgres__connect_db(
        #     host=self.host,
        #     port=self.port,
        #     database=self.database,
        #     user=self.user,
        #     password=self.password
        # )
        pass

    async def fetch(self, query: str, *params) -> List[Dict[str, Any]]:
        """
        SELECT –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ MCP
        –ó–∞–º–µ–Ω—è–µ—Ç: AsyncPGPool.fetch()
        """
        # –í production:
        # result = await mcp__postgres__query(sql=query, params=list(params))
        # return result

        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π AsyncPGPool
        from database.connections.postgres import AsyncPGPool as OriginalPool
        return await OriginalPool.fetch(query, *params)

    async def fetchrow(self, query: str, *params) -> Optional[Dict[str, Any]]:
        """
        SELECT –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —á–µ—Ä–µ–∑ MCP
        –ó–∞–º–µ–Ω—è–µ—Ç: AsyncPGPool.fetchrow()
        """
        rows = await self.fetch(query, *params)
        return rows[0] if rows else None

    async def fetchval(self, query: str, *params) -> Any:
        """
        SELECT –æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ MCP
        –ó–∞–º–µ–Ω—è–µ—Ç: AsyncPGPool.fetchval()
        """
        row = await self.fetchrow(query, *params)
        if row:
            return list(row.values())[0]
        return None

    async def execute(self, query: str, *params) -> str:
        """
        INSERT/UPDATE/DELETE —á–µ—Ä–µ–∑ MCP
        –ó–∞–º–µ–Ω—è–µ—Ç: AsyncPGPool.execute()
        """
        # –í production:
        # result = await mcp__postgres__execute(sql=query, params=list(params))
        # return result

        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
        from database.connections.postgres import AsyncPGPool as OriginalPool
        return await OriginalPool.execute(query, *params)

    async def executemany(self, query: str, params_list: List[tuple]) -> str:
        """
        –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ MCP
        –ó–∞–º–µ–Ω—è–µ—Ç: AsyncPGPool.executemany()
        """
        # –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞—Ç—á–∞–º–∏ —á–µ—Ä–µ–∑ MCP
        for params in params_list:
            await self.execute(query, *params)
        return f"EXECUTED {len(params_list)} queries"

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ MCP-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã

    async def list_tables(self, schema: str = "public") -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü —á–µ—Ä–µ–∑ MCP"""
        # return await mcp__postgres__list_tables(schema=schema)
        query = """
            SELECT tablename
            FROM pg_tables
            WHERE schemaname = $1
        """
        rows = await self.fetch(query, schema)
        return [row['tablename'] for row in rows]

    async def describe_table(self, table: str, schema: str = "public") -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ MCP"""
        # return await mcp__postgres__describe_table(table=table, schema=schema)
        query = """
            SELECT
                column_name,
                data_type,
                is_nullable,
                column_default
            FROM information_schema.columns
            WHERE table_schema = $1 AND table_name = $2
            ORDER BY ordinal_position
        """
        rows = await self.fetch(query, schema, table)
        return {"columns": rows}

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_mcp_wrapper = MCPDatabaseWrapper()

class AsyncPGPool:
    """
    Drop-in –∑–∞–º–µ–Ω–∞ –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ AsyncPGPool
    –í—Å–µ –≤—ã–∑–æ–≤—ã –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–∞ MCP wrapper
    """

    @staticmethod
    async def fetch(query: str, *params):
        return await _mcp_wrapper.fetch(query, *params)

    @staticmethod
    async def fetchrow(query: str, *params):
        return await _mcp_wrapper.fetchrow(query, *params)

    @staticmethod
    async def fetchval(query: str, *params):
        return await _mcp_wrapper.fetchval(query, *params)

    @staticmethod
    async def execute(query: str, *params):
        return await _mcp_wrapper.execute(query, *params)

    @staticmethod
    async def executemany(query: str, params_list: List[tuple]):
        return await _mcp_wrapper.executemany(query, params_list)

    # –ù–æ–≤—ã–µ MCP –º–µ—Ç–æ–¥—ã
    @staticmethod
    async def list_tables(schema: str = "public"):
        return await _mcp_wrapper.list_tables(schema)

    @staticmethod
    async def describe_table(table: str, schema: str = "public"):
        return await _mcp_wrapper.describe_table(table, schema)

# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
__all__ = ['AsyncPGPool', 'MCPDatabaseWrapper']
'''

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs("utils/mcp", exist_ok=True)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º wrapper
    wrapper_path = "utils/mcp/database_wrapper.py"
    with open(wrapper_path, "w", encoding="utf-8") as f:
        f.write(wrapper_code)

    print(f"‚úÖ –°–æ–∑–¥–∞–Ω MCP wrapper: {wrapper_path}")

    # –°–æ–∑–¥–∞–µ–º __init__.py
    init_path = "utils/mcp/__init__.py"
    with open(init_path, "w", encoding="utf-8") as f:
        f.write(
            'from .database_wrapper import AsyncPGPool, MCPDatabaseWrapper\n\n__all__ = ["AsyncPGPool", "MCPDatabaseWrapper"]\n'
        )

    return wrapper_path


def create_migration_script(usage_list: list[tuple[str, int, str]]):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏"""

    migration_script = '''#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ MCP
–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {timestamp}
"""

import os
import re

def migrate_file(filepath: str):
    """–ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω —Ñ–∞–π–ª –Ω–∞ MCP"""

    with open(filepath, 'r') as f:
        content = f.read()

    # –ó–∞–º–µ–Ω–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
    content = re.sub(
        r'from database\\.connections\\.postgres import AsyncPGPool',
        'from utils.mcp.database_wrapper import AsyncPGPool',
        content
    )

    # –°–æ–∑–¥–∞–µ–º backup
    backup_path = filepath + '.backup'
    with open(backup_path, 'w') as f:
        f.write(content)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(filepath, 'w') as f:
        f.write(content)

    print(f"‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω: {{filepath}}")
    print(f"   Backup: {{backup_path}}")

# –§–∞–π–ª—ã –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
files_to_migrate = {files}

if __name__ == "__main__":
    print("üöÄ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ MCP...")

    for filepath in files_to_migrate:
        if os.path.exists(filepath):
            migrate_file(filepath)

    print("\\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è!")
'''.format(
        timestamp=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        files=list(set(filepath for filepath, _, _ in usage_list)),
    )

    script_path = "run_mcp_migration.py"
    with open(script_path, "w", encoding="utf-8") as f:
        f.write(migration_script)

    os.chmod(script_path, 0o755)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏: {script_path}")

    return script_path


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    print("=" * 60)
    print("üîç –ê–ù–ê–õ–ò–ó –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø AsyncPGPool")
    print("=" * 60)

    # 1. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    usage_list = find_asyncpgpool_usage()

    if not usage_list:
        print("‚úÖ AsyncPGPool –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–¥–µ")
        return

    print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ {len(usage_list)} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π AsyncPGPool:\n")

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ñ–∞–π–ª–∞–º
    files_dict = {}
    for filepath, line_num, line in usage_list:
        if filepath not in files_dict:
            files_dict[filepath] = []
        files_dict[filepath].append((line_num, line))

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for filepath, occurrences in list(files_dict.items())[:10]:
        print(f"\nüìÑ {filepath}:")
        for line_num, line in occurrences[:3]:
            print(f"  L{line_num}: {line[:80]}...")

    if len(files_dict) > 10:
        print(f"\n... –∏ –µ—â–µ {len(files_dict) - 10} —Ñ–∞–π–ª–æ–≤")

    # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º wrapper
    print("\n" + "=" * 60)
    print("üîß –°–û–ó–î–ê–ù–ò–ï MCP WRAPPER")
    print("=" * 60)

    wrapper_path = generate_mcp_wrapper()

    # 3. –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏
    print("\n" + "=" * 60)
    print("üìù –°–û–ó–î–ê–ù–ò–ï –°–ö–†–ò–ü–¢–ê –ú–ò–ì–†–ê–¶–ò–ò")
    print("=" * 60)

    script_path = create_migration_script(usage_list)

    # 4. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    print("\n" + "=" * 60)
    print("üìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ú–ò–ì–†–ê–¶–ò–ò")
    print("=" * 60)

    print(
        """
–®–∞–≥–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏:

1. ‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π wrapper:
   cat utils/mcp/database_wrapper.py

2. üß™ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ:
   - –û—Ç–∫—Ä–æ–π—Ç–µ –ª—é–±–æ–π —Ñ–∞–π–ª –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ
   - –ó–∞–º–µ–Ω–∏—Ç–µ –∏–º–ø–æ—Ä—Ç:
     from database.connections.postgres import AsyncPGPool
     –Ω–∞:
     from utils.mcp.database_wrapper import AsyncPGPool
   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã

3. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –º–∏–≥—Ä–∞—Ü–∏—é:
   python3 run_mcp_migration.py

4. üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:
   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É: python3 unified_launcher.py
   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏
   - –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ MCP —Ä–∞–±–æ—Ç–∞–µ—Ç

5. üéØ –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏:
   - –£–¥–∞–ª–∏—Ç–µ backup —Ñ–∞–π–ª—ã: rm **/*.backup
   - –ó–∞–∫–æ–º–º–∏—Ç—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: git add -A && git commit -m "Migrate to MCP postgres"

‚ö†Ô∏è  –í–ê–ñ–ù–û: –°–¥–µ–ª–∞–π—Ç–µ backup –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π!
   tar -czf backup_before_mcp.tar.gz *.py **/*.py
"""
    )

    # 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 60)
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 60)

    print(
        f"""
‚Ä¢ –§–∞–π–ª–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏: {len(files_dict)}
‚Ä¢ –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {len(usage_list)}
‚Ä¢ Wrapper —Å–æ–∑–¥–∞–Ω: {wrapper_path}
‚Ä¢ –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏: {script_path}

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã:
"""
    )

    # –¢–æ–ø —Ñ–∞–π–ª–æ–≤ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
    sorted_files = sorted(files_dict.items(), key=lambda x: len(x[1]), reverse=True)
    for filepath, occurrences in sorted_files[:5]:
        print(f"  ‚Ä¢ {filepath}: {len(occurrences)} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π")


if __name__ == "__main__":
    main()
