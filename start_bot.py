#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
"""

import asyncio
import os
import sys
from datetime import datetime

from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

load_dotenv()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ["PGPORT"] = "5555"
os.environ["PGUSER"] = "obertruper"
os.environ["PGDATABASE"] = "bot_trading_v3"


async def start_bot():
    """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    print(f"\nüöÄ –ó–ê–ü–£–°–ö –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê - {datetime.now().strftime('%H:%M:%S')}")
    print("=" * 60)

    from core.config.config_manager import get_global_config_manager
    from core.system.orchestrator import SystemOrchestrator
    from database.connections.postgres import AsyncPGPool

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        config_manager = get_global_config_manager()
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
        api_key = os.getenv("BYBIT_API_KEY")
        api_secret = os.getenv("BYBIT_API_SECRET")

        if not api_key or not api_secret:
            print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω—ã API –∫–ª—é—á–∏ Bybit –≤ .env —Ñ–∞–π–ª–µ!")
            return

        print(f"‚úÖ API –∫–ª—é—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (–∫–ª—é—á: {api_key[:10]}...)")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
        pool = await AsyncPGPool.get_pool()
        result = await pool.fetchval(
            "SELECT COUNT(*) FROM raw_market_data WHERE symbol='BTCUSDT' AND interval_minutes=15"
        )
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ (BTCUSDT: {result} —Å–≤–µ—á–µ–π)")

        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        orchestrator = SystemOrchestrator(config_manager)
        print("‚úÖ –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        print("\nüîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        await orchestrator.initialize()
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

        # –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
        print("\nüéØ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏...")
        await orchestrator.start()
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        status = await orchestrator.get_system_status()
        print("\nüìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´:")
        print(f"   - –ó–∞–ø—É—â–µ–Ω: {status['system']['is_running']}")
        print(
            f"   - –ó–¥–æ—Ä–æ–≤—å–µ: {'‚úÖ OK' if status['health']['is_healthy'] else '‚ùå –ü–†–û–ë–õ–ï–ú–´'}"
        )
        print(f"   - –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {len(status['components']['active'])}")
        print(f"   - –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–π–¥–µ—Ä—ã: {status['traders']['active']}")

        if not status["health"]["is_healthy"]:
            print("\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã:")
            for issue in status["health"]["issues"]:
                print(f"   - {issue}")

        print("\n‚úÖ –ë–û–¢ –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù –ò –†–ê–ë–û–¢–ê–ï–¢!")
        print("   –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print("=" * 60)

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º –≤—ã–≤–æ–¥–æ–º —Å—Ç–∞—Ç—É—Å–∞
        while True:
            await asyncio.sleep(60)  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

            # –ö—Ä–∞—Ç–∫–∏–π —Å—Ç–∞—Ç—É—Å
            status = await orchestrator.get_system_status()
            trades = status["traders"]["total_trades"]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ ML —Å–∏–≥–Ω–∞–ª—ã
            ml_status = await pool.fetchrow(
                """
                SELECT COUNT(*) as signals, MAX(created_at) as latest
                FROM signals
                WHERE created_at > NOW() - INTERVAL '5 minutes'
            """
            )

            print(
                f"\n[{datetime.now().strftime('%H:%M:%S')}] "
                f"–¢—Ä–µ–π–¥–µ—Ä—ã: {status['traders']['active']} | "
                f"–°–¥–µ–ª–æ–∫: {trades} | "
                f"ML —Å–∏–≥–Ω–∞–ª–æ–≤ (5–º–∏–Ω): {ml_status['signals'] if ml_status else 0}"
            )

    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")

    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback

        traceback.print_exc()

    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
        if "orchestrator" in locals():
            await orchestrator.shutdown()

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await AsyncPGPool.close_pool()

        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")


if __name__ == "__main__":
    asyncio.run(start_bot())
