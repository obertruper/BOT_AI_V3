#!/usr/bin/env python3
"""
–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
"""

import asyncio
import json

import redis.asyncio as redis


async def add_test_balances():
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã —á–µ—Ä–µ–∑ Redis"""

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis
    redis_client = redis.from_url("redis://localhost:6379/5")

    # –¢–µ—Å—Ç–æ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã
    test_balances = {
        "USDT": {"total": "10000", "available": "10000", "locked": "0"},
        "BTC": {"total": "0.5", "available": "0.5", "locked": "0"},
        "ETH": {"total": "5", "available": "5", "locked": "0"},
        "BNB": {"total": "20", "available": "20", "locked": "0"},
        "SOL": {"total": "100", "available": "100", "locked": "0"},
        "XRP": {"total": "10000", "available": "10000", "locked": "0"},
        "DOGE": {"total": "50000", "available": "50000", "locked": "0"},
        "DOT": {"total": "500", "available": "500", "locked": "0"},
        "LINK": {"total": "500", "available": "500", "locked": "0"},
        "ADA": {"total": "10000", "available": "10000", "locked": "0"},
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–ª–∞–Ω—Å—ã –≤ Redis
    for symbol, balance_data in test_balances.items():
        key = f"balance:bybit:{symbol}"
        balance_data["last_updated"] = "2025-08-18T18:40:00"
        await redis_client.setex(key, 3600, json.dumps(balance_data))  # TTL 1 —á–∞—Å
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å {symbol}: {balance_data['available']}")

    # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–∏–º —Ñ–µ–π–∫–æ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã –¥–ª—è exchange_balances
    exchange_balances_key = "exchange_balances:bybit"
    await redis_client.setex(exchange_balances_key, 3600, json.dumps(test_balances))

    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ Redis")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
    print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤:")
    for symbol in test_balances:
        key = f"balance:bybit:{symbol}"
        data = await redis_client.get(key)
        if data:
            balance = json.loads(data)
            print(f"  {symbol}: {balance['available']}")

    await redis_client.close()


if __name__ == "__main__":
    asyncio.run(add_test_balances())
