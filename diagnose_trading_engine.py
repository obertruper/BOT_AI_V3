#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å Trading Engine
"""

import asyncio
import subprocess
import sys
from pathlib import Path

sys.path.append(str(Path(__file__).parent))

from core.logger import setup_logger
from database.connections.postgres import AsyncPGPool

logger = setup_logger("diagnose_trading")


async def diagnose_trading_engine():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–æ—Ä–≥–æ–≤—ã–º –¥–≤–∏–∂–∫–æ–º."""

    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TRADING ENGINE\n")
    print("=" * 60)

    issues_found = []

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")

    ps_result = subprocess.run(["ps", "aux"], capture_output=True, text=True)
    processes = ps_result.stdout

    critical_processes = {
        "unified_launcher.py": False,
        "main.py": False,
        "web/launcher.py": False,
    }

    for proc in critical_processes:
        if proc in processes:
            critical_processes[proc] = True
            print(f"‚úÖ {proc} –∑–∞–ø—É—â–µ–Ω")
        else:
            print(f"‚ùå {proc} –ù–ï –∑–∞–ø—É—â–µ–Ω")
            issues_found.append(f"{proc} –Ω–µ –∑–∞–ø—É—â–µ–Ω")

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")

    config_files = ["config/system.yaml", "config/trading.yaml", ".env"]

    for cfg in config_files:
        if Path(cfg).exists():
            print(f"‚úÖ {cfg} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print(f"‚ùå {cfg} –ù–ï –Ω–∞–π–¥–µ–Ω")
            issues_found.append(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {cfg} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏
    print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö...")

    log_files = [
        "data/logs/trading.log",
        "data/logs/error.log",
        "data/logs/bot_trading_20250806.log",
    ]

    error_patterns = ["ERROR", "CRITICAL", "Exception", "Failed", "Can't connect"]
    errors_found = []

    for log_file in log_files:
        if Path(log_file).exists():
            try:
                result = subprocess.run(
                    ["tail", "-n", "100", log_file], capture_output=True, text=True
                )

                for line in result.stdout.split("\n"):
                    for pattern in error_patterns:
                        if pattern in line:
                            errors_found.append(line.strip())
                            break
            except:
                pass

    if errors_found:
        print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {len(errors_found)} –æ—à–∏–±–æ–∫:")
        for err in errors_found[-5:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
            print(f"   {err[:100]}...")
        issues_found.append(f"–ù–∞–π–¥–µ–Ω–æ {len(errors_found)} –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö")
    else:
        print("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –ë–î - –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    component_checks = {
        "ML Manager": """
            SELECT COUNT(*) as count, MAX(created_at) as last_time
            FROM processed_market_data
            WHERE created_at > NOW() - INTERVAL '15 minutes'
        """,
        "Signal Processor": """
            SELECT COUNT(*) as count, MAX(created_at) as last_time
            FROM signals
            WHERE created_at > NOW() - INTERVAL '15 minutes'
        """,
        "Trading Engine": """
            SELECT COUNT(*) as count, MAX(created_at) as last_time
            FROM orders
            WHERE created_at > NOW() - INTERVAL '1 hour'
        """,
    }

    for component, query in component_checks.items():
        result = await AsyncPGPool.fetchrow(query)
        if result and result["count"] > 0:
            print(f"‚úÖ {component}: –∞–∫—Ç–∏–≤–µ–Ω ({result['count']} –∑–∞–ø–∏—Å–µ–π)")
        else:
            print(f"‚ùå {component}: –ù–ï –∞–∫—Ç–∏–≤–µ–Ω")
            issues_found.append(f"{component} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")

    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ Signal Processing
    print("\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤...")

    # –ï—Å—Ç—å –ª–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã?
    unprocessed = await AsyncPGPool.fetchrow(
        """
        SELECT COUNT(*) as count
        FROM signals s
        WHERE s.created_at > NOW() - INTERVAL '1 hour'
        AND NOT EXISTS (
            SELECT 1 FROM orders o
            WHERE o.strategy_name = s.strategy_name
            AND o.symbol = s.symbol
            AND o.created_at >= s.created_at
            AND o.created_at <= s.created_at + INTERVAL '5 minutes'
        )
    """
    )

    if unprocessed and unprocessed["count"] > 0:
        print(f"‚ùå {unprocessed['count']} –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
        issues_found.append(f"{unprocessed['count']} —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        examples = await AsyncPGPool.fetch(
            """
            SELECT symbol, signal_type, strength, confidence, created_at
            FROM signals
            WHERE created_at > NOW() - INTERVAL '1 hour'
            ORDER BY created_at DESC
            LIMIT 3
        """
        )

        if examples:
            print("\n   –ü—Ä–∏–º–µ—Ä—ã –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤:")
            for sig in examples:
                print(
                    f"   - {sig['symbol']} {sig['signal_type']} (—Å–∏–ª–∞: {sig['strength']:.2f})"
                )
    else:
        print("‚úÖ –í—Å–µ —Å–∏–≥–Ω–∞–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")

    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–∞–º
    print("\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–∞–º...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π
    env_path = Path(".env")
    if env_path.exists():
        with open(env_path) as f:
            env_content = f.read()

        exchanges_with_keys = []
        for exchange in ["BYBIT", "BINANCE", "OKX", "BITGET"]:
            if f"{exchange}_API_KEY" in env_content:
                exchanges_with_keys.append(exchange)

        if exchanges_with_keys:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–ª—é—á–∏ –¥–ª—è: {', '.join(exchanges_with_keys)}")
        else:
            print("‚ùå API –∫–ª—é—á–∏ –±–∏—Ä–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env")
            issues_found.append("API –∫–ª—é—á–∏ –±–∏—Ä–∂ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

    # 7. –î–ò–ê–ì–ù–û–ó –ò –†–ï–®–ï–ù–ò–ï
    print("\n7Ô∏è‚É£ –î–ò–ê–ì–ù–û–ó:")
    print("=" * 60)

    if not issues_found:
        print("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    else:
        print(f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(issues_found)}")
        for i, issue in enumerate(issues_found, 1):
            print(f"   {i}. {issue}")

    # –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞
    if "Trading Engine –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω" in str(issues_found):
        print("\nüîß –û–°–ù–û–í–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: Trading Engine –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã")
        print("\nüìã –†–ï–®–ï–ù–ò–ï:")
        print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
        print("   ```bash")
        print("   # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã")
        print("   pkill -f unified_launcher")
        print("   pkill -f main.py")
        print("   ")
        print("   # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å ML –∏ —Ç–æ—Ä–≥–æ–≤–ª–µ–π")
        print("   python3 unified_launcher.py --mode=ml")
        print("   ```")
        print("\n2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ API:")
        print("   ```bash")
        print("   curl http://localhost:8080/api/health")
        print("   ```")
        print("\n3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã")

    return issues_found


if __name__ == "__main__":
    issues = asyncio.run(diagnose_trading_engine())

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
    sys.exit(0 if not issues else 1)
