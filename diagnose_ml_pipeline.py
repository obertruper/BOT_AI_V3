#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ML pipeline
"""

import asyncio
import os
from datetime import datetime

import numpy as np
import pandas as pd
from dotenv import load_dotenv

load_dotenv()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ["PGPORT"] = "5555"
os.environ["PGUSER"] = "obertruper"
os.environ["PGDATABASE"] = "bot_trading_v3"


async def diagnose_ml_pipeline():
    """–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ML pipeline"""
    from core.config.config_manager import get_global_config_manager
    from database.connections.postgres import AsyncPGPool
    from ml.logic.feature_engineering import FeatureEngineer
    from ml.ml_manager import MLManager

    print(f"\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ML PIPELINE - {datetime.now().strftime('%H:%M:%S')}")
    print("=" * 80)

    try:
        pool = await AsyncPGPool.get_pool()
        config_manager = get_global_config_manager()
        config = config_manager.get_config()

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        print("\n1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –í –ë–î:")

        symbols = ["BTCUSDT", "ETHUSDT", "SOLUSDT"]

        for symbol in symbols:
            data_info = await pool.fetchrow(
                """
                SELECT
                    COUNT(*) as count,
                    MIN(datetime) as first,
                    MAX(datetime) as last,
                    (MAX(datetime) - MIN(datetime)) as span
                FROM raw_market_data
                WHERE symbol = $1 AND interval_minutes = 15
            """,
                symbol,
            )

            if data_info and data_info["count"] > 0:
                lag = datetime.now() - data_info["last"].replace(tzinfo=None)
                print(
                    f"   {symbol}: {data_info['count']} —Å–≤–µ—á–µ–π, "
                    f"–ø–æ—Å–ª–µ–¥–Ω—è—è {int(lag.total_seconds() / 60)} –º–∏–Ω –Ω–∞–∑–∞–¥"
                )
            else:
                print(f"   {symbol}: ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö!")

        # 2. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ML
        print("\n2Ô∏è‚É£ –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –î–õ–Ø ML:")

        symbol = "BTCUSDT"

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 200 —Å–≤–µ—á–µ–π
        candles = await pool.fetch(
            """
            SELECT
                datetime,
                open,
                high,
                low,
                close,
                volume
            FROM raw_market_data
            WHERE symbol = $1 AND interval_minutes = 15
            ORDER BY datetime DESC
            LIMIT 200
        """,
            symbol,
        )

        if candles:
            print(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(candles)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –∫–æ–ª–æ–Ω–æ–∫
            df = pd.DataFrame(
                candles, columns=["datetime", "open", "high", "low", "close", "volume"]
            )
            print(f"   üìã –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")

            # –°–æ–∑–¥–∞–µ–º timestamp –∫–æ–ª–æ–Ω–∫—É
            df["timestamp"] = pd.to_datetime(df["datetime"])
            df = df.sort_values("timestamp")
            df = df.reset_index(drop=True)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º decimal –≤ float
            for col in ["open", "high", "low", "close", "volume"]:
                df[col] = df[col].astype(float)

            print(f"   üìä DataFrame shape: {df.shape}")
            print(f"   üìÖ –ü–µ—Ä–∏–æ–¥: {df['timestamp'].min()} - {df['timestamp'].max()}")

            # 3. Feature Engineering
            print("\n3Ô∏è‚É£ FEATURE ENGINEERING:")

            try:
                feature_engineer = FeatureEngineer(config)

                # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
                features_array = feature_engineer.create_features(df)

                print(
                    f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {features_array.shape[1] if len(features_array.shape) > 1 else 1}"
                )
                print(f"   üìä Shape –ø–æ—Å–ª–µ FE: {features_array.shape}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º NaN
                nan_count = np.isnan(features_array).sum()
                print(f"   ‚ö†Ô∏è NaN –∑–Ω–∞—á–µ–Ω–∏–π: {nan_count}")

                if nan_count > 0:
                    nan_mask = np.isnan(features_array).any(axis=0)
                    nan_indices = np.where(nan_mask)[0]
                    print(
                        f"   ‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å NaN: {nan_indices[:5].tolist()}..."
                    )

                # 4. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–µ–ª–∏
                print("\n4Ô∏è‚É£ –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–• –î–õ–Ø –ú–û–î–ï–õ–ò:")

                # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å NaN
                if nan_count > 0:
                    # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ NaN
                    valid_rows = ~np.isnan(features_array).any(axis=1)
                    features_clean = features_array[valid_rows]
                else:
                    features_clean = features_array

                print(f"   üìä Shape –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è NaN: {features_clean.shape}")

                if features_clean.shape[0] >= 96:
                    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 96 –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫
                    features_for_model = features_clean[-96:]
                    print(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏: {features_for_model.shape}")

                    # 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML Manager
                    print("\n5Ô∏è‚É£ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ML MANAGER:")

                    ml_manager = MLManager(config)
                    await ml_manager.initialize()
                    print("   ‚úÖ ML Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

                    # 6. –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                    print("\n6Ô∏è‚É£ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø:")

                    # –î–æ–±–∞–≤–ª—è–µ–º batch dimension
                    input_tensor = features_for_model[
                        np.newaxis, ...
                    ]  # (1, 96, features)
                    print(f"   üìä Input shape: {input_tensor.shape}")

                    prediction = await ml_manager.predict(input_tensor)

                    if prediction:
                        print("   ‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:")
                        print(f"      Direction: {prediction.get('direction')}")
                        print(
                            f"      Confidence: {prediction.get('confidence', 0):.2%}"
                        )
                        print(
                            f"      Predicted returns: {prediction.get('predicted_returns', [])}"
                        )

                        # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ Signal Processor
                        print("\n7Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê SIGNAL PROCESSOR:")

                        from ml.ml_signal_processor import MLSignalProcessor

                        signal_processor = MLSignalProcessor(config)

                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                        current_price = float(df["close"].iloc[-1])
                        print(f"   üí≤ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.2f}")

                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                        signal = await signal_processor.process_ml_prediction(
                            symbol=symbol,
                            ml_output=prediction,
                            current_price=current_price,
                        )

                        if signal:
                            print("   ‚úÖ –°–∏–≥–Ω–∞–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:")
                            print(f"      Type: {signal.signal_type}")
                            print(f"      Confidence: {signal.confidence:.2%}")
                            print(f"      Strength: {signal.strength:.4f}")
                        else:
                            print("   ‚ùå –°–∏–≥–Ω–∞–ª –Ω–µ –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä—ã")
                    else:
                        print("   ‚ùå –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ")
                else:
                    print(f"   ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {features_clean.shape[0]} < 96")

            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ Feature Engineering: {e}")
                import traceback

                traceback.print_exc()

        else:
            print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")

        # 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        print("\n8Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ML:")

        ml_config = config.get("ml", {})
        print(f"   –ú–æ–¥–µ–ª—å: {ml_config.get('model', {}).get('model_type', 'N/A')}")
        print(
            f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {ml_config.get('trading', {}).get('min_confidence', 0.6):.0%}"
        )
        print(
            f"   –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {ml_config.get('trading', {}).get('position_size', 0.01)}"
        )

        print("\n" + "=" * 80)

    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()
    finally:
        await AsyncPGPool.close_pool()


if __name__ == "__main__":
    asyncio.run(diagnose_ml_pipeline())
