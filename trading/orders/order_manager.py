#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ä–¥–µ—Ä–æ–≤

–£–ø—Ä–∞–≤–ª—è–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –æ—Ä–¥–µ—Ä–æ–≤ –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è.
"""

import asyncio
import logging
from datetime import datetime

from database.connections import get_async_db
from database.models.base_models import (
    Order,
    OrderSide,
    OrderStatus,
    OrderType,
    SignalType,
)
from database.models.signal import Signal

from .sltp_integration import SLTPIntegration
from .partial_tp_manager import PartialTPManager


class OrderManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞–º–∏

    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
    - –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ –∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤
    - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ä–¥–µ—Ä–æ–≤
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ stop-loss –∏ take-profit
    - –û—Ç–º–µ–Ω—É –∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é –æ—Ä–¥–µ—Ä–æ–≤
    """

    def __init__(
        self,
        exchange_registry,
        logger: logging.Logger | None = None,
        sltp_manager=None,
    ):
        self.exchange_registry = exchange_registry
        self.logger = logger or logging.getLogger(__name__)
        self._active_orders: dict[str, Order] = {}
        self._order_locks: dict[str, asyncio.Lock] = {}
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SL/TP Manager
        self.sltp_integration = SLTPIntegration(sltp_manager) if sltp_manager else None
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Partial TP Manager
        self.partial_tp_manager = PartialTPManager(exchange_registry, logger)
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤
        self._recent_orders: dict[str, float] = {}  # symbol -> last_order_time
        self._duplicate_check_interval = 60  # —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –æ—Ä–¥–µ—Ä–∞–º–∏

    async def create_order_from_signal(self, signal: Signal, trader_id: str) -> Order | None:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞

        Args:
            signal: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
            trader_id: ID —Ç—Ä–µ–π–¥–µ—Ä–∞

        Returns:
            Order –∏–ª–∏ None –µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤
            if await self._is_duplicate_order(signal):
                self.logger.warning(
                    f"‚ö†Ô∏è –î—É–±–ª–∏—Ä—É—é—â–∏–π –æ—Ä–¥–µ—Ä –¥–ª—è {signal.symbol} –æ—Ç–∫–ª–æ–Ω–µ–Ω "
                    f"(–º–µ–Ω–µ–µ {self._duplicate_check_interval}—Å —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ)"
                )
                return None

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏ —Å—Ç–æ—Ä–æ–Ω—É –æ—Ä–¥–µ—Ä–∞
            order_side = self._get_order_side(signal.signal_type)
            if not order_side:
                self.logger.warning(
                    f"–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–æ—Ä–æ–Ω—É –æ—Ä–¥–µ—Ä–∞ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ {signal.signal_type}"
                )
                return None

            # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä
            order = Order(
                exchange=signal.exchange,
                symbol=signal.symbol,
                order_id=self._generate_order_id(),
                side=order_side,
                order_type=OrderType.LIMIT if signal.suggested_price else OrderType.MARKET,
                status=OrderStatus.PENDING,
                price=float(signal.suggested_price) if signal.suggested_price else None,
                quantity=float(signal.suggested_quantity),
                stop_loss=float(signal.suggested_stop_loss) if signal.suggested_stop_loss else None,
                take_profit=(
                    float(signal.suggested_take_profit) if signal.suggested_take_profit else None
                ),
                strategy_name=signal.strategy_name,
                trader_id=trader_id,
                extra_data={
                    "signal_id": signal.id,
                    "signal_strength": signal.strength,
                    "signal_confidence": signal.confidence,
                },
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            async with get_async_db() as db:
                db.add(order)
                await db.commit()
                await db.refresh(order)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
            self._active_orders[order.order_id] = order
            self._order_locks[order.order_id] = asyncio.Lock()

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            import time

            self._recent_orders[signal.symbol] = time.time()

            self.logger.info(
                f"–°–æ–∑–¥–∞–Ω –æ—Ä–¥–µ—Ä {order.order_id}: {order.side.value} {order.quantity} "
                f"{order.symbol} –Ω–∞ {order.exchange}"
            )

            return order

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {e}")
            return None

    async def submit_order(self, order: Order) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂—É

        Args:
            order: –û—Ä–¥–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏

        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        async with self._order_locks.get(order.order_id, asyncio.Lock()):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ order.side —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ enum
                side_str = order.side if isinstance(order.side, str) else order.side.value
                self.logger.info(
                    f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂—É: {side_str} {order.quantity} {order.symbol} "
                    f"@ {order.price or 'MARKET'} –Ω–∞ {order.exchange}"
                )

                # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –±–∏—Ä–∂–∏ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
                # exchange_registry –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–∞–±—Ä–∏–∫–æ–π –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
                # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - —Å–æ–∑–¥–∞–µ–º –±–∏—Ä–∂—É –Ω–∞–ø—Ä—è–º—É—é
                from exchanges.factory import ExchangeFactory

                factory = ExchangeFactory()

                # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                import os

                if order.exchange.lower() == "bybit":
                    api_key = os.getenv("BYBIT_API_KEY")
                    api_secret = os.getenv("BYBIT_API_SECRET")
                else:
                    self.logger.error(f"‚ùå –ë–∏—Ä–∂–∞ {order.exchange} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                    return False

                # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ
                exchange = await factory.create_and_connect(
                    exchange_type=order.exchange.lower(),
                    api_key=api_key,
                    api_secret=api_secret,
                    sandbox=False,
                )

                if not exchange:
                    self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {order.exchange}")
                    return False

                await exchange.initialize()
                self.logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ {order.exchange} —É—Å–ø–µ—à–Ω–æ")

                # –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ—á–æ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                    positions = await exchange.get_positions()
                    position_exists = False
                    
                    for pos in positions:
                        if pos.get("symbol") == order.symbol and pos.get("quantity", 0) > 0:
                            position_exists = True
                            self.logger.info(
                                f"üìä –ü–æ–∑–∏—Ü–∏—è –¥–ª—è {order.symbol} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, "
                                f"–ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É leverage"
                            )
                            break
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º leverage —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç
                    if not position_exists:
                        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–µ—á–æ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                        try:
                            from core.config import get_leverage
                            leverage = get_leverage()
                        except ImportError:
                            # Fallback –µ—Å–ª–∏ core.config –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                            leverage = 5.0
                            self.logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º leverage –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5x")

                        self.logger.info(f"‚öôÔ∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ—á–æ {leverage}x –¥–ª—è {order.symbol}")
                        
                        # –ö–µ—à–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π leverage —á—Ç–æ–±—ã –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å API –ª–∏—à–Ω–∏–π —Ä–∞–∑
                        cache_key = f"leverage_{order.symbol}"
                        cached_leverage = getattr(self, "_leverage_cache", {}).get(cache_key)
                        
                        if cached_leverage != leverage:
                            leverage_set = await exchange.set_leverage(order.symbol, leverage)
                            
                            if leverage_set:
                                self.logger.info(
                                    f"‚úÖ –ü–ª–µ—á–æ {leverage}x —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {order.symbol}"
                                )
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
                                if not hasattr(self, "_leverage_cache"):
                                    self._leverage_cache = {}
                                self._leverage_cache[cache_key] = leverage
                            else:
                                self.logger.warning(
                                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ –¥–ª—è {order.symbol}, "
                                    f"–≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–ª–∏ –æ—à–∏–±–∫–∞ API"
                                )
                        else:
                            self.logger.debug(
                                f"‚ÑπÔ∏è –ü–ª–µ—á–æ {leverage}x —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {order.symbol}"
                            )
                            
                except Exception as e:
                    # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º leverage
                    if "leverage not modified" in str(e).lower():
                        self.logger.debug(f"‚ÑπÔ∏è –ü–ª–µ—á–æ —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –¥–ª—è {order.symbol}")
                    else:
                        self.logger.warning(
                            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–ª–µ—á–æ–º: {e}, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º"
                        )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä —á–µ—Ä–µ–∑ place_order
                # –°–æ–∑–¥–∞–µ–º OrderRequest –¥–ª—è Bybit
                from exchanges.base.order_types import (
                    OrderRequest,
                    OrderSide as ExchangeOrderSide,
                    OrderType as ExchangeOrderType,
                )

                # –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –æ—Ä–¥–µ—Ä–æ–≤
                order_type_map = {
                    "limit": ExchangeOrderType.LIMIT,
                    "market": ExchangeOrderType.MARKET,
                }

                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è database OrderSide -> Exchange OrderSide
                order_side_map = {
                    OrderSide.BUY.value: ExchangeOrderSide.BUY,  # "buy" -> "Buy"
                    OrderSide.SELL.value: ExchangeOrderSide.SELL,  # "sell" -> "Sell"
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è —Å—Ç—Ä–æ–∫ (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø—Ä–∏–¥—É—Ç —Å—Ç—Ä–æ–∫–∏)
                    "buy": ExchangeOrderSide.BUY,
                    "sell": ExchangeOrderSide.SELL,
                }

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º position_idx –¥–ª—è hedge mode (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ enum)
                position_idx = 1 if order.side == OrderSide.BUY else 2  # –î–ª—è hedge mode
                # position_idx = 0  # –î–ª—è one-way mode

                # üõ°Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è SL/TP –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è Bybit API)
                validated_sl = order.stop_loss
                validated_tp = order.take_profit
                current_price = float(order.price) if order.price else None
                
                if order.stop_loss and order.take_profit and current_price:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å SL/TP –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
                    if order.side == OrderSide.SELL:  # SHORT –ø–æ–∑–∏—Ü–∏—è
                        # –î–ª—è SELL (SHORT): SL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –í–´–®–ï —Ü–µ–Ω—ã, TP –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ù–ò–ñ–ï —Ü–µ–Ω—ã
                        if order.stop_loss <= current_price:
                            self.logger.error(
                                f"‚ùå –ù–ï–ö–û–†–†–ï–ö–¢–ù–´–ô SL –¥–ª—è SHORT: SL={order.stop_loss} <= Price={current_price}"
                            )
                            # –í–æ–∑–º–æ–∂–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - –Ω–æ –ª—É—á—à–µ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä
                            return False
                            
                        if order.take_profit >= current_price:
                            self.logger.error(
                                f"‚ùå –ù–ï–ö–û–†–†–ï–ö–¢–ù–´–ô TP –¥–ª—è SHORT: TP={order.take_profit} >= Price={current_price}"
                            )
                            return False
                            
                    elif order.side == OrderSide.BUY:  # LONG –ø–æ–∑–∏—Ü–∏—è
                        # –î–ª—è BUY (LONG): SL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ù–ò–ñ–ï —Ü–µ–Ω—ã, TP –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –í–´–®–ï —Ü–µ–Ω—ã
                        if order.stop_loss >= current_price:
                            self.logger.error(
                                f"‚ùå –ù–ï–ö–û–†–†–ï–ö–¢–ù–´–ô SL –¥–ª—è LONG: SL={order.stop_loss} >= Price={current_price}"
                            )
                            return False
                            
                        if order.take_profit <= current_price:
                            self.logger.error(
                                f"‚ùå –ù–ï–ö–û–†–†–ï–ö–¢–ù–´–ô TP –¥–ª—è LONG: TP={order.take_profit} <= Price={current_price}"
                            )
                            return False
                    
                    self.logger.info(
                        f"‚úÖ SL/TP –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ –¥–ª—è {order.side.value}: "
                        f"Price={current_price}, SL={validated_sl}, TP={validated_tp}"
                    )

                # üõ°Ô∏è –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ order.side (–º–æ–∂–µ—Ç –±—ã—Ç—å enum –∏–ª–∏ string)
                order_side_value = order.side.value if hasattr(order.side, 'value') else str(order.side)
                exchange_side = order_side_map.get(order_side_value, ExchangeOrderSide.BUY)
                
                order_request = OrderRequest(
                    symbol=order.symbol,
                    side=exchange_side,
                    order_type=order_type_map.get(order.order_type.value, ExchangeOrderType.LIMIT),
                    quantity=order.quantity,
                    price=order.price if order.order_type.value == "limit" else None,
                    # –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ SL/TP
                    stop_loss=validated_sl,
                    take_profit=validated_tp,
                    position_idx=position_idx,  # –î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ø–æ–∑–∏—Ü–∏–π
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Bybit
                    exchange_params={
                        "tpslMode": "Full",  # –ò–ª–∏ "Partial" –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
                        "tpOrderType": "Market",
                        "slOrderType": "Market",
                    },
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä
                self.logger.info(
                    f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º OrderRequest: {order_request.symbol} {order_request.side.value} "
                    f"{order_request.quantity} @ {order_request.price}"
                )

                response = await exchange.place_order(order_request)

                if response and response.success:
                    exchange_order_id = response.order_id
                else:
                    self.logger.error(
                        f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç –±–∏—Ä–∂–∏: {response.error if response else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'}"
                    )
                    exchange_order_id = None

                if exchange_order_id:
                    # –û–±–Ω–æ–≤–ª—è–µ–º ID –æ—Ä–¥–µ—Ä–∞ –æ—Ç –±–∏—Ä–∂–∏
                    order.order_id = exchange_order_id
                    order.status = OrderStatus.OPEN
                    order.updated_at = datetime.utcnow()

                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
                    await self._update_order_in_db(order)

                    self.logger.info(
                        f"‚úÖ –û—Ä–¥–µ—Ä {order.order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {order.exchange}"
                    )
                    
                    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é partial TP –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        partial_config = order.metadata.get("partial_tp_config") if order.metadata else None
                        
                        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è partial TP manager
                        position_data = {
                            "symbol": order.symbol,
                            "side": "long" if order.side == OrderSide.BUY else "short",
                            "quantity": order.quantity,
                            "entry_price": order.price or order.suggested_price,
                        }
                        
                        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
                        partial_success = await self.partial_tp_manager.setup_partial_tp(
                            position_data, 
                            partial_config
                        )
                        
                        if partial_success:
                            self.logger.info(f"‚úÖ –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –¥–ª—è {order.symbol}")
                        else:
                            self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –¥–ª—è {order.symbol}")
                            
                    except Exception as partial_error:
                        self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è: {partial_error}")
                        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ partial TP
                    
                    return True
                else:
                    order.status = OrderStatus.REJECTED
                    await self._update_order_in_db(order)
                    self.logger.error("‚ùå –ë–∏—Ä–∂–∞ –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π ID –¥–ª—è –æ—Ä–¥–µ—Ä–∞")
                    return False

            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ä–¥–µ—Ä–∞ {order.order_id}: {e}")
                import traceback

                traceback.print_exc()
                order.status = OrderStatus.REJECTED
                await self._update_order_in_db(order)
                return False

    async def cancel_order(self, order_id: str) -> bool:
        """–û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞"""
        order = self._active_orders.get(order_id)
        if not order:
            self.logger.warning(f"–û—Ä–¥–µ—Ä {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö")
            return False

        async with self._order_locks.get(order_id, asyncio.Lock()):
            try:
                # –û—Ç–º–µ–Ω—è–µ–º –Ω–∞ –±–∏—Ä–∂–µ
                exchange = await self.exchange_registry.get_exchange(order.exchange)
                if exchange:
                    success = await exchange.cancel_order(order.order_id, order.symbol)

                    if success:
                        order.status = OrderStatus.CANCELLED
                        order.updated_at = datetime.utcnow()
                        await self._update_order_in_db(order)

                        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                        self._active_orders.pop(order_id, None)
                        self._order_locks.pop(order_id, None)

                        self.logger.info(f"–û—Ä–¥–µ—Ä {order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω")
                        return True

                return False

            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ {order_id}: {e}")
                return False

    async def update_order_status(
        self,
        order_id: str,
        new_status: OrderStatus,
        filled_quantity: float | None = None,
        average_price: float | None = None,
    ):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞"""
        order = self._active_orders.get(order_id)
        if not order:
            return

        async with self._order_locks.get(order_id, asyncio.Lock()):
            order.status = new_status
            order.updated_at = datetime.utcnow()

            if filled_quantity is not None:
                order.filled_quantity = filled_quantity

            if average_price is not None:
                order.average_price = average_price

            if new_status == OrderStatus.FILLED:
                order.filled_at = datetime.utcnow()

                # –°–æ–∑–¥–∞–µ–º SL/TP –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
                if self.sltp_integration:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç –±–∏—Ä–∂–∏
                        exchange = await self.exchange_registry.get_exchange(order.exchange)
                        if exchange:
                            success = await self.sltp_integration.handle_filled_order(
                                order, exchange
                            )
                            if success:
                                self.logger.info(f"‚úÖ SL/TP –æ—Ä–¥–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è {order.symbol}")
                            else:
                                self.logger.warning(
                                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SL/TP –¥–ª—è {order.symbol}"
                                )
                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SL/TP: {e}")

                # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                self._active_orders.pop(order_id, None)
                self._order_locks.pop(order_id, None)

            await self._update_order_in_db(order)

    async def get_active_orders(
        self, exchange: str | None = None, symbol: str | None = None
    ) -> list[Order]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞"""
        orders = list(self._active_orders.values())

        if exchange:
            orders = [o for o in orders if o.exchange == exchange]

        if symbol:
            orders = [o for o in orders if o.symbol == symbol]

        return orders

    async def sync_orders_with_exchange(self, exchange_name: str):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ä–¥–µ—Ä–æ–≤ —Å –±–∏—Ä–∂–µ–π"""
        try:
            exchange = await self.exchange_registry.get_exchange(exchange_name)
            if not exchange:
                return

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ —Å –±–∏—Ä–∂–∏
            exchange_orders = await exchange.get_open_orders()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –Ω–∞—à–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤
            for order in self._active_orders.values():
                if order.exchange != exchange_name:
                    continue

                # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ä–¥–µ—Ä –Ω–∞ –±–∏—Ä–∂–µ
                exchange_order = next(
                    (eo for eo in exchange_orders if eo["id"] == order.order_id), None
                )

                if exchange_order:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    status = self._map_exchange_status(exchange_order["status"])
                    await self.update_order_status(
                        order.order_id,
                        status,
                        exchange_order.get("filled"),
                        exchange_order.get("average_price"),
                    )
                else:
                    # –û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –±–∏—Ä–∂–µ - –≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω
                    await self.update_order_status(order.order_id, OrderStatus.CANCELLED)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤ —Å {exchange_name}: {e}")

    def _get_order_side(self, signal_type) -> OrderSide | None:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω—ã –æ—Ä–¥–µ—Ä–∞ –ø–æ —Ç–∏–ø—É —Å–∏–≥–Ω–∞–ª–∞"""
        mapping = {
            SignalType.LONG: OrderSide.BUY,
            SignalType.SHORT: OrderSide.SELL,
            SignalType.CLOSE_LONG: OrderSide.SELL,
            SignalType.CLOSE_SHORT: OrderSide.BUY,
        }
        return mapping.get(signal_type)

    def _generate_order_id(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –æ—Ä–¥–µ—Ä–∞"""
        from uuid import uuid4

        return f"BOT_{uuid4().hex[:8]}_{int(datetime.utcnow().timestamp())}"

    def _map_exchange_status(self, exchange_status: str) -> OrderStatus:
        """–ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ –±–∏—Ä–∂–∏ –Ω–∞ –Ω–∞—à–∏ —Å—Ç–∞—Ç—É—Å—ã"""
        status_map = {
            "new": OrderStatus.OPEN,
            "open": OrderStatus.OPEN,
            "partially_filled": OrderStatus.PARTIALLY_FILLED,
            "filled": OrderStatus.FILLED,
            "canceled": OrderStatus.CANCELLED,
            "cancelled": OrderStatus.CANCELLED,
            "rejected": OrderStatus.REJECTED,
            "expired": OrderStatus.EXPIRED,
        }
        return status_map.get(exchange_status.lower(), OrderStatus.OPEN)

    async def _update_order_in_db(self, order: Order):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –≤ –ë–î"""
        try:
            async with get_async_db() as db:
                await db.merge(order)
                await db.commit()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –≤ –ë–î: {e}")

    async def _is_duplicate_order(self, signal: Signal) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞

        Args:
            signal: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª

        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ä–¥–µ—Ä –¥—É–±–ª–∏—Ä—É—é—â–∏–π
        """
        import time

        symbol = signal.symbol
        current_time = time.time()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–µ–¥–∞–≤–Ω–∏–π –æ—Ä–¥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        if symbol in self._recent_orders:
            last_order_time = self._recent_orders[symbol]
            time_since_last = current_time - last_order_time

            # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            if time_since_last < self._duplicate_check_interval:
                return True

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        active_orders_count = sum(
            1
            for order in self._active_orders.values()
            if order.symbol == symbol and order.status in [OrderStatus.PENDING, OrderStatus.OPEN]
        )

        # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ä–¥–µ—Ä –ø–æ —ç—Ç–æ–º—É —Å–∏–º–≤–æ–ª—É
        if active_orders_count > 0:
            self.logger.warning(f"‚ö†Ô∏è –£–∂–µ –µ—Å—Ç—å {active_orders_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol}")
            return True

        return False

    async def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        return True

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        self.logger.info("Order Manager –∑–∞–ø—É—â–µ–Ω")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        self.logger.info("Order Manager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def is_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        return True
