#!/usr/bin/env python3
"""
–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä Stop Loss –∏ Take Profit

–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ SL/TP –Ω–∞ –æ—Å–Ω–æ–≤–µ:
- –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (ATR)
- –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ ML –º–æ–¥–µ–ª–∏
- RSI –∏ –¥—Ä—É–≥–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
- –û–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤
"""

import logging
from datetime import datetime

import numpy as np


class DynamicSLTPCalculator:
    """
    –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π SL/TP

    –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å:
    - SL: 1% - 2% (–∞–¥–∞–ø—Ç–∏–≤–Ω–æ –∫ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏)
    - TP: 3.6% - 6% (—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ risk/reward 1:3+)
    - –¢–æ—á–∫–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏: Win Rate ‚â• 22-25%
    """

    def __init__(self, logger: logging.Logger = None):
        self.logger = logger or logging.getLogger(__name__)

        # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
        self.base_sl = 1.0  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π SL: 1%
        self.max_sl = 2.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π SL: 2%
        self.base_tp = 3.6  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π TP: 3.6%
        self.max_tp = 6.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π TP: 6%

        # –í–µ—Å–∞ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –≤–ª–∏—è–Ω–∏—è
        self.volatility_weight = 0.5  # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–∫—Ç–æ—Ä
        self.rsi_weight = 0.15  # RSI –≤–ª–∏—è–Ω–∏–µ
        self.volume_weight = 0.15  # –û–±—ä–µ–º
        self.trend_weight = 0.2  # –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞

        # –ö–µ—à –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self._calculation_history: list[dict] = []
        self._max_history = 100

    def calculate_dynamic_levels(
        self,
        symbol: str,
        current_price: float,
        candles: list[dict],
        confidence: float,
        signal_type: str = "LONG",
        extra_indicators: dict | None = None,
    ) -> dict[str, float]:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–≤–Ω–∏ SL –∏ TP

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            candles: –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ ATR
            confidence: –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ML –º–æ–¥–µ–ª–∏ (0-1)
            signal_type: –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞ (LONG/SHORT)
            extra_indicators: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (RSI, –æ–±—ä–µ–º –∏ —Ç.–¥.)

        Returns:
            Dict —Å —É—Ä–æ–≤–Ω—è–º–∏ SL, TP –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        try:
            # 1. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ ATR
            atr_value, volatility_factor = self._calculate_atr_volatility(candles, current_price)

            # 2. –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
            rsi_factor = self._get_rsi_factor(extra_indicators)
            volume_factor = self._get_volume_factor(extra_indicators)
            trend_factor = self._get_trend_factor(candles)

            # 3. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å (0-1)
            combined_multiplier = (
                volatility_factor * self.volatility_weight
                + rsi_factor * self.rsi_weight
                + volume_factor * self.volume_weight
                + trend_factor * self.trend_weight
            )

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å
            combined_multiplier = max(0, min(1, combined_multiplier))

            # 4. –ë–∞–∑–æ–≤—ã–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–≤–Ω–∏
            dynamic_sl_pct = self.base_sl + (self.max_sl - self.base_sl) * combined_multiplier
            dynamic_tp_pct = self.base_tp + (self.max_tp - self.base_tp) * combined_multiplier

            # 5. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ ML –º–æ–¥–µ–ª–∏
            dynamic_sl_pct, dynamic_tp_pct = self._adjust_by_confidence(
                dynamic_sl_pct, dynamic_tp_pct, confidence
            )

            # 6. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ RSI (–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å/–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å)
            if extra_indicators and "rsi" in extra_indicators:
                rsi = extra_indicators["rsi"]
                if signal_type == "LONG":
                    if rsi > 70:  # –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º SL
                        dynamic_sl_pct *= 1.1
                        self.logger.debug(f"RSI {rsi:.1f} > 70: —É–≤–µ–ª–∏—á–µ–Ω SL –¥–ª—è LONG")
                    elif rsi < 30:  # –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º TP
                        dynamic_tp_pct *= 1.1
                        self.logger.debug(f"RSI {rsi:.1f} < 30: —É–≤–µ–ª–∏—á–µ–Ω TP –¥–ª—è LONG")
                else:  # SHORT
                    if rsi < 30:  # –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º SL –¥–ª—è SHORT
                        dynamic_sl_pct *= 1.1
                    elif rsi > 70:  # –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º TP –¥–ª—è SHORT
                        dynamic_tp_pct *= 1.1

            # 7. –£—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
            session_multiplier = self._get_session_multiplier()
            if session_multiplier < 1.0:
                dynamic_sl_pct *= session_multiplier
                dynamic_tp_pct *= session_multiplier
                self.logger.debug(
                    f"–ê–∑–∏–∞—Ç—Å–∫–∞—è —Å–µ—Å—Å–∏—è: —É—Ä–æ–≤–Ω–∏ —É–º–µ–Ω—å—à–µ–Ω—ã –Ω–∞ {(1-session_multiplier)*100:.0f}%"
                )

            # 8. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —Ü–µ–Ω
            if signal_type == "LONG":
                sl_price = current_price * (1 - dynamic_sl_pct / 100)
                tp_price = current_price * (1 + dynamic_tp_pct / 100)
            else:  # SHORT
                sl_price = current_price * (1 + dynamic_sl_pct / 100)
                tp_price = current_price * (1 - dynamic_tp_pct / 100)

            # 9. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
            partial_tp_levels = self._calculate_partial_tp_levels(
                current_price, dynamic_tp_pct, signal_type
            )

            # 10. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
            risk_reward_ratio = dynamic_tp_pct / dynamic_sl_pct
            breakeven_win_rate = 1 / (1 + risk_reward_ratio)
            expected_value = self._calculate_expected_value(
                dynamic_sl_pct, dynamic_tp_pct, confidence
            )

            result = {
                "sl_price": sl_price,
                "tp_price": tp_price,
                "sl_percent": dynamic_sl_pct,
                "tp_percent": dynamic_tp_pct,
                "partial_tp_levels": partial_tp_levels,
                "risk_reward_ratio": risk_reward_ratio,
                "breakeven_win_rate": breakeven_win_rate,
                "expected_value": expected_value,
                "volatility_factor": volatility_factor,
                "combined_multiplier": combined_multiplier,
                "atr": atr_value,
                "calculation_time": datetime.utcnow().isoformat(),
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self._save_to_history(symbol, result)

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            self.logger.info(
                f"üìä {symbol} –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–≤–Ω–∏: "
                f"SL={dynamic_sl_pct:.2f}% (${sl_price:.4f}), "
                f"TP={dynamic_tp_pct:.2f}% (${tp_price:.4f}), "
                f"R:R=1:{risk_reward_ratio:.1f}, "
                f"EV={expected_value:.3f}%"
            )

            return result

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return self._get_fallback_levels(current_price, signal_type)

    def _calculate_atr_volatility(
        self, candles: list[dict], current_price: float, period: int = 14
    ) -> tuple[float, float]:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å ATR –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å

        Returns:
            (ATR –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä 0-1)
        """
        if not candles or len(candles) < period:
            self.logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ATR: {len(candles)} —Å–≤–µ—á–µ–π")
            return 0.02 * current_price, 0.5  # –°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º True Range –¥–ª—è –∫–∞–∂–¥–æ–π —Å–≤–µ—á–∏
            true_ranges = []
            for i in range(1, min(len(candles), period + 1)):
                high = candles[-i].get("high", 0)
                low = candles[-i].get("low", 0)
                prev_close = candles[-i - 1].get("close", 0) if i < len(candles) else current_price

                tr = max(high - low, abs(high - prev_close), abs(low - prev_close))
                true_ranges.append(tr)

            # ATR = —Å—Ä–µ–¥–Ω–µ–µ True Range
            atr = np.mean(true_ranges) if true_ranges else 0.02 * current_price

            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (ATR/Price)
            volatility_ratio = atr / current_price

            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É 0-1
            # –°—á–∏—Ç–∞–µ–º 1% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∏–∑–∫–æ–π (0), 3% –≤—ã—Å–æ–∫–æ–π (1)
            normalized = min(max((volatility_ratio - 0.01) / 0.02, 0), 1)

            self.logger.debug(
                f"ATR={atr:.4f}, Ratio={volatility_ratio:.4f}, " f"Normalized={normalized:.2f}"
            )

            return atr, normalized

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ ATR: {e}")
            return 0.02 * current_price, 0.5

    def _get_rsi_factor(self, indicators: dict | None) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç–æ—Ä RSI (0-1)"""
        if not indicators or "rsi" not in indicators:
            return 0.5  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

        rsi = indicators["rsi"]

        # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–∞—é—Ç –≤—ã—Å–æ–∫–∏–π —Ñ–∞–∫—Ç–æ—Ä
        if rsi > 80 or rsi < 20:
            return 0.9
        elif rsi > 70 or rsi < 30:
            return 0.7
        elif rsi > 60 or rsi < 40:
            return 0.5
        else:
            return 0.3  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞

    def _get_volume_factor(self, indicators: dict | None) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç–æ—Ä –æ–±—ä–µ–º–∞ (0-1)"""
        if not indicators or "volume_ratio" not in indicators:
            return 0.5

        # volume_ratio = —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–º / —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º
        ratio = indicators["volume_ratio"]

        if ratio > 2.0:  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º
            return 0.9
        elif ratio > 1.5:
            return 0.7
        elif ratio > 1.0:
            return 0.5
        else:
            return 0.3  # –ù–∏–∑–∫–∏–π –æ–±—ä–µ–º

    def _get_trend_factor(self, candles: list[dict]) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç–æ—Ä —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞ (0-1)"""
        if not candles or len(candles) < 20:
            return 0.5

        try:
            # –ü—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥: —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º SMA
            closes = [c.get("close", 0) for c in candles[-20:]]
            sma5 = np.mean(closes[-5:])
            sma20 = np.mean(closes)

            # –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            deviation = abs(sma5 - sma20) / sma20

            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (0-2% –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è)
            factor = min(deviation / 0.02, 1.0)

            return factor

        except Exception:
            return 0.5

    def _adjust_by_confidence(
        self, sl_pct: float, tp_pct: float, confidence: float
    ) -> tuple[float, float]:
        """
        –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —É—Ä–æ–≤–Ω–µ–π –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏

        –ü—Ä–∏ –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º TP (–Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –ø—Ä–∏–±—ã–ª–∏)
        –ü—Ä–∏ –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ - –º–æ–∂–µ–º —É–º–µ–Ω—å—à–∏—Ç—å SL (–º–µ–Ω—å—à–µ —Ä–∏—Å–∫)
        """
        if confidence < 0.35:
            # –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º TP –Ω–∞ 15%
            tp_pct *= 1.15
            self.logger.debug(f"–ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {confidence:.2f}: TP —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ 15%")
        elif confidence > 0.60:
            # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - —É–º–µ–Ω—å—à–∞–µ–º SL –Ω–∞ 15%
            sl_pct *= 0.85
            self.logger.debug(f"–í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {confidence:.2f}: SL —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ 15%")

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        sl_pct = max(self.base_sl, min(self.max_sl, sl_pct))
        tp_pct = max(self.base_tp, min(self.max_tp, tp_pct))

        return sl_pct, tp_pct

    def _get_session_multiplier(self) -> float:
        """
        –ü–æ–ª—É—á–∏—Ç—å –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏

        –ê–∑–∏–∞—Ç—Å–∫–∞—è —Å–µ—Å—Å–∏—è (00:00-08:00 UTC): 0.8 (–º–µ–Ω—å—à–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)
        –ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è (08:00-16:00 UTC): 1.0
        –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è (14:00-22:00 UTC): 1.0
        """
        current_hour = datetime.utcnow().hour

        if 0 <= current_hour < 8:
            return 0.8  # –ê–∑–∏–∞—Ç—Å–∫–∞—è —Å–µ—Å—Å–∏—è
        else:
            return 1.0  # –ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è/–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è

    def _calculate_partial_tp_levels(
        self, entry_price: float, tp_percent: float, signal_type: str
    ) -> list[dict[str, float]]:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —É—Ä–æ–≤–Ω–∏ –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è

        Level 1: 30% –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ 40% –æ—Ç TP
        Level 2: 30% –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ 70% –æ—Ç TP
        Level 3: 40% –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ 100% –æ—Ç TP
        """
        levels = []

        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —É—Ä–æ–≤–Ω–µ–π
        level_ratios = [0.4, 0.7, 1.0]
        level_percents = [30, 30, 40]

        for i, (ratio, percent) in enumerate(zip(level_ratios, level_percents, strict=False)):
            level_tp_pct = tp_percent * ratio

            if signal_type == "LONG":
                price = entry_price * (1 + level_tp_pct / 100)
            else:  # SHORT
                price = entry_price * (1 - level_tp_pct / 100)

            levels.append(
                {
                    "level": i + 1,
                    "price": price,
                    "percent_of_position": percent,
                    "profit_percent": level_tp_pct,
                }
            )

        return levels

    def _calculate_expected_value(self, sl_pct: float, tp_pct: float, win_rate: float) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏

        EV = (TP * WinRate) - (SL * (1 - WinRate))
        """
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º confidence –∫–∞–∫ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ win_rate
        # –ù–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º, —Ç–∞–∫ –∫–∞–∫ confidence –æ–±—ã—á–Ω–æ 0.3-0.6
        adjusted_win_rate = 0.3 + win_rate * 0.4  # –î–∏–∞–ø–∞–∑–æ–Ω 0.3-0.7

        ev = (tp_pct * adjusted_win_rate) - (sl_pct * (1 - adjusted_win_rate))

        return ev

    def _get_fallback_levels(self, current_price: float, signal_type: str) -> dict:
        """–í–µ—Ä–Ω—É—Ç—å –±–∞–∑–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Ä–∞—Å—á–µ—Ç–∞"""
        self.logger.warning("–ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ SL/TP")

        if signal_type == "LONG":
            sl_price = current_price * 0.985  # -1.5%
            tp_price = current_price * 1.045  # +4.5%
        else:
            sl_price = current_price * 1.015  # +1.5%
            tp_price = current_price * 0.955  # -4.5%

        return {
            "sl_price": sl_price,
            "tp_price": tp_price,
            "sl_percent": 1.5,
            "tp_percent": 4.5,
            "partial_tp_levels": self._calculate_partial_tp_levels(current_price, 4.5, signal_type),
            "risk_reward_ratio": 3.0,
            "breakeven_win_rate": 0.25,
            "expected_value": 1.0,
            "volatility_factor": 0.5,
            "combined_multiplier": 0.5,
            "atr": 0.02 * current_price,
        }

    def _save_to_history(self, symbol: str, result: dict):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å—á–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        record = {"symbol": symbol, "timestamp": datetime.utcnow().isoformat(), **result}

        self._calculation_history.append(record)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if len(self._calculation_history) > self._max_history:
            self._calculation_history = self._calculation_history[-self._max_history :]

    def get_statistics(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ä–∞—Å—á–µ—Ç–∞–º"""
        if not self._calculation_history:
            return {}

        sl_values = [r["sl_percent"] for r in self._calculation_history]
        tp_values = [r["tp_percent"] for r in self._calculation_history]
        ev_values = [r["expected_value"] for r in self._calculation_history]

        return {
            "calculations_count": len(self._calculation_history),
            "avg_sl": np.mean(sl_values),
            "avg_tp": np.mean(tp_values),
            "avg_risk_reward": np.mean([r["risk_reward_ratio"] for r in self._calculation_history]),
            "avg_expected_value": np.mean(ev_values),
            "positive_ev_rate": sum(1 for ev in ev_values if ev > 0) / len(ev_values) * 100,
        }
