#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π (Partial Take Profit)

–ü–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ BOT_AI_V2 –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —á–∞—Å—Ç–∏—á–Ω–æ–π —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏.
"""

import asyncio
import logging
from datetime import datetime
from decimal import Decimal
from typing import Any

from database.models.base_models import OrderSide, OrderType


class PartialTPManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π

    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
    - –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ —á–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
    - –ó–∞—â–∏—Ç—É –ø—Ä–∏–±—ã–ª–∏ —á–µ—Ä–µ–∑ —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø
    - –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è–º–∏ TP
    """

    def __init__(self, exchange_registry, logger: logging.Logger = None):
        self.exchange_registry = exchange_registry
        self.logger = logger or logging.getLogger(__name__)

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.default_config = {
            "enabled": True,
            "levels": [
                {"percent": 30, "price_ratio": 1.01},  # 30% –ø—Ä–∏ +1%
                {"percent": 30, "price_ratio": 1.02},  # 30% –ø—Ä–∏ +2%
                {"percent": 40, "price_ratio": 1.03},  # 40% –ø—Ä–∏ +3%
            ],
            "trailing_stop": {
                "enabled": True,
                "activation_profit": 0.015,  # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–∏ +1.5%
                "trailing_distance": 0.005,  # –¢—Ä–µ–π–ª–∏–Ω–≥ –Ω–∞ 0.5%
            },
            "profit_protection": {
                "enabled": True,
                "breakeven_at": 0.01,  # –ü–µ—Ä–µ–Ω–æ—Å SL –≤ –±–µ–∑—É–±—ã—Ç–æ–∫ –ø—Ä–∏ +1%
                "lock_profit_at": 0.02,  # –ó–∞—â–∏—Ç–∞ 50% –ø—Ä–∏–±—ã–ª–∏ –ø—Ä–∏ +2%
                "lock_profit_percent": 0.5,
            },
        }

        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Å—Ç–∏—á–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∏–π
        self._active_partials: dict[str, dict] = {}
        self._partial_locks: dict[str, asyncio.Lock] = {}

    async def setup_partial_tp(self, position: dict[str, Any], config: dict | None = None) -> bool:
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏

        Args:
            position: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏–∏
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è

        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        """
        try:
            symbol = position["symbol"]
            side = position["side"]
            quantity = Decimal(str(position["quantity"]))
            entry_price = Decimal(str(position["entry_price"]))

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            tp_config = config or self.default_config

            if not tp_config.get("enabled", False):
                self.logger.info(f"–ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è {symbol}")
                return False

            levels = tp_config.get("levels", self.default_config["levels"])

            # –°–æ–∑–¥–∞–µ–º —É—Ä–æ–≤–Ω–∏ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
            partial_orders = []
            remaining_qty = quantity

            for i, level in enumerate(levels):
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
                close_percent = Decimal(str(level["percent"])) / Decimal("100")
                close_qty = quantity * close_percent

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è
                if side == "long":
                    tp_price = entry_price * Decimal(str(level["price_ratio"]))
                else:  # short
                    tp_price = entry_price / Decimal(str(level["price_ratio"]))

                # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
                partial_order = {
                    "symbol": symbol,
                    "side": OrderSide.SELL if side == "long" else OrderSide.BUY,
                    "quantity": float(close_qty),
                    "price": float(tp_price),
                    "type": OrderType.LIMIT,
                    "level": i + 1,
                    "percent": level["percent"],
                }

                partial_orders.append(partial_order)
                remaining_qty -= close_qty

                self.logger.info(
                    f"üìä –£—Ä–æ–≤–µ–Ω—å TP{i+1} –¥–ª—è {symbol}: "
                    f"–∑–∞–∫—Ä—ã—Ç—å {level['percent']}% ({close_qty:.4f}) –ø—Ä–∏ {tp_price:.4f}"
                )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Å—Ç–∏—á–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∏—è—Ö
            position_key = f"{symbol}_{side}"
            self._active_partials[position_key] = {
                "symbol": symbol,
                "side": side,
                "entry_price": float(entry_price),
                "original_quantity": float(quantity),
                "remaining_quantity": float(quantity),
                "levels": partial_orders,
                "executed_levels": [],
                "created_at": datetime.utcnow(),
            }

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂—É
            success_count = 0
            for partial_order in partial_orders:
                if await self._place_partial_order(partial_order):
                    success_count += 1

            self.logger.info(
                f"‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ {success_count}/{len(partial_orders)} "
                f"—É—Ä–æ–≤–Ω–µ–π —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è {symbol}"
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø–∞ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
            if tp_config.get("trailing_stop", {}).get("enabled", False):
                asyncio.create_task(self._monitor_trailing_stop(position_key, tp_config))

            return success_count > 0

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ TP: {e}")
            return False

    async def _place_partial_order(self, order_data: dict) -> bool:
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞ –±–∏—Ä–∂–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∏—Ä–∂—É
            exchange = await self.exchange_registry.get_exchange("bybit")
            if not exchange:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ")
                return False

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –æ—Ä–¥–µ—Ä–∞
            from exchanges.base.order_types import (
                OrderRequest,
                OrderSide as ExchangeOrderSide,
                OrderType as ExchangeOrderType,
            )

            order_request = OrderRequest(
                symbol=order_data["symbol"],
                side=(
                    ExchangeOrderSide.SELL
                    if order_data["side"] == OrderSide.SELL
                    else ExchangeOrderSide.BUY
                ),
                order_type=ExchangeOrderType.LIMIT,
                quantity=order_data["quantity"],
                price=order_data["price"],
                reduce_only=True,  # –í–∞–∂–Ω–æ: —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä
            response = await exchange.place_order(order_request)

            if response and response.success:
                self.logger.info(
                    f"‚úÖ –û—Ä–¥–µ—Ä —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ TP —Ä–∞–∑–º–µ—â–µ–Ω: "
                    f"{order_data['symbol']} —É—Ä–æ–≤–µ–Ω—å {order_data.get('level', 'N/A')}"
                )
                return True
            else:
                self.logger.error(
                    f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ TP: "
                    f"{response.error if response else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'}"
                )
                return False

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞: {e}")
            return False

    async def _monitor_trailing_stop(self, position_key: str, config: dict):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø–æ–º"""
        try:
            trailing_config = config.get("trailing_stop", {})
            activation_profit = Decimal(str(trailing_config.get("activation_profit", 0.015)))
            trailing_distance = Decimal(str(trailing_config.get("trailing_distance", 0.005)))

            position_data = self._active_partials.get(position_key)
            if not position_data:
                return

            symbol = position_data["symbol"]
            side = position_data["side"]
            entry_price = Decimal(str(position_data["entry_price"]))

            highest_price = entry_price
            lowest_price = entry_price
            trailing_stop_price = None

            self.logger.info(f"üîÑ –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø–∞ –¥–ª—è {symbol}")

            while position_key in self._active_partials:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                    exchange = await self.exchange_registry.get_exchange("bybit")
                    if not exchange:
                        await asyncio.sleep(5)
                        continue

                    ticker = await exchange.get_ticker(symbol)
                    if not ticker:
                        await asyncio.sleep(5)
                        continue

                    current_price = Decimal(str(ticker["last"]))

                    # –î–ª—è LONG –ø–æ–∑–∏—Ü–∏–π
                    if side == "long":
                        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
                        if current_price > highest_price:
                            highest_price = current_price

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é —Ç—Ä–µ–π–ª–∏–Ω–≥–∞
                        profit_ratio = (highest_price - entry_price) / entry_price

                        if profit_ratio >= activation_profit:
                            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç–æ–ø–∞
                            new_stop = highest_price * (Decimal("1") - trailing_distance)

                            if trailing_stop_price is None or new_stop > trailing_stop_price:
                                trailing_stop_price = new_stop

                                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –Ω–∞ –±–∏—Ä–∂–µ
                                await self._update_stop_loss(
                                    symbol, side, float(trailing_stop_price)
                                )

                                self.logger.info(
                                    f"üìà –¢—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è {symbol}: "
                                    f"SL={trailing_stop_price:.4f} (–º–∞–∫—Å —Ü–µ–Ω–∞={highest_price:.4f})"
                                )

                    # –î–ª—è SHORT –ø–æ–∑–∏—Ü–∏–π
                    else:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
                        if current_price < lowest_price:
                            lowest_price = current_price

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é —Ç—Ä–µ–π–ª–∏–Ω–≥–∞
                        profit_ratio = (entry_price - lowest_price) / entry_price

                        if profit_ratio >= activation_profit:
                            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç–æ–ø–∞
                            new_stop = lowest_price * (Decimal("1") + trailing_distance)

                            if trailing_stop_price is None or new_stop < trailing_stop_price:
                                trailing_stop_price = new_stop

                                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –Ω–∞ –±–∏—Ä–∂–µ
                                await self._update_stop_loss(
                                    symbol, side, float(trailing_stop_price)
                                )

                                self.logger.info(
                                    f"üìâ –¢—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è {symbol}: "
                                    f"SL={trailing_stop_price:.4f} (–º–∏–Ω —Ü–µ–Ω–∞={lowest_price:.4f})"
                                )

                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                    await asyncio.sleep(10)

                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø–∞: {e}")
                    await asyncio.sleep(30)

        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø–∞: {e}")

    async def _update_stop_loss(self, symbol: str, side: str, stop_price: float) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –Ω–∞ –±–∏—Ä–∂–µ"""
        try:
            exchange = await self.exchange_registry.get_exchange("bybit")
            if not exchange:
                return False

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –±–∏—Ä–∂–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SL
            # –≠—Ç–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∏—Ä–∂–∏
            result = await exchange.modify_position_sl_tp(
                symbol=symbol, stop_loss=stop_price, take_profit=None  # –ù–µ –º–µ–Ω—è–µ–º TP
            )

            return result

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SL: {e}")
            return False

    async def check_partial_execution(self, symbol: str, side: str) -> dict | None:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —á–∞—Å—Ç–∏—á–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤

        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö
        """
        position_key = f"{symbol}_{side}"
        return self._active_partials.get(position_key)

    async def cancel_partial_orders(self, symbol: str, side: str) -> bool:
        """–û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö —á–∞—Å—Ç–∏—á–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            position_key = f"{symbol}_{side}"
            position_data = self._active_partials.get(position_key)

            if not position_data:
                return True

            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –±–∏—Ä–∂–µ
            # ...

            # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            del self._active_partials[position_key]

            self.logger.info(f"‚úÖ –ß–∞—Å—Ç–∏—á–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω—ã –¥–ª—è {symbol}")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —á–∞—Å—Ç–∏—á–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {e}")
            return False
