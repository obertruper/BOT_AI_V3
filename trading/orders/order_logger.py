#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Order Logger Extension –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤
"""

from datetime import datetime
from typing import Any, Dict

from core.logging.trade_logger import get_trade_logger


class OrderLogger:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è OrderManager"""

    def __init__(self):
        self.trade_logger = get_trade_logger()

    def log_order_lifecycle(self, order_id: str, stage: str, details: Dict[str, Any]):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ—Ä–¥–µ—Ä–∞

        Stages:
        - CREATED: –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ
        - VALIDATED: –û—Ä–¥–µ—Ä –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é
        - SUBMITTED: –û—Ä–¥–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –±–∏—Ä–∂—É
        - ACCEPTED: –û—Ä–¥–µ—Ä –ø—Ä–∏–Ω—è—Ç –±–∏—Ä–∂–µ–π
        - PARTIALLY_FILLED: –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
        - FILLED: –ü–æ–ª–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
        - CANCELLED: –û—Ç–º–µ–Ω–µ–Ω
        - REJECTED: –û—Ç–∫–ª–æ–Ω–µ–Ω –±–∏—Ä–∂–µ–π
        - EXPIRED: –ò—Å—Ç–µ–∫ —Å—Ä–æ–∫
        """
        log_data = {
            "order_id": order_id,
            "stage": stage,
            "details": details,
            "timestamp": datetime.now().isoformat(),
        }

        # –≠–º–æ–¥–∂–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞–¥–∏–π
        stage_emojis = {
            "CREATED": "üìù",
            "VALIDATED": "‚úîÔ∏è",
            "SUBMITTED": "üì§",
            "ACCEPTED": "‚úÖ",
            "PARTIALLY_FILLED": "‚ö°",
            "FILLED": "üíØ",
            "CANCELLED": "üö´",
            "REJECTED": "‚ùå",
            "EXPIRED": "‚è∞",
        }

        emoji = stage_emojis.get(stage, "üìä")

        self.trade_logger.logger.info(f"{emoji} ORDER {stage}: {order_id}", **log_data)
        self.trade_logger._log_to_file("info", f"ORDER_{stage}", log_data)

    def log_order_validation(self, order: Dict, validation_results: Dict):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ä–¥–µ—Ä–∞"""
        log_data = {
            "symbol": order.get("symbol"),
            "side": order.get("side"),
            "quantity": str(order.get("quantity", 0)),
            "validation": validation_results,
            "passed": validation_results.get("valid", False),
            "timestamp": datetime.now().isoformat(),
        }

        if validation_results.get("valid"):
            self.trade_logger.logger.debug(
                f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞: {order.get('symbol')}", **log_data
            )
        else:
            self.trade_logger.logger.warning(
                f"‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: {validation_results.get('reason')}",
                **log_data,
            )

        self.trade_logger._log_to_file("debug", "ORDER_VALIDATION", log_data)

    def log_order_risk_check(self, order: Dict, risk_results: Dict):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∏—Å–∫–∞ –¥–ª—è –æ—Ä–¥–µ—Ä–∞"""
        log_data = {
            "symbol": order.get("symbol"),
            "position_size": str(order.get("quantity", 0) * order.get("price", 0)),
            "leverage": order.get("leverage"),
            "risk_percent": risk_results.get("risk_percent"),
            "max_allowed": risk_results.get("max_allowed"),
            "approved": risk_results.get("approved", False),
            "timestamp": datetime.now().isoformat(),
        }

        if risk_results.get("approved"):
            self.trade_logger.logger.info(
                f"‚úÖ –†–∏—Å–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω: {risk_results.get('risk_percent')}% –∏–∑ {risk_results.get('max_allowed')}%",
                **log_data,
            )
        else:
            self.trade_logger.logger.warning(
                f"‚ö†Ô∏è –†–∏—Å–∫ –ø—Ä–µ–≤—ã—à–µ–Ω: {risk_results.get('risk_percent')}% > {risk_results.get('max_allowed')}%",
                **log_data,
            )

        self.trade_logger._log_to_file("info", "ORDER_RISK_CHECK", log_data)

    def log_order_execution_details(self, order_id: str, execution: Dict):
        """–î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞"""
        log_data = {
            "order_id": order_id,
            "exchange": execution.get("exchange"),
            "executed_qty": str(execution.get("executed_qty", 0)),
            "executed_price": str(execution.get("executed_price", 0)),
            "commission": str(execution.get("commission", 0)),
            "commission_asset": execution.get("commission_asset"),
            "slippage": str(execution.get("slippage", 0)),
            "execution_time_ms": execution.get("execution_time_ms"),
            "timestamp": datetime.now().isoformat(),
        }

        self.trade_logger.logger.info(
            f"üìä –ò–°–ü–û–õ–ù–ï–ù–ò–ï: qty={execution.get('executed_qty')} @ {execution.get('executed_price')} "
            f"| –ö–æ–º–∏—Å—Å–∏—è: {execution.get('commission')} {execution.get('commission_asset')} "
            f"| Slippage: {execution.get('slippage')}%",
            **log_data,
        )
        self.trade_logger._log_to_file("info", "ORDER_EXECUTION_DETAILS", log_data)

    def log_order_retry(self, order_id: str, attempt: int, reason: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ä–¥–µ—Ä–∞"""
        log_data = {
            "order_id": order_id,
            "attempt": attempt,
            "reason": reason,
            "timestamp": datetime.now().isoformat(),
        }

        self.trade_logger.logger.warning(
            f"üîÑ –ü–û–í–¢–û–†–ù–ê–Ø –ü–û–ü–´–¢–ö–ê #{attempt}: {reason}", **log_data
        )
        self.trade_logger._log_to_file("warning", "ORDER_RETRY", log_data)
