#!/usr/bin/env python3
"""
–î–≤–∏–∂–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–∞–¥–µ–∂–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –æ—à–∏–±–∫–∞–º–∏ –∏ retry –ª–æ–≥–∏–∫–æ–π.
"""

import asyncio
import logging
from datetime import datetime
from decimal import Decimal
from enum import Enum
from typing import Any

from database.models.base_models import Order, OrderSide, OrderStatus, OrderType


class ExecutionMode(Enum):
    """–†–µ–∂–∏–º—ã –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"""

    AGGRESSIVE = "aggressive"  # –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ, market –æ—Ä–¥–µ—Ä–∞
    PASSIVE = "passive"  # –õ–∏–º–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞, –∂–¥–µ–º –ª—É—á—à—É—é —Ü–µ–Ω—É
    SMART = "smart"  # –£–º–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –ª–æ–≥–∏–∫–æ–π


class ExecutionEngine:
    """
    –î–≤–∏–∂–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
    - –£–º–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ–º
    - Retry –ª–æ–≥–∏–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    - –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
    """

    def __init__(self, order_manager, exchange_registry, logger: logging.Logger | None = None):
        self.order_manager = order_manager
        self.exchange_registry = exchange_registry
        self.logger = logger or logging.getLogger(__name__)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        self.max_slippage = 0.002  # 0.2%
        self.max_retries = 3
        self.retry_delay = 1.0  # —Å–µ–∫—É–Ω–¥—ã
        self.execution_timeout = 60  # —Å–µ–∫—É–Ω–¥—ã

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self._execution_stats = {
            "total_executed": 0,
            "successful": 0,
            "failed": 0,
            "total_slippage": Decimal("0"),
            "avg_execution_time": 0.0,
        }

    async def execute_order(self, order: Order, mode: ExecutionMode = ExecutionMode.SMART) -> bool:
        """
        –ò—Å–ø–æ–ª–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä

        Args:
            order: –û—Ä–¥–µ—Ä –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
            mode: –†–µ–∂–∏–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è

        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        start_time = datetime.utcnow()

        try:
            self.logger.info(
                f"üéØ –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞: {order.side} {order.quantity} {order.symbol} "
                f"(—Ä–µ–∂–∏–º: {mode.value})"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞
            if not self._validate_order(order):
                self.logger.error(f"‚ùå –û—Ä–¥–µ—Ä {order.order_id} –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é")
                return False

            self.logger.info(f"‚úÖ –û—Ä–¥–µ—Ä {order.order_id} –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é")

            # –í—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
            if mode == ExecutionMode.AGGRESSIVE:
                success = await self._execute_aggressive(order)
            elif mode == ExecutionMode.PASSIVE:
                success = await self._execute_passive(order)
            else:  # SMART
                success = await self._execute_smart(order)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            execution_time = (datetime.utcnow() - start_time).total_seconds()
            self._update_statistics(success, execution_time)

            if success:
                self.logger.info(
                    f"‚úÖ –û—Ä–¥–µ—Ä {order.order_id} —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω –∑–∞ {execution_time:.2f}—Å"
                )
            else:
                self.logger.error(f"‚ùå –û—Ä–¥–µ—Ä {order.order_id} –Ω–µ –±—ã–ª –∏—Å–ø–æ–ª–Ω–µ–Ω")

            return success

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ {order.order_id}: {e}")
            import traceback

            traceback.print_exc()
            self._update_statistics(False, 0)
            return False

    async def _execute_aggressive(self, order: Order) -> bool:
        """–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ - market –æ—Ä–¥–µ—Ä–∞"""
        self.logger.info(f"üöÄ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ {order.order_id}")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ market –æ—Ä–¥–µ—Ä
        order.order_type = OrderType.MARKET
        order.price = None

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
        for attempt in range(self.max_retries):
            try:
                self.logger.info(f"üì§ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries} –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂—É")
                success = await self.order_manager.submit_order(order)
                
                if success:
                    self.logger.info(f"‚úÖ –û—Ä–¥–µ—Ä {order.order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –±–∏—Ä–∂—É")
                    # –ñ–¥–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
                    filled = await self._wait_for_fill(order)
                    if filled:
                        self.logger.info(f"‚úÖ –û—Ä–¥–µ—Ä {order.order_id} —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω –Ω–∞ –±–∏—Ä–∂–µ")
                    else:
                        self.logger.warning(f"‚ö†Ô∏è –û—Ä–¥–µ—Ä {order.order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞")
                    return success
                else:
                    self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä {order.order_id} –Ω–∞ –±–∏—Ä–∂—É")

            except Exception as e:
                self.logger.error(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                if attempt < self.max_retries - 1:
                    await asyncio.sleep(self.retry_delay)

        self.logger.error(f"‚ùå –ò—Å—á–µ—Ä–ø–∞–Ω—ã –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ä–¥–µ—Ä–∞ {order.order_id}")
        return False

    async def _execute_passive(self, order: Order) -> bool:
        """–ü–∞—Å—Å–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ - –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –ø–æ –ª—É—á—à–µ–π —Ü–µ–Ω–µ"""
        self.logger.info(f"–ü–∞—Å—Å–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ {order.order_id}")

        # –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à—É—é —Ü–µ–Ω—É
        best_price = await self._get_best_price(order)
        if best_price:
            order.price = float(best_price)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä
        success = await self.order_manager.submit_order(order)

        if success:
            # –ñ–¥–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            filled = await self._wait_for_fill(order, timeout=self.execution_timeout)

            if not filled and order.status == OrderStatus.OPEN:
                # –ï—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª–Ω–∏–ª—Å—è - –æ—Ç–º–µ–Ω—è–µ–º
                await self.order_manager.cancel_order(order.order_id)
                return False

        return success

    async def _execute_smart(self, order: Order) -> bool:
        """–£–º–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        self.logger.info(f"–£–º–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ {order.order_id}")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
        market_data = await self._analyze_market_conditions(order)

        # –ï—Å–ª–∏ –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º market
        if market_data.get("volatility", 0) > 0.02:  # 2%
            return await self._execute_aggressive(order)

        # –ï—Å–ª–∏ –Ω–∏–∑–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        if market_data.get("liquidity", float("inf")) < order.quantity * 2:
            return await self._execute_in_chunks(order)

        # –ò–Ω–∞—á–µ - –ø—Ä–æ–±—É–µ–º –ø–∞—Å—Å–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
        success = await self._execute_passive(order)

        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–º—É
        if not success:
            self.logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–º—É –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—é –¥–ª—è {order.order_id}")
            return await self._execute_aggressive(order)

        return success

    async def _execute_in_chunks(self, order: Order, chunks: int = 3) -> bool:
        """–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —á–∞—Å—Ç—è–º–∏"""
        self.logger.info(f"–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ {order.order_id} –≤ {chunks} —á–∞—Å—Ç–µ–π")

        chunk_size = order.quantity / chunks
        total_filled = 0

        for i in range(chunks):
            # –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–π –æ—Ä–¥–µ—Ä
            chunk_order = Order(
                exchange=order.exchange,
                symbol=order.symbol,
                order_id=f"{order.order_id}_chunk_{i}",
                side=order.side,
                order_type=order.order_type,
                quantity=chunk_size,
                price=order.price,
                strategy_name=order.strategy_name,
                trader_id=order.trader_id,
            )

            # –ò—Å–ø–æ–ª–Ω—è–µ–º —á–∞—Å—Ç—å
            success = await self.order_manager.submit_order(chunk_order)

            if success:
                await self._wait_for_fill(chunk_order, timeout=30)

                if chunk_order.status == OrderStatus.FILLED:
                    total_filled += chunk_order.filled_quantity or chunk_size

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏
            if i < chunks - 1:
                await asyncio.sleep(2)

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä
        fill_ratio = total_filled / order.quantity

        if fill_ratio >= 0.95:  # 95% –∏—Å–ø–æ–ª–Ω–µ–Ω–æ
            order.status = OrderStatus.FILLED
            order.filled_quantity = total_filled
        elif fill_ratio > 0:
            order.status = OrderStatus.PARTIALLY_FILLED
            order.filled_quantity = total_filled
        else:
            order.status = OrderStatus.CANCELLED

        await self.order_manager._update_order_in_db(order)

        return fill_ratio >= 0.95

    async def _wait_for_fill(self, order: Order, timeout: float = 30) -> bool:
        """–û–∂–∏–¥–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞"""
        start_time = datetime.utcnow()

        while (datetime.utcnow() - start_time).total_seconds() < timeout:
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –±–∏—Ä–∂–µ–π
            await self.order_manager.sync_orders_with_exchange(order.exchange)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            current_order = self.order_manager._active_orders.get(order.order_id)

            if not current_order or current_order.status in [
                OrderStatus.FILLED,
                OrderStatus.CANCELLED,
                OrderStatus.REJECTED,
            ]:
                return current_order and current_order.status == OrderStatus.FILLED

            await asyncio.sleep(1)

        return False

    async def _get_best_price(self, order: Order) -> Decimal | None:
        """–ü–æ–ª—É—á–∏—Ç—å –ª—É—á—à—É—é —Ü–µ–Ω—É –¥–ª—è –æ—Ä–¥–µ—Ä–∞"""
        try:
            exchange = await self.exchange_registry.get_exchange(order.exchange)
            if not exchange:
                return None

            orderbook = await exchange.get_orderbook(order.symbol)

            if order.side == OrderSide.BUY:
                # –î–ª—è –ø–æ–∫—É–ø–∫–∏ - –ª—É—á—à–∏–π ask
                return Decimal(str(orderbook["asks"][0][0])) if orderbook["asks"] else None
            else:
                # –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ - –ª—É—á—à–∏–π bid
                return Decimal(str(orderbook["bids"][0][0])) if orderbook["bids"] else None

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª—É—á—à–µ–π —Ü–µ–Ω—ã: {e}")
            return None

    async def _analyze_market_conditions(self, order: Order) -> dict[str, float]:
        """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
        try:
            exchange = await self.exchange_registry.get_exchange(order.exchange)
            if not exchange:
                return {}

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            ticker = await exchange.get_ticker(order.symbol)
            orderbook = await exchange.get_orderbook(order.symbol)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            volatility = (ticker["high"] - ticker["low"]) / ticker["last"] if ticker else 0

            # –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –Ω–∞ —É—Ä–æ–≤–Ω–µ –Ω–∞—à–µ–≥–æ –æ–±—ä–µ–º–∞
            if order.side == OrderSide.BUY:
                liquidity = sum(ask[1] for ask in orderbook.get("asks", [])[:10])
            else:
                liquidity = sum(bid[1] for bid in orderbook.get("bids", [])[:10])

            spread = 0
            if orderbook.get("asks") and orderbook.get("bids"):
                spread = (orderbook["asks"][0][0] - orderbook["bids"][0][0]) / orderbook["bids"][0][
                    0
                ]

            return {"volatility": volatility, "liquidity": liquidity, "spread": spread}

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π: {e}")
            return {}

    def _validate_order(self, order: Order) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ä–¥–µ—Ä–∞ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ–º"""
        if order.status != OrderStatus.PENDING:
            self.logger.debug(f"–û—Ä–¥–µ—Ä {order.order_id} –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å {order.status}, —Ç—Ä–µ–±—É–µ—Ç—Å—è PENDING")
            return False

        if order.quantity <= 0:
            self.logger.warning(f"–û—Ä–¥–µ—Ä {order.order_id} –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order.quantity}")
            return False

        if order.order_type == OrderType.LIMIT and not order.price:
            self.logger.warning(f"–õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä {order.order_id} –±–µ–∑ —Ü–µ–Ω—ã")
            return False

        # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–ª–∞–Ω—Å–∞ –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è exchange_registry
        # TODO: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        self.logger.debug(f"–û—Ä–¥–µ—Ä {order.order_id} –ø—Ä–æ—à–µ–ª –±–∞–∑–æ–≤—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é")
        
        return True

    def _update_statistics(self, success: bool, execution_time: float):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"""
        self._execution_stats["total_executed"] += 1

        if success:
            self._execution_stats["successful"] += 1
        else:
            self._execution_stats["failed"] += 1

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        if execution_time > 0:
            current_avg = self._execution_stats["avg_execution_time"]
            total = self._execution_stats["total_executed"]
            self._execution_stats["avg_execution_time"] = (
                current_avg * (total - 1) + execution_time
            ) / total

    async def get_execution_stats(self) -> dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"""
        stats = self._execution_stats.copy()

        if stats["total_executed"] > 0:
            stats["success_rate"] = stats["successful"] / stats["total_executed"]
        else:
            stats["success_rate"] = 0.0

        return stats

    async def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        return True

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        self.logger.info("Execution Engine –∑–∞–ø—É—â–µ–Ω")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        self.logger.info("Execution Engine –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def is_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        return True
