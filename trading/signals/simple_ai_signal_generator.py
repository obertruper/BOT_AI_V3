"""
Simple AI Signal Generator –¥–ª—è BOT_AI_V3

–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –±–µ–∑ ML –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É.
"""

import asyncio
import logging
import os
from dataclasses import dataclass, field
from datetime import datetime, timedelta
from typing import Dict, List, Optional

import pandas as pd

from core.config.config_manager import ConfigManager
from strategies.base.strategy_abc import SignalStrength, SignalType, TradingSignal

logger = logging.getLogger(__name__)


@dataclass
class SimpleSignalScore:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–∏–≥–Ω–∞–ª–∞"""

    symbol: str
    timestamp: datetime
    direction: str  # BUY/SELL/NEUTRAL

    # –û—Ü–µ–Ω–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    rsi_score: float = 0.0
    ema_score: float = 0.0
    volume_score: float = 0.0
    momentum_score: float = 0.0

    # –ò—Ç–æ–≥–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏
    total_score: float = 0.0
    signal_strength: SignalStrength = SignalStrength.WEAK
    should_trade: bool = False

    # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —É—Ä–æ–≤–Ω–∏
    suggested_sl: Optional[float] = None
    suggested_tp: Optional[float] = None

    # –î–µ—Ç–∞–ª–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    reasons: List[str] = field(default_factory=list)


class SimpleAISignalGenerator:
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤

    –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
    - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
    - –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è SL/TP
    """

    def __init__(self, config_manager: ConfigManager, exchange_name: str = "bybit"):
        self.config_manager = config_manager
        self.exchange_name = exchange_name
        self.logger = logger

        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        self.exchange = None

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.symbols = []
        self.signal_interval = 60  # —Å–µ–∫—É–Ω–¥
        self._load_config()

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self._running = False
        self._signal_tasks: Dict[str, asyncio.Task] = {}
        self._last_signals: Dict[str, SimpleSignalScore] = {}
        self._candle_cache: Dict[str, pd.DataFrame] = {}

    def _load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        full_config = self.config_manager.get_config()

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ multi_crypto_10 —Ç—Ä–µ–π–¥–µ—Ä–∞
        traders = full_config.get("traders", [])
        for trader in traders:
            if trader.get("id") == "multi_crypto_10" and trader.get("enabled"):
                self.symbols = trader.get("symbols", [])
                strategy_config = trader.get("strategy_config", {})
                self.signal_interval = strategy_config.get("signal_interval", 60)
                break

        if not self.symbols:
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.symbols = ["BTCUSDT", "ETHUSDT", "BNBUSDT"]

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
        self.logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Simple AI Signal Generator")

        try:
            # –°–æ–∑–¥–∞–µ–º exchange
            full_config = self.config_manager.get_config()
            bybit_config = full_config.get("exchanges", {}).get("bybit", {})

            exchange_config = {
                "api_key": os.getenv("BYBIT_API_KEY"),
                "api_secret": os.getenv("BYBIT_API_SECRET"),
                "testnet": bybit_config.get("testnet", False),
            }

            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É –∏ –∫–ª–∏–µ–Ω—Ç–∞
            from exchanges.factory import get_exchange_factory

            factory = get_exchange_factory()

            self.exchange = await factory.create_and_connect(
                exchange_type=self.exchange_name,
                api_key=exchange_config["api_key"],
                api_secret=exchange_config["api_secret"],
                sandbox=exchange_config["testnet"],
            )

            self.logger.info(
                f"üìä –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ {len(self.symbols)} —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"
            )
            self.logger.info(
                f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {self.signal_interval} —Å–µ–∫"
            )

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            raise

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        self._running = True
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        for symbol in self.symbols:
            task = asyncio.create_task(self._signal_generation_loop(symbol))
            self._signal_tasks[symbol] = task

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—â–∏–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        asyncio.create_task(self._monitoring_loop())

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        self._running = False

        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        for task in self._signal_tasks.values():
            task.cancel()

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await asyncio.gather(*self._signal_tasks.values(), return_exceptions=True)

        self._signal_tasks.clear()
        self.logger.info("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    async def _signal_generation_loop(self, symbol: str):
        """–¶–∏–∫–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        while self._running:
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ü–µ–Ω–∏–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª
                signal_score = await self._generate_and_score_signal(symbol)

                if signal_score:
                    self._last_signals[symbol] = signal_score

                    # –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–ª—å–Ω—ã–π - —Å–æ–∑–¥–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
                    if signal_score.should_trade:
                        trading_signal = self._create_trading_signal(signal_score)
                        await self._emit_signal(trading_signal)

                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                await asyncio.sleep(self.signal_interval)

            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}: {e}")
                await asyncio.sleep(self.signal_interval)

    async def _generate_and_score_signal(
        self, symbol: str
    ) -> Optional[SimpleSignalScore]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ü–µ–Ω–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            candles = await self._get_candles(symbol)
            if candles is None or len(candles) < 50:
                return None

            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
            signal_score = SimpleSignalScore(symbol=symbol, timestamp=datetime.now())

            # 1. RSI –∞–Ω–∞–ª–∏–∑
            rsi = self._calculate_rsi(candles["close"])
            current_rsi = rsi.iloc[-1]

            if current_rsi < 30:
                signal_score.rsi_score = 0.8
                signal_score.direction = "BUY"
                signal_score.reasons.append(f"RSI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω: {current_rsi:.1f}")
            elif current_rsi > 70:
                signal_score.rsi_score = 0.8
                signal_score.direction = "SELL"
                signal_score.reasons.append(f"RSI –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω: {current_rsi:.1f}")
            else:
                signal_score.rsi_score = 0.2

            # 2. EMA –∞–Ω–∞–ª–∏–∑
            ema_9 = candles["close"].ewm(span=9).mean()
            ema_21 = candles["close"].ewm(span=21).mean()

            if ema_9.iloc[-1] > ema_21.iloc[-1] and ema_9.iloc[-2] <= ema_21.iloc[-2]:
                signal_score.ema_score = 0.7
                if signal_score.direction != "SELL":
                    signal_score.direction = "BUY"
                signal_score.reasons.append("EMA –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö")
            elif ema_9.iloc[-1] < ema_21.iloc[-1] and ema_9.iloc[-2] >= ema_21.iloc[-2]:
                signal_score.ema_score = 0.7
                if signal_score.direction != "BUY":
                    signal_score.direction = "SELL"
                signal_score.reasons.append("EMA –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤–Ω–∏–∑")

            # 3. –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤
            avg_volume = candles["volume"].rolling(20).mean().iloc[-1]
            current_volume = candles["volume"].iloc[-1]

            if current_volume > avg_volume * 1.5:
                signal_score.volume_score = 0.5
                signal_score.reasons.append(
                    f"–í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º: {current_volume / avg_volume:.1f}x"
                )
            elif current_volume > avg_volume:
                signal_score.volume_score = 0.3

            # 4. –ê–Ω–∞–ª–∏–∑ –º–æ–º–µ–Ω—Ç—É–º–∞
            price_change = (
                candles["close"].iloc[-1] / candles["close"].iloc[-5] - 1
            ) * 100

            if abs(price_change) > 2:
                signal_score.momentum_score = 0.4
                signal_score.reasons.append(f"–°–∏–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç—É–º: {price_change:.1f}%")

            # 5. –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π –æ—Ü–µ–Ω–∫–∏
            signal_score.total_score = (
                signal_score.rsi_score * 0.3
                + signal_score.ema_score * 0.3
                + signal_score.volume_score * 0.2
                + signal_score.momentum_score * 0.2
            )

            # 6. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞
            if signal_score.total_score >= 0.7:
                signal_score.signal_strength = SignalStrength.STRONG
            elif signal_score.total_score >= 0.5:
                signal_score.signal_strength = SignalStrength.MODERATE
            else:
                signal_score.signal_strength = SignalStrength.WEAK

            # 7. –†–µ—à–µ–Ω–∏–µ –æ —Ç–æ—Ä–≥–æ–≤–ª–µ
            signal_score.should_trade = (
                signal_score.total_score >= 0.5 and signal_score.direction != "NEUTRAL"
            )

            # 8. –†–∞—Å—á–µ—Ç SL/TP
            if signal_score.should_trade:
                current_price = float(candles["close"].iloc[-1])

                if signal_score.direction == "BUY":
                    signal_score.suggested_sl = current_price * 0.98  # -2%
                    signal_score.suggested_tp = current_price * 1.058  # +5.8%
                else:
                    signal_score.suggested_sl = current_price * 1.02  # +2%
                    signal_score.suggested_tp = current_price * 0.942  # -5.8%

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            self._log_signal_score(signal_score)

            return signal_score

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ {symbol}: {e}")
            return None

    def _calculate_rsi(self, prices: pd.Series, period: int = 14) -> pd.Series:
        """–†–∞—Å—á–µ—Ç RSI"""
        delta = prices.diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
        rs = gain / loss
        rsi = 100 - (100 / (1 + rs))
        return rsi

    def _create_trading_signal(self, signal_score: SimpleSignalScore) -> TradingSignal:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –∏–∑ –æ—Ü–µ–Ω–∫–∏"""
        signal_type = (
            SignalType.BUY if signal_score.direction == "BUY" else SignalType.SELL
        )

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏–∑ –∫—ç—à–∞
        candles = self._candle_cache.get(f"{signal_score.symbol}_15m")
        current_price = float(candles["close"].iloc[-1]) if candles is not None else 0

        signal = TradingSignal(
            timestamp=signal_score.timestamp,
            symbol=signal_score.symbol,
            signal_type=signal_type,
            confidence=signal_score.total_score * 100,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 0-100
            entry_price=current_price,
            stop_loss=signal_score.suggested_sl or current_price * 0.98,
            take_profit=signal_score.suggested_tp or current_price * 1.058,
            position_size=0.01,  # 1% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            strategy_name="SimpleAISignalGenerator",
            timeframe="15m",
            indicators_used=["RSI", "EMA", "Volume", "Momentum"],
        )

        return signal

    async def _emit_signal(self, signal: TradingSignal):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ —Å–∏—Å—Ç–µ–º—É"""
        self.logger.info(
            f"üì° –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª: {signal.symbol} {signal.signal_type.value} "
            f"(—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.1f}%, —Ü–µ–Ω–∞: {signal.entry_price:.2f})"
        )

        # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å trading engine –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞

    async def _get_candles(
        self, symbol: str, timeframe: str = "15m", limit: int = 100
    ) -> Optional[pd.DataFrame]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = f"{symbol}_{timeframe}"
            if cache_key in self._candle_cache:
                cached_data = self._candle_cache[cache_key]
                # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à
                if len(cached_data) > 0 and (
                    datetime.now() - cached_data.index[-1]
                ) < timedelta(minutes=1):
                    return cached_data

            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
            klines = await self.exchange.get_klines(symbol, timeframe, limit=limit)

            if klines:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º klines –≤ DataFrame
                candles_data = []
                for kline in klines:
                    candles_data.append(
                        {
                            "timestamp": kline.timestamp,
                            "open": float(kline.open),
                            "high": float(kline.high),
                            "low": float(kline.low),
                            "close": float(kline.close),
                            "volume": float(kline.volume),
                        }
                    )

                df = pd.DataFrame(candles_data)
                df["timestamp"] = pd.to_datetime(df["timestamp"])
                df.set_index("timestamp", inplace=True)

                # –ö—ç—à–∏—Ä—É–µ–º
                self._candle_cache[cache_key] = df

                return df

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π {symbol}: {e}")
            return None

    def _log_signal_score(self, signal_score: SimpleSignalScore):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ —Å–∏–≥–Ω–∞–ª–∞"""
        if signal_score.should_trade:
            self.logger.info(
                f"üìä –°–∏–≥–Ω–∞–ª {signal_score.symbol} {signal_score.direction}:\n"
                f"   RSI: {signal_score.rsi_score:.2f}\n"
                f"   EMA: {signal_score.ema_score:.2f}\n"
                f"   –û–±—ä–µ–º: {signal_score.volume_score:.2f}\n"
                f"   –ú–æ–º–µ–Ω—Ç—É–º: {signal_score.momentum_score:.2f}\n"
                f"   –ò—Ç–æ–≥–æ: {signal_score.total_score:.2f} ({signal_score.signal_strength.value})\n"
                f"   –ü—Ä–∏—á–∏–Ω—ã: {', '.join(signal_score.reasons)}"
            )

    async def _monitoring_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
        while self._running:
            try:
                # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                await asyncio.sleep(300)

                active_signals = len(
                    [s for s in self._last_signals.values() if s.should_trade]
                )
                total_signals = len(self._last_signals)

                self.logger.info(
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞:\n"
                    f"   –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–≤: {len(self.symbols)}\n"
                    f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {active_signals}/{total_signals}"
                )

            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

    async def get_current_signals(self) -> Dict[str, SimpleSignalScore]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        return self._last_signals.copy()
