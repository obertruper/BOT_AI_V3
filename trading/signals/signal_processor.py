"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ v2 - –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞

–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∏ —Å–æ–∑–¥–∞–µ—Ç –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è.
"""

import logging
from datetime import datetime
from decimal import Decimal
from typing import Any, Dict, List

from database.models.base_models import Order, OrderSide, OrderType, SignalType
from database.models.signal import Signal


class SignalProcessor:
    """
    –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤

    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
    - –í–∞–ª–∏–¥–∞—Ü–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤
    - –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ –∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–º –Ω–∞ —É—Ä–æ–≤–Ω–µ –æ—Ä–¥–µ—Ä–æ–≤
    """

    def __init__(
        self, config: Dict[str, Any], exchange_registry: Any, order_manager: Any = None
    ):
        self.config = config
        self.exchange_registry = exchange_registry
        self.order_manager = order_manager
        self.logger = logging.getLogger(__name__)

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self._running = False
        self._processed_signals = set()

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
        self.default_position_size = Decimal(
            str(config.get("default_position_size", 100))
        )
        self.max_position_size = Decimal(str(config.get("max_position_size", 1000)))
        self.default_leverage = config.get("default_leverage", 1)

    async def process_signal(self, signal: Signal) -> List[Order]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤

        Args:
            signal: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏

        Returns:
            List[Order]: –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        """
        try:
            self.logger.info(
                f"üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞: {signal.symbol} {signal.signal_type.value} "
                f"(—Å–∏–ª–∞: {signal.strength:.2f})"
            )

            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
            if not await self.validate_signal(signal):
                self.logger.warning(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å–∏–≥–Ω–∞–ª: {signal.symbol}")
                return []

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            signal_key = (
                f"{signal.symbol}_{signal.signal_type.value}_{signal.created_at}"
            )
            if signal_key in self._processed_signals:
                self.logger.debug(f"–î—É–±–ª–∏–∫–∞—Ç —Å–∏–≥–Ω–∞–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω: {signal_key}")
                return []

            # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–µ —Å–æ–∑–¥–∞—é—Ç –æ—Ä–¥–µ—Ä–∞
            if signal.signal_type == SignalType.NEUTRAL:
                self.logger.info("üìä –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª, –æ—Ä–¥–µ—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞—é—Ç—Å—è")
                self._processed_signals.add(signal_key)
                return []

            # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤
            orders = await self._create_orders_from_signal(signal)

            if orders:
                self._processed_signals.add(signal_key)
                self.logger.info(
                    f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(orders)} –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ {signal.symbol}"
                )
            else:
                self.logger.warning(
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä–∞ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ {signal.symbol}"
                )

            return orders

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return []

    async def validate_signal(self, signal: Signal) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            if not signal.symbol or not signal.exchange:
                self.logger.warning("–°–∏–≥–Ω–∞–ª –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ –∏–ª–∏ –±–∏—Ä–∂–∏")
                return False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–ª—ã –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            if signal.strength is not None:
                if not 0 <= signal.strength <= 1:
                    self.logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {signal.strength}")
                    return False

            if signal.confidence is not None:
                if not 0 <= signal.confidence <= 1:
                    self.logger.warning(
                        f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence}"
                    )
                    return False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∏–º–≤–æ–ª–∞ –Ω–∞ –±–∏—Ä–∂–µ
            if self.exchange_registry:
                # TODO: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–∏–º–≤–æ–ª–∞ –Ω–∞ –±–∏—Ä–∂–µ
                pass

            return True

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return False

    async def _create_orders_from_signal(self, signal: Signal) -> List[Order]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ –∏–∑ —Å–∏–≥–Ω–∞–ª–∞"""
        orders = []

        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É –æ—Ä–¥–µ—Ä–∞
            if signal.signal_type == SignalType.LONG:
                side = OrderSide.BUY
            elif signal.signal_type == SignalType.SHORT:
                side = OrderSide.SELL
            else:
                return []

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            position_size = await self._calculate_position_size(signal)
            if position_size <= 0:
                self.logger.warning("–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ <= 0, –æ—Ä–¥–µ—Ä –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è")
                return []

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
            entry_price = signal.suggested_price
            if not entry_price:
                # TODO: –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Å –±–∏—Ä–∂–∏
                self.logger.warning("–ù–µ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ –≤ —Å–∏–≥–Ω–∞–ª–µ")
                return []

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ
            # position_size - —ç—Ç–æ —Ä–∞–∑–º–µ—Ä –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö, –Ω—É–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞
            if hasattr(signal, "suggested_quantity") and signal.suggested_quantity:
                quantity = Decimal(str(signal.suggested_quantity))
            else:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–ª–ª–∞—Ä—ã –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞
                quantity = position_size / entry_price

            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è Bybit –¥–ª—è BTC: 0.001 (~$100)
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–æ–≤ –±—É–¥—É—Ç –¥—Ä—É–≥–∏–µ –º–∏–Ω–∏–º—É–º—ã, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –ø–æ–¥—Ö–æ–¥
            min_quantity = Decimal("0.001")  # –ú–∏–Ω–∏–º—É–º –¥–ª—è BTC

            # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ –º–∏–Ω–∏–º—É–º–∞
            if quantity < min_quantity:
                self.logger.warning(
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {quantity} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ {min_quantity}, "
                    f"—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ –º–∏–Ω–∏–º—É–º–∞"
                )
                quantity = min_quantity
                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
                position_size = quantity * entry_price

            # –û–∫—Ä—É–≥–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ —Ä–∞–∑—É–º–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ (0.00001 BTC)
            quantity = quantity.quantize(Decimal("0.00001"))

            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ä–¥–µ—Ä
            main_order = Order(
                symbol=signal.symbol,
                exchange=signal.exchange,
                side=side,
                order_type=OrderType.LIMIT,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–º–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                quantity=float(quantity),  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ (BTC)
                price=float(entry_price),
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π order_id
                order_id=f"SP_{signal.exchange}_{signal.symbol}_{datetime.now().strftime('%Y%m%d%H%M%S%f')}",
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                strategy_name=signal.strategy_name,
                trader_id="signal_processor",
                extra_data={
                    "signal_id": signal.id,
                    "signal_type": signal.signal_type.value,
                    "signal_strength": signal.strength,
                    "signal_confidence": signal.confidence,
                    "position_size_usd": str(
                        position_size
                    ),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
                    "leverage": self.default_leverage,
                },
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SL/TP –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
            if signal.suggested_stop_loss:
                main_order.stop_loss = signal.suggested_stop_loss
            if signal.suggested_take_profit:
                main_order.take_profit = signal.suggested_take_profit

            orders.append(main_order)

            self.logger.info(
                f"üìã –°–æ–∑–¥–∞–Ω –æ—Ä–¥–µ—Ä: {side.value} {quantity} {signal.symbol} "
                f"@ {entry_price} (${position_size} USD) "
                f"(SL: {main_order.stop_loss}, TP: {main_order.take_profit})"
            )

            return orders

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤: {e}")
            return []

    async def _calculate_position_size(self, signal: Signal) -> Decimal:
        """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–≥–Ω–∞–ª–∞ –∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞"""
        try:
            # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä —É–∫–∞–∑–∞–Ω –≤ —Å–∏–≥–Ω–∞–ª–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if signal.suggested_position_size and signal.suggested_position_size > 0:
                size = Decimal(str(signal.suggested_position_size))
            else:
                # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å —É—á–µ—Ç–æ–º —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞
                base_size = self.default_position_size

                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞
                if signal.strength:
                    size = base_size * Decimal(str(signal.strength))
                else:
                    size = base_size

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
            size = min(size, self.max_position_size)

            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ä–∞–∑—É–º–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
            size = size.quantize(Decimal("0.001"))

            return size

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return Decimal("0")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
        self._running = True
        self.logger.info("‚úÖ Signal Processor –∑–∞–ø—É—â–µ–Ω")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
        self._running = False
        self._processed_signals.clear()
        self.logger.info("üõë Signal Processor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        return self._running

    def is_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        return self._running
