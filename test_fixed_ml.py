#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ ML –º–æ–¥–µ–ª–∏
"""

import asyncio
import sys

import pandas as pd

sys.path.append("/mnt/SSD/PYCHARMPRODJECT/BOT_AI_V3")

from core.logger import setup_logger
from database.connections.postgres import AsyncPGPool
from ml.ml_manager import MLManager
from ml.ml_signal_processor import MLSignalProcessor

logger = setup_logger("test_fixed_ml")


async def test_fixed_ml():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é ML –º–æ–¥–µ–ª–∏."""

    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô ML –ò–ù–¢–ï–†–ü–†–ï–¢–ê–¶–ò–ò\n")

    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    config = {"ml": {"model": {"device": "cuda"}, "model_directory": "models/saved"}}

    ml_manager = MLManager(config)
    await ml_manager.initialize()

    # 2. –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print("1Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

    query = """
    SELECT * FROM raw_market_data
    WHERE symbol = 'BTCUSDT'
    ORDER BY datetime DESC
    LIMIT 100
    """

    raw_data = await AsyncPGPool.fetch(query)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
    df_data = [dict(row) for row in raw_data]
    df = pd.DataFrame(df_data)

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Decimal –≤ float
    for col in ["open", "high", "low", "close", "volume"]:
        df[col] = df[col].astype(float)

    df = df.sort_values("datetime")

    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π")
    print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${df['close'].iloc[-1]:.2f}")

    # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π...")

    prediction = await ml_manager.predict(df)

    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø:")
    print(f"   Signal Type: {prediction['signal_type']}")
    print(f"   Confidence: {prediction['confidence']:.1%}")
    print(f"   Signal Strength: {prediction['signal_strength']:.3f}")
    print(f"   Risk Level: {prediction['risk_level']}")

    if "predictions" in prediction:
        pred = prediction["predictions"]
        print("\nüìà –î–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π:")
        print(f"   Directions by timeframe: {pred.get('directions_by_timeframe', [])}")
        print(f"   Direction score: {pred.get('direction_score', 0):.3f}")

        if "direction_probabilities" in pred:
            print("\n   –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º:")
            for i, probs in enumerate(pred["direction_probabilities"]):
                print(
                    f"   –¢–∞–π–º—Ñ—Ä–µ–π–º {i + 1}: SHORT={probs[0]:.3f}, NEUTRAL={probs[1]:.3f}, LONG={probs[2]:.3f}"
                )

    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ Stop Loss –∏ Take Profit
    print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ Stop Loss –∏ Take Profit:")

    current_price = df["close"].iloc[-1]
    stop_loss_pct = prediction.get("stop_loss_pct")
    take_profit_pct = prediction.get("take_profit_pct")

    if stop_loss_pct is not None and take_profit_pct is not None:
        print(f"   Stop Loss %: {stop_loss_pct:.3%}")
        print(f"   Take Profit %: {take_profit_pct:.3%}")

        if prediction["signal_type"] == "LONG":
            sl_price = current_price * (1 - stop_loss_pct)
            tp_price = current_price * (1 + take_profit_pct)
        else:
            sl_price = current_price * (1 + stop_loss_pct)
            tp_price = current_price * (1 - take_profit_pct)

        print(f"\n   –ü—Ä–∏ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ ${current_price:.2f}:")
        print(f"   Stop Loss: ${sl_price:.2f}")
        print(f"   Take Profit: ${tp_price:.2f}")

    # 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MLSignalProcessor
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MLSignalProcessor...")

    ml_processor = MLSignalProcessor(ml_manager, config)

    # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ process_signal
    from ml.logic.feature_engineering import FeatureEngineer

    feature_engineer = FeatureEngineer(config)
    features = feature_engineer.create_features(df)

    if len(features) >= 96:
        features_window = features[-96:]

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
        signal = await ml_processor._convert_predictions_to_signal(
            symbol="BTCUSDT", predictions=prediction, current_price=current_price
        )

        if signal:
            print("\n‚úÖ –°–∏–≥–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:")
            print(f"   Type: {signal.signal_type.value}")
            print(f"   Confidence: {signal.confidence:.1%}")
            print(f"   Strength: {signal.strength:.3f}")
            print(f"   Stop Loss: ${signal.suggested_stop_loss:.2f}")
            print(f"   Take Profit: ${signal.suggested_take_profit:.2f}")
        else:
            print("\n‚ùå –°–∏–≥–Ω–∞–ª –Ω–µ —Å–æ–∑–¥–∞–Ω (–≤–æ–∑–º–æ–∂–Ω–æ NEUTRAL)")

    # 6. –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print("\n5Ô∏è‚É£ –ò–¢–û–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê:")

    issues = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    if "directions_by_timeframe" in prediction.get("predictions", {}):
        directions = prediction["predictions"]["directions_by_timeframe"]
        if len(set(directions)) == 1:
            issues.append("‚ö†Ô∏è  –í—Å–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        else:
            print("‚úÖ –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è—Ö –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Stop Loss/Take Profit
    if stop_loss_pct is not None and stop_loss_pct > 0:
        print("‚úÖ Stop Loss –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç)")
    else:
        issues.append("‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–∞—Å—á–µ—Ç–æ–º Stop Loss")

    if take_profit_pct is not None and take_profit_pct > 0:
        print("‚úÖ Take Profit –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç)")
    else:
        issues.append("‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–∞—Å—á–µ—Ç–æ–º Take Profit")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    if 0.2 <= prediction["confidence"] <= 0.8:
        print("‚úÖ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö")
    else:
        issues.append(
            f"‚ö†Ô∏è  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {prediction['confidence']:.1%} –≤—ã–≥–ª—è–¥–∏—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ"
        )

    if issues:
        print("\nüîç –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:")
        for issue in issues:
            print(f"   {issue}")
    else:
        print("\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")


if __name__ == "__main__":
    asyncio.run(test_fixed_ml())
