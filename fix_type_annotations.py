#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ type annotations —Å | None –Ω–∞ Optional[]
"""

import re
from pathlib import Path


def fix_type_annotations(file_path):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç type annotations –≤ —Ñ–∞–π–ª–µ"""

    with open(file_path) as f:
        content = f.read()

    original = content

    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∑–∞–º–µ–Ω—ã
    patterns = [
        # –ü—Ä–æ—Å—Ç—ã–µ —Ç–∏–ø—ã: int | None -> Optional[int]
        (r"\b(int|float|str|bool|dict|list|tuple|set|Any)\s*\|\s*None\b", r"Optional[\1]"),
        # –°–ª–æ–∂–Ω—ã–µ —Ç–∏–ø—ã —Å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–º–∏ —Å–∫–æ–±–∫–∞–º–∏: dict[str, Any] | None -> Optional[dict[str, Any]]
        (r"\b(dict|list|tuple|set)\[([^\]]+)\]\s*\|\s*None\b", r"Optional[\1[\2]]"),
        # –ö–ª–∞—Å—Å—ã: ClassName | None -> Optional[ClassName]
        (r"\b([A-Z][a-zA-Z0-9_]*)\s*\|\s*None\b", r"Optional[\1]"),
    ]

    for pattern, replacement in patterns:
        content = re.sub(pattern, replacement, content)

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç Optional –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if content != original and "Optional" in content:
        if (
            "from typing import" in content
            and "Optional" not in content[: content.find("from typing import") + 200]
        ):
            # –î–æ–±–∞–≤–ª—è–µ–º Optional –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∏–º–ø–æ—Ä—Ç—É
            content = re.sub(
                r"(from typing import[^\\n]+)",
                lambda m: m.group(1) + (", Optional" if "Optional" not in m.group(1) else ""),
                content,
                count=1,
            )
        elif "from typing import" not in content and "import" in content:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
            first_import = content.find("import")
            end_of_line = content.find("\n", first_import)
            content = (
                content[: end_of_line + 1]
                + "from typing import Optional\n"
                + content[end_of_line + 1 :]
            )

    if content != original:
        with open(file_path, "w") as f:
            f.write(content)
        return True
    return False


def main():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –≤ web/"""

    web_dir = Path("/mnt/SSD/PYCHARMPRODJECT/BOT_AI_V3/web")

    fixed_files = []

    for py_file in web_dir.rglob("*.py"):
        if "backup" in str(py_file) or "__pycache__" in str(py_file):
            continue

        if fix_type_annotations(py_file):
            fixed_files.append(py_file)
            print(f"‚úÖ Fixed: {py_file.relative_to(web_dir.parent)}")

    print(f"\nüìä –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(fixed_files)}")

    return len(fixed_files)


if __name__ == "__main__":
    main()
