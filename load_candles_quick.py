#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–≤–µ—á–µ–π –¥–ª—è ML
"""

import asyncio
import os
from datetime import datetime

from dotenv import load_dotenv

load_dotenv()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ["PGPORT"] = "5555"
os.environ["PGUSER"] = "obertruper"
os.environ["PGDATABASE"] = "bot_trading_v3"


async def load_candles():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–µ—á–µ–π —á–µ—Ä–µ–∑ Bybit API"""
    print("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ML...")

    from database.connections.postgres import AsyncPGPool
    from exchanges.bybit.client import BybitClient

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    client = BybitClient(
        api_key=os.getenv("BYBIT_API_KEY"),
        api_secret=os.getenv("BYBIT_API_SECRET"),
        sandbox=False,
    )

    symbols = ["BTCUSDT", "ETHUSDT", "BNBUSDT", "SOLUSDT", "XRPUSDT"]
    interval = "15"  # 15 –º–∏–Ω—É—Ç
    limit = 200  # –ú–∞–∫—Å–∏–º—É–º —Å–≤–µ—á–µ–π –∑–∞ –∑–∞–ø—Ä–æ—Å

    for symbol in symbols:
        print(f"\nüìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}...")

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ —á–µ—Ä–µ–∑ API
            params = {
                "category": "linear",
                "symbol": symbol,
                "interval": interval,
                "limit": limit,
            }

            response = await client._make_request("GET", "/v5/market/kline", params)

            if response and "list" in response:
                candles = response["list"]
                print(f"  –ü–æ–ª—É—á–µ–Ω–æ {len(candles)} —Å–≤–µ—á–µ–π")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                saved = 0
                for candle in reversed(candles):  # –û—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
                    timestamp = datetime.fromtimestamp(int(candle[0]) / 1000)

                    await AsyncPGPool.execute(
                        """
                        INSERT INTO raw_market_data
                        (symbol, timeframe, timestamp, open, high, low, close, volume)
                        VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
                        ON CONFLICT (symbol, timeframe, timestamp) DO NOTHING
                    """,
                        symbol,
                        "15m",
                        timestamp,
                        float(candle[1]),
                        float(candle[2]),
                        float(candle[3]),
                        float(candle[4]),
                        float(candle[5]),
                    )
                    saved += 1

                print(f"  ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved} —Å–≤–µ—á–µ–π –≤ –ë–î")

            else:
                print("  ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
    print("\nüìà –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
    for symbol in symbols:
        count = await AsyncPGPool.fetchval(
            """
            SELECT COUNT(*) FROM raw_market_data
            WHERE symbol = $1 AND timeframe = '15m'
            AND timestamp > NOW() - INTERVAL '7 days'
        """,
            symbol,
        )
        print(f"  {symbol}: {count} —Å–≤–µ—á–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π")


if __name__ == "__main__":
    asyncio.run(load_candles())
