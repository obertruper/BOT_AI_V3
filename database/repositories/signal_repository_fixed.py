"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ –≤ –ë–î
–†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import hashlib
import json
from datetime import datetime, timedelta, timezone
from typing import Any, Dict, List, Optional

from sqlalchemy import and_, select, update
from sqlalchemy.dialects.postgresql import insert
from sqlalchemy.ext.asyncio import AsyncSession

from core.exceptions import DatabaseError
from core.logger import setup_logger
from database.models.signal import Signal

logger = setup_logger(__name__)


class SignalRepositoryFixed:
    """–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""

    def __init__(self, db_session: AsyncSession):
        self.session = db_session

        # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ö–µ—à–∞ —Å–∏–≥–Ω–∞–ª–∞ (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
        self.signal_hash_ttl = timedelta(minutes=5)

    async def get_active_signals(self, exchange: Optional[str] = None) -> List[Signal]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã"""
        try:
            query = select(Signal).where(Signal.status == "active")
            if exchange:
                query = query.where(Signal.exchange == exchange)

            result = await self.session.execute(query)
            return result.scalars().all()
        except Exception as e:
            raise DatabaseError(f"Failed to get active signals: {e}")

    def _generate_signal_hash(self, signal_data: Dict[str, Any]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ö–µ—à –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
        –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ symbol, signal_type, timeframe –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ–∫–Ω–µ
        """
        # –ö–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        hash_data = {
            "symbol": signal_data.get("symbol"),
            "signal_type": str(signal_data.get("signal_type")),
            "strategy_name": signal_data.get("strategy_name"),
            "timeframe": signal_data.get("timeframe", "15m"),
            # –û–∫—Ä—É–≥–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ 5-–º–∏–Ω—É—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
            "time_window": int(datetime.now(timezone.utc).timestamp() // 300),
        }

        # –°–æ–∑–¥–∞–µ–º —Ö–µ—à
        hash_string = json.dumps(hash_data, sort_keys=True)
        return hashlib.md5(hash_string.encode()).hexdigest()

    async def create_signal(self, signal_data: Dict[str, Any]) -> Optional[Signal]:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        """
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–µ—à –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            signal_hash = self._generate_signal_hash(signal_data)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Å–∏–≥–Ω–∞–ª
            existing = await self._check_existing_signal(
                signal_data.get("symbol"), signal_hash
            )

            if existing:
                logger.debug(
                    f"üîÑ –°–∏–≥–Ω–∞–ª –¥–ª—è {signal_data.get('symbol')} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
                )
                return None

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º indicators –∏ extra_data –≤ JSON —Å—Ç—Ä–æ–∫–∏
            if "indicators" in signal_data and isinstance(
                signal_data["indicators"], dict
            ):
                signal_data["indicators"] = json.dumps(signal_data["indicators"])
            if "extra_data" in signal_data and isinstance(
                signal_data["extra_data"], dict
            ):
                signal_data["extra_data"] = json.dumps(signal_data["extra_data"])

            # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            if "signal_metadata" in signal_data:
                if isinstance(signal_data["signal_metadata"], dict):
                    signal_data["signal_metadata"]["hash"] = signal_hash
                    signal_data["signal_metadata"] = json.dumps(
                        signal_data["signal_metadata"]
                    )
            else:
                signal_data["signal_metadata"] = json.dumps({"hash": signal_hash})

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –ø—Ä–æ—Å—Ç—ã–º INSERT
            signal = Signal(**signal_data)
            self.session.add(signal)

            # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await self.session.commit()
            await self.session.refresh(signal)

            logger.info(
                f"‚úÖ –°–∏–≥–Ω–∞–ª –¥–ª—è {signal.symbol} (—Ç–∏–ø: {signal.signal_type}) —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω"
            )
            return signal

        except Exception as e:
            await self.session.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {e}")
            # –ù–µ –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            return None

    async def _check_existing_signal(self, symbol: str, signal_hash: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Å–∏–≥–Ω–∞–ª
        """
        try:
            # –í—Ä–µ–º—è –æ–∫–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            time_window = datetime.now(timezone.utc) - self.signal_hash_ttl

            # –ò—â–µ–º —Å–∏–≥–Ω–∞–ª—ã —Å —Ç–∞–∫–∏–º –∂–µ —Ö–µ—à–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
            query = select(Signal).where(
                and_(
                    Signal.symbol == symbol,
                    Signal.created_at >= time_window,
                    Signal.signal_metadata.op("->>")("hash") == signal_hash,
                )
            )

            result = await self.session.execute(query)
            existing = result.scalar_one_or_none()

            return existing is not None

        except Exception as e:
            # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —Å–∏–≥–Ω–∞–ª–∞ –Ω–µ—Ç
            logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return False

    async def create_signal_safe(self, signal_data: Dict[str, Any]) -> Optional[Signal]:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º upsert
        """
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–µ—à
            signal_hash = self._generate_signal_hash(signal_data)

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            if "indicators" in signal_data and isinstance(
                signal_data["indicators"], dict
            ):
                signal_data["indicators"] = json.dumps(signal_data["indicators"])
            if "extra_data" in signal_data and isinstance(
                signal_data["extra_data"], dict
            ):
                signal_data["extra_data"] = json.dumps(signal_data["extra_data"])

            # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à
            metadata = signal_data.get("signal_metadata", {})
            if isinstance(metadata, dict):
                metadata["hash"] = signal_hash
                signal_data["signal_metadata"] = json.dumps(metadata)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º INSERT ON CONFLICT DO NOTHING
            stmt = insert(Signal).values(**signal_data)

            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç –ø–æ (symbol, created_at), –Ω–µ –¥–µ–ª–∞–µ–º –Ω–∏—á–µ–≥–æ
            stmt = stmt.on_conflict_do_nothing(index_elements=["symbol", "created_at"])

            result = await self.session.execute(stmt)
            await self.session.commit()

            if result.rowcount > 0:
                # –°–∏–≥–Ω–∞–ª –±—ã–ª —Å–æ–∑–¥–∞–Ω
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è {signal_data.get('symbol')}")

                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
                query = (
                    select(Signal)
                    .where(
                        and_(
                            Signal.symbol == signal_data.get("symbol"),
                            Signal.signal_metadata.op("->>")("hash") == signal_hash,
                        )
                    )
                    .order_by(Signal.created_at.desc())
                    .limit(1)
                )

                result = await self.session.execute(query)
                return result.scalar_one_or_none()
            else:
                # –°–∏–≥–Ω–∞–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª
                logger.debug(
                    f"üîÑ –°–∏–≥–Ω–∞–ª –¥–ª—è {signal_data.get('symbol')} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                )
                return None

        except Exception as e:
            await self.session.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return None

    async def mark_signal_processed(self, signal_id: int) -> None:
        """–û—Ç–º–µ—á–∞–µ—Ç —Å–∏–≥–Ω–∞–ª –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π"""
        try:
            stmt = (
                update(Signal)
                .where(Signal.id == signal_id)
                .values(status="processed", processed_at=datetime.now(timezone.utc))
            )
            await self.session.execute(stmt)
            await self.session.commit()
        except Exception as e:
            await self.session.rollback()
            raise DatabaseError(f"Failed to mark signal as processed: {e}")

    async def save_signal(self, signal) -> Optional[Signal]:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∏–≥–Ω–∞–ª –≤ –ë–î —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        """
        try:
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–±—ä–µ–∫—Ç Signal, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
            if hasattr(signal, "__dict__") and not isinstance(signal, dict):
                signal_dict = {}
                for key, value in signal.__dict__.items():
                    if not key.startswith("_"):  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
                        # –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è enum signal_type
                        if key == "signal_type" and hasattr(value, "value"):
                            signal_dict[key] = value.value.upper()
                        else:
                            signal_dict[key] = value
                return await self.create_signal(signal_dict)
            else:
                return await self.create_signal(signal)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return None

    async def cleanup_old_signals(self, hours: int = 24) -> int:
        """
        –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã

        Args:
            hours: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤

        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        """
        try:
            cutoff_time = datetime.now(timezone.utc) - timedelta(hours=hours)

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            query = select(Signal).where(
                and_(Signal.status == "processed", Signal.created_at < cutoff_time)
            )

            result = await self.session.execute(query)
            old_signals = result.scalars().all()

            for signal in old_signals:
                await self.session.delete(signal)

            await self.session.commit()

            if len(old_signals) > 0:
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {len(old_signals)} —Å—Ç–∞—Ä—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")

            return len(old_signals)

        except Exception as e:
            await self.session.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return 0
