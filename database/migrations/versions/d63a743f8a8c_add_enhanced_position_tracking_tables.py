"""Add enhanced position tracking tables

Revision ID: d63a743f8a8c
Revises: 8fc5ad5d2292
Create Date: 2025-08-20 12:49:27.431015

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'd63a743f8a8c'
down_revision = '8fc5ad5d2292'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('idx_signal_fingerprints_created_at'), table_name='signal_fingerprints')
    op.drop_index(op.f('idx_signal_fingerprints_strategy'), table_name='signal_fingerprints')
    op.drop_index(op.f('idx_signal_fingerprints_symbol'), table_name='signal_fingerprints')
    op.drop_index(op.f('idx_signal_fingerprints_symbol_direction'), table_name='signal_fingerprints')
    op.drop_table('signal_fingerprints')
    op.drop_index(op.f('ix_partial_tp_history_status'), table_name='partial_tp_history')
    op.drop_index(op.f('ix_partial_tp_history_trade_id'), table_name='partial_tp_history')
    op.drop_table('partial_tp_history')
    op.drop_index(op.f('idx_feature_importance_name'), table_name='ml_feature_importance')
    op.drop_index(op.f('idx_feature_importance_score'), table_name='ml_feature_importance')
    op.drop_table('ml_feature_importance')
    op.drop_index(op.f('idx_ml_predictions_confidence'), table_name='ml_predictions')
    op.drop_index(op.f('idx_ml_predictions_created_at'), table_name='ml_predictions')
    op.drop_index(op.f('idx_ml_predictions_datetime'), table_name='ml_predictions')
    op.drop_index(op.f('idx_ml_predictions_features_hash'), table_name='ml_predictions')
    op.drop_index(op.f('idx_ml_predictions_signal_type'), table_name='ml_predictions')
    op.drop_index(op.f('idx_ml_predictions_symbol_datetime'), table_name='ml_predictions')
    op.drop_table('ml_predictions')
    op.drop_index(op.f('idx_orders_created_at'), table_name='orders')
    op.drop_index(op.f('idx_raw_market_data_symbol_timestamp'), table_name='raw_market_data')
    op.drop_column('raw_market_data', 'timeframe')
    op.drop_index(op.f('idx_signals_created_at'), table_name='signals')
    op.drop_index(op.f('idx_signals_unique'), table_name='signals')
    op.drop_index(op.f('ix_signals_created_at'), table_name='signals')
    op.drop_index(op.f('ix_signals_symbol_side'), table_name='signals')
    op.drop_column('signals', 'side')
    op.drop_index(op.f('idx_trades_created_at'), table_name='trades')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(op.f('idx_trades_created_at'), 'trades', ['created_at'], unique=False)
    op.add_column('signals', sa.Column('side', sa.VARCHAR(length=10), autoincrement=False, nullable=True))
    op.create_index(op.f('ix_signals_symbol_side'), 'signals', ['symbol', 'side'], unique=False)
    op.create_index(op.f('ix_signals_created_at'), 'signals', ['created_at'], unique=False)
    op.create_index(op.f('idx_signals_unique'), 'signals', ['symbol', 'signal_type', 'strength', 'confidence'], unique=True)
    op.create_index(op.f('idx_signals_created_at'), 'signals', ['created_at'], unique=False)
    op.add_column('raw_market_data', sa.Column('timeframe', sa.VARCHAR(length=10), server_default=sa.text("'15m'::character varying"), autoincrement=False, nullable=True))
    op.create_index(op.f('idx_raw_market_data_symbol_timestamp'), 'raw_market_data', ['symbol', sa.literal_column('timestamp DESC')], unique=False)
    op.create_index(op.f('idx_orders_created_at'), 'orders', ['created_at'], unique=False)
    op.create_table('ml_predictions',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('symbol', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('timestamp', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('datetime', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('features_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('features_hash', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('lookback_periods', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('close_price', sa.NUMERIC(precision=20, scale=8), autoincrement=False, nullable=False),
    sa.Column('volume', sa.NUMERIC(precision=20, scale=8), autoincrement=False, nullable=False),
    sa.Column('rsi', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('macd', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bb_position', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('atr_pct', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('volume_ratio', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('trend_strength', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('features_mean', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('features_std', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('features_min', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('features_max', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('zero_variance_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('nan_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('predicted_return_15m', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('predicted_return_1h', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('predicted_return_4h', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('predicted_return_12h', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('direction_15m', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('direction_15m_confidence', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('direction_1h', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('direction_1h_confidence', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('direction_4h', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('direction_4h_confidence', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('direction_12h', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('direction_12h_confidence', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('risk_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('max_drawdown_predicted', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('max_rally_predicted', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('signal_type', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('signal_confidence', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('signal_timeframe', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('model_version', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('inference_time_ms', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('actual_return_15m', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('actual_return_1h', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('actual_return_4h', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('actual_return_12h', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('actual_direction_15m', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('actual_direction_1h', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('actual_direction_4h', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('actual_direction_12h', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('accuracy_15m', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('accuracy_1h', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('accuracy_4h', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('accuracy_12h', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('return_error_15m', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('return_error_1h', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('return_error_4h', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('return_error_12h', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('features_array', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('model_outputs_raw', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('ml_predictions_pkey')),
    sa.UniqueConstraint('symbol', 'timestamp', name=op.f('uq_ml_predictions_symbol_timestamp'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_ml_predictions_symbol_datetime'), 'ml_predictions', ['symbol', 'datetime'], unique=False)
    op.create_index(op.f('idx_ml_predictions_signal_type'), 'ml_predictions', ['signal_type'], unique=False)
    op.create_index(op.f('idx_ml_predictions_features_hash'), 'ml_predictions', ['features_hash'], unique=False)
    op.create_index(op.f('idx_ml_predictions_datetime'), 'ml_predictions', ['datetime'], unique=False)
    op.create_index(op.f('idx_ml_predictions_created_at'), 'ml_predictions', ['created_at'], unique=False)
    op.create_index(op.f('idx_ml_predictions_confidence'), 'ml_predictions', ['signal_confidence'], unique=False)
    op.create_table('ml_feature_importance',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('feature_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('feature_index', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('importance_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('importance_rank', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('correlation_with_returns', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('usage_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('model_version', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('calculated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('ml_feature_importance_pkey'))
    )
    op.create_index(op.f('idx_feature_importance_score'), 'ml_feature_importance', ['importance_score'], unique=False)
    op.create_index(op.f('idx_feature_importance_name'), 'ml_feature_importance', ['feature_name'], unique=False)
    op.create_table('partial_tp_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('trade_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('level', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('percent', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('close_ratio', sa.NUMERIC(precision=10, scale=4), autoincrement=False, nullable=False),
    sa.Column('close_qty', sa.NUMERIC(precision=20, scale=8), autoincrement=False, nullable=False),
    sa.Column('price', sa.NUMERIC(precision=20, scale=8), autoincrement=False, nullable=False),
    sa.Column('order_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('error', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('partial_tp_history_pkey'))
    )
    op.create_index(op.f('ix_partial_tp_history_trade_id'), 'partial_tp_history', ['trade_id'], unique=False)
    op.create_index(op.f('ix_partial_tp_history_status'), 'partial_tp_history', ['status'], unique=False)
    op.create_table('signal_fingerprints',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('signal_hash', sa.VARCHAR(length=16), autoincrement=False, nullable=False),
    sa.Column('symbol', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('direction', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('strategy', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('timestamp_minute', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('signal_strength', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('price_level', sa.NUMERIC(precision=20, scale=8), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('signal_fingerprints_pkey')),
    sa.UniqueConstraint('signal_hash', name=op.f('uq_signal_fingerprints_hash'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_signal_fingerprints_symbol_direction'), 'signal_fingerprints', ['symbol', 'direction'], unique=False)
    op.create_index(op.f('idx_signal_fingerprints_symbol'), 'signal_fingerprints', ['symbol'], unique=False)
    op.create_index(op.f('idx_signal_fingerprints_strategy'), 'signal_fingerprints', ['strategy'], unique=False)
    op.create_index(op.f('idx_signal_fingerprints_created_at'), 'signal_fingerprints', ['created_at'], unique=False)
    # ### end Alembic commands ###
