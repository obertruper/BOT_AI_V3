"""Add market data tables with JSONB for OHLCV and processed data

Revision ID: e72e5072a1bc
Revises: 001_import_v2
Create Date: 2025-08-02 00:35:01.954779

"""

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision = "e72e5072a1bc"
down_revision = "001_import_v2"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "market_data_snapshots",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("symbol", sa.String(length=20), nullable=False),
        sa.Column("last_price", sa.DECIMAL(precision=20, scale=8), nullable=True),
        sa.Column("last_volume", sa.DECIMAL(precision=20, scale=8), nullable=True),
        sa.Column("last_update", sa.DateTime(timezone=True), nullable=True),
        sa.Column("price_24h_change", sa.Float(), nullable=True),
        sa.Column("price_24h_change_pct", sa.Float(), nullable=True),
        sa.Column("volume_24h", sa.DECIMAL(precision=20, scale=8), nullable=True),
        sa.Column("high_24h", sa.DECIMAL(precision=20, scale=8), nullable=True),
        sa.Column("low_24h", sa.DECIMAL(precision=20, scale=8), nullable=True),
        sa.Column("ml_direction_prediction", sa.Integer(), nullable=True),
        sa.Column("ml_confidence", sa.Float(), nullable=True),
        sa.Column("ml_predicted_return", sa.Float(), nullable=True),
        sa.Column("ml_prediction_time", sa.DateTime(timezone=True), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("data_quality_score", sa.Float(), nullable=True),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("symbol"),
    )
    op.create_index("idx_snapshot_symbol", "market_data_snapshots", ["symbol"], unique=False)
    op.create_index("idx_snapshot_updated", "market_data_snapshots", ["updated_at"], unique=False)
    op.create_table(
        "raw_market_data",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("symbol", sa.String(length=20), nullable=False),
        sa.Column("timestamp", sa.BigInteger(), nullable=False),
        sa.Column("datetime", sa.DateTime(timezone=True), nullable=False),
        sa.Column("open", sa.DECIMAL(precision=20, scale=8), nullable=False),
        sa.Column("high", sa.DECIMAL(precision=20, scale=8), nullable=False),
        sa.Column("low", sa.DECIMAL(precision=20, scale=8), nullable=False),
        sa.Column("close", sa.DECIMAL(precision=20, scale=8), nullable=False),
        sa.Column("volume", sa.DECIMAL(precision=20, scale=8), nullable=False),
        sa.Column("turnover", sa.DECIMAL(precision=20, scale=8), nullable=True),
        sa.Column("interval_minutes", sa.Integer(), nullable=False),
        sa.Column(
            "market_type",
            sa.Enum("SPOT", "FUTURES", "PERP", name="markettype"),
            nullable=True,
        ),
        sa.Column("exchange", sa.String(length=50), nullable=True),
        sa.Column("open_interest", sa.DECIMAL(precision=20, scale=8), nullable=True),
        sa.Column("funding_rate", sa.DECIMAL(precision=10, scale=8), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "symbol",
            "timestamp",
            "interval_minutes",
            "exchange",
            name="_symbol_timestamp_interval_exchange_uc",
        ),
    )
    op.create_index(
        "idx_raw_market_data_datetime_desc",
        "raw_market_data",
        ["datetime"],
        unique=False,
    )
    op.create_index(
        "idx_raw_market_data_symbol_datetime",
        "raw_market_data",
        ["symbol", "datetime"],
        unique=False,
    )
    op.create_index(
        op.f("ix_raw_market_data_datetime"),
        "raw_market_data",
        ["datetime"],
        unique=False,
    )
    op.create_index(op.f("ix_raw_market_data_symbol"), "raw_market_data", ["symbol"], unique=False)
    op.create_index(
        op.f("ix_raw_market_data_timestamp"),
        "raw_market_data",
        ["timestamp"],
        unique=False,
    )
    op.create_table(
        "technical_indicators",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("symbol", sa.String(length=20), nullable=False),
        sa.Column("timestamp", sa.BigInteger(), nullable=False),
        sa.Column("datetime", sa.DateTime(timezone=True), nullable=False),
        sa.Column("interval_minutes", sa.Integer(), nullable=False),
        sa.Column("sma_10", sa.Float(), nullable=True),
        sa.Column("sma_20", sa.Float(), nullable=True),
        sa.Column("sma_50", sa.Float(), nullable=True),
        sa.Column("sma_100", sa.Float(), nullable=True),
        sa.Column("sma_200", sa.Float(), nullable=True),
        sa.Column("ema_10", sa.Float(), nullable=True),
        sa.Column("ema_20", sa.Float(), nullable=True),
        sa.Column("ema_50", sa.Float(), nullable=True),
        sa.Column("rsi_14", sa.Float(), nullable=True),
        sa.Column("rsi_7", sa.Float(), nullable=True),
        sa.Column("stoch_k", sa.Float(), nullable=True),
        sa.Column("stoch_d", sa.Float(), nullable=True),
        sa.Column("macd_line", sa.Float(), nullable=True),
        sa.Column("macd_signal", sa.Float(), nullable=True),
        sa.Column("macd_histogram", sa.Float(), nullable=True),
        sa.Column("atr_14", sa.Float(), nullable=True),
        sa.Column("bb_upper", sa.Float(), nullable=True),
        sa.Column("bb_middle", sa.Float(), nullable=True),
        sa.Column("bb_lower", sa.Float(), nullable=True),
        sa.Column("bb_width", sa.Float(), nullable=True),
        sa.Column("obv", sa.Float(), nullable=True),
        sa.Column("vwap", sa.Float(), nullable=True),
        sa.Column("mfi", sa.Float(), nullable=True),
        sa.Column(
            "additional_indicators",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "symbol",
            "timestamp",
            "interval_minutes",
            name="_symbol_timestamp_interval_indicators_uc",
        ),
    )
    op.create_index(
        "idx_technical_indicators_symbol_datetime",
        "technical_indicators",
        ["symbol", "datetime"],
        unique=False,
    )
    op.create_index(
        op.f("ix_technical_indicators_symbol"),
        "technical_indicators",
        ["symbol"],
        unique=False,
    )
    op.create_index(
        op.f("ix_technical_indicators_timestamp"),
        "technical_indicators",
        ["timestamp"],
        unique=False,
    )
    op.create_table(
        "processed_market_data",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("raw_data_id", sa.BigInteger(), nullable=False),
        sa.Column("symbol", sa.String(length=20), nullable=False),
        sa.Column("timestamp", sa.BigInteger(), nullable=False),
        sa.Column("datetime", sa.DateTime(timezone=True), nullable=False),
        sa.Column("open", sa.DECIMAL(precision=20, scale=8), nullable=False),
        sa.Column("high", sa.DECIMAL(precision=20, scale=8), nullable=False),
        sa.Column("low", sa.DECIMAL(precision=20, scale=8), nullable=False),
        sa.Column("close", sa.DECIMAL(precision=20, scale=8), nullable=False),
        sa.Column("volume", sa.DECIMAL(precision=20, scale=8), nullable=False),
        sa.Column(
            "technical_indicators",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=False,
        ),
        sa.Column(
            "microstructure_features",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column("ml_features", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("direction_15m", sa.Integer(), nullable=True),
        sa.Column("direction_1h", sa.Integer(), nullable=True),
        sa.Column("direction_4h", sa.Integer(), nullable=True),
        sa.Column("direction_12h", sa.Integer(), nullable=True),
        sa.Column("future_return_15m", sa.Float(), nullable=True),
        sa.Column("future_return_1h", sa.Float(), nullable=True),
        sa.Column("future_return_4h", sa.Float(), nullable=True),
        sa.Column("future_return_12h", sa.Float(), nullable=True),
        sa.Column("long_will_reach_1pct_4h", sa.Float(), nullable=True),
        sa.Column("long_will_reach_2pct_4h", sa.Float(), nullable=True),
        sa.Column("short_will_reach_1pct_4h", sa.Float(), nullable=True),
        sa.Column("short_will_reach_2pct_4h", sa.Float(), nullable=True),
        sa.Column("max_drawdown_1h", sa.Float(), nullable=True),
        sa.Column("max_rally_1h", sa.Float(), nullable=True),
        sa.Column("max_drawdown_4h", sa.Float(), nullable=True),
        sa.Column("max_rally_4h", sa.Float(), nullable=True),
        sa.Column("processing_version", sa.String(length=10), nullable=True),
        sa.Column("model_version", sa.String(length=50), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["raw_data_id"],
            ["raw_market_data.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("symbol", "timestamp", name="_symbol_timestamp_processed_uc"),
    )
    op.create_index(
        "idx_processed_market_data_directions",
        "processed_market_data",
        ["direction_15m", "direction_1h"],
        unique=False,
    )
    op.create_index(
        "idx_processed_market_data_symbol_datetime",
        "processed_market_data",
        ["symbol", "datetime"],
        unique=False,
    )
    op.create_index(
        "idx_processed_technical_indicators",
        "processed_market_data",
        ["technical_indicators"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("ix_processed_market_data_datetime"),
        "processed_market_data",
        ["datetime"],
        unique=False,
    )
    op.create_index(
        op.f("ix_processed_market_data_symbol"),
        "processed_market_data",
        ["symbol"],
        unique=False,
    )
    op.create_index(
        op.f("ix_processed_market_data_timestamp"),
        "processed_market_data",
        ["timestamp"],
        unique=False,
    )
    op.drop_table("bybit_trade_history")
    op.drop_table("bybit_wallet_balance")
    op.drop_table("trading_sessions")
    op.drop_table("sltp_orders")
    op.drop_table("bybit_positions")
    op.drop_table("bybit_closed_pnl")
    op.drop_column("orders", "trigger_by")
    op.drop_column("orders", "tp_order_id")
    op.drop_column("orders", "sl_trigger_price")
    op.drop_column("orders", "tp_trigger_price")
    op.drop_column("orders", "sl_order_id")
    op.drop_column("signals", "ml_predictions")
    op.drop_column("signals", "processing_time")
    op.drop_column("trades", "session_id")
    op.drop_column("trades", "loss_probability")
    op.drop_column("trades", "model_name")
    op.drop_column("trades", "profit_probability")
    op.drop_column("trades", "confidence")
    op.drop_column("trades", "model_score")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "trades",
        sa.Column(
            "model_score",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "trades",
        sa.Column(
            "confidence",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "trades",
        sa.Column(
            "profit_probability",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "trades",
        sa.Column("model_name", sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    )
    op.add_column(
        "trades",
        sa.Column(
            "loss_probability",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "trades",
        sa.Column("session_id", sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    )
    op.add_column(
        "signals",
        sa.Column(
            "processing_time",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "signals",
        sa.Column(
            "ml_predictions",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "orders",
        sa.Column("sl_order_id", sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    )
    op.add_column(
        "orders",
        sa.Column(
            "tp_trigger_price",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "orders",
        sa.Column(
            "sl_trigger_price",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "orders",
        sa.Column("tp_order_id", sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    )
    op.add_column(
        "orders",
        sa.Column("trigger_by", sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    )
    op.create_table(
        "bybit_closed_pnl",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("symbol", sa.VARCHAR(length=50), autoincrement=False, nullable=False),
        sa.Column("order_id", sa.VARCHAR(length=100), autoincrement=False, nullable=False),
        sa.Column("side", sa.VARCHAR(length=10), autoincrement=False, nullable=False),
        sa.Column(
            "qty",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "closed_size",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "avg_entry_price",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "avg_exit_price",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "closed_pnl",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("fill_count", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "leverage",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("created_time", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("updated_time", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("bybit_closed_pnl_pkey")),
    )
    op.create_table(
        "bybit_positions",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("symbol", sa.VARCHAR(length=50), autoincrement=False, nullable=False),
        sa.Column("side", sa.VARCHAR(length=10), autoincrement=False, nullable=False),
        sa.Column(
            "size",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "position_value",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "entry_price",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "mark_price",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "liq_price",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "bust_price",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "leverage",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("position_status", sa.VARCHAR(length=50), autoincrement=False, nullable=True),
        sa.Column("adl_rank_indicator", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("position_idx", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "position_mm",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "position_im",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "take_profit",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "stop_loss",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "trailing_stop",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "unrealised_pnl",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "cum_realised_pnl",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("created_time", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column("updated_time", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column(
            "snapshot_time",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("bybit_positions_pkey")),
    )
    op.create_table(
        "sltp_orders",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("trade_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("symbol", sa.VARCHAR(length=50), autoincrement=False, nullable=False),
        sa.Column("side", sa.VARCHAR(length=10), autoincrement=False, nullable=False),
        sa.Column(
            "stop_loss_price",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "take_profit_price",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("sl_order_id", sa.VARCHAR(length=100), autoincrement=False, nullable=True),
        sa.Column("tp_order_id", sa.VARCHAR(length=100), autoincrement=False, nullable=True),
        sa.Column(
            "status",
            sa.VARCHAR(length=50),
            server_default=sa.text("'pending'::character varying"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "attempts",
            sa.INTEGER(),
            server_default=sa.text("0"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "sl_trigger_by",
            sa.VARCHAR(length=50),
            server_default=sa.text("'LastPrice'::character varying"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "tp_trigger_by",
            sa.VARCHAR(length=50),
            server_default=sa.text("'LastPrice'::character varying"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "trailing_stop",
            sa.BOOLEAN(),
            server_default=sa.text("false"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "trailing_stop_price",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "trailing_stop_activation_price",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "trailing_callback",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "is_breakeven",
            sa.BOOLEAN(),
            server_default=sa.text("false"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "partial_close_ratio",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "partial_close_trigger",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "original_stop_loss",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "original_take_profit",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("error_message", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "extra_data",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("sltp_orders_pkey")),
    )
    op.create_table(
        "trading_sessions",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("session_id", sa.VARCHAR(length=100), autoincrement=False, nullable=False),
        sa.Column("started_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("ended_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column("status", sa.VARCHAR(length=50), autoincrement=False, nullable=True),
        sa.Column("total_trades", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("profitable_trades", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "total_pnl",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "max_drawdown",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "win_rate",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "config_snapshot",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("error_count", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("last_error", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "metadata",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("trading_sessions_pkey")),
        sa.UniqueConstraint(
            "session_id",
            name=op.f("trading_sessions_session_id_key"),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    op.create_table(
        "bybit_wallet_balance",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("account_type", sa.VARCHAR(length=50), autoincrement=False, nullable=False),
        sa.Column("coin", sa.VARCHAR(length=20), autoincrement=False, nullable=False),
        sa.Column(
            "wallet_balance",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "available_balance",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "bonus",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "equity",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "cum_realised_pnl",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "unrealised_pnl",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "total_order_im",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "total_position_im",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "total_position_mm",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "snapshot_time",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("bybit_wallet_balance_pkey")),
    )
    op.create_table(
        "bybit_trade_history",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("symbol", sa.VARCHAR(length=50), autoincrement=False, nullable=False),
        sa.Column("order_id", sa.VARCHAR(length=100), autoincrement=False, nullable=False),
        sa.Column("order_link_id", sa.VARCHAR(length=100), autoincrement=False, nullable=True),
        sa.Column("side", sa.VARCHAR(length=10), autoincrement=False, nullable=False),
        sa.Column(
            "price",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "qty",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("fee", sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
        sa.Column("fee_currency", sa.VARCHAR(length=20), autoincrement=False, nullable=True),
        sa.Column("order_type", sa.VARCHAR(length=50), autoincrement=False, nullable=True),
        sa.Column("stop_order_type", sa.VARCHAR(length=50), autoincrement=False, nullable=True),
        sa.Column("created_time", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("updated_time", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column("is_maker", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column("reduce_only", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column("close_on_trigger", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column(
            "cum_exec_qty",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "cum_exec_value",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "cum_exec_fee",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "trigger_price",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("trigger_by", sa.VARCHAR(length=50), autoincrement=False, nullable=True),
        sa.Column(
            "imported_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("bybit_trade_history_pkey")),
        sa.UniqueConstraint(
            "order_id",
            name=op.f("bybit_trade_history_order_id_key"),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    op.drop_index(op.f("ix_processed_market_data_timestamp"), table_name="processed_market_data")
    op.drop_index(op.f("ix_processed_market_data_symbol"), table_name="processed_market_data")
    op.drop_index(op.f("ix_processed_market_data_datetime"), table_name="processed_market_data")
    op.drop_index(
        "idx_processed_technical_indicators",
        table_name="processed_market_data",
        postgresql_using="gin",
    )
    op.drop_index("idx_processed_market_data_symbol_datetime", table_name="processed_market_data")
    op.drop_index("idx_processed_market_data_directions", table_name="processed_market_data")
    op.drop_table("processed_market_data")
    op.drop_index(op.f("ix_technical_indicators_timestamp"), table_name="technical_indicators")
    op.drop_index(op.f("ix_technical_indicators_symbol"), table_name="technical_indicators")
    op.drop_index("idx_technical_indicators_symbol_datetime", table_name="technical_indicators")
    op.drop_table("technical_indicators")
    op.drop_index(op.f("ix_raw_market_data_timestamp"), table_name="raw_market_data")
    op.drop_index(op.f("ix_raw_market_data_symbol"), table_name="raw_market_data")
    op.drop_index(op.f("ix_raw_market_data_datetime"), table_name="raw_market_data")
    op.drop_index("idx_raw_market_data_symbol_datetime", table_name="raw_market_data")
    op.drop_index("idx_raw_market_data_datetime_desc", table_name="raw_market_data")
    op.drop_table("raw_market_data")
    op.drop_index("idx_snapshot_updated", table_name="market_data_snapshots")
    op.drop_index("idx_snapshot_symbol", table_name="market_data_snapshots")
    op.drop_table("market_data_snapshots")
    # ### end Alembic commands ###
