"""add_suggested_position_size_to_signals

Revision ID: 2cec36b345de
Revises: e72e5072a1bc
Create Date: 2025-08-08 13:25:00.415349

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "2cec36b345de"
down_revision = "e72e5072a1bc"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("data_maintenance_log")
    op.drop_index(
        op.f("idx_scheduler_metrics_cycle_start"), table_name="scheduler_metrics"
    )
    op.drop_index(op.f("idx_scheduler_metrics_status"), table_name="scheduler_metrics")
    op.drop_table("scheduler_metrics")
    op.drop_index(
        op.f("idx_raw_market_data_symbol_datetime_interval"),
        table_name="raw_market_data",
    )
    op.drop_index(
        op.f("idx_raw_market_data_symbol_timestamp"), table_name="raw_market_data"
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(
        op.f("idx_raw_market_data_symbol_timestamp"),
        "raw_market_data",
        ["symbol", sa.literal_column("timestamp DESC")],
        unique=False,
    )
    op.create_index(
        op.f("idx_raw_market_data_symbol_datetime_interval"),
        "raw_market_data",
        ["symbol", sa.literal_column("datetime DESC"), "interval_minutes"],
        unique=False,
    )
    op.create_table(
        "scheduler_metrics",
        sa.Column("id", sa.BIGINT(), autoincrement=True, nullable=False),
        sa.Column(
            "cycle_start",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "cycle_end",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "duration_seconds",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "symbols_processed", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "signals_generated", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "errors_count",
            sa.INTEGER(),
            server_default=sa.text("0"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "avg_symbol_processing_time",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "memory_usage_mb",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "cpu_usage_percent",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "status",
            sa.VARCHAR(length=20),
            server_default=sa.text("'completed'::character varying"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "error_details",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("scheduler_metrics_pkey")),
    )
    op.create_index(
        op.f("idx_scheduler_metrics_status"),
        "scheduler_metrics",
        ["status"],
        unique=False,
    )
    op.create_index(
        op.f("idx_scheduler_metrics_cycle_start"),
        "scheduler_metrics",
        [sa.literal_column("cycle_start DESC")],
        unique=False,
    )
    op.create_table(
        "data_maintenance_log",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("symbol", sa.VARCHAR(length=50), autoincrement=False, nullable=False),
        sa.Column(
            "exchange", sa.VARCHAR(length=50), autoincrement=False, nullable=False
        ),
        sa.Column(
            "interval_minutes", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "start_date",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "end_date",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("records_loaded", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "gaps_found",
            sa.INTEGER(),
            server_default=sa.text("0"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "execution_time_seconds",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("status", sa.VARCHAR(length=20), autoincrement=False, nullable=False),
        sa.Column("error_message", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("data_maintenance_log_pkey")),
    )
    # ### end Alembic commands ###
