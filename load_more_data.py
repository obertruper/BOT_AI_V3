#!/usr/bin/env python3
"""
–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ML —Ç–æ—Ä–≥–æ–≤–ª–∏
"""

import asyncio
import sys
from datetime import datetime, timedelta
from typing import List

from sqlalchemy import func, select

from core.config.config_manager import ConfigManager
from core.logger import setup_logger
from data.data_loader import DataLoader
from database.connections import get_async_db
from database.models.market_data import RawMarketData

logger = setup_logger(__name__)


async def check_data_availability():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""

    async with get_async_db() as db:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        stmt = (
            select(
                RawMarketData.symbol,
                func.count(RawMarketData.id).label("count"),
                func.min(RawMarketData.datetime).label("min_date"),
                func.max(RawMarketData.datetime).label("max_date"),
            )
            .where(RawMarketData.interval_minutes == 15)
            .group_by(RawMarketData.symbol)
        )

        result = await db.execute(stmt)
        stats = result.all()

        logger.info("\nüìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:")
        logger.info(f"{'–°–∏–º–≤–æ–ª':<12} {'–ó–∞–ø–∏—Å–µ–π':<10} {'–ù–∞—á–∞–ª–æ':<20} {'–ö–æ–Ω–µ—Ü':<20}")
        logger.info("-" * 70)

        symbols_needing_data = []

        for row in stats:
            logger.info(
                f"{row.symbol:<12} {row.count:<10} "
                f"{row.min_date.strftime('%Y-%m-%d %H:%M'):<20} "
                f"{row.max_date.strftime('%Y-%m-%d %H:%M'):<20}"
            )

            # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 300 –∑–∞–ø–∏—Å–µ–π - –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö
            if row.count < 300:
                symbols_needing_data.append(row.symbol)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–º–≤–æ–ª—ã –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
        all_symbols = [
            "BTCUSDT",
            "ETHUSDT",
            "BNBUSDT",
            "SOLUSDT",
            "XRPUSDT",
            "DOGEUSDT",
            "ADAUSDT",
            "AVAXUSDT",
            "DOTUSDT",
            "LINKUSDT",
        ]

        existing_symbols = [row.symbol for row in stats]
        missing_symbols = [s for s in all_symbols if s not in existing_symbols]

        if missing_symbols:
            logger.info(f"\n‚ö†Ô∏è –°–∏–º–≤–æ–ª—ã –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö: {', '.join(missing_symbols)}")
            symbols_needing_data.extend(missing_symbols)

        return symbols_needing_data


async def load_historical_data(symbols: List[str], days: int = 10):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""

    config_manager = ConfigManager()
    config = config_manager.get_config()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º data loader
    data_loader = DataLoader(config_manager)

    # –î–∞—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    end_date = datetime.utcnow()
    start_date = end_date - timedelta(days=days)

    logger.info(f"\nüì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ {days} –¥–Ω–µ–π")
    logger.info(
        f"   –° {start_date.strftime('%Y-%m-%d')} –ø–æ {end_date.strftime('%Y-%m-%d')}"
    )
    logger.info(f"   –°–∏–º–≤–æ–ª—ã: {', '.join(symbols)}\n")

    for symbol in symbols:
        try:
            logger.info(f"‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º {symbol}...")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            df = await data_loader.load_ohlcv(
                symbol=symbol,
                exchange="bybit",
                interval_minutes=15,
                start_date=start_date,
                end_date=end_date,
            )

            if df is not None and not df.empty:
                logger.info(f"‚úÖ {symbol}: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∏—Ä–∂–∏")
            else:
                logger.warning(f"‚ùå {symbol}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {symbol}: {e}")

        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
        await asyncio.sleep(1)


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    logger.info("\n" + "=" * 70)
    logger.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ML —Ç–æ—Ä–≥–æ–≤–ª–∏")
    logger.info("=" * 70 + "\n")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    symbols_needing_data = await check_data_availability()

    if symbols_needing_data:
        logger.info(
            f"\nüìä –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(symbols_needing_data)} —Å–∏–º–≤–æ–ª–æ–≤"
        )

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ 10 –¥–Ω–µ–π (400+ –∑–∞–ø–∏—Å–µ–π)
        await load_historical_data(symbols_needing_data, days=10)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        logger.info("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏:")
        await check_data_availability()

    else:
        logger.info("\n‚úÖ –í—Å–µ —Å–∏–º–≤–æ–ª—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")

    logger.info("\n‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å ML —Ç–æ—Ä–≥–æ–≤–ª—é.")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("\nüëã –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
        sys.exit(0)
