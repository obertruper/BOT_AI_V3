#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö ML –æ—à–∏–±–æ–∫
"""

import asyncio
import sys
from pathlib import Path

import numpy as np
import pandas as pd

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from core.logger import setup_logger
from ml.logic.feature_engineering import FeatureEngineer
from ml.ml_manager import MLManager
from ml.realtime_indicator_calculator import RealTimeIndicatorCalculator

logger = setup_logger(__name__)


def create_sample_ohlcv_data(num_candles: int = 300) -> pd.DataFrame:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ OHLCV –¥–∞–Ω–Ω—ã–µ"""
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–µ BTCUSDT
    np.random.seed(42)

    base_price = 50000
    dates = pd.date_range(start="2024-01-01", periods=num_candles, freq="15min")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–µ–Ω—ã —Å —Å–ª—É—á–∞–π–Ω—ã–º –±–ª—É–∂–¥–∞–Ω–∏–µ–º
    price_changes = np.random.normal(0, 0.01, num_candles)  # 1% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    cumulative_changes = np.cumsum(price_changes)

    close_prices = base_price * (1 + cumulative_changes)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ close
    high_multiplier = 1 + np.abs(np.random.normal(0, 0.005, num_candles))
    low_multiplier = 1 - np.abs(np.random.normal(0, 0.005, num_candles))
    open_prices = close_prices * (1 + np.random.normal(0, 0.002, num_candles))

    high_prices = np.maximum(close_prices, open_prices) * high_multiplier
    low_prices = np.minimum(close_prices, open_prices) * low_multiplier

    volumes = np.random.exponential(100, num_candles)

    df = pd.DataFrame(
        {
            "datetime": dates,
            "open": open_prices,
            "high": high_prices,
            "low": low_prices,
            "close": close_prices,
            "volume": volumes,
            "symbol": "BTCUSDT",
        }
    )

    df.set_index("datetime", inplace=True)
    return df


async def test_feature_engineering():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç FeatureEngineer –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–∏–ø–æ–≤"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FeatureEngineer...")

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    df = create_sample_ohlcv_data(300)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º FeatureEngineer
    config = {}
    feature_engineer = FeatureEngineer(config)

    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º create_features
        features_array = feature_engineer.create_features(df)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        assert isinstance(features_array, np.ndarray), (
            f"Expected np.ndarray, got {type(features_array)}"
        )
        logger.info(
            f"‚úÖ FeatureEngineer.create_features() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {type(features_array)}"
        )
        logger.info(f"‚úÖ Shape: {features_array.shape}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–µ
        last_row = features_array[-1]
        assert isinstance(last_row, np.ndarray), (
            f"Expected np.ndarray for last row, got {type(last_row)}"
        )
        logger.info(f"‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞: {len(last_row)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ FeatureEngineer: {e}")
        return False


async def test_realtime_calculator():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç RealTimeIndicatorCalculator"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RealTimeIndicatorCalculator...")

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    df = create_sample_ohlcv_data(300)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
    config = {}
    calculator = RealTimeIndicatorCalculator(config=config)

    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º calculate_indicators
        result = await calculator.calculate_indicators("BTCUSDT", df, save_to_db=False)

        assert isinstance(result, dict), f"Expected dict, got {type(result)}"
        assert "ml_features" in result, "ml_features not found in result"

        ml_features = result["ml_features"]
        assert isinstance(ml_features, dict), (
            f"Expected dict for ml_features, got {type(ml_features)}"
        )
        logger.info(f"‚úÖ calculate_indicators —É—Å–ø–µ—à–Ω–æ: {len(ml_features)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º get_features_for_ml
        features_array = await calculator.get_features_for_ml("BTCUSDT", df)

        assert isinstance(features_array, np.ndarray), (
            f"Expected np.ndarray, got {type(features_array)}"
        )
        assert features_array.ndim == 1, (
            f"Expected 1D array, got {features_array.ndim}D"
        )
        logger.info(f"‚úÖ get_features_for_ml —É—Å–ø–µ—à–Ω–æ: shape {features_array.shape}")

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ RealTimeIndicatorCalculator: {e}")
        return False


async def test_ml_manager():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç MLManager"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MLManager...")

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    df = create_sample_ohlcv_data(300)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MLManager
    config = {
        "ml": {
            "model": {
                "device": "cpu",  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ CPU –¥–ª—è —Ç–µ—Å—Ç–æ–≤
                "model_directory": "models/saved",
            }
        }
    }

    ml_manager = MLManager(config)

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ç–∏–ø–æ–≤ –±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        try:
            await ml_manager.predict(df)
            logger.error("‚ùå –î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
            return False
        except ValueError as e:
            if "not initialized" in str(e):
                logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                raise

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ç–∏–ø–æ–≤ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        try:
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            ml_manager._initialized = True
            ml_manager.model = "fake_model"  # –ó–∞–≥–ª—É—à–∫–∞

            await ml_manager.predict("invalid_type")
            logger.error("‚ùå –î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ —Ç–∏–ø–∞")
            return False
        except TypeError as e:
            if "must be pd.DataFrame or np.ndarray" in str(e):
                logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                raise

        logger.info("‚úÖ MLManager –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ MLManager: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π ML –æ—à–∏–±–æ–∫...")

    results = []

    # –¢–µ—Å—Ç 1: FeatureEngineer
    results.append(await test_feature_engineering())

    # –¢–µ—Å—Ç 2: RealTimeIndicatorCalculator
    results.append(await test_realtime_calculator())

    # –¢–µ—Å—Ç 3: MLManager
    results.append(await test_ml_manager())

    # –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    passed = sum(results)
    total = len(results)

    logger.info(f"\n{'=' * 50}")
    logger.info(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–æ")

    if passed == total:
        logger.info("üéâ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–´!")
        return True
    else:
        logger.error(f"‚ùå {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å")
        return False


if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
