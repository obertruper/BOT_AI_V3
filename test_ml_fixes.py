#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ ML –ª–æ–≥–∏–∫–µ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
"""

import asyncio

import numpy as np

from core.config.config_manager import ConfigManager
from core.logger import setup_logger
from ml.ml_manager import MLManager

logger = setup_logger("test_ml_fixes")


async def test_ml_interpretation():
    """–¢–µ—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –º–æ–¥–µ–ª–∏"""

    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π ML –ª–æ–≥–∏–∫–∏...")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_manager = ConfigManager()
    config = config_manager.get_config()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ML Manager
    ml_manager = MLManager(config)

    try:
        await ml_manager.initialize()
        logger.info("‚úÖ ML Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ML Manager: {e}")
        return

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    # 96 —Å–≤–µ—á–µ–π –ø–æ 240 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç –º–æ–¥–µ–ª—å)
    test_features = np.random.randn(96, 240).astype(np.float32)

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    for i in range(96):
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
        trend = 0.1 * (i - 48) / 48  # –û—Ç -0.1 –¥–æ +0.1
        test_features[i, :10] += trend  # –ü–µ—Ä–≤—ã–µ 10 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–æ–ª—É—á–∞—é—Ç —Ç—Ä–µ–Ω–¥

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        volatility = 0.05 * np.sin(i * 0.1)
        test_features[i, 10:20] += volatility

    logger.info(f"üìä –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {test_features.shape}")

    # –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
    for test_num in range(5):
        logger.info(f"\n{'=' * 50}")
        logger.info(f"üß™ –¢–ï–°–¢ #{test_num + 1}")
        logger.info(f"{'=' * 50}")

        # –ù–µ–º–Ω–æ–≥–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
        modified_features = test_features.copy()
        if test_num > 0:
            noise_factor = 0.1 * test_num
            modified_features += np.random.randn(96, 240) * noise_factor

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            prediction = await ml_manager.predict(modified_features, symbol=f"TESTUSDT_{test_num}")

            logger.info(f"‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞ #{test_num + 1}")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            signal_type = prediction.get("signal_type", "UNKNOWN")
            confidence = prediction.get("confidence", 0)
            signal_strength = prediction.get("signal_strength", 0)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            checks_passed = 0
            total_checks = 0

            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞
            total_checks += 1
            if signal_type in ["LONG", "SHORT", "NEUTRAL"]:
                logger.info(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞: {signal_type}")
                checks_passed += 1
            else:
                logger.error(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞: {signal_type}")

            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            total_checks += 1
            if signal_type in ["LONG", "SHORT"] and confidence >= 0.3:
                logger.info(f"‚úÖ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {confidence:.1%} >= 30% (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥)")
                checks_passed += 1
            elif signal_type == "NEUTRAL" and confidence >= 0.25:
                logger.info(f"‚úÖ NEUTRAL —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é {confidence:.1%} >= 25%")
                checks_passed += 1
            else:
                logger.warning(f"‚ö†Ô∏è –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%}")

            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞
            total_checks += 1
            if signal_strength >= 0.25:
                logger.info(f"‚úÖ –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞ {signal_strength:.3f} >= 0.25 (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥)")
                checks_passed += 1
            else:
                logger.warning(f"‚ö†Ô∏è –°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª: {signal_strength:.3f}")

            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SL/TP –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            total_checks += 1
            stop_loss_pct = prediction.get("stop_loss_pct")
            take_profit_pct = prediction.get("take_profit_pct")

            if signal_type in ["LONG", "SHORT"]:
                if stop_loss_pct is not None and take_profit_pct is not None:
                    logger.info(
                        f"‚úÖ SL/TP —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: SL={stop_loss_pct:.1%}, TP={take_profit_pct:.1%}"
                    )
                    checks_passed += 1
                else:
                    logger.warning(f"‚ö†Ô∏è SL/TP –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è {signal_type}")
            else:
                logger.info("‚úÖ SL/TP –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è NEUTRAL")
                checks_passed += 1

            # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
            total_checks += 1
            direction_15m = prediction.get("direction_15m", "UNKNOWN")
            direction_4h = prediction.get("direction_4h", "UNKNOWN")

            if direction_15m in ["LONG", "SHORT", "NEUTRAL"] and direction_4h in [
                "LONG",
                "SHORT",
                "NEUTRAL",
            ]:
                logger.info(
                    f"‚úÖ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º: 15m={direction_15m}, 4h={direction_4h}"
                )
                checks_passed += 1
            else:
                logger.error(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: 15m={direction_15m}, 4h={direction_4h}")

            # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
            success_rate = checks_passed / total_checks
            logger.info(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê #{test_num + 1}:")
            logger.info(
                f"   –ü—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ: {checks_passed}/{total_checks} ({success_rate:.1%})"
            )

            if success_rate >= 0.8:
                logger.info(f"‚úÖ –¢–µ—Å—Ç #{test_num + 1} –ü–†–û–ô–î–ï–ù")
            else:
                logger.warning(f"‚ö†Ô∏è –¢–µ—Å—Ç #{test_num + 1} —á–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–æ–π–¥–µ–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ #{test_num + 1}: {e}")

    logger.info(f"\n{'=' * 60}")
    logger.info("üèÅ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
    logger.info(f"{'=' * 60}")
    logger.info("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã:")
    logger.info("   1. –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–ª–∞—Å—Å–æ–≤ (0=LONG, 1=SHORT, 2=NEUTRAL)")
    logger.info("   2. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (30% –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤)")
    logger.info("   3. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞ (25% –±–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)")
    logger.info("   4. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ SL/TP –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
    logger.info("   5. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º")
    logger.info("   6. Focal weighting –∏ multiframe confirmation (—Å–º. –ª–æ–≥–∏)")


if __name__ == "__main__":
    asyncio.run(test_ml_interpretation())
