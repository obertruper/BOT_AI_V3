#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ ML pipeline –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import asyncio
import logging

import numpy as np
import pandas as pd

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)

logger = logging.getLogger(__name__)


async def test_ml_pipeline():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ ML pipeline"""

    print("=" * 60)
    print("–¢–ï–°–¢ –ü–û–õ–ù–û–ì–û ML PIPELINE")
    print("=" * 60)

    try:
        # 1. –¢–µ—Å—Ç RealTimeIndicatorCalculator
        print("\n1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RealTimeIndicatorCalculator...")
        from ml.realtime_indicator_calculator import RealTimeIndicatorCalculator

        calc = RealTimeIndicatorCalculator()
        print("‚úÖ RealTimeIndicatorCalculator —Å–æ–∑–¥–∞–Ω")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        from sqlalchemy import desc, select

        from database.connections import get_async_db
        from database.models.market_data import RawMarketData

        async with get_async_db() as session:
            stmt = (
                select(RawMarketData)
                .where(RawMarketData.symbol == "BTCUSDT")
                .order_by(desc(RawMarketData.timestamp))
                .limit(300)
            )

            result = await session.execute(stmt)
            raw_data = result.scalars().all()

        if not raw_data:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î –¥–ª—è BTCUSDT")
            return

        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(raw_data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î")

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
        data_list = []
        for row in raw_data:
            data_list.append(
                {
                    "timestamp": row.timestamp,
                    "open": float(row.open),
                    "high": float(row.high),
                    "low": float(row.low),
                    "close": float(row.close),
                    "volume": float(row.volume),
                }
            )

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
        data_list.reverse()
        df = pd.DataFrame(data_list)
        df.index = pd.to_datetime([row.datetime for row in reversed(raw_data)])

        print(f"‚úÖ DataFrame –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω: {df.shape}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        print("\nüîÑ –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
        indicators = await calc.calculate_indicators("BTCUSDT", df, save_to_db=False)

        if indicators:
            print("‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            print(f"   –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {indicators.get('metadata', {})}")
            print(f"   OHLCV: {list(indicators.get('ohlcv', {}).keys())}")
            print(
                f"   –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: {len(indicators.get('technical_indicators', {}))}"
            )
            print(f"   ML –ø—Ä–∏–∑–Ω–∞–∫–∏: {len(indicators.get('ml_features', {}))}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
            return

        # 2. –¢–µ—Å—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ML –º–æ–¥–µ–ª–∏
        print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ML...")
        features_array, metadata = await calc.prepare_ml_input(
            "BTCUSDT", df, lookback=96
        )

        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è ML –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã: {features_array.shape}")
        print(f"   –§–æ—Ä–º–∞: {features_array.shape} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: [1, 96, ~56])")
        print(f"   –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {metadata}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç NaN –∏–ª–∏ Inf
        nan_count = np.isnan(features_array).sum()
        inf_count = np.isinf(features_array).sum()
        print(f"   NaN –∑–Ω–∞—á–µ–Ω–∏–π: {nan_count}")
        print(f"   Inf –∑–Ω–∞—á–µ–Ω–∏–π: {inf_count}")

        if features_array.shape[0] != 1 or features_array.shape[1] != 96:
            print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ –º–∞—Å—Å–∏–≤–∞ –¥–ª—è ML –º–æ–¥–µ–ª–∏")
            return

        print("‚úÖ –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è ML –º–æ–¥–µ–ª–∏")

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ ML –º–æ–¥–µ–ª–∏...")
        import os

        model_path = "models/saved/best_model_20250728_215703.pth"

        if os.path.exists(model_path):
            print(f"‚úÖ ML –º–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞: {model_path}")

            # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å (–±–µ–∑ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è)
            try:
                import torch

                if torch.cuda.is_available():
                    device = torch.device("cuda")
                    print("‚úÖ CUDA –¥–æ—Å—Ç—É–ø–Ω–∞")
                else:
                    device = torch.device("cpu")
                    print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU")

                # –ù–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
                model_info = torch.load(model_path, map_location=device)
                print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                print(f"   –ö–ª—é—á–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {list(model_info.keys())[:5]}...")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        else:
            print(f"‚ö†Ô∏è ML –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
            print("   –°–æ–∑–¥–∞–π—Ç–µ –º–æ–¥–µ–ª—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ mock –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")

        # 4. –¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ (–¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤)
        print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞...")
        symbols = ["BTCUSDT"]
        ohlcv_data = {"BTCUSDT": df}

        batch_results = await calc.calculate_indicators_batch(symbols, ohlcv_data)

        if batch_results and "BTCUSDT" in batch_results:
            print("‚úÖ –ü–∞–∫–µ—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
            btc_result = batch_results["BTCUSDT"]
            print(
                f"   ML –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è BTCUSDT: {len(btc_result.get('ml_features', {}))}"
            )
        else:
            print("‚ùå –ü–∞–∫–µ—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")

        print("\n‚úÖ –¢–µ—Å—Ç ML Pipeline —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print("   ‚úÖ RealTimeIndicatorCalculator —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("   ‚úÖ FeatureEngineer –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 56 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        print("   ‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è ML")
        print("   ‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("   ‚úÖ ML pipeline –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(test_ml_pipeline())
