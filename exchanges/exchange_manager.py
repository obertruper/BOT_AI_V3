"""
Exchange Manager –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏ –±–∏—Ä–∂
"""

import asyncio
from typing import Any, Dict, List

from core.logger import setup_logger
from exchanges.factory import ExchangeFactory, ExchangeType


class ExchangeManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏ –±–∏—Ä–∂"""

    def __init__(self, config: Dict[str, Any]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∏—Ä–∂

        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∏—Ä–∂ –∏–∑ system.yaml
        """
        self.logger = setup_logger("exchange_manager")
        self.config = config
        self.exchanges: Dict[str, Any] = {}
        self._initialized = False

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –±–∏—Ä–∂"""
        if self._initialized:
            return

        self.logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Exchange Manager...")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–∏—Ä–∂
        exchanges_config = self.config.get("exchanges", {})

        for exchange_name, exchange_config in exchanges_config.items():
            if not exchange_config.get("enabled", False):
                self.logger.info(f"‚è≠Ô∏è –ë–∏—Ä–∂–∞ {exchange_name} –æ—Ç–∫–ª—é—á–µ–Ω–∞")
                continue

            try:
                # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ñ–∞–±—Ä–∏–∫–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∏—Ä–∂–∏
                factory = ExchangeFactory()

                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫—Ä–µ–¥–µ–Ω—à–∞–ª—ã
                api_key = exchange_config.get("api_key", "")
                api_secret = exchange_config.get("api_secret", "")
                testnet = exchange_config.get("testnet", False)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π
                if not api_key or not api_secret:
                    self.logger.warning(f"‚ö†Ô∏è –ù–µ—Ç API –∫–ª—é—á–µ–π –¥–ª—è –±–∏—Ä–∂–∏ {exchange_name}")
                    continue

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ ExchangeType
                try:
                    exchange_type = ExchangeType(exchange_name)
                except ValueError:
                    self.logger.warning(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –±–∏—Ä–∂–∏: {exchange_name}")
                    continue

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
                exchange = factory.create_client(
                    exchange_type=exchange_type,
                    api_key=api_key,
                    api_secret=api_secret,
                    sandbox=testnet,
                )

                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏—Ä–∂—É
                if hasattr(exchange, "initialize"):
                    await exchange.initialize()

                self.exchanges[exchange_name] = exchange
                self.logger.info(f"‚úÖ –ë–∏—Ä–∂–∞ {exchange_name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∏—Ä–∂–∏ {exchange_name}: {e}")

        self._initialized = True
        self.logger.info(
            f"‚úÖ Exchange Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å {len(self.exchanges)} –±–∏—Ä–∂–∞–º–∏"
        )

    async def get_exchange(self, exchange_name: str):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–∏—Ä–∂–∏

        Args:
            exchange_name: –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏

        Returns:
            –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∏—Ä–∂–∏ –∏–ª–∏ None
        """
        if not self._initialized:
            await self.initialize()

        return self.exchanges.get(exchange_name)

    async def get_available_exchanges(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏—Ä–∂"""
        if not self._initialized:
            await self.initialize()

        return list(self.exchanges.keys())

    async def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∏—Ä–∂"""
        try:
            if not self._initialized:
                await self.initialize()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –±–∏—Ä–∂–∞
            if not self.exchanges:
                self.logger.warning("–ù–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–∏—Ä–∂")
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –±–∏—Ä–∂—É
            for exchange_name, exchange in self.exchanges.items():
                if hasattr(exchange, "health_check"):
                    try:
                        result = await exchange.health_check()
                        if not result:
                            self.logger.warning(
                                f"Health check failed –¥–ª—è –±–∏—Ä–∂–∏ {exchange_name}"
                            )
                    except Exception as e:
                        self.logger.error(
                            f"–û—à–∏–±–∫–∞ health check –¥–ª—è {exchange_name}: {e}"
                        )

            return True

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ health check ExchangeManager: {e}")
            return False

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∏—Ä–∂–∞–º–∏"""
        self.logger.info("üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ Exchange Manager...")

        close_tasks = []
        for exchange_name, exchange in self.exchanges.items():
            if hasattr(exchange, "close"):
                self.logger.info(f"  ‚Üí –ó–∞–∫—Ä—ã—Ç–∏–µ {exchange_name}...")
                close_tasks.append(exchange.close())

        if close_tasks:
            await asyncio.gather(*close_tasks, return_exceptions=True)

        self.exchanges.clear()
        self._initialized = False
        self.logger.info("‚úÖ Exchange Manager –∑–∞–∫—Ä—ã—Ç")
