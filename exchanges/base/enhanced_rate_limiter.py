"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π rate limiter —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —É–º–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏
"""

import asyncio
import hashlib
import json
import time
from collections import defaultdict, deque
from typing import Any, Dict, Optional, Tuple

from core.logger import setup_logger

logger = setup_logger(__name__)


class EnhancedRateLimiter:
    """
    –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π rate limiter —Å:
    - –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    - Exponential backoff
    - –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–∏
    - –£–º–Ω—ã–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–æ–≤
    """

    # –õ–∏–º–∏—Ç—ã –¥–ª—è Bybit (https://bybit-exchange.github.io/docs/v5/rate-limit)
    BYBIT_LIMITS = {
        "default": {"requests": 120, "window": 60},  # 120 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
        "get_klines": {
            "requests": 60,
            "window": 60,
        },  # 60 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        "get_tickers": {"requests": 120, "window": 60},
        "get_orderbook": {"requests": 100, "window": 60},
        "place_order": {"requests": 10, "window": 1},  # 10 –æ—Ä–¥–µ—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
        "cancel_order": {"requests": 10, "window": 1},
        "get_positions": {"requests": 120, "window": 60},
        "get_orders": {"requests": 120, "window": 60},
        "get_balances": {"requests": 120, "window": 60},
    }

    def __init__(
        self,
        exchange: str = "bybit",
        enable_cache: bool = True,
        cache_ttl: int = 60,
        max_retries: int = 3,
    ):
        """
        Args:
            exchange: –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏
            enable_cache: –í–∫–ª—é—á–∏—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            cache_ttl: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–µ—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤
        """
        self.exchange = exchange.lower()
        self.enable_cache = enable_cache
        self.cache_ttl = cache_ttl
        self.max_retries = max_retries

        # –í—ã–±–∏—Ä–∞–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –±–∏—Ä–∂–∏
        if self.exchange == "bybit":
            self.limits = self.BYBIT_LIMITS
        else:
            # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ª–∏–º–∏—Ç—ã
            self.limits = {"default": {"requests": 60, "window": 60}}

        # –¢—Ä–µ–∫–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ endpoint
        self.request_trackers: Dict[str, deque] = defaultdict(deque)

        # –ö–µ—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.cache: Dict[str, Tuple[Any, float]] = {}

        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ endpoint
        self.locks: Dict[str, asyncio.Lock] = defaultdict(asyncio.Lock)

        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stats = {
            "total_requests": 0,
            "cache_hits": 0,
            "rate_limited": 0,
            "retries": 0,
        }

        # Backoff —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.backoff_until: Dict[str, float] = {}

        logger.info(f"EnhancedRateLimiter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è {exchange}")

    async def acquire(
        self, endpoint: str = "default", cache_key: Optional[str] = None
    ) -> Optional[Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç

        Args:
            endpoint: –¢–∏–ø endpoint (get_klines, place_order –∏ —Ç.–¥.)
            cache_key: –ö–ª—é—á –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è

        Returns:
            –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ None
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        if self.enable_cache and cache_key:
            cached = self._get_from_cache(cache_key)
            if cached is not None:
                self.stats["cache_hits"] += 1
                return cached

        # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è endpoint
        limit_config = self.limits.get(endpoint, self.limits["default"])
        max_requests = limit_config["requests"]
        window = limit_config["window"]

        async with self.locks[endpoint]:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º backoff
            if endpoint in self.backoff_until:
                wait_time = self.backoff_until[endpoint] - time.time()
                if wait_time > 0:
                    logger.warning(
                        f"‚è≥ Rate limit backoff –¥–ª—è {endpoint}: –∂–¥–µ–º {wait_time:.1f}s"
                    )
                    await asyncio.sleep(wait_time)
                    del self.backoff_until[endpoint]

            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            current_time = time.time()
            tracker = self.request_trackers[endpoint]

            while tracker and tracker[0] < current_time - window:
                tracker.popleft()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
            if len(tracker) >= max_requests:
                # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                oldest_request = tracker[0]
                wait_time = oldest_request + window - current_time

                if wait_time > 0:
                    self.stats["rate_limited"] += 1
                    logger.warning(
                        f"‚ö†Ô∏è Rate limit –¥–ª—è {endpoint}: {len(tracker)}/{max_requests}, –∂–¥–µ–º {wait_time:.1f}s"
                    )
                    await asyncio.sleep(wait_time)

                    # –û—á–∏—â–∞–µ–º –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
                    while tracker and tracker[0] < time.time() - window:
                        tracker.popleft()

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
            tracker.append(time.time())
            self.stats["total_requests"] += 1

        return None

    async def execute_with_retry(
        self,
        func,
        *args,
        endpoint: str = "default",
        cache_key: Optional[str] = None,
        **kwargs,
    ) -> Any:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Å rate limiting, retry –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º

        Args:
            func: Async —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            endpoint: –¢–∏–ø endpoint
            cache_key: –ö–ª—é—á –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
            *args, **kwargs: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        cached_result = await self.acquire(endpoint, cache_key)
        if cached_result is not None:
            return cached_result

        last_error = None
        backoff_delay = 1.0  # –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è exponential backoff

        for attempt in range(self.max_retries):
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                result = await func(*args, **kwargs)

                # –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if self.enable_cache and cache_key:
                    self._add_to_cache(cache_key, result)

                return result

            except Exception as e:
                last_error = e
                error_str = str(e).lower()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
                if "rate limit" in error_str or "too many requests" in error_str:
                    self.stats["rate_limited"] += 1

                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º backoff
                    self.backoff_until[endpoint] = time.time() + backoff_delay

                    logger.warning(
                        f"üîÑ Rate limit hit –¥–ª—è {endpoint}, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries}, backoff {backoff_delay}s"
                    )

                    # Exponential backoff
                    await asyncio.sleep(backoff_delay)
                    backoff_delay = min(backoff_delay * 2, 60)  # –ú–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥

                    self.stats["retries"] += 1
                    continue

                elif "invalid api key" in error_str or "unauthorized" in error_str:
                    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                    logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ API: {e}")
                    raise

                else:
                    # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ - –ø–æ–≤—Ç–æ—Ä—è–µ–º —Å –º–µ–Ω—å—à–µ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
                    logger.warning(
                        f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {endpoint}: {e}, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries}"
                    )
                    await asyncio.sleep(min(backoff_delay, 5))
                    self.stats["retries"] += 1

        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
        logger.error(f"‚ùå –í—Å–µ {self.max_retries} –ø–æ–ø—ã—Ç–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è {endpoint}")
        raise last_error

    def _get_cache_key(self, method: str, params: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫–µ—à–∞"""
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç–æ–¥–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        key_data = {"method": method, "params": params, "exchange": self.exchange}
        key_str = json.dumps(key_data, sort_keys=True)
        return hashlib.md5(key_str.encode()).hexdigest()

    def _get_from_cache(self, cache_key: str) -> Optional[Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞"""
        if cache_key in self.cache:
            result, timestamp = self.cache[cache_key]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
            if time.time() - timestamp < self.cache_ttl:
                return result
            else:
                # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à—É—é –∑–∞–ø–∏—Å—å
                del self.cache[cache_key]

        return None

    def _add_to_cache(self, cache_key: str, result: Any) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à"""
        self.cache[cache_key] = (result, time.time())

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞
        if len(self.cache) > 1000:
            # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            oldest_keys = sorted(self.cache.keys(), key=lambda k: self.cache[k][1])[
                :100
            ]

            for key in oldest_keys:
                del self.cache[key]

    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        cache_hit_rate = 0
        if self.stats["total_requests"] > 0:
            cache_hit_rate = (
                self.stats["cache_hits"] / self.stats["total_requests"]
            ) * 100

        return {
            "total_requests": self.stats["total_requests"],
            "cache_hits": self.stats["cache_hits"],
            "cache_hit_rate": f"{cache_hit_rate:.1f}%",
            "rate_limited": self.stats["rate_limited"],
            "retries": self.stats["retries"],
            "cache_size": len(self.cache),
            "active_trackers": len(self.request_trackers),
        }

    def reset_stats(self) -> None:
        """–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        self.stats = {
            "total_requests": 0,
            "cache_hits": 0,
            "rate_limited": 0,
            "retries": 0,
        }

    def clear_cache(self) -> None:
        """–û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à"""
        self.cache.clear()
        logger.info("üóëÔ∏è –ö–µ—à rate limiter –æ—á–∏—â–µ–Ω")

    def get_cached(self, cache_key: str) -> Optional[Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç

        Args:
            cache_key: –ö–ª—é—á –∫–µ—à–∞

        Returns:
            –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ None
        """
        return self._get_from_cache(cache_key)

    async def check_and_wait(self, endpoint: str = "default") -> None:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å rate limit –∏ –ø–æ–¥–æ–∂–¥–∞—Ç—å –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ

        Args:
            endpoint: –¢–∏–ø endpoint
        """
        await self.acquire(endpoint)

    def cache_result(self, cache_key: str, result: Any) -> None:
        """
        –ö–µ—à–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç

        Args:
            cache_key: –ö–ª—é—á –∫–µ—à–∞
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        self._add_to_cache(cache_key, result)
