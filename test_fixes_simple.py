#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""

import sys
from pathlib import Path
from decimal import Decimal

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.insert(0, str(Path(__file__).parent))


def test_instrument_rounding():
    """–¢–µ—Å—Ç –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –¥–ª—è XRPUSDT"""
    print("=" * 60)
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è XRPUSDT")
    print("=" * 60)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ path
    from trading.instrument_manager import InstrumentManager
    
    manager = InstrumentManager()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è XRPUSDT
    test_values = [
        3.230,   # –î–æ–ª–∂–Ω–æ –æ–∫—Ä—É–≥–ª–∏—Ç—å—Å—è –¥–æ 3.2
        3.256,   # –î–æ–ª–∂–Ω–æ –æ–∫—Ä—É–≥–ª–∏—Ç—å—Å—è –¥–æ 3.2
        3.289,   # –î–æ–ª–∂–Ω–æ –æ–∫—Ä—É–≥–ª–∏—Ç—å—Å—è –¥–æ 3.2
        3.15,    # –î–æ–ª–∂–Ω–æ –æ–∫—Ä—É–≥–ª–∏—Ç—å—Å—è –¥–æ 3.1
        0.09,    # –î–æ–ª–∂–Ω–æ –æ–∫—Ä—É–≥–ª–∏—Ç—å—Å—è –¥–æ –º–∏–Ω–∏–º—É–º–∞ 0.1
        10.567,  # –î–æ–ª–∂–Ω–æ –æ–∫—Ä—É–≥–ª–∏—Ç—å—Å—è –¥–æ 10.5
    ]
    
    print("\n  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è:")
    for value in test_values:
        rounded = manager.round_qty("XRPUSDT", value, round_up=False)
        formatted = manager.format_qty("XRPUSDT", rounded)
        print(f"    {value} -> {rounded} -> '{formatted}'")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
        if value == 3.230:
            if formatted == "3.2":
                print(f"    ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ: 3.230 -> '3.2'")
            else:
                print(f"    ‚ùå –û—à–∏–±–∫–∞: 3.230 –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å '3.2', –∞ –Ω–µ '{formatted}'")
                return False
    
    print("\n‚úÖ –¢–µ—Å—Ç –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è XRPUSDT –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    return True


def test_signal_logic():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤"""
    print("\n" + "=" * 60)
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤")
    print("=" * 60)
    
    # –°–∏–º—É–ª—è—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞
    test_cases = [
        {"long": 3, "short": 1, "expected": "LONG", "desc": "3 LONG, 1 SHORT"},
        {"long": 1, "short": 3, "expected": "SHORT", "desc": "1 LONG, 3 SHORT"},
        {"long": 2, "short": 2, "expected": "NEUTRAL", "desc": "2 LONG, 2 SHORT"},
    ]
    
    for case in test_cases:
        long_count = case["long"]
        short_count = case["short"]
        
        # –õ–æ–≥–∏–∫–∞ –∏–∑ signal_quality_analyzer
        if long_count > short_count and long_count >= 2:
            result = "LONG"
        elif short_count > long_count and short_count >= 2:
            result = "SHORT"
        else:
            result = "NEUTRAL"
        
        status = "‚úÖ" if result == case["expected"] else "‚ùå"
        print(f"  {case['desc']}: {result} (–æ–∂–∏–¥–∞–ª–æ—Å—å {case['expected']}) {status}")
        
        if result != case["expected"]:
            return False
    
    print("\n‚úÖ –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!")
    return True


def test_sl_tp_logic():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ SL/TP –¥–ª—è SHORT –ø–æ–∑–∏—Ü–∏–π"""
    print("\n" + "=" * 60)
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ SL/TP")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    current_price = 100.0
    stop_loss_pct = 0.02  # 2%
    take_profit_pct = 0.03  # 3%
    
    # –î–ª—è LONG –ø–æ–∑–∏—Ü–∏–∏
    long_sl = current_price * (1 - stop_loss_pct)  # 98
    long_tp = current_price * (1 + take_profit_pct)  # 103
    
    print(f"\n  LONG –ø–æ–∑–∏—Ü–∏—è (—Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞: {current_price}):")
    print(f"    SL: {long_sl:.2f} (–Ω–∏–∂–µ –Ω–∞ {stop_loss_pct:.1%})")
    print(f"    TP: {long_tp:.2f} (–≤—ã—à–µ –Ω–∞ {take_profit_pct:.1%})")
    
    # –î–ª—è SHORT –ø–æ–∑–∏—Ü–∏–∏
    short_sl = current_price * (1 + stop_loss_pct)  # 102
    short_tp = current_price * (1 - take_profit_pct)  # 97
    
    print(f"\n  SHORT –ø–æ–∑–∏—Ü–∏—è (—Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞: {current_price}):")
    print(f"    SL: {short_sl:.2f} (–≤—ã—à–µ –Ω–∞ {stop_loss_pct:.1%})")
    print(f"    TP: {short_tp:.2f} (–Ω–∏–∂–µ –Ω–∞ {take_profit_pct:.1%})")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
    checks = [
        (long_sl < current_price, "LONG SL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∏–∂–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞"),
        (long_tp > current_price, "LONG TP –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞"),
        (short_sl > current_price, "SHORT SL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞"),
        (short_tp < current_price, "SHORT TP –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∏–∂–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞"),
    ]
    
    all_correct = True
    for check, desc in checks:
        if check:
            print(f"    ‚úÖ {desc}")
        else:
            print(f"    ‚ùå {desc}")
            all_correct = False
    
    return all_correct


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
    print("=" * 60)
    
    results = []
    
    # –¢–µ—Å—Ç 1: –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ
    try:
        results.append(("–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ XRPUSDT", test_instrument_rounding()))
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è: {e}")
        results.append(("–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ XRPUSDT", False))
    
    # –¢–µ—Å—Ç 2: –õ–æ–≥–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    results.append(("–õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤", test_signal_logic()))
    
    # –¢–µ—Å—Ç 3: SL/TP –ª–æ–≥–∏–∫–∞
    results.append(("–õ–æ–≥–∏–∫–∞ SL/TP", test_sl_tp_logic()))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 60)
    
    all_passed = True
    for name, passed in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if passed else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {name}: {status}")
        if not passed:
            all_passed = False
    
    if all_passed:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\nüìù –í–Ω–µ—Å–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
        print("  1. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è SHORT —Å–∏–≥–Ω–∞–ª–æ–≤")
        print("  2. –î–æ–±–∞–≤–ª–µ–Ω InstrumentManager –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è")
        print("  3. –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
        print("  4. –£–≤–µ–ª–∏—á–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏ –¥–æ 5 –º–∏–Ω—É—Ç")
        print("  5. –ü—Ä–æ–≤–µ—Ä–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ SL/TP –¥–ª—è SHORT –ø–æ–∑–∏—Ü–∏–π")
        print("\nüîÑ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("  1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π: ./stop_all.sh && ./quick_start.sh")
        print("  2. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ª–æ–≥–∏: tail -f data/logs/bot_trading_*.log | grep -E 'SHORT|XRPUSDT'")
        print("  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: python3 unified_launcher.py --status")
    else:
        print("\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´!")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
    
    return 0 if all_passed else 1


if __name__ == "__main__":
    sys.exit(main())