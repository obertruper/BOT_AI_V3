#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –º–µ—Ö–∞–Ω–∏–∑–º–∞ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π
"""

import asyncio
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


async def test_partial_tp():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è"""

    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π")

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
    from trading.sltp.enhanced_manager import EnhancedSLTPManager
    from trading.sltp.models import PartialTPLevel, SLTPConfig
    from trading.sltp.utils import normalize_percentage, round_price, round_qty

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = SLTPConfig(
        partial_tp_enabled=True,
        partial_tp_levels=[
            PartialTPLevel(
                level=1,
                percentage=1.2,
                price=0,  # –ë—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
                quantity=0,  # –ë—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
                close_ratio=0.25,
            ),
            PartialTPLevel(
                level=2,
                percentage=2.4,
                price=0,  # –ë—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
                quantity=0,  # –ë—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
                close_ratio=0.25,
            ),
            PartialTPLevel(
                level=3,
                percentage=3.5,
                price=0,  # –ë—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
                quantity=0,  # –ë—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
                close_ratio=0.50,
            ),
        ],
        partial_tp_update_sl=True,
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
    logger.info("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤:")
    test_values = [0.012, 0.024, 0.035, 1.2, 2.4, 3.5]
    for val in test_values:
        normalized = normalize_percentage(val)
        logger.info(f"  {val} -> {normalized}%")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    logger.info("\nüî¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è:")
    test_symbols = ["BTCUSDT", "ETHUSDT", "SOLUSDT"]
    test_price = 1234.567890
    test_qty = 0.123456789

    for symbol in test_symbols:
        rounded_price = round_price(symbol, test_price)
        rounded_qty = round_qty(symbol, test_qty)
        logger.info(f"  {symbol}:")
        logger.info(f"    –¶–µ–Ω–∞: {test_price} -> {rounded_price}")
        logger.info(f"    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {test_qty} -> {rounded_qty}")

    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
    manager = EnhancedSLTPManager(config)

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
    class TestPosition:
        def __init__(self):
            self.id = "test_position_1"
            self.symbol = "BTCUSDT"
            self.side = "Buy"
            self.size = 0.01  # 0.01 BTC
            self.entry_price = 50000.0
            self.exchange = "bybit"

    position = TestPosition()

    logger.info("\nüìà –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è:")
    logger.info(f"  –°–∏–º–≤–æ–ª: {position.symbol}")
    logger.info(f"  –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {position.side}")
    logger.info(f"  –†–∞–∑–º–µ—Ä: {position.size} BTC")
    logger.info(f"  –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${position.entry_price}")

    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ü–µ–Ω–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏
    price_levels = [
        (50600, 1.2),  # +1.2% - –ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å partial TP
        (51200, 2.4),  # +2.4% - –≤—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å
        (51750, 3.5),  # +3.5% - —Ç—Ä–µ—Ç–∏–π —É—Ä–æ–≤–µ–Ω—å
    ]

    logger.info("\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω–µ–π —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è:")
    for price, expected_pct in price_levels:
        profit_pct = ((price - position.entry_price) / position.entry_price) * 100
        logger.info(f"\n  –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${price} (–ø—Ä–∏–±—ã–ª—å: {profit_pct:.2f}%)")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–ª–∂–µ–Ω –ª–∏ —Å—Ä–∞–±–æ—Ç–∞—Ç—å partial TP
        for level in config.partial_tp_levels:
            if profit_pct >= level.percentage:
                close_qty = position.size * level.close_ratio
                close_qty = round_qty(position.symbol, close_qty)
                logger.info(f"    ‚úÖ –£—Ä–æ–≤–µ–Ω—å {level.level} ({level.percentage}%) –¥–æ—Å—Ç–∏–≥–Ω—É—Ç")
                logger.info(
                    f"       –ó–∞–∫—Ä—ã–≤–∞–µ–º {level.close_ratio * 100}% –ø–æ–∑–∏—Ü–∏–∏ = {close_qty} BTC"
                )
                logger.info(f"       –°—Ç–æ–∏–º–æ—Å—Ç—å: ${close_qty * price:.2f}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ SL –ø–æ—Å–ª–µ partial TP
    logger.info("\nüõ°Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ SL –ø–æ—Å–ª–µ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è:")
    breakeven_offset = 0.001  # 0.1%
    new_sl = position.entry_price * (1 + breakeven_offset)
    new_sl = round_price(position.symbol, new_sl)
    logger.info(f"  –ù–æ–≤—ã–π SL (–±–µ–∑—É–±—ã—Ç–æ–∫ + 0.1%): ${new_sl}")

    logger.info("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –±–∏—Ä–∂–µ–π
    logger.info("\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∏—Ä–∂–µ–π:")
    try:
        from core.config.config_manager import ConfigManager

        config_manager = ConfigManager()
        exchange_config = config_manager.get_exchange_config("bybit")

        if exchange_config and exchange_config.get("enabled"):
            logger.info("  ‚úÖ Bybit –∫–ª–∏–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º hedge mode
            logger.info("  üìå –†–µ–∂–∏–º —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–µ–Ω")
            logger.info("    - Long –ø–æ–∑–∏—Ü–∏–∏: position_idx=1")
            logger.info("    - Short –ø–æ–∑–∏—Ü–∏–∏: position_idx=2")
        else:
            logger.warning("  ‚ö†Ô∏è Bybit –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω")

    except Exception as e:
        logger.error(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∏—Ä–∂–∏: {e}")

    return True


async def test_trading_flow():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""

    logger.info("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏:")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    components = [
        ("Signal Generation", "trading.signals.ai_signal_generator"),
        ("Order Manager", "trading.orders.order_manager"),
        ("Position Manager", "trading.position_manager"),
        ("Enhanced SLTP", "trading.sltp.enhanced_manager"),
        ("Execution Engine", "trading.execution_engine"),
    ]

    for name, module_path in components:
        try:
            module = __import__(module_path, fromlist=[""])
            logger.info(f"  ‚úÖ {name}: –¥–æ—Å—Ç—É–ø–µ–Ω")
        except ImportError as e:
            logger.warning(f"  ‚ö†Ô∏è {name}: {e}")

    logger.info("\nüìã –ü—Ä–æ—Ü–µ—Å—Å —Ç–æ—Ä–≥–æ–≤–ª–∏:")
    logger.info("  1. –°–∏–≥–Ω–∞–ª -> OrderManager.create_order_from_signal()")
    logger.info("  2. –û—Ä–¥–µ—Ä -> ExecutionEngine.execute_order()")
    logger.info("  3. –ü–æ–∑–∏—Ü–∏—è -> EnhancedSLTPManager.create_sltp_orders()")
    logger.info("  4. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ -> check_partial_tp() –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫")
    logger.info("  5. Partial TP -> –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ SL –≤ –±–µ–∑—É–±—ã—Ç–æ–∫")
    logger.info("  6. –ó–∞–∫—Ä—ã—Ç–∏–µ -> —Ñ–∏–∫—Å–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª–∏")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
        await test_partial_tp()

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ç–æ—Ä–≥–æ–≤–ª–∏
        await test_trading_flow()

        logger.info("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        logger.error(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
