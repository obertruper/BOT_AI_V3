#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –¥–∏—Å–ø–µ—Ä—Å–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ FeatureEngineer
"""

import sys
from pathlib import Path

import numpy as np

sys.path.append(str(Path(__file__).parent))

print("üß™ –¢–µ—Å—Ç –¥–∏—Å–ø–µ—Ä—Å–∏–π –≤ –ø—Ä—è–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

# –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
np.random.seed(42)

# –°–∏–ª—å–Ω–æ —Ä–∞–∑–ª–∏—á–∞—é—â–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ
btc_prices = 40000 + np.random.randn(100) * 2000
eth_prices = 2500 + np.random.randn(100) * 100

print(f"BTC: mean={np.mean(btc_prices):.2f}, std={np.std(btc_prices):.2f}")
print(f"ETH: mean={np.mean(eth_prices):.2f}, std={np.std(eth_prices):.2f}")

# –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (–∫–∞–∫ –¥–µ–ª–∞–µ—Ç FeatureEngineer)
btc_normalized = (btc_prices - np.mean(btc_prices)) / np.std(btc_prices)
eth_normalized = (eth_prices - np.mean(eth_prices)) / np.std(eth_prices)

print(
    f"BTC normalized: mean={np.mean(btc_normalized):.6f}, std={np.std(btc_normalized):.6f}"
)
print(
    f"ETH normalized: mean={np.mean(eth_normalized):.6f}, std={np.std(eth_normalized):.6f}"
)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–∏—è
difference = np.mean(np.abs(btc_normalized - eth_normalized))
print(f"–°—Ä–µ–¥–Ω—è—è —Ä–∞–∑–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: {difference:.6f}")

if difference < 0.1:
    print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã–µ —Å–ª–∏—à–∫–æ–º –ø–æ—Ö–æ–∂–∏!")
else:
    print("‚úÖ –ü–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–ª–∏—á–Ω—ã")


# –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–æ–±–∞—Å—Ç–Ω—É—é –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é (–∫–∞–∫ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –∫–æ–¥–µ)
def robust_normalize(data):
    q25, q75 = np.percentile(data, [25, 75])
    iqr = q75 - q25
    if iqr > 1e-8:
        median = np.median(data)
        normalized = (data - median) / iqr
        return np.clip(normalized, -3, 3)
    else:
        return data


btc_robust = robust_normalize(btc_prices)
eth_robust = robust_normalize(eth_prices)

print(f"BTC robust: mean={np.mean(btc_robust):.6f}, std={np.std(btc_robust):.6f}")
print(f"ETH robust: mean={np.mean(eth_robust):.6f}, std={np.std(eth_robust):.6f}")

difference_robust = np.mean(np.abs(btc_robust - eth_robust))
print(f"–°—Ä–µ–¥–Ω—è—è —Ä–∞–∑–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ —Ä–æ–±–∞—Å—Ç–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: {difference_robust:.6f}")

if difference_robust < 0.1:
    print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –†–æ–±–∞—Å—Ç–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–∂–µ –¥–∞–µ—Ç –ø–æ—Ö–æ–∂–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!")
else:
    print("‚úÖ –†–æ–±–∞—Å—Ç–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞–∑–ª–∏—á–∏—è")
