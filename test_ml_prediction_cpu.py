#!/usr/bin/env python3
"""
–¢–µ—Å—Ç ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –Ω–∞ CPU –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
"""

import asyncio
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ CPU
os.environ["CUDA_VISIBLE_DEVICES"] = ""  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º GPU

from datetime import datetime, timedelta

import numpy as np
import pandas as pd


async def test_ml_predictions():
    """–¢–µ—Å—Ç ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –Ω–∞ CPU"""
    print("=" * 60)
    print("–¢–ï–°–¢ ML –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ô –ù–ê CPU")
    print("=" * 60)

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
        from core.config.config_manager import ConfigManager
        from ml.ml_manager import MLManager

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_manager = ConfigManager()
        config = config_manager.get_system_config()

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CPU
        if "ml" not in config:
            config["ml"] = {}
        if "model" not in config["ml"]:
            config["ml"]["model"] = {}
        config["ml"]["model"]["device"] = "cpu"

        print("\nüìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        print(f"  Device: {config['ml']['model'].get('device', 'cpu')}")
        print(
            f"  Model path: {config['ml']['model'].get('path', 'models/saved/best_model_20250728_215703.pth')}"
        )

        # –°–æ–∑–¥–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ML Manager
        print("\nüß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML Manager...")
        ml_manager = MLManager(config)
        await ml_manager.initialize()
        print("‚úÖ ML Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
        model_info = ml_manager.get_model_info()
        print("\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:")
        for key, value in model_info.items():
            print(f"  {key}: {value}")

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ OHLCV –¥–∞–Ω–Ω—ã–µ (300 —Å–≤–µ—á–µ–π)
        print("\nüìà –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        base_price = 100000.0
        timestamps = []
        data_list = []

        start_time = datetime.now() - timedelta(hours=75)  # 300 * 15 –º–∏–Ω—É—Ç

        for i in range(300):
            timestamp = start_time + timedelta(minutes=15 * i)
            timestamps.append(timestamp)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Å–≤–µ—á–∏
            volatility = 0.002  # 0.2% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            trend = 0.00001 * i  # –ù–µ–±–æ–ª—å—à–æ–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥

            open_price = base_price * (1 + np.random.normal(0, volatility) + trend)
            close_price = open_price * (1 + np.random.normal(0, volatility))
            high_price = max(open_price, close_price) * (
                1 + abs(np.random.normal(0, volatility / 2))
            )
            low_price = min(open_price, close_price) * (
                1 - abs(np.random.normal(0, volatility / 2))
            )
            volume = 1000 * (1 + abs(np.random.normal(0, 0.5)))

            data_list.append(
                {
                    "timestamp": timestamp,
                    "open": open_price,
                    "high": high_price,
                    "low": low_price,
                    "close": close_price,
                    "volume": volume,
                }
            )

            base_price = close_price

        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(data_list)
        df["symbol"] = "BTCUSDT"
        df.index = pd.DatetimeIndex(df["timestamp"])

        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(df)} —Å–≤–µ—á–µ–π")
        print(f"  –¶–µ–Ω–∞ –æ—Ç {df['close'].min():.2f} –¥–æ {df['close'].max():.2f}")
        print(f"  –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {df['close'].iloc[-1]:.2f}")

        # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        print("\n‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è...")
        import time

        start_time = time.time()

        prediction = await ml_manager.predict(df)

        elapsed_time = time.time() - start_time
        print(f"‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:")
        print(f"  –°–∏–≥–Ω–∞–ª: {prediction['signal_type']}")
        print(f"  –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {prediction['signal_strength']:.3f}")
        print(f"  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction['confidence']:.3f}")
        print(f"  –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞: {prediction['success_probability']:.1%}")
        print(f"  –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {prediction['risk_level']}")

        if prediction["stop_loss"]:
            print(f"  Stop Loss: {prediction['stop_loss']:.2f}")
        if prediction["take_profit"]:
            print(f"  Take Profit: {prediction['take_profit']:.2f}")

        print("\n  –î–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:")
        for key, value in prediction["predictions"].items():
            if isinstance(value, (int, float)):
                print(f"    {key}: {value:.3f}")

        # –¢–µ—Å—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä—ã–Ω–æ—á–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏
        print("\nüß™ –¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π:")

        # 1. –°–∏–ª—å–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
        trend_df = df.copy()
        trend_df["close"] = trend_df["close"] * np.linspace(1.0, 1.05, len(trend_df))
        trend_pred = await ml_manager.predict(trend_df)
        print(
            f"\n  –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ (+5%): {trend_pred['signal_type']} (—Å–∏–ª–∞: {trend_pred['signal_strength']:.3f})"
        )

        # 2. –°–∏–ª—å–Ω—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
        trend_df = df.copy()
        trend_df["close"] = trend_df["close"] * np.linspace(1.0, 0.95, len(trend_df))
        trend_pred = await ml_manager.predict(trend_df)
        print(
            f"  –ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ (-5%): {trend_pred['signal_type']} (—Å–∏–ª–∞: {trend_pred['signal_strength']:.3f})"
        )

        # 3. –ë–æ–∫–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
        flat_df = df.copy()
        flat_df["close"] = flat_df["close"].mean() + np.random.normal(
            0, 100, len(flat_df)
        )
        flat_pred = await ml_manager.predict(flat_df)
        print(
            f"  –ë–æ–∫–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ: {flat_pred['signal_type']} (—Å–∏–ª–∞: {flat_pred['signal_strength']:.3f})"
        )

        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        print("   –ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞ CPU")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(test_ml_predictions())
