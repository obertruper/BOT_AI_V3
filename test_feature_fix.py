#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è FeatureEngineer
"""

import asyncio
import sys
from pathlib import Path

import numpy as np
import pandas as pd

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from core.config.config_manager import ConfigManager
from core.logger import setup_logger
from ml.logic.feature_engineering import FeatureEngineer

logger = setup_logger(__name__)


async def test_feature_uniqueness():
    """–¢–µ—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""

    config_manager = ConfigManager()
    config = config_manager.get_config()

    logger.info("üß™ –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è FeatureEngineer...")

    # –°–æ–∑–¥–∞–µ–º —Å–∏–ª—å–Ω–æ —Ä–∞–∑–ª–∏—á–∞—é—â–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ
    np.random.seed(42)

    # BTC: —Ü–µ–Ω—ã –æ–∫–æ–ª–æ 40000
    btc_data = pd.DataFrame(
        {
            "datetime": pd.date_range("2024-01-01", periods=100, freq="15min"),
            "open": 40000 + np.random.randn(100) * 2000,
            "high": 41000 + np.random.randn(100) * 2000,
            "low": 39000 + np.random.randn(100) * 2000,
            "close": 40000 + np.random.randn(100) * 2000,
            "volume": 100 + np.random.exponential(50, 100),
            "turnover": 1000000 + np.random.exponential(500000, 100),
            "symbol": "BTCUSDT",
        }
    )

    # ETH: —Ü–µ–Ω—ã –æ–∫–æ–ª–æ 2500
    eth_data = pd.DataFrame(
        {
            "datetime": pd.date_range("2024-01-01", periods=100, freq="15min"),
            "open": 2500 + np.random.randn(100) * 100,
            "high": 2550 + np.random.randn(100) * 100,
            "low": 2450 + np.random.randn(100) * 100,
            "close": 2500 + np.random.randn(100) * 100,
            "volume": 500 + np.random.exponential(200, 100),
            "turnover": 200000 + np.random.exponential(100000, 100),
            "symbol": "ETHUSDT",
        }
    )

    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –Ω–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    for df in [btc_data, eth_data]:
        for col in ["open", "high", "low", "close", "volume", "turnover"]:
            df[col] = np.maximum(df[col], 1.0)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
    feature_engineer = FeatureEngineer(config)

    logger.info("\nüìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è BTC...")
    btc_features = feature_engineer.create_features(btc_data)

    logger.info("\nüìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è ETH...")
    eth_features = feature_engineer.create_features(eth_data)

    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    logger.info("\nüîç –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    logger.info(f"BTC features: shape={btc_features.shape}")
    logger.info(f"ETH features: shape={eth_features.shape}")

    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É (—Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏)
    if isinstance(btc_features, pd.DataFrame):
        btc_last = btc_features.iloc[-1].values
        eth_last = eth_features.iloc[-1].values
    else:
        btc_last = btc_features[-1]
        eth_last = eth_features[-1]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–∏—è
    differences = np.abs(btc_last - eth_last)
    avg_diff = np.mean(differences)
    max_diff = np.max(differences)
    num_identical = np.sum(differences < 1e-10)

    logger.info("\nüìà –†–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É BTC –∏ ETH –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏:")
    logger.info(f"   –°—Ä–µ–¥–Ω—è—è —Ä–∞–∑–Ω–æ—Å—Ç—å: {avg_diff:.6f}")
    logger.info(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–æ—Å—Ç—å: {max_diff:.6f}")
    logger.info(f"   –ò–¥–µ–Ω—Ç–∏—á–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {num_identical}/{len(btc_last)}")

    # –ü–µ—Ä–≤—ã–µ 10 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    logger.info("\nüîç –ü–µ—Ä–≤—ã–µ 10 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
    logger.info(f"   BTC: {btc_last[:10]}")
    logger.info(f"   ETH: {eth_last[:10]}")

    if avg_diff < 0.01 or num_identical > len(btc_last) * 0.5:
        logger.error("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü—Ä–∏–∑–Ω–∞–∫–∏ —Å–ª–∏—à–∫–æ–º –ø–æ—Ö–æ–∂–∏!")
        return False
    else:
        logger.info("‚úÖ –£–°–ü–ï–•: –ü—Ä–∏–∑–Ω–∞–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤!")
        return True


if __name__ == "__main__":
    asyncio.run(test_feature_uniqueness())
