#!/usr/bin/env python3
"""–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã —Å confidence –≤ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è—Ö"""

import asyncio

from ml.ml_manager import MLManager


async def analyze():
    """–ê–Ω–∞–ª–∏–∑ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    from core.config.config_manager import ConfigManager

    config_manager = ConfigManager()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ML Manager
    ml_manager = MLManager(config_manager.get_config())

    # –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    symbols = ["BTCUSDT", "ETHUSDT", "SOLUSDT", "DOTUSDT"]

    print("=" * 80)
    print("–ê–ù–ê–õ–ò–ó ML CONFIDENCE")
    print("=" * 80)

    for symbol in symbols:
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑ {symbol}:")
        print("-" * 40)

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            prediction = await ml_manager.get_trading_signals(
                symbols=[symbol], exchange="bybit"
            )

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
            if prediction and symbol in prediction:
                prediction = prediction[symbol]
            else:
                prediction = None

            if prediction:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã confidence
                signal_strength = prediction.get("signal_strength", 0)
                confidence = prediction.get("confidence", 0)
                predictions = prediction.get("predictions", {})

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ confidence
                # –ò–∑ ml_manager.py —Å—Ç—Ä–æ–∫–∞ 638-640:
                # combined_confidence = signal_strength * 0.4 + model_confidence * 0.4 + (1.0 - avg_risk) * 0.2

                # –û–±—Ä–∞—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç model_confidence
                # confidence = signal_strength * 0.4 + model_confidence * 0.4 + risk_component * 0.2
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º risk_component ‚âà 0.7 (—Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ 0.3)
                risk_component = 0.7  # (1.0 - avg_risk) –ø—Ä–∏ avg_risk ‚âà 0.3

                # model_confidence = (confidence - signal_strength * 0.4 - risk_component * 0.2) / 0.4
                estimated_model_conf = (
                    confidence - signal_strength * 0.4 - risk_component * 0.2
                ) / 0.4

                print(f"  Signal Type: {prediction.get('signal_type')}")
                print(f"  Signal Strength: {signal_strength:.4f}")
                print(f"  Confidence: {confidence:.4f}")
                print(f"  Estimated Model Conf: {estimated_model_conf:.4f}")

                # –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
                returns = [
                    predictions.get("returns_15m", 0),
                    predictions.get("returns_1h", 0),
                    predictions.get("returns_4h", 0),
                    predictions.get("returns_12h", 0),
                ]

                print(
                    f"  Returns: 15m={returns[0]:.4f}, 1h={returns[1]:.4f}, 4h={returns[2]:.4f}, 12h={returns[3]:.4f}"
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º—É–ª—É confidence
                # combined_confidence = signal_strength * 0.4 + model_confidence * 0.4 + (1.0 - avg_risk) * 0.2

                # –ï—Å–ª–∏ –≤—Å–µ confidence ‚âà 0.60, —ç—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å:
                # 1. signal_strength ‚âà 0.75 (3 –∏–∑ 4 —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ —Å–æ–≥–ª–∞—Å–Ω—ã)
                # 2. model_confidence ‚âà 0.50 (sigmoid –æ—Ç 0)
                # 3. risk ‚âà 0.30 (—Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫)
                # –†–µ–∑—É–ª—å—Ç–∞—Ç: 0.75*0.4 + 0.50*0.4 + 0.70*0.2 = 0.30 + 0.20 + 0.14 = 0.64

                # –ò–ª–∏ –±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ:
                # signal_strength = 1.0 (–≤—Å–µ —Å–æ–≥–ª–∞—Å–Ω—ã)
                # model_confidence = 0.35
                # risk = 0.30
                # –†–µ–∑—É–ª—å—Ç–∞—Ç: 1.0*0.4 + 0.35*0.4 + 0.70*0.2 = 0.40 + 0.14 + 0.14 = 0.68

                # –ü—Ä–æ–≤–µ—Ä–∏–º –≥–∏–ø–æ—Ç–µ–∑—É
                if abs(confidence - 0.60) < 0.01:
                    print("  ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: Confidence —Ç–æ—á–Ω–æ –Ω–∞ –ø–æ—Ä–æ–≥–µ 0.60!")
                    print("  –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                    print(
                        "    1. –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –≤—ã–¥–∞–≤–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é confidence –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞"
                    )
                    print(
                        "    2. –ü–æ—Å—Ç–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç confidence –¥–æ –ø–æ—Ä–æ–≥–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"
                    )
                    print("    3. –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ñ–æ—Ä–º—É–ª—ã –¥–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")

            else:
                print("  –ù–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")

        except Exception as e:
            print(f"  –û—à–∏–±–∫–∞: {e}")

    print("\n" + "=" * 80)
    print("–í–´–í–û–î:")
    print("–í—Å–µ ML —Å–∏–≥–Ω–∞–ª—ã –∏–º–µ—é—Ç confidence ‚âà 0.60, —á—Ç–æ —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ—Ä–æ–≥—É.")
    print("–≠—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É –≤ —Ä–∞—Å—á–µ—Ç–µ confidence –∏–ª–∏ –ø–æ—Å—Ç–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–µ.")
    print("\n–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞ confidence_scores –≤ –º–æ–¥–µ–ª–∏")
    print("2. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –º–æ–¥–µ–ª—å –Ω–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞ –Ω–∞ –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
    print("3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ—Ç –ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ confidence –¥–æ –ø–æ—Ä–æ–≥–∞ –≤ –∫–æ–¥–µ")
    print("=" * 80)


if __name__ == "__main__":
    asyncio.run(analyze())
