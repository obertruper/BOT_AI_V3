#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Å ML —Å–∏–≥–Ω–∞–ª–∞–º–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
"""

import asyncio
import json
import sys
from datetime import datetime

from core.config.config_manager import ConfigManager
from core.logger import setup_logger
from ml.ml_manager import MLManager
from ml.ml_signal_processor import MLSignalProcessor
from ml.signal_scheduler import SignalScheduler

logger = setup_logger(__name__)


async def test_ml_predictions_diversity():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ—Å—Ç—å ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–Ω–µ—Ç"""

    config_manager = ConfigManager()
    config = config_manager.get_config()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ML Manager
    ml_manager = MLManager(config)
    await ml_manager.initialize()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Signal Processor
    signal_processor = MLSignalProcessor(
        ml_manager=ml_manager, config=config, config_manager=config_manager
    )
    await signal_processor.initialize()

    # –°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
    test_symbols = [
        "BTCUSDT",
        "ETHUSDT",
        "BNBUSDT",
        "SOLUSDT",
        "XRPUSDT",
        "DOGEUSDT",
        "ADAUSDT",
        "AVAXUSDT",
        "DOTUSDT",
        "LINKUSDT",
    ]

    logger.info(f"\n{'=' * 60}")
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ—Å—Ç–∏ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
    logger.info(f"{'=' * 60}\n")

    predictions_summary = {}

    for symbol in test_symbols:
        try:
            logger.info(f"\nüìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {symbol}...")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
            signal = await signal_processor.process_realtime_signal(
                symbol=symbol, exchange="bybit"
            )

            if signal:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏
                prediction_info = {
                    "signal_type": signal.signal_type.value,
                    "confidence": round(signal.confidence, 3),
                    "strength": round(signal.strength, 3),
                    "raw_predictions": signal.extra_data.get("raw_prediction", {}),
                }

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ raw predictions
                directions = prediction_info["raw_predictions"].get(
                    "predictions", [0] * 20
                )[4:8]
                direction_map = {0: "LONG", 1: "SHORT", 2: "FLAT"}
                direction_labels = [
                    direction_map.get(int(d), "UNKNOWN") for d in directions
                ]

                predictions_summary[symbol] = {
                    "signal": prediction_info["signal_type"],
                    "confidence": prediction_info["confidence"],
                    "strength": prediction_info["strength"],
                    "directions": direction_labels,
                    "timestamp": datetime.now().isoformat(),
                }

                logger.info(
                    f"‚úÖ {symbol}: {prediction_info['signal_type']} "
                    f"(conf: {prediction_info['confidence']:.1%}, "
                    f"str: {prediction_info['strength']:.2f})"
                )
                logger.info(f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è [15m, 1h, 4h, 12h]: {direction_labels}")

            else:
                predictions_summary[symbol] = {
                    "signal": "NO_SIGNAL",
                    "confidence": 0,
                    "strength": 0,
                    "directions": ["N/A"] * 4,
                    "timestamp": datetime.now().isoformat(),
                }
                logger.info(f"‚ùå {symbol}: –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ (–Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏–ª–∏ —Å–∏–ª–∞)")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {symbol}: {e}")
            predictions_summary[symbol] = {
                "signal": "ERROR",
                "error": str(e),
                "timestamp": datetime.now().isoformat(),
            }

    # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ—Å—Ç–∏
    logger.info(f"\n{'=' * 60}")
    logger.info("üìä –ê–ù–ê–õ–ò–ó –†–ê–ó–ù–û–û–ë–†–ê–ó–ù–û–°–¢–ò –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ô")
    logger.info(f"{'=' * 60}\n")

    # –ü–æ–¥—Å—á–µ—Ç —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal_types = {}
    direction_stats = {"LONG": 0, "SHORT": 0, "FLAT": 0}

    for symbol, data in predictions_summary.items():
        signal = data.get("signal", "ERROR")
        signal_types[signal] = signal_types.get(signal, 0) + 1

        # –ü–æ–¥—Å—á–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        if "directions" in data and data["directions"][0] != "N/A":
            for direction in data["directions"]:
                if direction in direction_stats:
                    direction_stats[direction] += 1

    # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    logger.info("üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤:")
    for signal_type, count in signal_types.items():
        percentage = (count / len(test_symbols)) * 100
        logger.info(f"   {signal_type}: {count} ({percentage:.1f}%)")

    logger.info("\nüìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (–≤—Å–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã):")
    total_directions = sum(direction_stats.values())
    if total_directions > 0:
        for direction, count in direction_stats.items():
            percentage = (count / total_directions) * 100
            logger.info(f"   {direction}: {count} ({percentage:.1f}%)")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open("ml_predictions_diversity_test.json", "w") as f:
        json.dump(predictions_summary, f, indent=2)

    logger.info("\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ml_predictions_diversity_test.json")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ—Å—Ç–∏
    unique_signals = len(
        [s for s in signal_types.keys() if s not in ["ERROR", "NO_SIGNAL"]]
    )
    if unique_signals > 1:
        logger.info(
            f"\n‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –ú–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç {unique_signals} —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"
        )
    else:
        logger.warning(
            f"\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ú–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ {unique_signals} —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–æ–≤"
        )

    return predictions_summary


async def test_signal_scheduler():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""

    logger.info(f"\n{'=' * 60}")
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Signal Scheduler –¥–ª—è real-time —Ç–æ—Ä–≥–æ–≤–ª–∏")
    logger.info(f"{'=' * 60}\n")

    config_manager = ConfigManager()
    scheduler = SignalScheduler(config_manager)

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        await scheduler.initialize()

        # –ó–∞–ø—É—Å–∫
        await scheduler.start()

        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç
        monitor_duration = 300  # 5 –º–∏–Ω—É—Ç
        check_interval = 30  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

        logger.info(f"‚è±Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ {monitor_duration} —Å–µ–∫—É–Ω–¥...")
        logger.info("   (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)\n")

        start_time = datetime.now()

        while (datetime.now() - start_time).total_seconds() < monitor_duration:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
            status = await scheduler.get_status()

            active_symbols = sum(1 for s in status["symbols"].values() if s["active"])
            total_errors = sum(s["errors"] for s in status["symbols"].values())

            logger.info(f"\nüìä –°—Ç–∞—Ç—É—Å [{datetime.now().strftime('%H:%M:%S')}]:")
            logger.info(
                f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {active_symbols}/{len(status['symbols'])}"
            )
            logger.info(f"   –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {total_errors}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã
            recent_signals = []
            for symbol, data in status["symbols"].items():
                if data.get("last_signal") and data["last_signal"].get("signal"):
                    signal_info = data["last_signal"]["signal"]
                    recent_signals.append(
                        {
                            "symbol": symbol,
                            "type": signal_info.signal_type.value,
                            "confidence": signal_info.confidence,
                            "time": data["last_signal"]["timestamp"],
                        }
                    )

            if recent_signals:
                logger.info("\n   –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã:")
                for sig in sorted(
                    recent_signals, key=lambda x: x["time"], reverse=True
                )[:5]:
                    time_ago = (
                        datetime.now(sig["time"].tzinfo) - sig["time"]
                    ).total_seconds()
                    logger.info(
                        f"   - {sig['symbol']}: {sig['type']} "
                        f"(conf: {sig['confidence']:.1%}, "
                        f"{int(time_ago)}s –Ω–∞–∑–∞–¥)"
                    )

            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            await asyncio.sleep(check_interval)

        logger.info("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")

    except KeyboardInterrupt:
        logger.info("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    finally:
        await scheduler.stop()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    logger.info("\n" + "=" * 80)
    logger.info("ü§ñ BOT_AI_V3 - –¢–µ—Å—Ç ML —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã")
    logger.info("=" * 80 + "\n")

    # –°–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    logger.info("–≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ—Å—Ç–∏ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
    predictions = await test_ml_predictions_diversity()

    # –ï—Å–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    unique_types = len(
        set(
            p.get("signal")
            for p in predictions.values()
            if p.get("signal") not in ["ERROR", "NO_SIGNAL"]
        )
    )

    if unique_types > 1:
        logger.info("\n–≠—Ç–∞–ø 2: –ó–∞–ø—É—Å–∫ real-time –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤")
        await test_signal_scheduler()
    else:
        logger.warning(
            "\n‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ—Å—Ç–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"
        )


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        sys.exit(0)
