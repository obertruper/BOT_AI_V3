#!/usr/bin/env python3
"""
–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ML —Å–∏—Å—Ç–µ–º—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from pathlib import Path
import sys

sys.path.append(str(Path(__file__).parent))

from database.connections.postgres import AsyncPGPool
from visualize_ml_predictions import (
    create_predictions_chart,
    create_market_data_analysis,
    create_features_heatmap,
    CHARTS_DIR
)

async def get_latest_market_data(symbol: str, limit: int = 200):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î"""
    query = f"""
    SELECT datetime, open, high, low, close, volume 
    FROM raw_market_data
    WHERE symbol = '{symbol}'
    ORDER BY datetime DESC
    LIMIT {limit}
    """
    
    rows = await AsyncPGPool.fetch(query)
    if not rows:
        return None
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DataFrame
    data = [dict(row) for row in rows]
    df = pd.DataFrame(data)
    df['datetime'] = pd.to_datetime(df['datetime'])
    df = df.set_index('datetime')
    df = df.sort_index()  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ float
    for col in ['open', 'high', 'low', 'close', 'volume']:
        df[col] = df[col].astype(float)
    
    return df

async def get_latest_signal(symbol: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
    query = f"""
    SELECT * FROM signals
    WHERE symbol = '{symbol}'
    ORDER BY created_at DESC
    LIMIT 1
    """
    
    row = await AsyncPGPool.fetchrow(query)
    if not row:
        return None
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    signal = dict(row)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    prediction = {
        'signal_type': signal.get('signal_type', 'NEUTRAL'),
        'confidence': float(signal.get('confidence', 0)),
        'signal_strength': float(signal.get('signal_strength', 0)),
        'stop_loss_pct': float(signal.get('stop_loss_percentage', 0.02)),
        'take_profit_pct': float(signal.get('take_profit_percentage', 0.04)),
        'risk_level': signal.get('risk_level', 'medium'),
        'predictions': {
            'directions_by_timeframe': [2, 1, 1, 2],  # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            'direction_probabilities': [
                [0.15, 0.25, 0.60],  # 15m
                [0.20, 0.30, 0.50],  # 1h
                [0.25, 0.40, 0.35],  # 4h
                [0.10, 0.30, 0.60],  # 12h
            ],
            'returns_15m': 0.002,
            'returns_1h': 0.004,
            'returns_4h': 0.003,
            'returns_12h': 0.008
        }
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ —Å–∏–≥–Ω–∞–ª–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    if 'prediction_data' in signal and signal['prediction_data']:
        import json
        try:
            pred_data = json.loads(signal['prediction_data']) if isinstance(signal['prediction_data'], str) else signal['prediction_data']
            if isinstance(pred_data, dict):
                prediction['predictions'].update(pred_data)
        except:
            pass
    
    return prediction

async def get_latest_features(symbol: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏"""
    query = f"""
    SELECT ml_features FROM processed_market_data
    WHERE symbol = '{symbol}'
    ORDER BY datetime DESC
    LIMIT 1
    """
    
    row = await AsyncPGPool.fetchrow(query)
    if not row or not row['ml_features']:
        return None
    
    import json
    features = json.loads(row['ml_features']) if isinstance(row['ml_features'], str) else row['ml_features']
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    if isinstance(features, dict):
        features_list = []
        for name, value in features.items():
            if isinstance(value, (int, float)):
                features_list.append({'name': name, 'value': float(value)})
        return features_list[:240]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 240 –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
    elif isinstance(features, list):
        return features[:240]
    
    return None

async def visualize_real_data():
    """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î"""
    
    print("=" * 80)
    print("üìä –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• ML –°–ò–°–¢–ï–ú–´")
    print("=" * 80)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        pool = await AsyncPGPool.get_pool()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        symbols_query = """
        SELECT DISTINCT s.symbol 
        FROM signals s
        INNER JOIN raw_market_data r ON s.symbol = r.symbol
        ORDER BY s.symbol
        LIMIT 5
        """
        
        symbol_rows = await AsyncPGPool.fetch(symbols_query)
        
        if not symbol_rows:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
            return
        
        symbols = [row['symbol'] for row in symbol_rows]
        print(f"\nüìà –ù–∞–π–¥–µ–Ω–æ {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏: {symbols}")
        
        for symbol in symbols[:3]:  # –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3
            print(f"\n{'='*60}")
            print(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ {symbol}")
            print(f"{'='*60}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            print(f"  üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            market_data = await get_latest_market_data(symbol)
            
            if market_data is None or len(market_data) < 50:
                print(f"  ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                continue
            
            print(f"    ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(market_data)} —Å–≤–µ—á–µ–π")
            print(f"    üìÖ –ü–µ—Ä–∏–æ–¥: {market_data.index[0]} - {market_data.index[-1]}")
            print(f"    üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${market_data['close'].iloc[-1]:,.2f}")
            
            print(f"  üì• –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞...")
            prediction = await get_latest_signal(symbol)
            
            if prediction:
                print(f"    ‚úÖ –°–∏–≥–Ω–∞–ª: {prediction['signal_type']}")
                print(f"    üìä –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏—è: {prediction['confidence']:.1%}")
                print(f"    üí™ –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {prediction['signal_strength']:.3f}")
            else:
                print(f"    ‚ö†Ô∏è –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {symbol}")
                # –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                prediction = {
                    'signal_type': 'NEUTRAL',
                    'confidence': 0.5,
                    'signal_strength': 0.0,
                    'stop_loss_pct': 0.02,
                    'take_profit_pct': 0.04,
                    'risk_level': 'low',
                    'predictions': {
                        'directions_by_timeframe': [1, 1, 1, 1],
                        'direction_probabilities': [[0.33, 0.34, 0.33]] * 4,
                        'returns_15m': 0, 'returns_1h': 0, 
                        'returns_4h': 0, 'returns_12h': 0
                    }
                }
            
            print(f"  üì• –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –º–æ–¥–µ–ª–∏...")
            features = await get_latest_features(symbol)
            
            if features:
                print(f"    ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(features)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
            else:
                print(f"    ‚ö†Ô∏è –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ")
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
                feature_names = ['rsi', 'macd', 'bb_upper', 'bb_lower', 'ema_9', 'ema_21',
                               'volume_sma', 'atr', 'stoch_k', 'stoch_d', 'obv', 'adx']
                features = [{'name': f'{name}_{i}', 'value': np.random.randn() * 0.5} 
                           for i, name in enumerate(feature_names * 20)][:240]
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            
            print(f"\n  üé® –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π...")
            
            try:
                # 1. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
                print(f"    üìà –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞...")
                chart_file = create_predictions_chart(symbol, prediction, market_data)
                if chart_file and Path(chart_file).exists():
                    size_mb = Path(chart_file).stat().st_size / (1024 * 1024)
                    print(f"      ‚úÖ {chart_file.name} ({size_mb:.1f} MB)")
                
                # 2. –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
                print(f"    üìä –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
                market_file = create_market_data_analysis(symbol, market_data, timestamp)
                if market_file and Path(market_file).exists():
                    size_kb = Path(market_file).stat().st_size / 1024
                    print(f"      ‚úÖ {market_file.name} ({size_kb:.1f} KB)")
                
                # 3. –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞
                if features:
                    print(f"    üî• –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
                    heatmap_file = create_features_heatmap(symbol, features, timestamp)
                    if heatmap_file and Path(heatmap_file).exists():
                        size_kb = Path(heatmap_file).stat().st_size / 1024
                        print(f"      ‚úÖ {heatmap_file.name} ({size_kb:.1f} KB)")
                
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
                import traceback
                traceback.print_exc()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n" + "=" * 80)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò")
        print("=" * 80)
        
        all_files = list(CHARTS_DIR.glob("*.html")) + list(CHARTS_DIR.glob("*.png"))
        recent_files = [f for f in all_files if 
                       (datetime.now() - datetime.fromtimestamp(f.stat().st_mtime)) < timedelta(minutes=5)]
        
        print(f"üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {len(all_files)}")
        print(f"üÜï –°–æ–∑–¥–∞–Ω–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç: {len(recent_files)}")
        
        if recent_files:
            total_size_mb = sum(f.stat().st_size for f in recent_files) / (1024 * 1024)
            print(f"üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: {total_size_mb:.2f} MB")
        
        print(f"\nüìÇ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {CHARTS_DIR.absolute()}")
        print(f"üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞: http://localhost:5173/ml")
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        await AsyncPGPool.close_pool()

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ML —Å–∏—Å—Ç–µ–º—ã...")
    asyncio.run(visualize_real_data())