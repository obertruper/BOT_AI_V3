#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import os

from core.logger import setup_logger
from database.connections.postgres import AsyncPGPool

logger = setup_logger("balance_checker")


async def check_trading_balance():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞"""

    logger.info("\n" + "=" * 60)
    logger.info("üí∞ –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê")
    logger.info("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    import yaml

    with open("config/trading.yaml") as f:
        config = yaml.safe_load(f)

    logger.info("üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏:")
    logger.info(f"  ‚Ä¢ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${config['balance']['fixed_balance']}")
    logger.info(f"  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: {config['balance']['use_fixed_balance']}")
    logger.info(f"  ‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${config['position_sizing']['fixed_position_size_usd']}")
    logger.info(f"  ‚Ä¢ –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: {config['risk_management']['max_risk_per_trade']:.1%}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bybit_key = os.getenv("BYBIT_API_KEY")
    if bybit_key:
        logger.info(f"\n‚úÖ API –∫–ª—é—á Bybit —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–¥–ª–∏–Ω–∞: {len(bybit_key)})")
    else:
        logger.warning("‚ö†Ô∏è API –∫–ª—é—á Bybit –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –æ –±–∞–ª–∞–Ω—Å–µ –≤ –ë–î
    query = """
        SELECT
            exchange,
            symbol,
            total_balance,
            available_balance,
            locked_balance,
            updated_at
        FROM account_balances
        WHERE updated_at > NOW() - INTERVAL '24 hours'
        ORDER BY updated_at DESC
    """

    rows = await AsyncPGPool.fetch(query)

    if rows:
        logger.info("\nüìä –ë–∞–ª–∞–Ω—Å—ã –≤ –ë–î (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24—á):")
        for row in rows[:5]:
            logger.info(f"  ‚Ä¢ {row['exchange']} {row['symbol']}: ${row['total_balance']:.2f}")
            logger.info(
                f"    –î–æ—Å—Ç—É–ø–Ω–æ: ${row['available_balance']:.2f}, –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${row['locked_balance']:.2f}"
            )
    else:
        logger.info("\nüìä –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å (–Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –ë–î)")
        logger.info(f"  ‚Ä¢ USDT: ${config['balance']['fixed_balance']}")

    return config["balance"]["fixed_balance"]


async def check_ml_processes():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ ML –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""

    logger.info("\n" + "=" * 60)
    logger.info("üîß –ü–†–û–í–ï–†–ö–ê –ü–†–û–¶–ï–°–°–û–í")
    logger.info("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    import subprocess

    result = subprocess.run(["ps", "aux"], capture_output=True, text=True)

    processes = {"unified_launcher": 0, "ml_manager": 0, "trading_engine": 0, "signal_scheduler": 0}

    for line in result.stdout.split("\n"):
        for proc in processes:
            if proc in line and "grep" not in line:
                processes[proc] += 1

    logger.info("üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:")
    for proc, count in processes.items():
        if count > 0:
            status = "‚úÖ" if count == 1 else "‚ö†Ô∏è"
            logger.info(f"  {status} {proc}: {count} –ø—Ä–æ—Ü–µ—Å—Å(–æ–≤)")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ç–æ–∫–∏ –≤ –ë–î
    query = """
        SELECT
            COUNT(DISTINCT pid) as unique_pids,
            COUNT(*) as total_connections
        FROM pg_stat_activity
        WHERE datname = 'bot_trading_v3'
          AND state = 'active'
    """

    result = await AsyncPGPool.fetch(query)
    if result:
        row = result[0]
        logger.info("\nüìä –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:")
        logger.info(f"  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö PID: {row['unique_pids']}")
        logger.info(f"  ‚Ä¢ –í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {row['total_connections']}")

    return processes


async def check_signal_generation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""

    logger.info("\n" + "=" * 60)
    logger.info("üì° –ü–†–û–í–ï–†–ö–ê –ì–ï–ù–ï–†–ê–¶–ò–ò –°–ò–ì–ù–ê–õ–û–í")
    logger.info("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–æ—Ç—É —Å–∏–≥–Ω–∞–ª–æ–≤
    query = """
        SELECT
            DATE_TRUNC('minute', created_at) as minute,
            COUNT(*) as signal_count,
            COUNT(DISTINCT symbol) as unique_symbols
        FROM signals
        WHERE created_at > NOW() - INTERVAL '10 minutes'
        GROUP BY minute
        ORDER BY minute DESC
    """

    rows = await AsyncPGPool.fetch(query)

    if rows:
        logger.info("üìä –°–∏–≥–Ω–∞–ª—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç:")
        for row in rows[:5]:
            logger.info(
                f"  ‚Ä¢ {row['minute'].strftime('%H:%M')}: {row['signal_count']} —Å–∏–≥–Ω–∞–ª–æ–≤, {row['unique_symbols']} —Å–∏–º–≤–æ–ª–æ–≤"
            )

        total = sum(row["signal_count"] for row in rows)
        avg = total / len(rows) if rows else 0
        logger.info(f"\n  –°—Ä–µ–¥–Ω–µ–µ: {avg:.1f} —Å–∏–≥–Ω–∞–ª–æ–≤/–º–∏–Ω—É—Ç—É")

        if avg > 50:
            logger.warning("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤ - –≤–æ–∑–º–æ–∂–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å–æ–≤!")
        elif avg > 20:
            logger.info("‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        else:
            logger.info("üìä –£–º–µ—Ä–µ–Ω–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    else:
        logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç")


async def check_order_creation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤"""

    logger.info("\n" + "=" * 60)
    logger.info("üìã –ü–†–û–í–ï–†–ö–ê –°–û–ó–î–ê–ù–ò–Ø –û–†–î–ï–†–û–í")
    logger.info("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤
    query = """
        SELECT
            symbol,
            side,
            status,
            error_message,
            created_at
        FROM orders
        WHERE created_at > NOW() - INTERVAL '1 hour'
        ORDER BY created_at DESC
        LIMIT 20
    """

    rows = await AsyncPGPool.fetch(query)

    if rows:
        success = sum(1 for r in rows if r["status"] in ["filled", "open", "partially_filled"])
        failed = sum(1 for r in rows if r["status"] in ["cancelled", "rejected", "failed"])

        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å):")
        logger.info(f"  ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {success}")
        logger.info(f"  ‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
        errors = [r for r in rows if r["error_message"]]
        if errors:
            logger.warning("\n‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:")
            for err in errors[:3]:
                logger.warning(f"  ‚Ä¢ {err['symbol']}: {err['error_message']}")
    else:
        logger.info("üìä –ù–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å")
        logger.info("  –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        logger.info("  ‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞")
        logger.info("  ‚Ä¢ –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
        logger.info("  ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    logger.info("\n" + "=" * 80)
    logger.info("üîç –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ –¢–û–†–ì–û–í–õ–ò")
    logger.info("=" * 80)

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    balance = await check_trading_balance()

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    processes = await check_ml_processes()

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    await check_signal_generation()

    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤
    await check_order_creation()

    # –ò—Ç–æ–≥–∏
    logger.info("\n" + "=" * 80)
    logger.info("üìä –ò–¢–û–ì–ò")
    logger.info("=" * 80)

    if balance >= 100:
        logger.info(f"‚úÖ –ë–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω: ${balance}")
    else:
        logger.warning(f"‚ö†Ô∏è –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å: ${balance}")

    if processes["unified_launcher"] == 2:  # core + api
        logger.info("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω–µ –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è)")
    else:
        logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏: {processes['unified_launcher']} launcher'–æ–≤")

    logger.info("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    logger.info("  1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ API –∫–ª—é—á–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
    logger.info("  2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    logger.info("  3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å $500 –¥–ª—è —Ç–µ—Å—Ç–æ–≤")


if __name__ == "__main__":
    asyncio.run(main())
