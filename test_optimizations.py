#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π —Å–∏—Å—Ç–µ–º—ã:
- SmartDataManager —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
- EnhancedRateLimiter
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from colorama import Fore, Style, init
from dotenv import load_dotenv

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
init()
load_dotenv()


async def test_smart_data_manager():
    """–¢–µ—Å—Ç SmartDataManager"""
    print(f"\n{Fore.CYAN}{'=' * 60}{Style.RESET_ALL}")
    print(f"{Fore.CYAN}üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SmartDataManager{Style.RESET_ALL}")
    print(f"{Fore.CYAN}{'=' * 60}{Style.RESET_ALL}\n")

    try:
        from core.config.config_manager import ConfigManager
        from core.system.smart_data_manager import SmartDataManager

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        config_manager = ConfigManager("config/system.yaml")
        await config_manager.initialize()

        smart_dm = SmartDataManager(config_manager)

        print(f"{Fore.YELLOW}1. –ó–∞–ø—É—Å–∫ SmartDataManager...{Style.RESET_ALL}")
        await smart_dm.start()

        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
        await asyncio.sleep(5)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        print(f"\n{Fore.YELLOW}2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞...{Style.RESET_ALL}")

        test_symbols = ["BTCUSDT", "ETHUSDT", "SOLUSDT"]
        for symbol in test_symbols:
            data = await smart_dm.get_data(symbol)
            if data is not None:
                print(f"   {Fore.GREEN}‚úì{Style.RESET_ALL} {symbol}: {len(data)} —Å–≤–µ—á–µ–π –≤ –∫–µ—à–µ")
            else:
                print(f"   {Fore.RED}‚úó{Style.RESET_ALL} {symbol}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞
        stats = smart_dm.get_cache_stats()
        print(f"\n{Fore.YELLOW}3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞:{Style.RESET_ALL}")
        for key, value in stats.items():
            print(f"   ‚Ä¢ {key}: {value}")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        await smart_dm.stop()

        print(f"\n{Fore.GREEN}‚úÖ SmartDataManager —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ{Style.RESET_ALL}")
        return True

    except Exception as e:
        print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ SmartDataManager: {e}{Style.RESET_ALL}")
        return False


async def test_enhanced_rate_limiter():
    """–¢–µ—Å—Ç EnhancedRateLimiter"""
    print(f"\n{Fore.CYAN}{'=' * 60}{Style.RESET_ALL}")
    print(f"{Fore.CYAN}üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EnhancedRateLimiter{Style.RESET_ALL}")
    print(f"{Fore.CYAN}{'=' * 60}{Style.RESET_ALL}\n")

    try:
        from exchanges.base.enhanced_rate_limiter import EnhancedRateLimiter

        # –°–æ–∑–¥–∞–µ–º rate limiter
        limiter = EnhancedRateLimiter(exchange="bybit", enable_cache=True, cache_ttl=60)

        print(f"{Fore.YELLOW}1. –¢–µ—Å—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è...{Style.RESET_ALL}")

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        async def mock_api_call(symbol: str):
            await asyncio.sleep(0.1)
            return {"symbol": symbol, "price": 100.0}

        # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ - –¥–æ–ª–∂–µ–Ω –ø–æ–π—Ç–∏ –≤ API
        cache_key = limiter._get_cache_key("get_price", {"symbol": "BTCUSDT"})
        result1 = await limiter.execute_with_retry(
            mock_api_call, "BTCUSDT", endpoint="get_tickers", cache_key=cache_key
        )
        print(f"   ‚Ä¢ –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤: {result1}")

        # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ - –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏–∑ –∫–µ—à–∞
        result2 = await limiter.execute_with_retry(
            mock_api_call, "BTCUSDT", endpoint="get_tickers", cache_key=cache_key
        )
        print(f"   ‚Ä¢ –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ (–∏–∑ –∫–µ—à–∞): {result2}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = limiter.get_stats()
        print(f"\n{Fore.YELLOW}2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Rate Limiter:{Style.RESET_ALL}")
        for key, value in stats.items():
            print(f"   ‚Ä¢ {key}: {value}")

        if stats["cache_hits"] > 0:
            print(f"\n{Fore.GREEN}‚úÖ EnhancedRateLimiter —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ{Style.RESET_ALL}")
            return True
        else:
            print(f"\n{Fore.YELLOW}‚ö†Ô∏è –ö–µ—à –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è{Style.RESET_ALL}")
            return False

    except Exception as e:
        print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ EnhancedRateLimiter: {e}{Style.RESET_ALL}")
        return False


async def test_signal_deduplication():
    """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤"""
    print(f"\n{Fore.CYAN}{'=' * 60}{Style.RESET_ALL}")
    print(f"{Fore.CYAN}üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤{Style.RESET_ALL}")
    print(f"{Fore.CYAN}{'=' * 60}{Style.RESET_ALL}\n")

    try:
        from database.connections import get_async_db
        from database.models.signal import SignalType
        from database.repositories.signal_repository_fixed import SignalRepositoryFixed

        print(f"{Fore.YELLOW}1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤...{Style.RESET_ALL}")

        async with get_async_db() as session:
            repo = SignalRepositoryFixed(session)

            # –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
            signal_data = {
                "symbol": "TESTUSDT",
                "signal_type": SignalType.LONG.value,
                "strategy_name": "test_strategy",
                "confidence": 0.8,
                "strength": 0.7,
                "exchange": "bybit",
                "timeframe": "15m",
            }

            # –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è
            signal1 = await repo.create_signal(signal_data.copy())
            if signal1:
                print(f"   {Fore.GREEN}‚úì{Style.RESET_ALL} –ü–µ—Ä–≤—ã–π —Å–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω (ID: {signal1.id})")
            else:
                print(f"   {Fore.YELLOW}‚ö†{Style.RESET_ALL} –ü–µ—Ä–≤—ã–π —Å–∏–≥–Ω–∞–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")

            # –í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞)
            signal2 = await repo.create_signal(signal_data.copy())
            if signal2:
                print(
                    f"   {Fore.RED}‚úó{Style.RESET_ALL} –î—É–±–ª–∏—Ä—É—é—â–∏–π —Å–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω (ID: {signal2.id}) - –û–®–ò–ë–ö–ê!"
                )
            else:
                print(f"   {Fore.GREEN}‚úì{Style.RESET_ALL} –î—É–±–ª–∏—Ä—É—é—â–∏–π —Å–∏–≥–Ω–∞–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

            # –¢—Ä–µ—Ç—å—è –ø–æ–ø—ã—Ç–∫–∞ —Å –¥—Ä—É–≥–∏–º —Å–∏–º–≤–æ–ª–æ–º (–¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–π—Ç–∏)
            signal_data["symbol"] = "TESTUSDT2"
            signal3 = await repo.create_signal(signal_data.copy())
            if signal3:
                print(
                    f"   {Fore.GREEN}‚úì{Style.RESET_ALL} –°–∏–≥–Ω–∞–ª –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ —Å–æ–∑–¥–∞–Ω (ID: {signal3.id})"
                )
            else:
                print(
                    f"   {Fore.RED}‚úó{Style.RESET_ALL} –°–∏–≥–Ω–∞–ª –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω - –û–®–ò–ë–ö–ê!"
                )

            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            print(f"\n{Fore.YELLOW}2. –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤...{Style.RESET_ALL}")
            deleted = await repo.cleanup_old_signals(hours=0)  # –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–ª—è —Ç–µ—Å—Ç–∞
            print(f"   ‚Ä¢ –£–¥–∞–ª–µ–Ω–æ {deleted} —Å—Ç–∞—Ä—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")

            await session.commit()

        print(f"\n{Fore.GREEN}‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ{Style.RESET_ALL}")
        return True

    except Exception as e:
        print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏: {e}{Style.RESET_ALL}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print(f"{Fore.CYAN}{'=' * 60}{Style.RESET_ALL}")
    print(f"{Fore.CYAN}üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ô BOT_AI_V3{Style.RESET_ALL}")
    print(f"{Fore.CYAN}{'=' * 60}{Style.RESET_ALL}")

    results = []

    # –¢–µ—Å—Ç 1: SmartDataManager
    result = await test_smart_data_manager()
    results.append(("SmartDataManager", result))

    # –¢–µ—Å—Ç 2: EnhancedRateLimiter
    result = await test_enhanced_rate_limiter()
    results.append(("EnhancedRateLimiter", result))

    # –¢–µ—Å—Ç 3: Signal Deduplication
    result = await test_signal_deduplication()
    results.append(("Signal Deduplication", result))

    # –ò—Ç–æ–≥–∏
    print(f"\n{Fore.CYAN}{'=' * 60}{Style.RESET_ALL}")
    print(f"{Fore.CYAN}üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø{Style.RESET_ALL}")
    print(f"{Fore.CYAN}{'=' * 60}{Style.RESET_ALL}\n")

    all_passed = True
    for name, passed in results:
        if passed:
            print(f"   {Fore.GREEN}‚úÖ{Style.RESET_ALL} {name}")
        else:
            print(f"   {Fore.RED}‚ùå{Style.RESET_ALL} {name}")
            all_passed = False

    if all_passed:
        print(f"\n{Fore.GREEN}üéâ –í—Å–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!{Style.RESET_ALL}")
        print(f"\n{Fore.YELLOW}üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:{Style.RESET_ALL}")
        print("1. –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è SmartDataManager")
        print("2. –ó–∞–º–µ–Ω–∏—Ç—å SignalRepository –Ω–∞ SignalRepositoryFixed")
        print("3. –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å EnhancedRateLimiter –≤ Bybit –∫–ª–∏–µ–Ω—Ç")
        print(
            f"4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É: {Fore.CYAN}./stop_all.sh && ./start_with_logs.sh{Style.RESET_ALL}"
        )
    else:
        print(f"\n{Fore.RED}‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏{Style.RESET_ALL}")

    return all_passed


if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        exit(0 if success else 1)
    except KeyboardInterrupt:
        print(f"\n{Fore.YELLOW}‚ö†Ô∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω{Style.RESET_ALL}")
        exit(0)
    except Exception as e:
        print(f"\n{Fore.RED}‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}{Style.RESET_ALL}")
        exit(1)
