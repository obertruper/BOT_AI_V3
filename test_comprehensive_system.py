#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ BOT_AI_V3
"""

import asyncio
import logging
import sys
import time
from datetime import datetime
from decimal import Decimal

import psutil

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


class SystemTester:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""

    def __init__(self):
        self.test_results = {}
        self.start_time = time.time()

    async def test_worker_coordinator(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤"""
        logger.info("\n" + "=" * 60)
        logger.info("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï WORKER COORDINATOR")
        logger.info("=" * 60)

        try:
            from core.system.worker_coordinator import worker_coordinator

            # 1. –ó–∞–ø—É—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
            await worker_coordinator.start()
            logger.info("‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω")

            # 2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
            worker1_id = await worker_coordinator.register_worker(
                worker_type="ml_manager", metadata={"version": "1.0", "gpu": "RTX 5090"}
            )
            assert worker1_id is not None, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–π –≤–æ—Ä–∫–µ—Ä"
            logger.info(f"‚úÖ –ü–µ—Ä–≤—ã–π –≤–æ—Ä–∫–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {worker1_id}")

            # 3. –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
            worker2_id = await worker_coordinator.register_worker(
                worker_type="ml_manager", metadata={"version": "1.0", "gpu": "RTX 5090"}
            )
            assert worker2_id is None, "–î—É–±–ª–∏—Ä—É—é—â–∏–π –≤–æ—Ä–∫–µ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"
            logger.info("‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏–π –≤–æ—Ä–∫–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω")

            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ heartbeat
            success = await worker_coordinator.heartbeat(
                worker1_id, status="running", active_tasks=5
            )
            assert success, "Heartbeat –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
            logger.info("‚úÖ Heartbeat —Ä–∞–±–æ—Ç–∞–µ—Ç")

            # 5. –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
            task_id = await worker_coordinator.assign_task("test_task_1", "ml_manager")
            assert task_id == worker1_id, "–ó–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∞"
            logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≤–æ—Ä–∫–µ—Ä—É: {task_id}")

            # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats = worker_coordinator.get_worker_stats()
            assert stats["total_workers"] == 1, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 –≤–æ—Ä–∫–µ—Ä"
            assert stats["active_tasks"] == 1, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å 1 –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞"
            logger.info(
                f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: {stats['total_workers']} –≤–æ—Ä–∫–µ—Ä–æ–≤, {stats['active_tasks']} –∑–∞–¥–∞—á"
            )

            # 7. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
            await worker_coordinator.complete_task("test_task_1", worker1_id)
            logger.info("‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

            # 8. –°–Ω—è—Ç–∏–µ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            await worker_coordinator.unregister_worker(worker1_id)
            logger.info("‚úÖ –í–æ—Ä–∫–µ—Ä —Å–Ω—è—Ç —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

            # 9. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
            await worker_coordinator.stop()
            logger.info("‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

            return True, "–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã"

        except AssertionError as e:
            return False, f"Assertion failed: {e}"
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞: {e}"

    async def test_signal_deduplicator(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ç–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        logger.info("\n" + "=" * 60)
        logger.info("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï SIGNAL DEDUPLICATOR")
        logger.info("=" * 60)

        try:
            from core.system.signal_deduplicator import signal_deduplicator

            # 1. –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            signal1 = {
                "symbol": "BTCUSDT",
                "direction": "BUY",
                "strategy": "ml_strategy",
                "timestamp": datetime.now(),
                "signal_strength": 0.85,
                "price_level": 50000.0,
            }

            signal2 = {
                "symbol": "ETHUSDT",
                "direction": "SELL",
                "strategy": "ml_strategy",
                "timestamp": datetime.now(),
                "signal_strength": 0.75,
                "price_level": 3000.0,
            }

            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
            is_unique1 = await signal_deduplicator.check_and_register_signal(signal1)
            assert is_unique1, "–ü–µ—Ä–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º"
            logger.info("‚úÖ –ü–µ—Ä–≤—ã–π —Å–∏–≥–Ω–∞–ª BTCUSDT —É–Ω–∏–∫–∞–ª–µ–Ω")

            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
            is_duplicate1 = await signal_deduplicator.check_and_register_signal(signal1)
            assert not is_duplicate1, "–ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Å–∏–≥–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–º"
            logger.info("‚úÖ –î—É–±–ª–∏–∫–∞—Ç BTCUSDT –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")

            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –≤—Ç–æ—Ä–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
            is_unique2 = await signal_deduplicator.check_and_register_signal(signal2)
            assert is_unique2, "–í—Ç–æ—Ä–æ–π —Å–∏–≥–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º"
            logger.info("‚úÖ –í—Ç–æ—Ä–æ–π —Å–∏–≥–Ω–∞–ª ETHUSDT —É–Ω–∏–∫–∞–ª–µ–Ω")

            # 5. –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            recent = await signal_deduplicator.get_recent_signals(minutes=1)
            assert len(recent) >= 2, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–≥–Ω–∞–ª–∞"
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(recent)} –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")

            # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats = signal_deduplicator.get_stats()
            assert stats["total_checks"] >= 3, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 3 –ø—Ä–æ–≤–µ—Ä–∫–∏"
            assert stats["duplicates_found"] >= 1, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 1 –¥—É–±–ª–∏–∫–∞—Ç"
            assert stats["unique_signals"] >= 2, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–∞"

            logger.info(
                f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['total_checks']} –ø—Ä–æ–≤–µ—Ä–æ–∫, "
                f"{stats['duplicates_found']} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤, "
                f"{stats['unique_signals']} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö"
            )

            # 7. –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            signal_deduplicator.reset_stats()
            new_stats = signal_deduplicator.get_stats()
            assert new_stats["total_checks"] == 0, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–±—Ä–æ—à–µ–Ω–∞"
            logger.info("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞")

            return True, "–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã"

        except AssertionError as e:
            return False, f"Assertion failed: {e}"
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞: {e}"

    async def test_rate_limiter(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–µ—Ä–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏"""
        logger.info("\n" + "=" * 60)
        logger.info("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï RATE LIMITER")
        logger.info("=" * 60)

        try:
            from core.system.rate_limiter import rate_limiter

            exchange = "bybit"

            # 1. –¢–µ—Å—Ç –æ–±—ã—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            delays = []
            for i in range(5):
                start = time.time()
                wait_time = await rate_limiter.acquire(exchange, "market_data")
                elapsed = time.time() - start
                delays.append(wait_time)
                logger.info(f"  –ó–∞–ø—Ä–æ—Å {i + 1}: –∑–∞–¥–µ—Ä–∂–∫–∞ {wait_time:.3f}—Å, –≤—Ä–µ–º—è {elapsed:.3f}—Å")

            assert all(d >= 0 for d in delays), "–í—Å–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏"
            logger.info("‚úÖ –û–±—ã—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

            # 2. –¢–µ—Å—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
            logger.info("\n  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞...")
            for i in range(15):
                wait_time = await rate_limiter.acquire(exchange, "order", weight=2)
                if wait_time > 0:
                    logger.info(
                        f"‚úÖ Rate limit —Å—Ä–∞–±–æ—Ç–∞–ª –Ω–∞ –∑–∞–ø—Ä–æ—Å–µ {i + 1}, –∑–∞–¥–µ—Ä–∂–∫–∞: {wait_time:.2f}—Å"
                    )
                    break

            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats = rate_limiter.get_stats(exchange)
            total_requests = sum(s["total_requests"] for s in stats.values())
            blocked_requests = sum(s["blocked_requests"] for s in stats.values())

            assert total_requests > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã"
            logger.info(
                f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {total_requests} –∑–∞–ø—Ä–æ—Å–æ–≤, {blocked_requests} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ"
            )

            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            usage = await rate_limiter.get_current_usage(exchange)
            assert "global" in usage, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
            logger.info(f"‚úÖ –¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –¥–ª—è {len(usage)} endpoint'–æ–≤")

            # 5. –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            await rate_limiter.cleanup_old_data(1)
            logger.info("‚úÖ –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")

            # 6. –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            rate_limiter.reset_stats(exchange)
            new_stats = rate_limiter.get_stats(exchange)
            assert len(new_stats) == 0 or all(
                s["total_requests"] == 0 for s in new_stats.values()
            ), "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–±—Ä–æ—à–µ–Ω–∞"
            logger.info("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞")

            return True, "–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã"

        except AssertionError as e:
            return False, f"Assertion failed: {e}"
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞: {e}"

    async def test_balance_manager(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–ª–∞–Ω—Å–æ–≤"""
        logger.info("\n" + "=" * 60)
        logger.info("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BALANCE MANAGER")
        logger.info("=" * 60)

        try:
            from core.system.balance_manager import balance_manager

            # 1. –ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            await balance_manager.start()
            logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–ª–∞–Ω—Å–æ–≤ –∑–∞–ø—É—â–µ–Ω")

            # 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
            success = await balance_manager.update_balance(
                exchange="bybit",
                symbol="USDT",
                total=Decimal("10000.0"),
                available=Decimal("9000.0"),
                locked=Decimal("1000.0"),
            )
            assert success, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
            logger.info("‚úÖ –ë–∞–ª–∞–Ω—Å USDT –æ–±–Ω–æ–≤–ª–µ–Ω: 10000 total, 9000 available")

            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–∞–ª–æ–π —Å—É–º–º—ã
            available, error = await balance_manager.check_balance_availability(
                exchange="bybit", symbol="USDT", amount=Decimal("100.0")
            )
            assert available, f"100 USDT –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã: {error}"
            logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–ª–æ–π —Å—É–º–º—ã: 100 USDT –¥–æ—Å—Ç—É–ø–Ω—ã")

            # 4. –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
            reservation_id = await balance_manager.reserve_balance(
                exchange="bybit",
                symbol="USDT",
                amount=Decimal("500.0"),
                purpose="test_order",
                metadata={"test": True},
            )
            assert reservation_id is not None, "–†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
            logger.info(f"‚úÖ –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ 500 USDT, ID: {reservation_id}")

            # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
            available2, error2 = await balance_manager.check_balance_availability(
                exchange="bybit",
                symbol="USDT",
                amount=Decimal("8600.0"),  # 9000 - 500 + –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å
            )
            assert not available2, "8600 USDT –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è 500"
            logger.info("‚úÖ –ü–æ—Å–ª–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è 500 USDT, –ø—Ä–æ–≤–µ—Ä–∫–∞ 8600 USDT –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")

            # 6. –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
            released = await balance_manager.release_reservation(reservation_id)
            assert released, "–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
            logger.info("‚úÖ –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ")

            # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è
            available3, error3 = await balance_manager.check_balance_availability(
                exchange="bybit", symbol="USDT", amount=Decimal("8500.0")
            )
            assert available3, "8500 USDT –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è"
            logger.info("‚úÖ –ü–æ—Å–ª–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã 8500 USDT")

            # 8. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏
            summary = await balance_manager.get_balance_summary()
            assert summary["total_exchanges"] >= 1, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 1 –±–∏—Ä–∂–∞"
            assert summary["total_symbols"] >= 1, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 1 —Å–∏–º–≤–æ–ª"
            logger.info(
                f"‚úÖ –°–≤–æ–¥–∫–∞: {summary['total_exchanges']} –±–∏—Ä–∂, "
                f"{summary['total_symbols']} —Å–∏–º–≤–æ–ª–æ–≤, "
                f"{summary['total_reservations']} —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–π"
            )

            # 9. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            await balance_manager.stop()
            logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–ª–∞–Ω—Å–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

            return True, "–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã"

        except AssertionError as e:
            return False, f"Assertion failed: {e}"
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞: {e}"

    async def test_process_monitor(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        logger.info("\n" + "=" * 60)
        logger.info("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PROCESS MONITOR")
        logger.info("=" * 60)

        try:
            from core.system.process_monitor import process_monitor

            # 1. –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞
            await process_monitor.start()
            logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∑–∞–ø—É—â–µ–Ω")

            # 2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            success = await process_monitor.register_component(
                "test_component", metadata={"version": "1.0", "type": "test"}
            )
            assert success, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ–π"
            logger.info("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

            # 3. –û—Ç–ø—Ä–∞–≤–∫–∞ heartbeat
            hb_success = await process_monitor.heartbeat(
                "test_component", status="healthy", active_tasks=3, metadata={"processed": 100}
            )
            assert hb_success, "Heartbeat –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
            logger.info("‚úÖ Heartbeat –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

            # 4. –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–∏
            await process_monitor.report_warning("test_component", "–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
            logger.info("‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

            # 5. –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await process_monitor.report_error(
                "test_component", "–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞", is_critical=False
            )
            logger.info("‚úÖ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")

            # 6. –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            health = process_monitor.get_component_health("test_component")
            assert "component_name" in health, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ"
            assert health["error_count"] >= 1, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 1 –æ—à–∏–±–∫–∞"
            assert health["warning_count"] >= 1, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 1 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"
            logger.info(
                f"‚úÖ –ó–¥–æ—Ä–æ–≤—å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: —Å—Ç–∞—Ç—É—Å={health['status']}, "
                f"–æ—à–∏–±–æ–∫={health['error_count']}, "
                f"–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π={health['warning_count']}"
            )

            # 7. –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            await asyncio.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
            metrics = process_monitor.get_system_metrics(1)
            assert len(metrics) > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"
            latest = metrics[-1] if metrics else {}
            logger.info(
                f"‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏: CPU={latest.get('cpu_percent', 0):.1f}%, "
                f"Memory={latest.get('memory_percent', 0):.1f}%"
            )

            # 8. –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
            alerts = process_monitor.get_alerts(active_only=True)
            assert len(alerts) >= 0, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤"
            logger.info(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤: {len(alerts)}")

            # 9. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = process_monitor.get_stats()
            assert stats["total_components"] >= 1, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 1 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç"
            assert stats["total_heartbeats"] >= 1, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 1 heartbeat"
            logger.info(
                f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['total_components']} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, "
                f"{stats['total_heartbeats']} heartbeats, "
                f"{stats['total_alerts']} –∞–ª–µ—Ä—Ç–æ–≤"
            )

            # 10. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞
            await process_monitor.stop()
            logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

            return True, "–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã"

        except AssertionError as e:
            return False, f"Assertion failed: {e}"
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞: {e}"

    async def test_integration(self):
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤–º–µ—Å—Ç–µ"""
        logger.info("\n" + "=" * 60)
        logger.info("üß™ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
        logger.info("=" * 60)

        try:
            from core.system.balance_manager import balance_manager
            from core.system.process_monitor import process_monitor
            from core.system.rate_limiter import rate_limiter
            from core.system.signal_deduplicator import signal_deduplicator
            from core.system.worker_coordinator import worker_coordinator

            # 1. –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            logger.info("\nüìå –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
            await worker_coordinator.start()
            await balance_manager.start()
            await process_monitor.start()
            logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã")

            # 2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ—Ä–∫–µ—Ä–∞ –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            worker_id = await worker_coordinator.register_worker(
                worker_type="trading_engine", metadata={"test": True}
            )
            await process_monitor.register_component("trading_engine")
            logger.info("‚úÖ Trading Engine –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

            # 3. –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
            logger.info("\nüìå –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞...")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
            test_signal = {
                "symbol": "BTCUSDT",
                "direction": "BUY",
                "strategy": "integration_test",
                "timestamp": datetime.now(),
                "signal_strength": 0.9,
                "price_level": 51000.0,
            }

            is_unique = await signal_deduplicator.check_and_register_signal(test_signal)
            logger.info(f"  ‚Ä¢ –°–∏–≥–Ω–∞–ª {'—É–Ω–∏–∫–∞–ª–µ–Ω' if is_unique else '–¥—É–±–ª–∏–∫–∞—Ç'}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
            wait_time = await rate_limiter.acquire("bybit", "order")
            logger.info(f"  ‚Ä¢ Rate limit –∑–∞–¥–µ—Ä–∂–∫–∞: {wait_time:.3f}—Å")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
            await balance_manager.update_balance(
                exchange="bybit",
                symbol="USDT",
                total=Decimal("5000"),
                available=Decimal("4500"),
                locked=Decimal("500"),
            )

            can_trade, error = await balance_manager.check_balance_availability(
                exchange="bybit", symbol="USDT", amount=Decimal("100")
            )
            logger.info(
                f"  ‚Ä¢ –ë–∞–ª–∞–Ω—Å –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: {'–¥–æ—Å—Ç—É–ø–µ–Ω' if can_trade else f'–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ({error})'}"
            )

            # Heartbeat –æ—Ç –≤–æ—Ä–∫–µ—Ä–∞
            await worker_coordinator.heartbeat(worker_id, status="running", active_tasks=1)
            await process_monitor.heartbeat("trading_engine", status="healthy", active_tasks=1)
            logger.info("  ‚Ä¢ Heartbeats –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")

            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            logger.info("\nüìå –°–±–æ—Ä –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")

            worker_stats = worker_coordinator.get_worker_stats()
            logger.info(f"  ‚Ä¢ –í–æ—Ä–∫–µ—Ä—ã: {worker_stats['total_workers']} –∞–∫—Ç–∏–≤–Ω—ã—Ö")

            dedup_stats = signal_deduplicator.get_stats()
            logger.info(
                f"  ‚Ä¢ –°–∏–≥–Ω–∞–ª—ã: {dedup_stats['total_checks']} –ø—Ä–æ–≤–µ—Ä–æ–∫, "
                f"{dedup_stats['unique_signals']} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö"
            )

            balance_summary = await balance_manager.get_balance_summary()
            logger.info(
                f"  ‚Ä¢ –ë–∞–ª–∞–Ω—Å—ã: {balance_summary['total_exchanges']} –±–∏—Ä–∂, "
                f"{balance_summary['total_symbols']} —Å–∏–º–≤–æ–ª–æ–≤"
            )

            monitor_stats = process_monitor.get_stats()
            logger.info(
                f"  ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {monitor_stats['total_components']} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, "
                f"{monitor_stats['healthy_components']} –∑–¥–æ—Ä–æ–≤—ã—Ö"
            )

            # 5. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            logger.info("\nüìå –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
            await worker_coordinator.unregister_worker(worker_id)
            await worker_coordinator.stop()
            await balance_manager.stop()
            await process_monitor.stop()
            logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

            return True, "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω"

        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}"

    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        logger.info("\n" + "=" * 80)
        logger.info("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–ù–´–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í BOT_AI_V3")
        logger.info("=" * 80)

        tests = [
            ("WorkerCoordinator", self.test_worker_coordinator),
            ("SignalDeduplicator", self.test_signal_deduplicator),
            ("RateLimiter", self.test_rate_limiter),
            ("BalanceManager", self.test_balance_manager),
            ("ProcessMonitor", self.test_process_monitor),
            ("Integration", self.test_integration),
        ]

        for test_name, test_func in tests:
            try:
                success, message = await test_func()
                self.test_results[test_name] = {
                    "success": success,
                    "message": message,
                    "duration": time.time() - self.start_time,
                }

                if success:
                    logger.info(f"\n‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù - {message}")
                else:
                    logger.error(f"\n‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù - {message}")

            except Exception as e:
                self.test_results[test_name] = {
                    "success": False,
                    "message": str(e),
                    "duration": time.time() - self.start_time,
                }
                logger.error(f"\n‚ùå {test_name}: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê - {e}")

        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.print_summary()

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return all(r["success"] for r in self.test_results.values())

    def print_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        logger.info("\n" + "=" * 80)
        logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        logger.info("=" * 80)

        passed = sum(1 for r in self.test_results.values() if r["success"])
        failed = len(self.test_results) - passed
        total_duration = time.time() - self.start_time

        logger.info("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        logger.info(f"  ‚Ä¢ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(self.test_results)}")
        logger.info(f"  ‚Ä¢ ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
        logger.info(f"  ‚Ä¢ ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
        logger.info(f"  ‚Ä¢ ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_duration:.2f} —Å–µ–∫")

        logger.info("\nüìã –î–µ—Ç–∞–ª–∏ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º:")
        for name, result in self.test_results.items():
            status = "‚úÖ PASS" if result["success"] else "‚ùå FAIL"
            logger.info(f"  {status} | {name:20} | {result['message'][:50]}")

        # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logger.info("\nüíª –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        logger.info(f"  ‚Ä¢ CPU: {psutil.cpu_percent()}%")
        logger.info(f"  ‚Ä¢ –ü–∞–º—è—Ç—å: {psutil.virtual_memory().percent}%")
        logger.info(f"  ‚Ä¢ Python: {sys.version.split()[0]}")

        if passed == len(self.test_results):
            logger.info("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        else:
            logger.warning(f"\n‚ö†Ô∏è  {failed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞.")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = SystemTester()
    success = await tester.run_all_tests()

    if success:
        exit(0)
    else:
        exit(1)


if __name__ == "__main__":
    asyncio.run(main())
