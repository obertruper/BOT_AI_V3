#!/usr/bin/env python3
"""
–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã ML —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import asyncio
import sys
from pathlib import Path
import os
from datetime import datetime

from colorama import Fore, Style, init
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.graph_objects as go
import plotly.subplots as sp
from plotly.offline import plot
import numpy as np

sys.path.append(str(Path(__file__).parent))

import pandas as pd

from database.connections.postgres import AsyncPGPool
from ml.ml_manager import MLManager

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
init()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ matplotlib –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ –¥–∏—Å–ø–ª–µ—è
plt.style.use('dark_background')
plt.rcParams['figure.figsize'] = (12, 8)
plt.rcParams['font.size'] = 10

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
CHARTS_DIR = Path("data/charts")
CHARTS_DIR.mkdir(exist_ok=True)


def print_header(text):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫."""
    print(f"\n{Fore.CYAN}{'=' * 60}{Style.RESET_ALL}")
    print(f"{Fore.CYAN}{text:^60}{Style.RESET_ALL}")
    print(f"{Fore.CYAN}{'=' * 60}{Style.RESET_ALL}\n")


def print_signal(signal_type, confidence, strength):
    """–ü–µ—á–∞—Ç–∞–µ—Ç —Å–∏–≥–Ω–∞–ª —Å —Ü–≤–µ—Ç–æ–º."""
    colors = {"LONG": Fore.GREEN, "SHORT": Fore.RED, "NEUTRAL": Fore.YELLOW}
    color = colors.get(signal_type, Fore.WHITE)

    print(f"{color}Signal: {signal_type}{Style.RESET_ALL}")
    print(f"Confidence: {confidence:.1%}")
    print(f"Strength: {strength:.3f}")


def visualize_directions(directions, probabilities):
    """–í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º."""
    timeframes = ["15m", "1h", "4h", "12h"]
    symbols = {0: "üî¥ SHORT", 1: "üü° NEUTRAL", 2: "üü¢ LONG"}

    print("\n–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º:")
    print("-" * 50)

    for i, (tf, dir_idx, probs) in enumerate(
        zip(timeframes, directions, probabilities, strict=False)
    ):
        symbol = symbols[dir_idx]

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
        bar_width = 30
        bars = []
        for j, prob in enumerate(probs):
            bar_len = int(prob * bar_width)
            if j == 0:  # SHORT
                bars.append(f"{Fore.RED}{'‚ñà' * bar_len}{Style.RESET_ALL}")
            elif j == 1:  # NEUTRAL
                bars.append(f"{Fore.YELLOW}{'‚ñà' * bar_len}{Style.RESET_ALL}")
            else:  # LONG
                bars.append(f"{Fore.GREEN}{'‚ñà' * bar_len}{Style.RESET_ALL}")

        print(f"{tf:>4}: {symbol} | S:{probs[0]:.2f} N:{probs[1]:.2f} L:{probs[2]:.2f}")


def calculate_weighted_decision(directions, weights):
    """–í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è."""
    print("\n–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è:")
    print("-" * 50)

    weighted_sum = 0
    for i, (d, w) in enumerate(zip(directions, weights, strict=False)):
        contribution = d * w
        weighted_sum += contribution
        print(f"–¢–∞–π–º—Ñ—Ä–µ–π–º {i + 1}: {d} √ó {w:.1f} = {contribution:.2f}")

    print(f"\n–í–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞: {weighted_sum:.2f}")

    if weighted_sum < 0.5:
        decision = "SHORT"
        color = Fore.RED
    elif weighted_sum > 1.5:
        decision = "LONG"
        color = Fore.GREEN
    else:
        decision = "NEUTRAL"
        color = Fore.YELLOW

    print(f"–†–µ—à–µ–Ω–∏–µ: {color}{decision}{Style.RESET_ALL}")

    return weighted_sum, decision


def create_predictions_chart(symbol, prediction, df):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π —Å –ø–æ–º–æ—â—å—é Plotly."""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    pred_details = prediction.get("predictions", {})
    timeframes = ["15m", "1h", "4h", "12h"]
    
    # –°–æ–∑–¥–∞–µ–º subplots
    fig = sp.make_subplots(
        rows=3, cols=2,
        subplot_titles=(
            f'{symbol} - –¶–µ–Ω–∞ –∏ –°–∏–≥–Ω–∞–ª—ã',
            '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º',
            '–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏',
            'Stop Loss / Take Profit',
            '–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è',
            '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∏'
        ),
        specs=[
            [{"secondary_y": True}, {"type": "bar"}],
            [{"type": "bar"}, {"type": "scatter"}],
            [{"type": "bar"}, {"type": "indicator"}]
        ]
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –¶–µ–Ω–∞ –∏ —Å–∏–≥–Ω–∞–ª—ã
    recent_data = df.tail(50)
    fig.add_trace(
        go.Candlestick(
            x=recent_data.index,
            open=recent_data['open'],
            high=recent_data['high'],
            low=recent_data['low'],
            close=recent_data['close'],
            name="OHLC"
        ),
        row=1, col=1
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
    if "direction_probabilities" in pred_details:
        probs = pred_details["direction_probabilities"]
        for i, (tf, prob_dist) in enumerate(zip(timeframes, probs)):
            fig.add_trace(
                go.Bar(
                    x=['SHORT', 'NEUTRAL', 'LONG'],
                    y=prob_dist,
                    name=f'{tf}',
                    text=[f'{p:.2f}' for p in prob_dist],
                    textposition='auto',
                ),
                row=1, col=2
            )
    
    # –ì—Ä–∞—Ñ–∏–∫ 3: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    returns_data = [
        pred_details.get('returns_15m', 0),
        pred_details.get('returns_1h', 0),
        pred_details.get('returns_4h', 0),
        pred_details.get('returns_12h', 0)
    ]
    colors = ['red' if r < 0 else 'green' for r in returns_data]
    
    fig.add_trace(
        go.Bar(
            x=timeframes,
            y=returns_data,
            name='–î–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏',
            marker_color=colors,
            text=[f'{r:.4f}' for r in returns_data],
            textposition='auto'
        ),
        row=2, col=1
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ 4: –£—Ä–æ–≤–Ω–∏ SL/TP
    current_price = df['close'].iloc[-1]
    if prediction.get("stop_loss_pct") and prediction.get("take_profit_pct"):
        signal_type = prediction["signal_type"]
        
        if signal_type == "LONG":
            sl_price = current_price * (1 - prediction["stop_loss_pct"])
            tp_price = current_price * (1 + prediction["take_profit_pct"])
        else:
            sl_price = current_price * (1 + prediction["stop_loss_pct"]) 
            tp_price = current_price * (1 - prediction["take_profit_pct"])
        
        fig.add_trace(
            go.Scatter(
                x=['Stop Loss', 'Current', 'Take Profit'],
                y=[sl_price, current_price, tp_price],
                mode='markers+lines+text',
                text=[f'${sl_price:.2f}', f'${current_price:.2f}', f'${tp_price:.2f}'],
                textposition="top center",
                name='Levels',
                line=dict(color='orange', width=3),
                marker=dict(size=12)
            ),
            row=2, col=2
        )
    
    # –ì—Ä–∞—Ñ–∏–∫ 5: –í–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
    if "directions_by_timeframe" in pred_details:
        directions = pred_details["directions_by_timeframe"]
        weights = [0.4, 0.3, 0.2, 0.1]
        
        weighted_values = [d * w for d, w in zip(directions, weights)]
        
        fig.add_trace(
            go.Bar(
                x=timeframes,
                y=weighted_values,
                name='–í–∑–≤–µ—à–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è',
                text=[f'{v:.3f}' for v in weighted_values],
                textposition='auto'
            ),
            row=3, col=1
        )
    
    # –ì—Ä–∞—Ñ–∏–∫ 6: –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∏
    confidence = prediction.get("confidence", 0)
    fig.add_trace(
        go.Indicator(
            mode="gauge+number",
            value=confidence * 100,
            title={'text': f"–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏—è<br>{prediction.get('signal_type', 'NEUTRAL')}"},
            gauge={
                'axis': {'range': [None, 100]},
                'bar': {'color': "green" if prediction.get('signal_type') == 'LONG' else 
                              "red" if prediction.get('signal_type') == 'SHORT' else "yellow"},
                'steps': [
                    {'range': [0, 50], 'color': "lightgray"},
                    {'range': [50, 80], 'color': "gray"}],
                'threshold': {
                    'line': {'color': "red", 'width': 4},
                    'thickness': 0.75,
                    'value': 80}
            }
        ),
        row=3, col=2
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º layout
    fig.update_layout(
        title=f'ML –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ - {symbol} - {timestamp}',
        height=1000,
        showlegend=True,
        template='plotly_dark'
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    filename = CHARTS_DIR / f'ml_predictions_{symbol}_{timestamp}.html'
    plot(fig, filename=str(filename), auto_open=False)
    
    print(f"üìä –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
    return filename


def create_features_heatmap(symbol, features_data, timestamp):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤."""
    if not features_data or len(features_data) == 0:
        print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
        return None
        
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if isinstance(features_data, list) and features_data:
        if isinstance(features_data[0], dict):
            # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å 'name' –∏ 'value'
            names = [f.get('name', f'feature_{i}') for i, f in enumerate(features_data)]
            values = [float(f.get('value', 0)) for f in features_data]
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π
            names = [f'feature_{i}' for i in range(len(features_data))]
            values = [float(v) for v in features_data]
    elif isinstance(features_data, pd.DataFrame):
        # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ DataFrame
        names = features_data.index.tolist()
        values = features_data.values.flatten().tolist()
    else:
        print(f"‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {type(features_data)}")
        return None
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É matplotlib —Å —Ç–µ–º–Ω—ã–º —Ñ–æ–Ω–æ–º
    plt.style.use('dark_background')
    fig, ax = plt.subplots(figsize=(20, 8))
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ø-50 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    max_features = 50
    if len(values) > max_features:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –∏ –±–µ—Ä–µ–º —Ç–æ–ø-50
        sorted_indices = sorted(range(len(values)), key=lambda i: abs(values[i]), reverse=True)[:max_features]
        display_names = [names[i] for i in sorted_indices]
        display_values = [values[i] for i in sorted_indices]
    else:
        display_names = names
        display_values = values
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ numpy array –¥–ª—è heatmap
    values_array = np.array(display_values).reshape(1, -1)
    
    # –°–æ–∑–¥–∞–µ–º heatmap
    sns.heatmap(
        values_array,
        xticklabels=display_names,
        yticklabels=['–ó–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤'],
        cmap='RdYlBu_r',
        center=0,
        annot=False,
        fmt='.3f',
        cbar_kws={'label': '–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ'},
        ax=ax
    )
    
    plt.title(f'–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —Ç–æ–ø-{len(display_values)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –º–æ–¥–µ–ª–∏ - {symbol} - {timestamp}', 
              fontsize=16, color='white', pad=20)
    plt.xlabel('–ü—Ä–∏–∑–Ω–∞–∫–∏ –º–æ–¥–µ–ª–∏', fontsize=12, color='white')
    plt.ylabel('', fontsize=12)
    
    # –£–ª—É—á—à–∞–µ–º —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –º–µ—Ç–æ–∫
    ax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha='right', fontsize=8)
    ax.set_yticklabels(ax.get_yticklabels(), rotation=0, fontsize=10)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–∫—É –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    ax.grid(False)
    
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å —Ç–µ–º–Ω—ã–º —Ñ–æ–Ω–æ–º
    filename = CHARTS_DIR / f'features_heatmap_{symbol}_{timestamp}.png'
    plt.savefig(filename, dpi=150, bbox_inches='tight', 
                facecolor='#0a0a0a', edgecolor='none')
    plt.close()
    
    print(f"üî• –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}")
    return filename


def create_market_data_analysis(symbol, df, timestamp):
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    
    fig, axes = plt.subplots(2, 2, figsize=(16, 12))
    fig.patch.set_facecolor('black')
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: OHLC —Å–≤–µ—á–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –ø–µ—Ä–∏–æ–¥–æ–≤)
    recent_data = df.tail(100).copy()
    recent_data['MA20'] = recent_data['close'].rolling(20).mean()
    recent_data['MA50'] = recent_data['close'].rolling(50).mean()
    
    axes[0,0].plot(recent_data.index, recent_data['close'], color='white', linewidth=1.5, label='Close')
    axes[0,0].plot(recent_data.index, recent_data['MA20'], color='orange', linewidth=1, label='MA20')
    axes[0,0].plot(recent_data.index, recent_data['MA50'], color='red', linewidth=1, label='MA50')
    axes[0,0].set_title(f'{symbol} - –¶–µ–Ω–∞ –∏ —Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ', color='white', fontsize=12)
    axes[0,0].legend()
    axes[0,0].grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤
    axes[0,1].bar(recent_data.index, recent_data['volume'], color='cyan', alpha=0.7)
    axes[0,1].set_title(f'{symbol} - –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤', color='white', fontsize=12)
    axes[0,1].grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 3: –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    recent_data['returns'] = recent_data['close'].pct_change()
    recent_data['volatility'] = recent_data['returns'].rolling(20).std()
    
    axes[1,0].plot(recent_data.index, recent_data['volatility'], color='yellow', linewidth=1.5)
    axes[1,0].set_title(f'{symbol} - –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (20-–ø–µ—Ä–∏–æ–¥)', color='white', fontsize=12)
    axes[1,0].grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 4: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π
    returns_clean = recent_data['returns'].dropna()
    axes[1,1].hist(returns_clean, bins=30, color='green', alpha=0.7, edgecolor='white')
    axes[1,1].set_title(f'{symbol} - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π', color='white', fontsize=12)
    axes[1,1].axvline(returns_clean.mean(), color='red', linestyle='--', 
                     label=f'–°—Ä–µ–¥–Ω–µ–µ: {returns_clean.mean():.4f}')
    axes[1,1].legend()
    axes[1,1].grid(True, alpha=0.3)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—â–µ–≥–æ –≤–∏–¥–∞
    for ax in axes.flat:
        ax.set_facecolor('black')
        ax.tick_params(colors='white')
        for spine in ax.spines.values():
            spine.set_color('white')
    
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    filename = CHARTS_DIR / f'market_analysis_{symbol}_{timestamp}.png'
    plt.savefig(filename, dpi=150, bbox_inches='tight',
                facecolor='black', edgecolor='black')
    plt.close()
    
    print(f"üìà –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
    return filename


async def visualize_ml_system():
    """–í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É ML —Å–∏—Å—Ç–µ–º—ã."""

    print_header("–í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø ML –°–ò–°–¢–ï–ú–´ –û–¶–ï–ù–ö–ò")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    config = {"ml": {"model": {"device": "cuda"}, "model_directory": "models/saved"}}

    ml_manager = MLManager(config)
    await ml_manager.initialize()

    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    symbols = ["BTCUSDT", "ETHUSDT", "SOLUSDT"]

    for symbol in symbols:
        print_header(f"–ê–Ω–∞–ª–∏–∑ {symbol}")

        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        query = f"""
        SELECT * FROM raw_market_data
        WHERE symbol = '{symbol}'
        ORDER BY datetime DESC
        LIMIT 100
        """

        raw_data = await AsyncPGPool.fetch(query)

        if len(raw_data) < 96:
            print(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
            continue

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ DataFrame
        df_data = [dict(row) for row in raw_data]
        df = pd.DataFrame(df_data)

        for col in ["open", "high", "low", "close", "volume"]:
            if col in df.columns:
                df[col] = df[col].astype(float)

        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å datetime
        if 'datetime' in df.columns:
            df = df.sort_values("datetime")
            df = df.set_index('datetime', drop=True)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º datetime –∫–∞–∫ –∏–Ω–¥–µ–∫—Å
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –Ω–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∫–æ–ª–æ–Ω–æ–∫
        df = df.loc[:, ~df.columns.duplicated()]

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        prediction = await ml_manager.predict(df)

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${df['close'].iloc[-1]:,.2f}")

        # –û—Å–Ω–æ–≤–Ω–æ–π —Å–∏–≥–Ω–∞–ª
        print_signal(
            prediction["signal_type"],
            prediction["confidence"],
            prediction["signal_strength"],
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ—Ç–º–µ—Ç–∫–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        print(f"\nüé® –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π –¥–ª—è {symbol}...")
        
        # 1. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π (Plotly)
        try:
            chart_file = create_predictions_chart(symbol, prediction, df)
            print(f"‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫: {chart_file}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {e}")
        
        # 2. –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (Matplotlib)
        try:
            market_file = create_market_data_analysis(symbol, df, timestamp)
            print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {market_file}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        # 3. –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
        try:
            # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö –∏–∑ ML –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            if hasattr(ml_manager, 'get_latest_features'):
                features_data = await ml_manager.get_latest_features(symbol)
                if features_data:
                    heatmap_file = create_features_heatmap(symbol, features_data, timestamp)
                    print(f"‚úÖ –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {heatmap_file}")
                else:
                    print("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            else:
                print("‚ö†Ô∏è –ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ ML –º–µ–Ω–µ–¥–∂–µ—Ä–µ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã: {e}")
        
        print(f"\nüìÅ –í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {CHARTS_DIR.absolute()}")

        # –î–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        if "predictions" in prediction:
            pred_details = prediction["predictions"]

            # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
            if "directions_by_timeframe" in pred_details:
                directions = pred_details["directions_by_timeframe"]
                probs = pred_details.get("direction_probabilities", [])

                if probs:
                    visualize_directions(directions, probs)

                # –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è
                weights = [0.4, 0.3, 0.2, 0.1]
                weighted_sum, decision = calculate_weighted_decision(directions, weights)

            # –ë—É–¥—É—â–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
            print("\n–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏:")
            print("-" * 50)
            print(f"15–º: {pred_details.get('returns_15m', 0):.4f}")
            print(f"1—á:  {pred_details.get('returns_1h', 0):.4f}")
            print(f"4—á:  {pred_details.get('returns_4h', 0):.4f}")
            print(f"12—á: {pred_details.get('returns_12h', 0):.4f}")

        # Stop Loss –∏ Take Profit
        if prediction.get("stop_loss_pct") and prediction.get("take_profit_pct"):
            current_price = df["close"].iloc[-1]

            if prediction["signal_type"] == "LONG":
                sl_price = current_price * (1 - prediction["stop_loss_pct"])
                tp_price = current_price * (1 + prediction["take_profit_pct"])
            else:
                sl_price = current_price * (1 + prediction["stop_loss_pct"])
                tp_price = current_price * (1 - prediction["take_profit_pct"])

            print("\n–£—Ä–æ–≤–Ω–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–æ–º:")
            print("-" * 50)
            print(f"Stop Loss:    ${sl_price:,.2f} ({prediction['stop_loss_pct']:.1%})")
            print(f"Take Profit:  ${tp_price:,.2f} ({prediction['take_profit_pct']:.1%})")

        # –†–∏—Å–∫
        print(f"\n–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {prediction['risk_level']}")

        print("\n" + "=" * 60)


if __name__ == "__main__":
    asyncio.run(visualize_ml_system())
