#!/usr/bin/env python3
"""
–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–∞ Bybit
"""

import asyncio
import os
import sys

from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PATH
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

load_dotenv()


async def close_all_positions():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
    from exchanges.base.order_types import OrderRequest, OrderSide, OrderType
    from exchanges.bybit.client import BybitClient

    api_key = os.getenv("BYBIT_API_KEY")
    api_secret = os.getenv("BYBIT_API_SECRET")

    client = BybitClient(api_key=api_key, api_secret=api_secret)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
        positions = await client.get_positions()

        if not positions:
            print("üìä –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è")
            return

        print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ {len(positions)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
        print("=" * 80)

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞
        print("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–∫—Ä—ã–≤–∞–µ–º –í–°–ï –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ!")
        print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø–æ–∑–∏—Ü–∏—é
        for pos in positions:
            print(f"\n–ó–∞–∫—Ä—ã–≤–∞–µ–º {pos.symbol}:")
            print(f"  –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {pos.side}")
            print(f"  –†–∞–∑–º–µ—Ä: {pos.size}")

            try:
                # –î–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π –æ—Ä–¥–µ—Ä
                # —Å —Ç–µ–º –∂–µ —Ä–∞–∑–º–µ—Ä–æ–º
                side = OrderSide.SELL if pos.side == "Buy" else OrderSide.BUY

                # –°–æ–∑–¥–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
                order_request = OrderRequest(
                    symbol=pos.symbol,
                    side=side,
                    order_type=OrderType.MARKET,
                    quantity=pos.size,
                    reduce_only=True,  # –¢–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
                    time_in_force="IOC",  # Immediate or Cancel
                )

                result = await client.place_order(order_request)
                if result:
                    print("  ‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
                else:
                    print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é")

            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        await asyncio.sleep(2)  # –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞

        balance = await client.get_balance("USDT")
        print("\nüíµ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å USDT:")
        print(f"  –í—Å–µ–≥–æ: {balance.total:.2f}")
        print(f"  –î–æ—Å—Ç—É–ø–Ω–æ: {balance.available:.2f}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    asyncio.run(close_all_positions())
