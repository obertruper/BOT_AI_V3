#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π —Å –±–æ–µ–≤—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –≤—ã—Ö–æ–¥–æ–≤ –º–æ–¥–µ–ª–∏
"""

import asyncio
import json
import sys
from pathlib import Path

import numpy as np
import torch
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ path
sys.path.insert(0, str(Path(__file__).parent))

from core.config.config_manager import ConfigManager
from core.logger import setup_logger
from database.connections.postgres import AsyncPGPool
from ml.logic.archive_old_versions.feature_engineering import FeatureEngineering
from ml.ml_manager import MLManager

logger = setup_logger("ml_prediction_analyzer")


class MLPredictionAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∏ –∏—Ö –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏"""

    def __init__(self):
        self.config_manager = ConfigManager()
        self.config = self.config_manager.config
        self.ml_manager = None
        self.feature_engineer = None
        self.model = None

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await AsyncPGPool.initialize(
                host=self.config["database"]["host"],
                port=self.config["database"]["port"],
                user=self.config["database"]["user"],
                password=self.config["database"]["password"],
                database=self.config["database"]["database"],
            )

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            self.ml_manager = MLManager(self.config)
            await self.ml_manager.initialize()

            # –ó–∞–≥—Ä—É–∂–∞–µ–º feature engineer
            self.feature_engineer = FeatureEngineering(self.config)

            logger.info("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            raise

    async def test_model_outputs(self, symbol="BTCUSDT"):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—ã—Ö–æ–¥—ã –º–æ–¥–µ–ª–∏ –∏ –∏—Ö –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é"""

        logger.info(f"\n{'=' * 60}")
        logger.info(f"üî¨ –ê–ù–ê–õ–ò–ó –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ô –î–õ–Ø {symbol}")
        logger.info(f"{'=' * 60}")

        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            query = """
                SELECT * FROM raw_market_data
                WHERE symbol = $1
                ORDER BY timestamp DESC
                LIMIT 100
            """
            candles = await AsyncPGPool.fetch(query, symbol)

            if not candles:
                logger.error(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                return

            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(candles)} —Å–≤–µ—á–µ–π")

            # 2. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º features
            df = self.ml_manager._prepare_dataframe(candles, symbol)

            if df is None or df.empty:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
                return

            # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
            features_df = await self.feature_engineer.generate_features(df, symbol)

            logger.info(f"üìà –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(features_df.columns)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

            # 4. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
            with torch.no_grad():
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                feature_cols = [
                    col
                    for col in features_df.columns
                    if col not in ["timestamp", "symbol", "close"]
                ]

                if len(feature_cols) < 240:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(feature_cols)}/240")
                    # –î–æ–ø–æ–ª–Ω—è–µ–º –Ω—É–ª—è–º–∏
                    for i in range(240 - len(feature_cols)):
                        features_df[f"dummy_{i}"] = 0
                    feature_cols = [
                        col
                        for col in features_df.columns
                        if col not in ["timestamp", "symbol", "close"]
                    ]

                X = features_df[feature_cols[:240]].values

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å
                if len(X) < 96:
                    logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(X)}/96")
                    return

                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 96 —Ç–æ—á–µ–∫
                X_input = X[-96:].reshape(1, 96, 240)
                X_tensor = torch.FloatTensor(X_input)

                if torch.cuda.is_available():
                    X_tensor = X_tensor.cuda()

                # –ü–æ–ª—É—á–∞–µ–º raw –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                outputs = self.ml_manager.model(X_tensor)
                predictions = outputs.cpu().numpy()[0]

            # 5. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã—Ö–æ–¥—ã
            logger.info("\nüìä –ê–ù–ê–õ–ò–ó 20 –í–´–•–û–î–û–í –ú–û–î–ï–õ–ò:")
            logger.info(f"{'=' * 50}")

            # Future returns (0-3)
            logger.info("üìà Future Returns (–æ–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å):")
            timeframes = ["15m", "1h", "4h", "12h"]
            for i, tf in enumerate(timeframes):
                value = predictions[i]
                logger.info(f"  {tf}: {value:+.4f} ({value * 100:+.2f}%)")

            # Directions (4-7) - —ç—Ç–æ raw scores, –Ω–µ –∫–ª–∞—Å—Å—ã!
            logger.info("\nüéØ Direction Scores (—Å—ã—Ä—ã–µ –æ—Ü–µ–Ω–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è):")
            for i, tf in enumerate(timeframes):
                score = predictions[4 + i]
                # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º score
                if score < -0.5:
                    direction = "STRONG LONG"
                elif score < 0:
                    direction = "LONG"
                elif score < 0.5:
                    direction = "WEAK LONG"
                elif score < 1.0:
                    direction = "WEAK SHORT"
                elif score < 1.5:
                    direction = "SHORT"
                else:
                    direction = "STRONG SHORT"
                logger.info(f"  {tf}: {score:+.4f} ‚Üí {direction}")

            # Long levels (8-11)
            logger.info("\nüìä Long Target Probabilities (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π –ª–æ–Ω–≥–∞):")
            long_targets = ["1% –∑–∞ 4—á", "2% –∑–∞ 4—á", "3% –∑–∞ 12—á", "5% –∑–∞ 12—á"]
            for i, target in enumerate(long_targets):
                prob = 1 / (1 + np.exp(-predictions[8 + i]))  # Sigmoid
                logger.info(f"  {target}: {prob:.1%}")

            # Short levels (12-15)
            logger.info("\nüìâ Short Target Probabilities (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π —à–æ—Ä—Ç–∞):")
            for i, target in enumerate(long_targets):
                prob = 1 / (1 + np.exp(-predictions[12 + i]))  # Sigmoid
                logger.info(f"  {target}: {prob:.1%}")

            # Risk metrics (16-19)
            logger.info("\n‚ö†Ô∏è Risk Metrics (–º–µ—Ç—Ä–∏–∫–∏ —Ä–∏—Å–∫–∞):")
            risk_names = [
                "Max Drawdown 1h",
                "Max Rally 1h",
                "Max Drawdown 4h",
                "Max Rally 4h",
            ]
            for i, name in enumerate(risk_names):
                value = predictions[16 + i]
                logger.info(f"  {name}: {value:+.4f} ({value * 100:+.2f}%)")

            # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –≤ ML Manager
            logger.info(f"\n{'=' * 50}")
            logger.info("üîÑ –ò–ù–¢–ï–†–ü–†–ï–¢–ê–¶–ò–Ø ML MANAGER:")
            logger.info(f"{'=' * 50}")

            # –í—ã—á–∏—Å–ª—è–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–∫–∞–∫ –≤ ml_manager.py)
            direction_scores = predictions[4:8]

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ—Ä–µ–π–º–æ–≤
            timeframe_weights = np.array([0.4, 0.3, 0.2, 0.1])  # –ë–æ–ª—å—à–∏–π –≤–µ—Å –∫–æ—Ä–æ—Ç–∫–∏–º TF
            weighted_direction = np.average(direction_scores, weights=timeframe_weights)

            logger.info(f"\nüìä –í–∑–≤–µ—à–µ–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {weighted_direction:.4f}")

            # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º ml_manager.py
            if weighted_direction < 0.5:
                signal_type = "LONG"
                logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª: {signal_type} (–ø–æ–∫—É–ø–∫–∞)")
            elif weighted_direction < 1.5:
                signal_type = "SHORT"
                logger.info(f"üìâ –°–∏–≥–Ω–∞–ª: {signal_type} (–ø—Ä–æ–¥–∞–∂–∞)")
            else:
                signal_type = "NEUTRAL"
                logger.info(f"‚è∏Ô∏è –°–∏–≥–Ω–∞–ª: {signal_type} (–ø—Ä–æ–ø—É—Å–∫)")

            # 7. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º SL/TP
            current_price = float(candles[0]["close"])
            logger.info(f"\nüí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.2f}")

            future_returns = predictions[0:4]

            if signal_type == "LONG":
                # –î–ª—è –ª–æ–Ω–≥–∞
                min_return = float(np.min(future_returns))
                max_return = float(np.max(future_returns))

                stop_loss_pct = np.clip(abs(min_return) * 100, 1.0, 5.0) / 100.0
                take_profit_pct = np.clip(max_return * 100, 2.0, 10.0) / 100.0

                stop_loss = current_price * (1 - stop_loss_pct)
                take_profit = current_price * (1 + take_profit_pct)

                logger.info(f"üìç Stop Loss: ${stop_loss:.2f} (-{stop_loss_pct * 100:.1f}%)")
                logger.info(f"üéØ Take Profit: ${take_profit:.2f} (+{take_profit_pct * 100:.1f}%)")

            elif signal_type == "SHORT":
                # –î–ª—è —à–æ—Ä—Ç–∞
                min_return = float(np.min(future_returns))
                max_return = float(np.max(future_returns))

                stop_loss_pct = np.clip(abs(max_return) * 100, 1.0, 5.0) / 100.0
                take_profit_pct = np.clip(abs(min_return) * 100, 2.0, 10.0) / 100.0

                stop_loss = current_price * (1 + stop_loss_pct)
                take_profit = current_price * (1 - take_profit_pct)

                logger.info(f"üìç Stop Loss: ${stop_loss:.2f} (+{stop_loss_pct * 100:.1f}%)")
                logger.info(f"üéØ Take Profit: ${take_profit:.2f} (-{take_profit_pct * 100:.1f}%)")

            # 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            logger.info(f"\n{'=' * 50}")
            logger.info("üéöÔ∏è –ê–ù–ê–õ–ò–ó –ü–û–†–û–ì–û–í:")
            logger.info(f"{'=' * 50}")

            # –°—á–∏—Ç–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∫–∞–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–≥–æ (1.0)
            confidence = abs(weighted_direction - 1.0)

            logger.info(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {confidence:.3f}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            config_thresholds = {
                "direction_confidence": self.config["model"].get(
                    "direction_confidence_threshold", 0.25
                ),
                "min_confidence": self.config["model"].get("confidence_threshold", 0.0),
                "trading_min": self.config["trading"].get("min_confidence_threshold", 0.3),
            }

            logger.info("\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏:")
            for name, value in config_thresholds.items():
                status = "‚úÖ" if confidence >= value else "‚ùå"
                logger.info(f"  {name}: {value:.2f} {status}")

            # 9. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º
            logger.info(f"\n{'=' * 50}")
            logger.info("‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
            logger.info(f"{'=' * 50}")

            problems = []

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–µ –ø–æ—Ä–æ–≥–∏
            if config_thresholds["min_confidence"] < 0.2:
                problems.append("‚ùå –°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π confidence_threshold (< 0.2)")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            if signal_type in ["LONG", "SHORT"]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å future returns —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
                avg_return = np.mean(future_returns)
                if signal_type == "LONG" and avg_return < 0:
                    problems.append(f"‚ö†Ô∏è LONG —Å–∏–≥–Ω–∞–ª –ø—Ä–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º avg return: {avg_return:.4f}")
                elif signal_type == "SHORT" and avg_return > 0:
                    problems.append(
                        f"‚ö†Ô∏è SHORT —Å–∏–≥–Ω–∞–ª –ø—Ä–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–º avg return: {avg_return:.4f}"
                    )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ SL/TP
            if signal_type in ["LONG", "SHORT"]:
                risk_reward = take_profit_pct / stop_loss_pct if stop_loss_pct > 0 else 0
                if risk_reward < 1.5:
                    problems.append(
                        f"‚ùå –ü–ª–æ—Ö–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å: {risk_reward:.2f} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å > 1.5)"
                    )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if any(abs(v) > 0.5 for v in future_returns):
                problems.append("‚ö†Ô∏è –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è future returns (> 50%)")

            if problems:
                for problem in problems:
                    logger.warning(problem)
            else:
                logger.info("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

            # 10. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            logger.info(f"\n{'=' * 50}")
            logger.info("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            logger.info(f"{'=' * 50}")

            recommendations = []

            if config_thresholds["min_confidence"] < 0.3:
                recommendations.append("1. –£–≤–µ–ª–∏—á–∏—Ç—å confidence_threshold –¥–æ 0.3-0.4")

            if config_thresholds["direction_confidence"] < 0.4:
                recommendations.append("2. –£–≤–µ–ª–∏—á–∏—Ç—å direction_confidence_threshold –¥–æ 0.4-0.5")

            if signal_type != "NEUTRAL" and confidence < 0.5:
                recommendations.append("3. –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–ø—É—Å–∫ —Å–¥–µ–ª–æ–∫ —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é < 0.5")

            recommendations.append("4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ SL/TP –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏")
            recommendations.append("5. –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ risk metrics")

            for rec in recommendations:
                logger.info(f"  {rec}")

            return {
                "symbol": symbol,
                "signal": signal_type,
                "confidence": confidence,
                "weighted_direction": weighted_direction,
                "future_returns": future_returns.tolist(),
                "stop_loss_pct": stop_loss_pct if signal_type != "NEUTRAL" else None,
                "take_profit_pct": take_profit_pct if signal_type != "NEUTRAL" else None,
                "problems": problems,
                "recommendations": recommendations,
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            import traceback

            logger.error(traceback.format_exc())
            return None

    async def test_multiple_symbols(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤"""

        symbols = ["BTCUSDT", "ETHUSDT", "SOLUSDT"]
        results = []

        for symbol in symbols:
            result = await self.test_model_outputs(symbol)
            if result:
                results.append(result)
            await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞

        # –ê–Ω–∞–ª–∏–∑ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        logger.info(f"\n{'=' * 60}")
        logger.info("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        logger.info(f"{'=' * 60}")

        if results:
            signals = [r["signal"] for r in results]
            confidences = [r["confidence"] for r in results]

            logger.info(f"–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(results)}")
            logger.info(f"LONG —Å–∏–≥–Ω–∞–ª–æ–≤: {signals.count('LONG')}")
            logger.info(f"SHORT —Å–∏–≥–Ω–∞–ª–æ–≤: {signals.count('SHORT')}")
            logger.info(f"NEUTRAL —Å–∏–≥–Ω–∞–ª–æ–≤: {signals.count('NEUTRAL')}")
            logger.info(f"–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {np.mean(confidences):.3f}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            with open("ml_analysis_results.json", "w") as f:
                json.dump(results, f, indent=2, default=str)
            logger.info("\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ml_analysis_results.json")

    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        await AsyncPGPool.close()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    load_dotenv()

    analyzer = MLPredictionAnalyzer()

    try:
        await analyzer.initialize()

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –ø–æ–¥—Ä–æ–±–Ω–æ
        await analyzer.test_model_outputs("BTCUSDT")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤
        await analyzer.test_multiple_symbols()

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await analyzer.cleanup()


if __name__ == "__main__":
    asyncio.run(main())
