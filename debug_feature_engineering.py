#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç FeatureEngineer —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
"""

import asyncio
import sys
from pathlib import Path

import numpy as np
import pandas as pd

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from core.config.config_manager import ConfigManager
from core.logger import setup_logger
from ml.logic.feature_engineering import FeatureEngineer

logger = setup_logger(__name__)


async def test_feature_engineering():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    config_manager = ConfigManager()
    config = config_manager.get_config()

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è BTCUSDT –∏ ETHUSDT
    btc_data = pd.DataFrame(
        {
            "datetime": pd.date_range("2024-01-01", periods=100, freq="15min"),
            "open": 40000 + np.random.randn(100) * 1000,
            "high": 40500 + np.random.randn(100) * 1000,
            "low": 39500 + np.random.randn(100) * 1000,
            "close": 40000 + np.random.randn(100) * 1000,
            "volume": 1000 + np.random.randn(100) * 100,
            "turnover": 40000000 + np.random.randn(100) * 1000000,
            "symbol": "BTCUSDT",
        }
    )

    eth_data = pd.DataFrame(
        {
            "datetime": pd.date_range("2024-01-01", periods=100, freq="15min"),
            "open": 2500 + np.random.randn(100) * 200,
            "high": 2600 + np.random.randn(100) * 200,
            "low": 2400 + np.random.randn(100) * 200,
            "close": 2500 + np.random.randn(100) * 200,
            "volume": 2000 + np.random.randn(100) * 200,
            "turnover": 5000000 + np.random.randn(100) * 500000,
            "symbol": "ETHUSDT",
        }
    )

    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ü–µ–Ω—ã –Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ
    for df in [btc_data, eth_data]:
        for col in ["open", "high", "low", "close"]:
            df[col] = np.abs(df[col])
        df["volume"] = np.abs(df["volume"])
        df["turnover"] = np.abs(df["turnover"])

    logger.info("üìä –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    logger.info(
        f"BTC: —Ü–µ–Ω—ã –æ—Ç {btc_data['close'].min():.0f} –¥–æ {btc_data['close'].max():.0f}"
    )
    logger.info(
        f"ETH: —Ü–µ–Ω—ã –æ—Ç {eth_data['close'].min():.0f} –¥–æ {eth_data['close'].max():.0f}"
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º FeatureEngineer
    feature_engineer = FeatureEngineer(config)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
    logger.info("\nüîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")

    btc_features = feature_engineer.create_features(btc_data)
    logger.info(
        f"BTC –ø—Ä–∏–∑–Ω–∞–∫–∏: shape={btc_features.shape}, min={btc_features.min():.6f}, max={btc_features.max():.6f}"
    )

    eth_features = feature_engineer.create_features(eth_data)
    logger.info(
        f"ETH –ø—Ä–∏–∑–Ω–∞–∫–∏: shape={eth_features.shape}, min={eth_features.min():.6f}, max={eth_features.max():.6f}"
    )

    # –ê–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    logger.info("\nüìã –ê–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏:")

    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    btc_mean = np.mean(btc_features, axis=0)
    eth_mean = np.mean(eth_features, axis=0)

    btc_std = np.std(btc_features, axis=0)
    eth_std = np.std(eth_features, axis=0)

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å –Ω—É–ª–µ–≤–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–µ–π
    btc_zero_var = np.sum(btc_std < 1e-8)
    eth_zero_var = np.sum(eth_std < 1e-8)

    logger.info(
        f"BTC: –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å –Ω—É–ª–µ–≤–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–µ–π: {btc_zero_var}/{btc_features.shape[1]}"
    )
    logger.info(
        f"ETH: –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å –Ω—É–ª–µ–≤–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–µ–π: {eth_zero_var}/{eth_features.shape[1]}"
    )

    # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ —Ä–∞–∑–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    if btc_features.shape == eth_features.shape:
        correlations = []
        for i in range(btc_features.shape[1]):
            if btc_std[i] > 1e-8 and eth_std[i] > 1e-8:
                corr = np.corrcoef(btc_features[:, i], eth_features[:, i])[0, 1]
                if not np.isnan(corr):
                    correlations.append(corr)

        if correlations:
            avg_corr = np.mean(correlations)
            logger.info(f"–°—Ä–µ–¥–Ω—è—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ BTC-ETH: {avg_corr:.6f}")
            logger.info(
                f"–í—ã—Å–æ–∫–æ –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (>0.9): {np.sum(np.array(correlations) > 0.9)}"
            )
        else:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–∏—è –≤ –ø–µ—Ä–≤—ã—Ö 10 –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö
    logger.info("\nüîç –ü–µ—Ä–≤—ã–µ 10 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω—è—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–æ—á–∫–∞):")
    logger.info(f"BTC: {btc_features[-1, :10]}")
    logger.info(f"ETH: {eth_features[-1, :10]}")
    logger.info(f"–†–∞–∑–Ω–æ—Å—Ç–∏: {btc_features[-1, :10] - eth_features[-1, :10]}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å –∫–ª–∏–ø–ø–∏–Ω–≥–æ–º
    btc_clipped = np.sum((btc_features == -10) | (btc_features == 10))
    eth_clipped = np.sum((eth_features == -10) | (eth_features == 10))

    logger.info("\n‚ö†Ô∏è –ö–ª–∏–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
    logger.info(f"BTC: {btc_clipped} –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–∞—Ö [-10, 10]")
    logger.info(f"ETH: {eth_clipped} –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–∞—Ö [-10, 10]")

    if btc_clipped > 0 or eth_clipped > 0:
        logger.error("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –û–±–Ω–∞—Ä—É–∂–µ–Ω —á—Ä–µ–∑–º–µ—Ä–Ω—ã–π –∫–ª–∏–ø–ø–∏–Ω–≥ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤!")
        logger.error("   –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–æ–¥–∏—Ç—å –∫ –ø–æ—Ç–µ—Ä–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏")

    return btc_features, eth_features


if __name__ == "__main__":
    asyncio.run(test_feature_engineering())
