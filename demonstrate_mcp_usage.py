#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è MCP —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ë–î
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ –∑–∞–º–µ–Ω–∏—Ç—å –ø—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã AsyncPGPool –Ω–∞ MCP postgres –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
"""

import asyncio
from datetime import datetime

from core.logger import setup_logger

# –í–ê–ñ–ù–û: –í–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ AsyncPGPool, –∏—Å–ø–æ–ª—å–∑—É–µ–º MCP tools
# from database.connections.postgres import AsyncPGPool  # ‚ùå –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–ú
# –ò—Å–ø–æ–ª—å–∑—É–µ–º MCP postgres tools —á–µ—Ä–µ–∑ Claude Code API  # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û


logger = setup_logger("mcp_demo")


class MCPDatabaseManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ MCP —Å–µ—Ä–≤–µ—Ä—ã
    –ó–∞–º–µ–Ω—è–µ—Ç –ø—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã AsyncPGPool –Ω–∞ MCP postgres tools
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        self.connection_params = {
            "host": "localhost",
            "port": 5555,
            "database": "bot_trading_v3",
            "user": "obertruper",
            "password": "ilpnqw1234",
        }
        logger.info("‚úÖ MCPDatabaseManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def fetch(self, query: str, *params) -> list[dict]:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SELECT –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ MCP
        –ó–∞–º–µ–Ω—è–µ—Ç: await AsyncPGPool.fetch(query, *params)
        """
        logger.info(f"üìä MCP Query: {query[:50]}...")

        # –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ MCP postgres__query
        # result = await mcp__postgres__query(sql=query, params=list(params))

        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–º–µ—Ä
        return [
            {"symbol": "BTCUSDT", "signal_type": "SHORT", "confidence": 0.85},
            {"symbol": "ETHUSDT", "signal_type": "SHORT", "confidence": 0.92},
        ]

    async def execute(self, query: str, *params) -> None:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ INSERT/UPDATE/DELETE —á–µ—Ä–µ–∑ MCP
        –ó–∞–º–µ–Ω—è–µ—Ç: await AsyncPGPool.execute(query, *params)
        """
        logger.info(f"üîß MCP Execute: {query[:50]}...")

        # –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ MCP postgres__execute
        # await mcp__postgres__execute(sql=query, params=list(params))

        return None

    async def list_tables(self, schema: str = "public") -> list[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü —á–µ—Ä–µ–∑ MCP
        """
        logger.info(f"üìã MCP List Tables in schema: {schema}")

        # –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ: await mcp__postgres__list_tables(schema=schema)
        return [
            "signals",
            "orders",
            "trades",
            "raw_market_data",
            "processed_market_data",
            "account_balances",
        ]

    async def describe_table(self, table: str) -> dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ MCP
        """
        logger.info(f"üîç MCP Describe Table: {table}")

        # –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ: await mcp__postgres__describe_table(table=table)
        return {
            "columns": [
                {"name": "id", "type": "bigint"},
                {"name": "symbol", "type": "varchar"},
                {"name": "signal_type", "type": "varchar"},
                {"name": "confidence", "type": "decimal"},
            ]
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–¥–µ
mcp_db = MCPDatabaseManager()


async def example_get_signals():
    """
    –ü—Ä–∏–º–µ—Ä: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ MCP

    –ë–´–õ–û (–ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤):
    rows = await AsyncPGPool.fetch(
        "SELECT * FROM signals WHERE created_at > $1",
        datetime.now() - timedelta(hours=1)
    )

    –°–¢–ê–õ–û (—á–µ—Ä–µ–∑ MCP):
    """

    logger.info("\n" + "=" * 60)
    logger.info("üì° –ü–û–õ–£–ß–ï–ù–ò–ï –°–ò–ì–ù–ê–õ–û–í –ß–ï–†–ï–ó MCP")
    logger.info("=" * 60)

    query = """
        SELECT
            symbol,
            signal_type,
            confidence,
            strength,
            created_at
        FROM signals
        WHERE created_at > NOW() - INTERVAL '1 hour'
        ORDER BY created_at DESC
        LIMIT 10
    """

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º MCP –≤–º–µ—Å—Ç–æ AsyncPGPool
    rows = await mcp_db.fetch(query)

    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(rows)} —Å–∏–≥–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ MCP")
    for row in rows:
        logger.info(f"  ‚Ä¢ {row['symbol']}: {row['signal_type']} ({row['confidence']:.2%})")

    return rows


async def example_insert_signal():
    """
    –ü—Ä–∏–º–µ—Ä: –í—Å—Ç–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ MCP

    –ë–´–õ–û:
    await AsyncPGPool.execute(
        "INSERT INTO signals (...) VALUES (...)",
        symbol, signal_type, confidence
    )

    –°–¢–ê–õ–û:
    """

    logger.info("\n" + "=" * 60)
    logger.info("‚ûï –í–°–¢–ê–í–ö–ê –°–ò–ì–ù–ê–õ–ê –ß–ï–†–ï–ó MCP")
    logger.info("=" * 60)

    query = """
        INSERT INTO signals (
            symbol, signal_type, confidence, strength,
            strategy_name, created_at
        ) VALUES ($1, $2, $3, $4, $5, $6)
    """

    params = ["BTCUSDT", "LONG", 0.85, 0.72, "ML_STRATEGY", datetime.now()]

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º MCP –≤–º–µ—Å—Ç–æ AsyncPGPool
    await mcp_db.execute(query, *params)

    logger.info("‚úÖ –°–∏–≥–Ω–∞–ª –≤—Å—Ç–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ MCP")


async def example_update_order_status():
    """
    –ü—Ä–∏–º–µ—Ä: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ MCP
    """

    logger.info("\n" + "=" * 60)
    logger.info("üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –û–†–î–ï–†–ê –ß–ï–†–ï–ó MCP")
    logger.info("=" * 60)

    query = """
        UPDATE orders
        SET
            status = $1,
            filled_at = $2,
            updated_at = $3
        WHERE id = $4
    """

    params = ["filled", datetime.now(), datetime.now(), 12345]

    await mcp_db.execute(query, *params)

    logger.info("‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ MCP")


async def example_analyze_tables():
    """
    –ü—Ä–∏–º–µ—Ä: –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î —á–µ—Ä–µ–∑ MCP
    """

    logger.info("\n" + "=" * 60)
    logger.info("üóÑÔ∏è –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ë–î –ß–ï–†–ï–ó MCP")
    logger.info("=" * 60)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
    tables = await mcp_db.list_tables()
    logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(tables)} —Ç–∞–±–ª–∏—Ü:")
    for table in tables[:5]:
        logger.info(f"  ‚Ä¢ {table}")

    # –û–ø–∏—Å—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É signals
    structure = await mcp_db.describe_table("signals")
    logger.info("\nüîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã signals:")
    for col in structure["columns"][:5]:
        logger.info(f"  ‚Ä¢ {col['name']}: {col['type']}")


async def migrate_code_example():
    """
    –ü—Ä–∏–º–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞ –Ω–∞ MCP
    """

    logger.info("\n" + "=" * 60)
    logger.info("üîÑ –ü–†–ò–ú–ï–† –ú–ò–ì–†–ê–¶–ò–ò –ö–û–î–ê –ù–ê MCP")
    logger.info("=" * 60)

    logger.info(
        """
üìù –®–∞–≥–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:

1. –ù–∞–π—Ç–∏ –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã AsyncPGPool:
   grep -r "from database.connections.postgres import AsyncPGPool" .

2. –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∏–º–ø–æ—Ä—Ç MCPDatabaseManager:
   from utils.mcp_database import mcp_db

3. –ó–∞–º–µ–Ω–∏—Ç—å –≤—ã–∑–æ–≤—ã:
   ‚ùå –ë–´–õ–û:  rows = await AsyncPGPool.fetch(query, param1, param2)
   ‚úÖ –°–¢–ê–õ–û: rows = await mcp_db.fetch(query, param1, param2)

   ‚ùå –ë–´–õ–û:  await AsyncPGPool.execute(query, param1, param2)
   ‚úÖ –°–¢–ê–õ–û: await mcp_db.execute(query, param1, param2)

4. –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏:
   ‚Ä¢ database/repositories/signal_repository_fixed.py
   ‚Ä¢ trading/engine.py
   ‚Ä¢ ml/ml_manager.py
   ‚Ä¢ trading/signals/ai_signal_generator.py
   ‚Ä¢ core/system/orchestrator.py

5. –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ MCP:
   ‚Ä¢ –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏
   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
   ‚Ä¢ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–æ–≤
   ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
   ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Claude Code
"""
    )


async def show_mcp_benefits():
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è MCP
    """

    logger.info("\n" + "=" * 60)
    logger.info("üöÄ –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê MCP –°–ï–†–í–ï–†–û–í")
    logger.info("=" * 60)

    logger.info(
        """
‚úÖ –ü–æ—á–µ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MCP –≤–º–µ—Å—Ç–æ –ø—Ä—è–º—ã—Ö –≤—ã–∑–æ–≤–æ–≤:

1. üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
   ‚Ä¢ –ò–∑–æ–ª—è—Ü–∏—è credentials
   ‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞
   ‚Ä¢ –ê—É–¥–∏—Ç –æ–ø–µ—Ä–∞—Ü–∏–π

2. üéØ –£–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è:
   ‚Ä¢ –ï–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö –ë–î –æ–ø–µ—Ä–∞—Ü–∏–π
   ‚Ä¢ –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
   ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

3. üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:
   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
   ‚Ä¢ –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   ‚Ä¢ –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤

4. üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
   ‚Ä¢ –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
   ‚Ä¢ –ü—É–ª—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç—ã

5. ü§ñ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Claude:
   ‚Ä¢ –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –ë–î –∏–∑ Claude Code
   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
   ‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø–æ–º–æ—â—å

6. üìà –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:
   ‚Ä¢ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
   ‚Ä¢ –ë–∞—Ç—á–∏–Ω–≥ –æ–ø–µ—Ä–∞—Ü–∏–π
   ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
"""
    )


async def create_mcp_wrapper():
    """
    –°–æ–∑–¥–∞–Ω–∏–µ wrapper'–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å AsyncPGPool
    """

    logger.info("\n" + "=" * 60)
    logger.info("üîß –°–û–ó–î–ê–ù–ò–ï MCP WRAPPER")
    logger.info("=" * 60)

    code = '''
# utils/mcp_database.py

class MCPAsyncPGPool:
    """Drop-in –∑–∞–º–µ–Ω–∞ –¥–ª—è AsyncPGPool —á–µ—Ä–µ–∑ MCP"""

    @staticmethod
    async def fetch(query: str, *params):
        """–°–æ–≤–º–µ—Å—Ç–∏–º—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å AsyncPGPool.fetch"""
        return await mcp_db.fetch(query, *params)

    @staticmethod
    async def fetchrow(query: str, *params):
        """–°–æ–≤–º–µ—Å—Ç–∏–º—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å AsyncPGPool.fetchrow"""
        rows = await mcp_db.fetch(query, *params)
        return rows[0] if rows else None

    @staticmethod
    async def fetchval(query: str, *params):
        """–°–æ–≤–º–µ—Å—Ç–∏–º—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å AsyncPGPool.fetchval"""
        row = await MCPAsyncPGPool.fetchrow(query, *params)
        return list(row.values())[0] if row else None

    @staticmethod
    async def execute(query: str, *params):
        """–°–æ–≤–º–µ—Å—Ç–∏–º—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å AsyncPGPool.execute"""
        return await mcp_db.execute(query, *params)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∑–∞–º–µ–Ω–∞
AsyncPGPool = MCPAsyncPGPool
'''

    logger.info("üìù Wrapper –∫–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:")
    logger.info(code)

    logger.info(
        """

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
1. –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª utils/mcp_database.py —Å wrapper'–æ–º
2. –í –Ω–∞—á–∞–ª–µ main.py –¥–æ–±–∞–≤–∏—Ç—å:
   from utils.mcp_database import AsyncPGPool
3. –í–µ—Å—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π!
"""
    )


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è"""

    logger.info("\n" + "=" * 80)
    logger.info("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø MCP –°–ï–†–í–ï–†–û–í")
    logger.info("=" * 80)

    # 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
    await show_mcp_benefits()

    # 2. –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await example_get_signals()
    await example_insert_signal()
    await example_update_order_status()
    await example_analyze_tables()

    # 3. –ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–¥–∞
    await migrate_code_example()

    # 4. –°–æ–∑–¥–∞–Ω–∏–µ wrapper'–∞
    await create_mcp_wrapper()

    logger.info("\n" + "=" * 80)
    logger.info("‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
    logger.info("=" * 80)

    logger.info(
        """
üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
1. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏: python3 migrate_to_mcp.py
2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –æ–¥–Ω–æ–º –º–æ–¥—É–ª–µ
3. –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
4. –û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä—è–º—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
"""
    )


if __name__ == "__main__":
    asyncio.run(main())
