#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –æ–±—É—á–∞—é—â–µ–≥–æ —Ñ–∞–π–ª–∞.
–°–æ–∑–¥–∞–µ—Ç —Ç–æ—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ–¥—Å—á–µ—Ç–æ–º.
"""

from exact_training_features import EXACT_TRAINING_FEATURES


def clean_feature_list(features: list) -> list:
    """–û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –æ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤"""

    # –°—Ç–æ–ª–±—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ (–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ)
    metadata_columns = {
        "symbol",  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–∏–º–≤–æ–ª–∞
        "datetime",  # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
        "timestamp",  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
        "date",  # –î–∞—Ç–∞
        "time",  # –í—Ä–µ–º—è
        "open",  # –ë–∞–∑–æ–≤—ã–µ OHLCV –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö)
        "high",
        "low",
        "close",
        "volume",
        "turnover",
    }

    # –¶–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    target_columns = {
        "target",
        "target_15m",
        "target_1h",
        "target_4h",
        "returns_15m",  # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ —Ç–∞—Ä–≥–µ—Ç
        "direction",  # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–∫ —Ç–∞—Ä–≥–µ—Ç
        "price_change",  # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∫–∞–∫ —Ç–∞—Ä–≥–µ—Ç
    }

    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ/—Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
    temp_columns = {"temp_", "tmp_", "_temp", "_tmp"}

    cleaned_features = []
    removed_features = []

    for feature in features:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        if feature in metadata_columns:
            removed_features.append(f"{feature} (metadata)")
            continue

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        if feature in target_columns:
            removed_features.append(f"{feature} (target)")
            continue

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        if any(temp in feature for temp in temp_columns):
            removed_features.append(f"{feature} (temporary)")
            continue

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–µ–≤–∏–¥–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        if feature.startswith("_") or feature.endswith("_"):
            removed_features.append(f"{feature} (invalid name)")
            continue

        cleaned_features.append(feature)

    return cleaned_features, removed_features


def analyze_feature_categories(features: list) -> dict:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""

    categories = {
        "basic": [],  # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (returns, ratios)
        "technical": [],  # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        "microstructure": [],  # –ú–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä—ã–Ω–∫–∞
        "volume": [],  # –û–±—ä–µ–º–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        "volatility": [],  # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        "temporal": [],  # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        "correlation": [],  # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        "momentum": [],  # –ú–æ–º–µ–Ω—Ç—É–º
        "trend": [],  # –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        "risk": [],  # –†–∏—Å–∫-–º–µ—Ç—Ä–∏–∫–∏
        "other": [],  # –û—Å—Ç–∞–ª—å–Ω—ã–µ
    }

    for feature in features:
        feature_lower = feature.lower()

        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        if any(
            word in feature_lower for word in ["returns", "ratio", "position", "spread", "vwap"]
        ):
            categories["basic"].append(feature)
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        elif any(
            word in feature_lower
            for word in [
                "rsi",
                "macd",
                "sma",
                "ema",
                "bb_",
                "atr",
                "stoch",
                "adx",
                "psar",
                "ichimoku",
                "keltner",
                "donchian",
                "mfi",
                "cci",
                "williams",
                "obv",
                "aroon",
                "roc",
                "trix",
            ]
        ):
            categories["technical"].append(feature)
        # –ú–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        elif any(
            word in feature_lower
            for word in [
                "impact",
                "kyle",
                "amihud",
                "toxicity",
                "imbalance",
                "liquidity",
                "illiquidity",
            ]
        ):
            categories["microstructure"].append(feature)
        # –û–±—ä–µ–º
        elif any(
            word in feature_lower
            for word in ["volume", "obv", "cmf", "accumulation", "dollar_volume"]
        ):
            categories["volume"].append(feature)
        # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        elif any(word in feature_lower for word in ["vol", "realized", "garch", "squeeze"]):
            categories["volatility"].append(feature)
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ
        elif any(
            word in feature_lower
            for word in ["hour", "day", "month", "weekend", "session", "sin", "cos"]
        ):
            categories["temporal"].append(feature)
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è
        elif any(word in feature_lower for word in ["btc", "correlation", "beta", "relative"]):
            categories["correlation"].append(feature)
        # –ú–æ–º–µ–Ω—Ç—É–º
        elif any(word in feature_lower for word in ["momentum", "divergence"]):
            categories["momentum"].append(feature)
        # –¢—Ä–µ–Ω–¥
        elif any(word in feature_lower for word in ["trend", "uptrend", "downtrend"]):
            categories["trend"].append(feature)
        # –†–∏—Å–∫
        elif any(
            word in feature_lower for word in ["risk", "leverage", "liquidation", "var", "cvar"]
        ):
            categories["risk"].append(feature)
        else:
            categories["other"].append(feature)

    return categories


def generate_production_config(features: list) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞"""

    categories = analyze_feature_categories(features)

    config = []
    config.append('"""')
    config.append("–¢–æ—á–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –æ–±—É—á–∞—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ BOT_AI_V2/–∞–∞–∞.py")
    config.append("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –≤ —Ç–æ—á–Ω–æ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é.")
    config.append('"""')
    config.append("")
    config.append("# –ö–†–ò–¢–ò–ß–ù–û: –≠—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –í –¢–û–ß–ù–û–ú –ü–û–†–Ø–î–ö–ï!")
    config.append("# –ú–æ–¥–µ–ª—å –±—ã–ª–∞ –æ–±—É—á–µ–Ω–∞ –∏–º–µ–Ω–Ω–æ –Ω–∞ —ç—Ç–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö –≤ —ç—Ç–æ–º –ø–æ—Ä—è–¥–∫–µ.")
    config.append("")
    config.append("PRODUCTION_FEATURES = [")
    for feature in features:
        config.append(f'    "{feature}",')
    config.append("]")
    config.append("")
    config.append(f"# –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(features)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    config.append("")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    config.append("# –ü—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
    for category, cat_features in categories.items():
        if cat_features:
            config.append(f"# {category}: {len(cat_features)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    config.append("")

    # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    for category, cat_features in categories.items():
        if cat_features:
            category_name = f"{category.upper()}_FEATURES"
            config.append(f"{category_name} = [")
            for feature in cat_features:
                config.append(f'    "{feature}",')
            config.append("]")
            config.append("")

    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã
    config.append("# –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –§–û–†–ú–£–õ–´ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ—á–Ω–æ —Ç–∞–∫–∏–º–∏ –∂–µ –∫–∞–∫ –≤ –æ–±—É—á–µ–Ω–∏–∏):")
    config.append("CRITICAL_FORMULAS = {")
    config.append('    "macd": "macd / close * 100",  # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π MACD')
    config.append('    "macd_signal": "macd_signal / close * 100",')
    config.append('    "macd_diff": "macd_diff / close * 100",')
    config.append('    "btc_correlation": "window=96, min_periods=50",')
    config.append('    "returns": "np.log(close / close.shift(1))",  # LOG –≤–æ–∑–≤—Ä–∞—Ç—ã')
    config.append('    "amihud_illiquidity": "abs(returns) * 1e6 / turnover",  # * 1e6')
    config.append('    "price_impact": "abs(returns) * 100 / log10(dollar_volume + 100)",')
    config.append('    "volume_cumsum_log": "log1p transformation",')
    config.append('    "realized_vol_1h": "rolling(240).std() * sqrt(240)",  # 1h = 240 periods')
    config.append("}")
    config.append("")

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è inference
    config.append("INFERENCE_CONFIG = {")
    config.append(f'    "expected_features": {len(features)},')
    config.append('    "feature_order_critical": True,')
    config.append('    "normalize_features": True,')
    config.append('    "handle_missing": "forward_fill",')
    config.append('    "min_history_required": 240,  # –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Å–µ—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤')
    config.append("}")

    return "\n".join(config)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""

    print("üîß –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ò –ê–ù–ê–õ–ò–ó –ü–†–ò–ó–ù–ê–ö–û–í")
    print("=" * 50)

    # –ò—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫
    print(f"üìä –ò—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(EXACT_TRAINING_FEATURES)}")

    # –û—á–∏—Å—Ç–∫–∞
    cleaned_features, removed_features = clean_feature_list(EXACT_TRAINING_FEATURES)

    print(f"‚úÖ –û—á–∏—â–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(cleaned_features)}")
    print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(removed_features)}")

    if removed_features:
        print("\nüóëÔ∏è  –£–î–ê–õ–ï–ù–ù–´–ï –ü–†–ò–ó–ù–ê–ö–ò:")
        for feature in removed_features:
            print(f"  - {feature}")

    # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = analyze_feature_categories(cleaned_features)

    print("\nüìã –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
    total_categorized = 0
    for category, features in categories.items():
        if features:
            print(f"  {category:15}: {len(features):3d} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
            total_categorized += len(features)

    print(f"  {'–ò–¢–û–ì–û':<15}: {total_categorized:3d} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    production_config = generate_production_config(cleaned_features)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    with open("production_features_config.py", "w", encoding="utf-8") as f:
        f.write(production_config)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
    with open("final_features_list.txt", "w", encoding="utf-8") as f:
        f.write(f"# –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ {len(cleaned_features)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –æ–±—É—á–∞—é—â–µ–≥–æ —Ñ–∞–π–ª–∞\n")
        f.write("# –ö–†–ò–¢–ò–ß–ù–û: –ü–æ—Ä—è–¥–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n")
        for i, feature in enumerate(cleaned_features, 1):
            f.write(f"{i:3d}. {feature}\n")

    print("\n‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("üêç –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞: production_features_config.py")
    print("üìù –°–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: final_features_list.txt")
    print(f"üìä –§–ò–ù–ê–õ–¨–ù–û–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–†–ò–ó–ù–ê–ö–û–í: {len(cleaned_features)}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ–∂–∏–¥–∞–µ–º–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
    expected_count = 208  # –∏–ª–∏ 240
    if len(cleaned_features) != expected_count:
        print(
            f"\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–∞–π–¥–µ–Ω–æ {len(cleaned_features)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_count}"
        )
        print("    –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:")
        print("    1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –∫–æ–¥–∞")
        print("    2. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —Ä–µ–∞–ª—å–Ω–æ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é")
        print("    3. –í–æ–∑–º–æ–∂–Ω–æ –º–æ–¥–µ–ª—å –±—ã–ª–∞ –æ–±—É—á–µ–Ω–∞ –Ω–∞ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

    return cleaned_features


if __name__ == "__main__":
    final_features = main()
