#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è ML —Å–∏–≥–Ω–∞–ª–æ–≤.
"""

import asyncio
import sys
import time

sys.path.append("/mnt/SSD/PYCHARMPRODJECT/BOT_AI_V3")

from core.config.config_manager import ConfigManager
from core.logger import setup_logger
from ml.ml_manager import MLManager
from ml.ml_signal_processor import MLSignalProcessor

logger = setup_logger(__name__)


async def test_signal_caching():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤."""

    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    config_manager = ConfigManager()
    config = config_manager.get_config()

    ml_manager = MLManager(config)
    await ml_manager.initialize()

    signal_processor = MLSignalProcessor(ml_manager, config, config_manager)
    await signal_processor.initialize()

    print(f"üìä Cache TTL: {signal_processor.cache_ttl} —Å–µ–∫ (15 –º–∏–Ω—É—Ç)")

    symbol = "BTCUSDT"

    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–µ–∑ –∫–µ—à–∞
    print(f"\n1Ô∏è‚É£ –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è {symbol}...")
    start = time.time()
    signal1 = await signal_processor.process_realtime_signal(symbol, "bybit")
    time1 = time.time() - start
    print(f"   –í—Ä–µ–º—è: {time1:.2f} —Å–µ–∫")

    if signal1:
        print(
            f"   –°–∏–≥–Ω–∞–ª: {signal1.signal_type.value}, confidence={signal1.confidence:.2%}"
        )

    # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ –∫–µ—à–∞
    print(f"\n2Ô∏è‚É£ –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è {symbol} (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ –∫–µ—à–∞)...")
    start = time.time()
    signal2 = await signal_processor.process_realtime_signal(symbol, "bybit")
    time2 = time.time() - start
    print(f"   –í—Ä–µ–º—è: {time2:.2f} —Å–µ–∫")

    if signal2:
        print(
            f"   –°–∏–≥–Ω–∞–ª: {signal2.signal_type.value}, confidence={signal2.confidence:.2%}"
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –±—ã—Å—Ç—Ä–µ–µ
    if time2 < time1 * 0.5:
        print("‚úÖ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –±—ã—Å—Ç—Ä–µ–µ.")
    else:
        print("‚ö†Ô∏è –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å. –í—Ä–µ–º–µ–Ω–∞ –ø–æ—Ö–æ–∂–∏.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞
    cache_size = len(signal_processor.prediction_cache)
    print(f"\nüì¶ –†–∞–∑–º–µ—Ä –∫–µ—à–∞: {cache_size} –∑–∞–ø–∏—Å–µ–π")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–∏ –∫–µ—à–∞
    if signal_processor.prediction_cache:
        print("üîë –ö–ª—é—á–∏ –≤ –∫–µ—à–µ:")
        for key in list(signal_processor.prediction_cache.keys())[:5]:
            print(f"   - {key}")


if __name__ == "__main__":
    asyncio.run(test_signal_caching())
