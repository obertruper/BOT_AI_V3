#!/usr/bin/env python3
"""
–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Å –æ—á–∏—Å—Ç–∫–æ–π ML –∫–µ—à–∞ –≤ –ø–∞–º—è—Ç–∏
"""

import asyncio
import os
import sys
import time
from pathlib import Path

from dotenv import load_dotenv

sys.path.insert(0, str(Path(__file__).parent))
load_dotenv()


async def main():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"""
    print("=" * 60)
    print("üîÑ –ü–ï–†–ï–ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ –° –û–ë–ù–û–í–õ–ï–ù–ù–û–ô ML –ú–û–î–ï–õ–¨–Æ")
    print("=" * 60)

    # 1. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    print("\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã...")
    os.system("pkill -f 'python.*unified_launcher' 2>/dev/null")
    os.system("pkill -f 'python.*main.py' 2>/dev/null")
    await asyncio.sleep(2)
    print("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

    # 2. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ (–∫–µ—à –≤ –ø–∞–º—è—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—Å—Ç–∏—Ç—Å—è)
    print("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Å ML...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
    process = await asyncio.create_subprocess_shell(
        "source venv/bin/activate && python3 unified_launcher.py --mode=ml > data/logs/startup.log 2>&1 &",
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE,
    )

    print("‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
    await asyncio.sleep(10)

    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
    check = await asyncio.create_subprocess_shell(
        "ps aux | grep -E 'python.*unified_launcher' | grep -v grep",
        stdout=asyncio.subprocess.PIPE,
    )
    stdout, _ = await check.communicate()

    if stdout:
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
        print("\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:")
        log_file = f"data/logs/bot_trading_{time.strftime('%Y%m%d')}.log"
        os.system(f"tail -20 {log_file} | grep -E 'ML|signal|Signal'")
    else:
        print("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏:")
        print("  cat data/logs/startup.log")
        return

    # 4. –ñ–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    print("\n‚è≥ –ñ–¥–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (30 —Å–µ–∫)...")
    await asyncio.sleep(30)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –≤ –ë–î
    from database.connections.postgres import AsyncPGPool

    await AsyncPGPool.initialize()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã
    signals = await AsyncPGPool.fetch(
        """
        SELECT symbol, signal_type, confidence, created_at
        FROM signals
        WHERE created_at > NOW() - INTERVAL '1 minute'
        ORDER BY created_at DESC
        LIMIT 10
    """
    )

    if signals:
        print(f"\n‚úÖ –ù–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(signals)}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        type_dist = {}
        for sig in signals:
            sig_type = sig["signal_type"]
            type_dist[sig_type] = type_dist.get(sig_type, 0) + 1

        print("\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤:")
        for sig_type, count in type_dist.items():
            print(f"  {sig_type}: {count}")

        print("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã:")
        for sig in signals[:5]:
            print(
                f"  {sig['symbol']}: {sig['signal_type']} (conf: {sig['confidence']:.3f}) - {sig['created_at']}"
            )
    else:
        print("\n‚ö†Ô∏è –ù–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: tail -f data/logs/bot_trading_$(date +%Y%m%d).log")

    await AsyncPGPool.close()

    print("\n" + "=" * 60)
    print("‚úÖ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω")
    print("\nüìä –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
    print("  # –°–ª–µ–¥–∏—Ç—å –∑–∞ —Å–∏–≥–Ω–∞–ª–∞–º–∏:")
    print(
        "  tail -f data/logs/bot_trading_$(date +%Y%m%d).log | grep -E 'signal|Signal'"
    )
    print("\n  # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å:")
    print("  python3 unified_launcher.py --status")
    print("\n  # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ML —Å–∏–≥–Ω–∞–ª–æ–≤:")
    print("  python3 scripts/monitor_ml_signals.py")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()
