#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ ML –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
"""

import asyncio
import sys
from pathlib import Path

sys.path.append(str(Path(__file__).parent))

print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
try:
    print("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")
    import matplotlib
    print(f"  ‚úÖ matplotlib {matplotlib.__version__}")
    
    import plotly
    print(f"  ‚úÖ plotly {plotly.__version__}")
    
    import seaborn
    print(f"  ‚úÖ seaborn {seaborn.__version__}")
    
except ImportError as e:
    print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install matplotlib plotly seaborn")
    sys.exit(1)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π
try:
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã...")
    
    from visualize_ml_predictions import create_predictions_chart
    print("  ‚úÖ visualize_ml_predictions")
    
    from web.api.endpoints.ml_visualization import router
    print("  ‚úÖ ml_visualization API endpoints")
    
    from database.connections.postgres import AsyncPGPool
    print("  ‚úÖ Database connection")
    
except ImportError as e:
    print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è: {e}")
    sys.exit(1)

# –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
async def test_visualization():
    print("\nüé® –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤...")
    
    import pandas as pd
    import numpy as np
    from datetime import datetime, timedelta
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    dates = pd.date_range(end=datetime.now(), periods=100, freq='15min')
    test_df = pd.DataFrame({
        'open': np.random.randn(100).cumsum() + 100,
        'high': np.random.randn(100).cumsum() + 101,
        'low': np.random.randn(100).cumsum() + 99,
        'close': np.random.randn(100).cumsum() + 100,
        'volume': np.random.randint(1000, 10000, 100)
    }, index=dates)
    
    # –¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    test_prediction = {
        'signal_type': 'LONG',
        'confidence': 0.75,
        'signal_strength': 0.543,
        'predictions': {
            'direction_probabilities': [
                [0.2, 0.3, 0.5],
                [0.15, 0.25, 0.6],
                [0.25, 0.35, 0.4],
                [0.3, 0.3, 0.4]
            ],
            'returns_15m': 0.0023,
            'returns_1h': 0.0045,
            'returns_4h': 0.0067,
            'returns_12h': 0.0089
        },
        'stop_loss_pct': 0.02,
        'take_profit_pct': 0.04,
        'risk_level': 'medium'
    }
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        from visualize_ml_predictions import (
            create_predictions_chart,
            create_market_data_analysis
        )
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        print("  üìä –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞...")
        chart_file = create_predictions_chart('TEST_SYMBOL', test_prediction, test_df)
        if chart_file:
            print(f"    ‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ–∑–¥–∞–Ω: {chart_file}")
        
        print("  üìà –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        market_file = create_market_data_analysis('TEST_SYMBOL', test_df, timestamp)
        if market_file:
            print(f"    ‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–æ–∑–¥–∞–Ω: {market_file}")
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        charts_dir = Path("data/charts")
        if charts_dir.exists():
            files = list(charts_dir.glob("*TEST_SYMBOL*"))
            print(f"\nüìÅ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
            for f in files[-5:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
                size_kb = f.stat().st_size / 1024
                print(f"  - {f.name} ({size_kb:.1f} KB)")
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")
        import traceback
        traceback.print_exc()

# –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def test_database():
    print("\nüíæ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...")
    try:
        result = await AsyncPGPool.fetch("SELECT version()")
        if result:
            print(f"  ‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω: {result[0]['version'][:30]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        count = await AsyncPGPool.fetch("SELECT COUNT(*) as cnt FROM raw_market_data")
        if count:
            print(f"  üìä –ó–∞–ø–∏—Å–µ–π –≤ raw_market_data: {count[0]['cnt']}")
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    print("=" * 60)
    print("ML VISUALIZATION SYSTEM TEST")
    print("=" * 60)
    
    await test_visualization()
    await test_database()
    
    print("\n" + "=" * 60)
    print("‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("=" * 60)

if __name__ == "__main__":
    asyncio.run(main())