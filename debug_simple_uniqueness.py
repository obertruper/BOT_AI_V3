#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
"""

import asyncio
import sys
from pathlib import Path

import numpy as np
import pandas as pd

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from core.config.config_manager import ConfigManager
from core.logger import setup_logger
from ml.logic.feature_engineering import FeatureEngineer

logger = setup_logger(__name__)


async def test_simple_uniqueness():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""

    config_manager = ConfigManager()
    config = config_manager.get_config()

    logger.info("üß™ –¢–µ—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")

    # –°–æ–∑–¥–∞–µ–º –°–ò–õ–¨–ù–û —Ä–∞–∑–ª–∏—á–∞—é—â–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ
    np.random.seed(42)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏

    # BTC: —Ü–µ–Ω—ã –æ–∫–æ–ª–æ 40000, –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    btc_base_price = 40000
    btc_data = pd.DataFrame(
        {
            "datetime": pd.date_range("2024-01-01", periods=100, freq="15min"),
            "open": btc_base_price + np.random.randn(100) * 2000,  # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å 2000
            "high": btc_base_price + 1000 + np.random.randn(100) * 2000,
            "low": btc_base_price - 1000 + np.random.randn(100) * 2000,
            "close": btc_base_price + np.random.randn(100) * 2000,
            "volume": 100
            + np.random.exponential(50, 100),  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            "turnover": 1000000 + np.random.exponential(500000, 100),
            "symbol": "BTCUSDT",
        }
    )

    # ETH: —Ü–µ–Ω—ã –æ–∫–æ–ª–æ 2500, —Å–æ–≤—Å–µ–º –¥—Ä—É–≥–∞—è –¥–∏–Ω–∞–º–∏–∫–∞
    eth_base_price = 2500
    eth_data = pd.DataFrame(
        {
            "datetime": pd.date_range("2024-01-01", periods=100, freq="15min"),
            "open": eth_base_price + np.random.randn(100) * 100,  # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å 100
            "high": eth_base_price + 50 + np.random.randn(100) * 100,
            "low": eth_base_price - 50 + np.random.randn(100) * 100,
            "close": eth_base_price + np.random.randn(100) * 100,
            "volume": 500 + np.random.exponential(200, 100),  # –î—Ä—É–≥–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            "turnover": 200000 + np.random.exponential(100000, 100),
            "symbol": "ETHUSDT",
        }
    )

    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –Ω–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    for df, name in [(btc_data, "BTC"), (eth_data, "ETH")]:
        for col in ["open", "high", "low", "close", "volume", "turnover"]:
            df[col] = np.maximum(df[col], 1.0)  # –ú–∏–Ω–∏–º—É–º 1

        logger.info(f"{name} —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        logger.info(
            f"  Close: mean={df['close'].mean():.2f}, std={df['close'].std():.2f}"
        )
        logger.info(
            f"  Volume: mean={df['volume'].mean():.2f}, std={df['volume'].std():.2f}"
        )

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
    feature_engineer = FeatureEngineer(config)

    btc_features = feature_engineer.create_features(btc_data)
    eth_features = feature_engineer.create_features(eth_data)

    logger.info("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    logger.info(
        f"BTC features: shape={btc_features.shape}, mean={btc_features.mean():.6f}, std={btc_features.std():.6f}"
    )
    logger.info(
        f"ETH features: shape={eth_features.shape}, mean={eth_features.mean():.6f}, std={eth_features.std():.6f}"
    )

    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    if btc_features.shape == eth_features.shape:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Å–ø–µ—Ä—Å–∏–∏
        btc_std = np.std(btc_features, axis=0)
        eth_std = np.std(eth_features, axis=0)

        btc_zero_var = np.sum(btc_std < 1e-8)
        eth_zero_var = np.sum(eth_std < 1e-8)

        logger.info("\nüîç –ê–Ω–∞–ª–∏–∑ –¥–∏—Å–ø–µ—Ä—Å–∏–π:")
        logger.info(
            f"BTC zero variance features: {btc_zero_var}/{btc_features.shape[1]}"
        )
        logger.info(
            f"ETH zero variance features: {eth_zero_var}/{eth_features.shape[1]}"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏
        feature_differences = []
        for i in range(btc_features.shape[1]):
            if btc_std[i] > 1e-8 and eth_std[i] > 1e-8:
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                btc_mean = np.mean(btc_features[:, i])
                eth_mean = np.mean(eth_features[:, i])
                diff = abs(btc_mean - eth_mean)
                feature_differences.append(diff)

        if feature_differences:
            avg_difference = np.mean(feature_differences)
            max_difference = np.max(feature_differences)
            min_difference = np.min(feature_differences)

            logger.info("\nüìà –†–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏:")
            logger.info(f"–°—Ä–µ–¥–Ω—è—è —Ä–∞–∑–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {avg_difference:.6f}")
            logger.info(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–æ—Å—Ç—å: {max_difference:.6f}")
            logger.info(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–æ—Å—Ç—å: {min_difference:.6f}")

            if avg_difference < 0.01:
                logger.error("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü—Ä–∏–∑–Ω–∞–∫–∏ —Å–ª–∏—à–∫–æ–º –ø–æ—Ö–æ–∂–∏ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏!")
                return False
            else:
                logger.info("‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–∑–ª–∏—á–Ω—ã –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏")
                return True
        else:
            logger.error("‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
            return False
    else:
        logger.error("‚ùå –†–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º—ã –º–∞—Å—Å–∏–≤–æ–≤ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        return False


if __name__ == "__main__":
    asyncio.run(test_simple_uniqueness())
