#!/bin/bash
# -*- coding: utf-8 -*-
# –ï–¥–∏–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã BOT Trading v3
# –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
PROJECT_ROOT="/mnt/SSD/PYCHARMPRODJECT/BOT_AI_V3"
LOG_DIR="$PROJECT_ROOT/logs"
VENV_PATH="$PROJECT_ROOT/venv"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
print_header() {
    echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${BLUE}‚ïë${NC}          ${GREEN}üöÄ BOT Trading v3 - –ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫${NC}              ${BLUE}‚ïë${NC}"
    echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
check_process() {
    local name=$1
    local port=$2
    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null ; then
        echo -e "${GREEN}‚úÖ $name —É–∂–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É $port${NC}"
        return 0
    else
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
stop_all() {
    echo -e "${YELLOW}üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã...${NC}"

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ –ø–æ—Ä—Ç–∞–º
    for port in 8080 5173; do
        if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null ; then
            echo -e "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É $port..."
            lsof -ti:$port | xargs kill -9 2>/dev/null
        fi
    done

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Python –ø—Ä–æ—Ü–µ—Å—Å—ã
    pkill -f "python main.py" 2>/dev/null
    pkill -f "python web/launcher.py" 2>/dev/null
    pkill -f "integrated_start.py" 2>/dev/null

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Node –ø—Ä–æ—Ü–µ—Å—Å—ã
    pkill -f "vite" 2>/dev/null

    sleep 2
    echo -e "${GREEN}‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
start_component() {
    local name=$1
    local command=$2
    local log_file=$3
    local check_port=$4

    echo -e "${BLUE}‚ñ∂ –ó–∞–ø—É—Å–∫ $name...${NC}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ
    if [ ! -z "$check_port" ]; then
        if check_process "$name" "$check_port"; then
            return 0
        fi
    fi

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    nohup bash -c "$command" > "$log_file" 2>&1 &
    local pid=$!

    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
    sleep 3

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
    if kill -0 $pid 2>/dev/null; then
        echo -e "${GREEN}‚úÖ $name –∑–∞–ø—É—â–µ–Ω (PID: $pid)${NC}"
        echo "$pid" > "$LOG_DIR/$name.pid"
        return 0
    else
        echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ $name${NC}"
        tail -n 20 "$log_file"
        return 1
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    print_header

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
    cd "$PROJECT_ROOT" || exit 1

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    mkdir -p "$LOG_DIR"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if [ ! -d "$VENV_PATH" ]; then
        echo -e "${RED}‚ùå –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!${NC}"
        echo -e "${YELLOW}–°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: python3 -m venv venv${NC}"
        exit 1
    fi

    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    echo -e "${BLUE}üîÑ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...${NC}"
    source "$VENV_PATH/bin/activate"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º PostgreSQL
    echo -e "${BLUE}üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL...${NC}"
    if psql -p 5555 -U obertruper -d bot_trading_v3 -c '\l' &> /dev/null; then
        echo -e "${GREEN}‚úÖ PostgreSQL –¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5555${NC}"
        echo -e "${YELLOW}   –°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –ë–î –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ${NC}"
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ML –º–æ–¥–µ–ª–∏
    echo -e "${BLUE}ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ ML —Å–∏—Å—Ç–µ–º—ã...${NC}"
    if [ -f "$PROJECT_ROOT/models/saved/best_model_20250728_215703.pth" ]; then
        echo -e "${GREEN}‚úÖ ML –º–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞${NC}"
        ML_AVAILABLE=true
    else
        echo -e "${YELLOW}‚ö†Ô∏è ML –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)${NC}"
        ML_AVAILABLE=false
    fi

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ–∂–∏–º–µ –∑–∞–ø—É—Å–∫–∞
    echo ""
    echo -e "${PURPLE}–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞:${NC}"
    echo -e "${GREEN}0) üöÄ –ï–î–ò–ù–ê–Ø –°–ò–°–¢–ï–ú–ê (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è) - –Ω–æ–≤—ã–π unified launcher${NC}"
    echo "1) –ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å ML (Core + ML + API + Frontend) - —Å—Ç–∞—Ä—ã–π —Ä–µ–∂–∏–º"
    echo "2) –ó–∞–ø—É—Å–∫ –±–µ–∑ ML (Core + API + Frontend)"
    echo "3) –¢–æ–ª—å–∫–æ API + Frontend (–±–µ–∑ —Ç–æ—Ä–≥–æ–≤–ª–∏)"
    echo "4) –¢–æ–ª—å–∫–æ Core (–∫–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º)"
    echo "5) –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã"
    echo "6) –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"
    echo "7) –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
    echo "8) –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º (—Å—Ç–∞—Ä—ã–π)"
    echo "9) –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ML"
    echo "10) –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"
    echo -e "${PURPLE}11) ü§ñ –ó–∞–ø—É—Å–∫ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º (TestingAgent)${NC}"
    read -p "–í–∞—à –≤—ã–±–æ—Ä (0-11): " choice

    case $choice in
        0)
            echo -e "\n${GREEN}üöÄ –ó–∞–ø—É—Å–∫ –ï–î–ò–ù–û–ô –°–ò–°–¢–ï–ú–´ —á–µ—Ä–µ–∑ unified_launcher...${NC}\n"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ unified_launcher.py
            if [ ! -f "$PROJECT_ROOT/unified_launcher.py" ]; then
                echo -e "${RED}‚ùå unified_launcher.py –Ω–µ –Ω–∞–π–¥–µ–Ω!${NC}"
                exit 1
            fi

            # –ó–∞–ø—É—Å–∫–∞–µ–º unified launcher
            python unified_launcher.py --mode=full
            ;;

        1)
            echo -e "\n${GREEN}üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å ML...${NC}\n"

            if [ "$ML_AVAILABLE" = false ]; then
                echo -e "${YELLOW}‚ö†Ô∏è ML –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–∑ ML –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.${NC}"
            else
                echo -e "${GREEN}‚úÖ ML –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞${NC}"
            fi

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î
            echo -e "${BLUE}üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –ë–î...${NC}"
            cd "$PROJECT_ROOT" && alembic upgrade head 2>/dev/null || echo -e "${YELLOW}‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏–∏ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã${NC}"

            # 1. –ó–∞–ø—É—Å–∫ Core System —Å ML
            start_component "Core System + ML" \
                "source $VENV_PATH/bin/activate && python main.py" \
                "$LOG_DIR/core.log" \
                ""

            # –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ML
            sleep 5
            if grep -q "ML Signal Scheduler –∑–∞–ø—É—â–µ–Ω" "$LOG_DIR/core.log" 2>/dev/null; then
                echo -e "${GREEN}ü§ñ ML —Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É${NC}"
            fi

            # 2. –ó–∞–ø—É—Å–∫ API Backend
            start_component "API Backend" \
                "source $VENV_PATH/bin/activate && python web/launcher.py" \
                "$LOG_DIR/api.log" \
                "8080"

            # 3. –ó–∞–ø—É—Å–∫ Frontend
            start_component "Web Frontend" \
                "cd $PROJECT_ROOT/web/frontend && npm run dev -- --host" \
                "$LOG_DIR/frontend.log" \
                "5173"

            echo -e "\n${GREEN}‚ú® –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞ —Å ML!${NC}"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
            sleep 3
            echo -e "\n${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
            if curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/api/health | grep -q "200"; then
                echo -e "  API Backend:    ${GREEN}‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω${NC}"
            else
                echo -e "  API Backend:    ${YELLOW}‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏)${NC}"
            fi

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Frontend
            if curl -s -o /dev/null -w "%{http_code}" http://localhost:5173 | grep -q "200"; then
                echo -e "  Web Frontend:   ${GREEN}‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω${NC}"
            else
                echo -e "  Web Frontend:   ${YELLOW}‚ö†Ô∏è –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...${NC}"
            fi

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö
            echo -e "\n${BLUE}üìã –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤...${NC}"

            # Core errors
            core_errors=$(grep -c "ERROR\|CRITICAL" "$LOG_DIR/core.log" 2>/dev/null)
            core_errors=${core_errors:-0}
            if [ "$core_errors" -gt 0 ]; then
                echo -e "  Core System:    ${RED}‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—à–∏–±–æ–∫: $core_errors${NC}"
                echo -e "                  ${YELLOW}–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞:${NC}"
                grep "ERROR\|CRITICAL" "$LOG_DIR/core.log" | tail -1 | sed 's/^/                  /'
            else
                echo -e "  Core System:    ${GREEN}‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ${NC}"
            fi

            # API errors
            api_errors=$(grep -c "ERROR\|CRITICAL" "$LOG_DIR/api.log" 2>/dev/null)
            api_errors=${api_errors:-0}
            if [ "$api_errors" -gt 0 ]; then
                echo -e "  API Backend:    ${RED}‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—à–∏–±–æ–∫: $api_errors${NC}"
            else
                echo -e "  API Backend:    ${GREEN}‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ${NC}"
            fi

            echo -e "\n${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
            echo -e "üìä Dashboard:   ${GREEN}http://localhost:5173${NC}"
            echo -e "üìö API Docs:    ${GREEN}http://localhost:8080/api/docs${NC}"
            echo -e "üìù –õ–æ–≥–∏:        ${GREEN}$LOG_DIR/${NC}"
            echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
            ;;

        2)
            echo -e "\n${GREEN}üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ ML...${NC}\n"

            # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º ML –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            export ML_DISABLED=true

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î
            echo -e "${BLUE}üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –ë–î...${NC}"
            cd "$PROJECT_ROOT" && alembic upgrade head 2>/dev/null || echo -e "${YELLOW}‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏–∏ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã${NC}"

            # 1. –ó–∞–ø—É—Å–∫ Core System –±–µ–∑ ML
            start_component "Core System" \
                "source $VENV_PATH/bin/activate && ML_DISABLED=true python main.py" \
                "$LOG_DIR/core.log" \
                ""

            # 2. –ó–∞–ø—É—Å–∫ API Backend
            start_component "API Backend" \
                "source $VENV_PATH/bin/activate && python web/launcher.py" \
                "$LOG_DIR/api.log" \
                "8080"

            # 3. –ó–∞–ø—É—Å–∫ Frontend
            start_component "Web Frontend" \
                "cd $PROJECT_ROOT/web/frontend && npm run dev -- --host" \
                "$LOG_DIR/frontend.log" \
                "5173"

            echo -e "\n${GREEN}‚ú® –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –±–µ–∑ ML!${NC}"
            echo -e "${YELLOW}‚ÑπÔ∏è ML –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞${NC}"
            ;;

        3)
            echo -e "\n${GREEN}üåê –ó–∞–ø—É—Å–∫ Web-only —Ä–µ–∂–∏–º–∞...${NC}\n"

            # –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ API –∏ Frontend
            start_component "API Backend" \
                "source $VENV_PATH/bin/activate && python web/launcher.py" \
                "$LOG_DIR/api.log" \
                "8080"

            start_component "Web Frontend" \
                "cd $PROJECT_ROOT/web/frontend && npm run dev -- --host" \
                "$LOG_DIR/frontend.log" \
                "5173"

            echo -e "\n${GREEN}‚ú® Web –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—É—â–µ–Ω!${NC}"
            echo -e "${YELLOW}‚ö†Ô∏è –¢–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞${NC}"
            ;;

        4)
            echo -e "\n${GREEN}üñ•Ô∏è –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ Core —Å–∏—Å—Ç–µ–º—ã...${NC}\n"

            start_component "Core System" \
                "source $VENV_PATH/bin/activate && python main.py" \
                "$LOG_DIR/core.log" \
                ""

            echo -e "\n${GREEN}‚ú® Core —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞!${NC}"
            echo -e "${YELLOW}‚ö†Ô∏è Web –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω${NC}"
            ;;

        5)
            stop_all
            ;;

        6)
            echo -e "\n${BLUE}üìä –ü–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:${NC}\n"

            echo -e "${PURPLE}=== –ü—Ä–æ—Ü–µ—Å—Å—ã ===${NC}"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Core
            if pgrep -f "python main.py" > /dev/null; then
                core_pid=$(pgrep -f "python main.py" | head -1)
                core_mem=$(ps -p $core_pid -o %mem= 2>/dev/null | tr -d ' ')
                core_cpu=$(ps -p $core_pid -o %cpu= 2>/dev/null | tr -d ' ')
                echo -e "Core System:    ${GREEN}‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç${NC} (PID: $core_pid, CPU: ${core_cpu}%, MEM: ${core_mem}%)"
            else
                echo -e "Core System:    ${RED}‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
            fi

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
            if check_process "API Backend" "8080"; then
                api_pid=$(lsof -ti:8080 | head -1)
                api_mem=$(ps -p $api_pid -o %mem= 2>/dev/null | tr -d ' ')
                api_cpu=$(ps -p $api_pid -o %cpu= 2>/dev/null | tr -d ' ')
                echo -e "API Backend:    ${GREEN}‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç${NC} (PID: $api_pid, CPU: ${api_cpu}%, MEM: ${api_mem}%)"
            else
                echo -e "API Backend:    ${RED}‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
            fi

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Frontend
            if check_process "Web Frontend" "5173"; then
                web_pid=$(lsof -ti:5173 | head -1)
                echo -e "Web Frontend:   ${GREEN}‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç${NC} (PID: $web_pid)"
            else
                echo -e "Web Frontend:   ${RED}‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
            fi

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º PostgreSQL
            if psql -p 5555 -U obertruper -d bot_trading_v3 -c '\l' &> /dev/null; then
                echo -e "PostgreSQL:     ${GREEN}‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç${NC} (–ø–æ—Ä—Ç 5555)"
            else
                echo -e "PostgreSQL:     ${RED}‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
            fi

            echo -e "\n${PURPLE}=== –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤ ===${NC}"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoint
            if curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/api/health | grep -q "200"; then
                echo -e "API Health:     ${GREEN}‚úÖ OK${NC} (http://localhost:8080/api/health)"
            else
                echo -e "API Health:     ${RED}‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
            fi

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Dashboard
            if curl -s -o /dev/null -w "%{http_code}" http://localhost:5173 | grep -q "200"; then
                echo -e "Dashboard:      ${GREEN}‚úÖ OK${NC} (http://localhost:5173)"
            else
                echo -e "Dashboard:      ${YELLOW}‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
            fi

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ API Docs
            if curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/api/docs | grep -q "200"; then
                echo -e "API Docs:       ${GREEN}‚úÖ OK${NC} (http://localhost:8080/api/docs)"
            else
                echo -e "API Docs:       ${RED}‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
            fi

            echo -e "\n${PURPLE}=== –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ ===${NC}"

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–æ–≥–∞–º
            if [ -f "$LOG_DIR/core.log" ]; then
                core_lines=$(wc -l < "$LOG_DIR/core.log")
                core_errors=$(grep -c "ERROR\|CRITICAL" "$LOG_DIR/core.log" 2>/dev/null || echo "0")
                core_warnings=$(grep -c "WARNING" "$LOG_DIR/core.log" 2>/dev/null || echo "0")
                echo -e "Core Log:       ${core_lines} —Å—Ç—Ä–æ–∫, ${RED}$core_errors –æ—à–∏–±–æ–∫${NC}, ${YELLOW}$core_warnings –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π${NC}"
            fi

            if [ -f "$LOG_DIR/api.log" ]; then
                api_lines=$(wc -l < "$LOG_DIR/api.log")
                api_errors=$(grep -c "ERROR\|500" "$LOG_DIR/api.log" 2>/dev/null || echo "0")
                echo -e "API Log:        ${api_lines} —Å—Ç—Ä–æ–∫, ${RED}$api_errors –æ—à–∏–±–æ–∫${NC}"
            fi

            if [ -f "$LOG_DIR/frontend.log" ]; then
                frontend_lines=$(wc -l < "$LOG_DIR/frontend.log")
                frontend_errors=$(grep -c "ERROR\|error" "$LOG_DIR/frontend.log" 2>/dev/null || echo "0")
                echo -e "Frontend Log:   ${frontend_lines} —Å—Ç—Ä–æ–∫, ${RED}$frontend_errors –æ—à–∏–±–æ–∫${NC}"
            fi

            echo -e "\n${PURPLE}=== –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ===${NC}"

            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞
            disk_usage=$(df -h "$PROJECT_ROOT" | awk 'NR==2 {print $5}')
            echo -e "–î–∏—Å–∫:           ${disk_usage} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ"

            # –†–∞–∑–º–µ—Ä –ª–æ–≥–æ–≤
            log_size=$(du -sh "$LOG_DIR" 2>/dev/null | cut -f1)
            echo -e "–†–∞–∑–º–µ—Ä –ª–æ–≥–æ–≤:   ${log_size}"

            # Uptime
            if pgrep -f "python main.py" > /dev/null; then
                core_pid=$(pgrep -f "python main.py" | head -1)
                core_uptime=$(ps -p $core_pid -o etime= 2>/dev/null | tr -d ' ')
                echo -e "Core Uptime:    ${core_uptime}"
            fi
            ;;

        7)
            echo -e "\n${BLUE}üìù –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã${NC}\n"
            echo -e "${PURPLE}–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–≥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:${NC}"
            echo "1) Core System (–æ—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞)"
            echo "2) API Backend"
            echo "3) Web Frontend"
            echo "4) –í—Å–µ –ª–æ–≥–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"
            echo "5) –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            read -p "–í–∞—à –≤—ã–±–æ—Ä (1-5): " log_choice

            case $log_choice in
                1)
                    echo -e "\n${GREEN}üìã –õ–æ–≥–∏ Core System (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):${NC}\n"
                    tail -f "$LOG_DIR/core.log"
                    ;;
                2)
                    echo -e "\n${GREEN}üìã –õ–æ–≥–∏ API Backend (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):${NC}\n"
                    tail -f "$LOG_DIR/api.log"
                    ;;
                3)
                    echo -e "\n${GREEN}üìã –õ–æ–≥–∏ Web Frontend (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):${NC}\n"
                    tail -f "$LOG_DIR/frontend.log"
                    ;;
                4)
                    echo -e "\n${GREEN}üìã –í—Å–µ –ª–æ–≥–∏ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):${NC}\n"
                    echo -e "${YELLOW}=== CORE SYSTEM ===${NC}"
                    tail -f "$LOG_DIR/core.log" | sed 's/^/[CORE] /' &
                    echo -e "\n${YELLOW}=== API BACKEND ===${NC}"
                    tail -f "$LOG_DIR/api.log" | sed 's/^/[API]  /' &
                    echo -e "\n${YELLOW}=== WEB FRONTEND ===${NC}"
                    tail -f "$LOG_DIR/frontend.log" | sed 's/^/[WEB]  /' &
                    wait
                    ;;
                5)
                    exec "$0"
                    ;;
                *)
                    echo -e "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä${NC}"
                    ;;
            esac
            ;;

        8)
            echo -e "\n${GREEN}üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...${NC}\n"
            echo -e "${YELLOW}–≠—Ç–æ—Ç —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞–µ—Ç Core –∏ API –≤ –æ–¥–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–ª—è –ª—É—á—à–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏${NC}\n"

            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            stop_all

            # –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
            echo -e "${BLUE}‚ñ∂ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...${NC}"
            nohup bash -c "source $VENV_PATH/bin/activate && python integrated_start.py" > "$LOG_DIR/integrated.log" 2>&1 &
            local pid=$!

            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
            sleep 5

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
            if kill -0 $pid 2>/dev/null; then
                echo -e "${GREEN}‚úÖ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ (PID: $pid)${NC}"
                echo "$pid" > "$LOG_DIR/integrated.pid"

                # –ó–∞–ø—É—Å–∫ Frontend
                start_component "Web Frontend" \
                    "cd $PROJECT_ROOT/web/frontend && npm run dev -- --host" \
                    "$LOG_DIR/frontend.log" \
                    "5173"

                echo -e "\n${GREEN}‚ú® –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞ –≤ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ!${NC}"

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
                sleep 3
                echo -e "\n${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"

                if curl -s http://localhost:8080/api/health | jq -r '.status' 2>/dev/null | grep -q "healthy\|degraded"; then
                    echo -e "  API Health:     ${GREEN}‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω${NC}"
                else
                    echo -e "  API Health:     ${YELLOW}‚ö†Ô∏è –†–∞–±–æ—Ç–∞–µ—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏${NC}"
                fi

                echo -e "\n${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
                echo -e "üìä Dashboard:   ${GREEN}http://localhost:5173${NC}"
                echo -e "üìö API Docs:    ${GREEN}http://localhost:8080/api/docs${NC}"
                echo -e "üìù –õ–æ–≥–∏:        ${GREEN}$LOG_DIR/integrated.log${NC}"
                echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
            else
                echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã${NC}"
                tail -n 20 "$LOG_DIR/integrated.log"
            fi
            ;;

        9)
            echo -e "\n${BLUE}üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ML...${NC}\n"

            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º venv –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            cd "$PROJECT_ROOT"
            source "$VENV_PATH/bin/activate"

            echo -e "${GREEN}üîç –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö...${NC}\n"
            python scripts/check_data_availability.py

            echo -e "\n${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
            echo -e "${YELLOW}üí° –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç 10 –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏${NC}"
            echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
            ;;

        10)
            echo -e "\n${BLUE}üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...${NC}\n"

            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º venv
            cd "$PROJECT_ROOT"
            source "$VENV_PATH/bin/activate"

            echo -e "${PURPLE}–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏:${NC}"
            echo "1) 7 –¥–Ω–µ–π (–±—ã—Å—Ç—Ä–æ, –¥–ª—è —Ç–µ—Å—Ç–æ–≤)"
            echo "2) 30 –¥–Ω–µ–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)"
            echo "3) 90 –¥–Ω–µ–π (–¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã ML)"
            echo "4) –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
            echo "5) –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            read -p "–í–∞—à –≤—ã–±–æ—Ä (1-5): " data_choice

            case $data_choice in
                1)
                    echo -e "\n${GREEN}üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ 7 –¥–Ω–µ–π...${NC}"
                    python scripts/load_historical_data.py --days 7
                    ;;
                2)
                    echo -e "\n${GREEN}üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ 30 –¥–Ω–µ–π...${NC}"
                    python scripts/load_historical_data.py --days 30
                    ;;
                3)
                    echo -e "\n${GREEN}üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ 90 –¥–Ω–µ–π...${NC}"
                    python scripts/load_historical_data.py --days 90
                    ;;
                4)
                    read -p "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: " custom_days
                    if [[ "$custom_days" =~ ^[0-9]+$ ]]; then
                        echo -e "\n${GREEN}üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ $custom_days –¥–Ω–µ–π...${NC}"
                        python scripts/load_historical_data.py --days $custom_days
                    else
                        echo -e "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç${NC}"
                    fi
                    ;;
                5)
                    exec "$0"
                    ;;
                *)
                    echo -e "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä${NC}"
                    ;;
            esac

            echo -e "\n${YELLOW}üí° –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Ö –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å (–ø—É–Ω–∫—Ç 9)${NC}"
            ;;

        11)
            echo -e "\n${PURPLE}ü§ñ –ó–∞–ø—É—Å–∫ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º (TestingAgent)...${NC}\n"

            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º venv
            cd "$PROJECT_ROOT"
            source "$VENV_PATH/bin/activate"

            echo -e "${BLUE}üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TestingAgent...${NC}"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ TestingAgent
            if [ ! -f "$PROJECT_ROOT/agents/testing_agent.py" ]; then
                echo -e "${RED}‚ùå TestingAgent –Ω–µ –Ω–∞–π–¥–µ–Ω!${NC}"
                echo -e "${YELLOW}   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª agents/testing_agent.py —Å—É—â–µ—Å—Ç–≤—É–µ—Ç${NC}"
                exit 1
            fi

            echo -e "${GREEN}‚úÖ TestingAgent –Ω–∞–π–¥–µ–Ω${NC}"

            # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞
            echo -e "\n${PURPLE}–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞ —Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º:${NC}"
            echo "1) –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ + –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"
            echo "2) –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ + Core —Å–∏—Å—Ç–µ–º–∞"
            echo "3) –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ + API —Å–∏—Å—Ç–µ–º–∞"
            echo "4) –¢–æ–ª—å–∫–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫"
            echo "5) –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–Ω—è—Ç—ã–µ –ø–æ—Ä—Ç—ã –∏ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –∏—Ö"
            echo "6) –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            read -p "–í–∞—à –≤—ã–±–æ—Ä (1-6): " testing_choice

            case $testing_choice in
                1)
                    echo -e "\n${GREEN}üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º...${NC}\n"

                    # –ó–∞–ø—É—Å–∫ TestingAgent –≤ —Ä–µ–∂–∏–º–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
                    echo -e "${BLUE}ü§ñ –ó–∞–ø—É—Å–∫ TestingAgent –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã...${NC}"
                    nohup python agents/testing_agent.py --mode=full > "$LOG_DIR/testing_agent.log" 2>&1 &
                    testing_pid=$!
                    echo "$testing_pid" > "$LOG_DIR/testing_agent.pid"

                    sleep 2

                    if kill -0 $testing_pid 2>/dev/null; then
                        echo -e "${GREEN}‚úÖ TestingAgent –∑–∞–ø—É—â–µ–Ω (PID: $testing_pid)${NC}"
                        echo -e "${BLUE}üìä TestingAgent –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –∑–∞–ø—É—Å–∫ –∏ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –æ—à–∏–±–∫–∏${NC}"

                        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
                        sleep 3

                        echo -e "\n${BLUE}üîç –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:${NC}"
                        tail -n 5 "$LOG_DIR/testing_agent.log" | sed 's/^/  /'

                        echo -e "\n${GREEN}‚ú® –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –ø–æ–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º TestingAgent!${NC}"
                        echo -e "${YELLOW}üìù –õ–æ–≥–∏ TestingAgent: $LOG_DIR/testing_agent.log${NC}"
                        echo -e "${YELLOW}üîç –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: kill $testing_pid${NC}"
                    else
                        echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ TestingAgent${NC}"
                        tail -n 10 "$LOG_DIR/testing_agent.log"
                    fi
                    ;;

                2)
                    echo -e "\n${GREEN}üöÄ –ó–∞–ø—É—Å–∫ Core —Å–∏—Å—Ç–µ–º—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º...${NC}\n"

                    # –ó–∞–ø—É—Å–∫ TestingAgent –≤ —Ä–µ–∂–∏–º–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ core —Å–∏—Å—Ç–µ–º—ã
                    echo -e "${BLUE}ü§ñ –ó–∞–ø—É—Å–∫ TestingAgent –¥–ª—è Core —Å–∏—Å—Ç–µ–º—ã...${NC}"
                    python -c "
import asyncio
import sys
sys.path.append('$PROJECT_ROOT')
from agents.testing_agent import TestingAgent

async def main():
    agent = TestingAgent()
    await agent.start_system_monitoring('core')

asyncio.run(main())
" > "$LOG_DIR/testing_agent.log" 2>&1 &
                    testing_pid=$!
                    echo "$testing_pid" > "$LOG_DIR/testing_agent.pid"

                    sleep 2
                    echo -e "${GREEN}‚úÖ TestingAgent –∑–∞–ø—É—â–µ–Ω –¥–ª—è Core —Å–∏—Å—Ç–µ–º—ã (PID: $testing_pid)${NC}"
                    ;;

                3)
                    echo -e "\n${GREEN}üöÄ –ó–∞–ø—É—Å–∫ API —Å–∏—Å—Ç–µ–º—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º...${NC}\n"

                    # –ó–∞–ø—É—Å–∫ TestingAgent –≤ —Ä–µ–∂–∏–º–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ API —Å–∏—Å—Ç–µ–º—ã
                    echo -e "${BLUE}ü§ñ –ó–∞–ø—É—Å–∫ TestingAgent –¥–ª—è API —Å–∏—Å—Ç–µ–º—ã...${NC}"
                    python -c "
import asyncio
import sys
sys.path.append('$PROJECT_ROOT')
from agents.testing_agent import TestingAgent

async def main():
    agent = TestingAgent()
    await agent.start_system_monitoring('api')

asyncio.run(main())
" > "$LOG_DIR/testing_agent.log" 2>&1 &
                    testing_pid=$!
                    echo "$testing_pid" > "$LOG_DIR/testing_agent.pid"

                    sleep 2
                    echo -e "${GREEN}‚úÖ TestingAgent –∑–∞–ø—É—â–µ–Ω –¥–ª—è API —Å–∏—Å—Ç–µ–º—ã (PID: $testing_pid)${NC}"
                    ;;

                4)
                    echo -e "\n${BLUE}üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫...${NC}\n"

                    # –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                    python -c "
import asyncio
import sys
sys.path.append('$PROJECT_ROOT')
from agents.testing_agent import TestingAgent

async def main():
    agent = TestingAgent()

    print('üîç –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø–æ—Ä—Ç–æ–≤...')
    await agent.fix_port_conflicts()

    print('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏...')
    log_content = ''
    try:
        with open('data/logs/system.log', 'r') as f:
            log_content = f.read()
    except:
        pass

    if log_content:
        errors = await agent.analyze_errors(log_content)
        if errors:
            print(f'‚ùå –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(errors)}')
            for error in errors[-5:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
                print(f'   - {error[\"type\"]}: {error[\"line\"][:100]}...')
        else:
            print('‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
    else:
        print('‚ÑπÔ∏è –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã –ø—É—Å—Ç—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã')

    print('üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')

asyncio.run(main())
"
                    ;;

                5)
                    echo -e "\n${BLUE}üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –∑–∞–Ω—è—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤...${NC}\n"

                    # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–æ–≤
                    python -c "
import asyncio
import sys
sys.path.append('$PROJECT_ROOT')
from agents.testing_agent import TestingAgent

async def main():
    agent = TestingAgent()
    print('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ –ø–æ—Ä—Ç—ã...')
    await agent.fix_port_conflicts()
    print('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')

asyncio.run(main())
"

                    echo -e "\n${GREEN}‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞${NC}"
                    echo -e "${YELLOW}üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ –ø—É–Ω–∫—Ç 0 –∏–ª–∏ 1${NC}"
                    ;;

                6)
                    exec "$0"
                    ;;

                *)
                    echo -e "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä${NC}"
                    ;;
            esac

            echo -e "\n${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
            echo -e "${PURPLE}ü§ñ TestingAgent - –§—É–Ω–∫—Ü–∏–∏:${NC}"
            echo -e "   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø–æ—Ä—Ç–æ–≤"
            echo -e "   ‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö"
            echo -e "   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –º–æ–¥—É–ª–µ–π"
            echo -e "   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏"
            echo -e "   ‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
            echo -e "   ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏"
            echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
            ;;

        *)
            echo -e "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä${NC}"
            exit 1
            ;;
    esac

    echo ""
    echo -e "${BLUE}üí° –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
    echo -e "   –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤:     ${YELLOW}tail -f $LOG_DIR/core.log${NC}"
    echo -e "   –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ:     ${YELLOW}./start_all.sh${NC} (–≤—ã–±—Ä–∞—Ç—å 4)"
    echo -e "   –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å:   ${YELLOW}./start_all.sh${NC} (–≤—ã–±—Ä–∞—Ç—å 5)"
    echo ""
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C
trap 'echo -e "\n${YELLOW}–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º${NC}"; exit 1' INT

# –ó–∞–ø—É—Å–∫
main
