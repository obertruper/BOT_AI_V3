#!/usr/bin/env python3
"""
ML Signal Strategy - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ML —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –æ—Ç SignalScheduler –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
"""

from datetime import datetime, timedelta
from typing import Any

from core.logger import setup_logger
from core.shared_context import shared_context
from database.models.base_models import SignalType
from database.models.signal import Signal
from strategies.base.strategy_abc import StrategyABC

logger = setup_logger(__name__)


class MLSignalStrategy(StrategyABC):
    """
    –¢–æ—Ä–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ ML —Å–∏–≥–Ω–∞–ª–æ–≤

    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –ü–æ–ª—É—á–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –æ—Ç ML —Å–∏—Å—Ç–µ–º—ã
    - –ü—Ä–∏–º–µ–Ω—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    - –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—è–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    - –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
    """

    def __init__(self, config: dict[str, Any]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML Signal Strategy

        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        """
        super().__init__(config)

        # ML –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.min_confidence = self.config.get("min_confidence", 0.6)
        self.min_signal_strength = self.config.get("min_signal_strength", 0.4)
        self.signal_timeout_minutes = self.config.get("signal_timeout_minutes", 15)

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏
        self.position_size_percent = self.config.get("position_size_percent", 0.02)  # 2% –æ—Ç –±–∞–ª–∞–Ω—Å–∞
        self.max_positions = self.config.get("max_positions", 1)

        # Risk management
        self.use_ml_stop_loss = self.config.get("use_ml_stop_loss", True)
        self.use_ml_take_profit = self.config.get("use_ml_take_profit", True)
        self.default_stop_loss_pct = self.config.get("default_stop_loss_pct", 0.02)
        self.default_take_profit_pct = self.config.get("default_take_profit_pct", 0.04)

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.last_signal_time = None
        self.current_ml_signal = None
        self.signal_history = []

        logger.info(f"MLSignalStrategy –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {symbol} –Ω–∞ {exchange}")

    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            await super().initialize()

            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ SignalScheduler —á–µ—Ä–µ–∑ shared context
            orchestrator = shared_context.get_orchestrator()
            if orchestrator and hasattr(orchestrator, "signal_scheduler"):
                self.signal_scheduler = orchestrator.signal_scheduler
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ ML SignalScheduler")
            else:
                logger.warning("‚ö†Ô∏è SignalScheduler –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ orchestrator")
                self.signal_scheduler = None

            logger.info(f"‚úÖ MLSignalStrategy –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {self.symbol}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MLSignalStrategy: {e}")
            return False

    async def should_enter_long(self, data: dict[str, Any]) -> tuple[bool, dict[str, Any] | None]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è LONG –ø–æ–∑–∏—Ü–∏–∏

        Args:
            data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

        Returns:
            (should_enter, signal_data)
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ML —Å–∏–≥–Ω–∞–ª
            ml_signal = await self._get_latest_ml_signal()

            if not ml_signal:
                return False, None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ LONG —Å–∏–≥–Ω–∞–ª
            if ml_signal.signal_type != SignalType.LONG:
                return False, None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞
            if not self._validate_signal_quality(ml_signal):
                return False, None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª–∞
            if not self._check_signal_timing(ml_signal):
                return False, None

            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞
            signal_data = {
                "ml_signal": ml_signal,
                "confidence": ml_signal.confidence,
                "strength": ml_signal.strength,
                "entry_price": data.get("close", ml_signal.suggested_price),
                "stop_loss": ml_signal.suggested_stop_loss if self.use_ml_stop_loss else None,
                "take_profit": ml_signal.suggested_take_profit if self.use_ml_take_profit else None,
                "ml_indicators": ml_signal.indicators,
                "timestamp": datetime.utcnow(),
            }

            logger.info(
                f"üöÄ LONG —Å–∏–≥–Ω–∞–ª –¥–ª—è {self.symbol}: "
                f"confidence={ml_signal.confidence:.1%}, strength={ml_signal.strength:.2f}"
            )

            return True, signal_data

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ LONG —É—Å–ª–æ–≤–∏–π: {e}")
            return False, None

    async def should_enter_short(self, data: dict[str, Any]) -> tuple[bool, dict[str, Any] | None]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è SHORT –ø–æ–∑–∏—Ü–∏–∏

        Args:
            data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

        Returns:
            (should_enter, signal_data)
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ML —Å–∏–≥–Ω–∞–ª
            ml_signal = await self._get_latest_ml_signal()

            if not ml_signal:
                return False, None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ SHORT —Å–∏–≥–Ω–∞–ª
            if ml_signal.signal_type != SignalType.SHORT:
                return False, None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞
            if not self._validate_signal_quality(ml_signal):
                return False, None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª–∞
            if not self._check_signal_timing(ml_signal):
                return False, None

            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞
            signal_data = {
                "ml_signal": ml_signal,
                "confidence": ml_signal.confidence,
                "strength": ml_signal.strength,
                "entry_price": data.get("close", ml_signal.suggested_price),
                "stop_loss": ml_signal.suggested_stop_loss if self.use_ml_stop_loss else None,
                "take_profit": ml_signal.suggested_take_profit if self.use_ml_take_profit else None,
                "ml_indicators": ml_signal.indicators,
                "timestamp": datetime.utcnow(),
            }

            logger.info(
                f"üîª SHORT —Å–∏–≥–Ω–∞–ª –¥–ª—è {self.symbol}: "
                f"confidence={ml_signal.confidence:.1%}, strength={ml_signal.strength:.2f}"
            )

            return True, signal_data

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SHORT —É—Å–ª–æ–≤–∏–π: {e}")
            return False, None

    async def should_exit_position(self, position_data: dict[str, Any]) -> tuple[bool, str | None]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏

        Args:
            position_data: –î–∞–Ω–Ω—ã–µ –æ –ø–æ–∑–∏—Ü–∏–∏

        Returns:
            (should_exit, reason)
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π ML —Å–∏–≥–Ω–∞–ª
            ml_signal = await self._get_latest_ml_signal()

            if ml_signal:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                current_position_type = position_data.get("side", "").upper()
                new_signal_type = ml_signal.signal_type.value.upper()

                # –ï—Å–ª–∏ ML –º–æ–¥–µ–ª—å —Å–º–µ–Ω–∏–ª–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                if (current_position_type == "LONG" and new_signal_type == "SHORT") or (
                    current_position_type == "SHORT" and new_signal_type == "LONG"
                ):
                    logger.info(
                        f"üîÑ –°–º–µ–Ω–∞ ML —Å–∏–≥–Ω–∞–ª–∞: {current_position_type} ‚Üí {new_signal_type}, "
                        f"–∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è {self.symbol}"
                    )
                    return (
                        True,
                        f"ML signal changed: {current_position_type} ‚Üí {new_signal_type}",
                    )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞ (SL/TP)
            return await super().should_exit_position(position_data)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π –≤—ã—Ö–æ–¥–∞: {e}")
            return False, None

    async def calculate_position_size(self, signal_data: dict[str, Any], balance: float) -> float:
        """
        –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π

        Args:
            signal_data: –î–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞
            balance: –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å

        Returns:
            –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ USDT
        """
        try:
            # –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            base_size = balance * self.position_size_percent

            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ ML –º–æ–¥–µ–ª–∏
            confidence = signal_data.get("confidence", 0.5)
            confidence_multiplier = min(confidence * 1.5, 1.2)  # –ú–∞–∫—Å–∏–º—É–º 20% —É–≤–µ–ª–∏—á–µ–Ω–∏–µ

            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–∏–ª–µ —Å–∏–≥–Ω–∞–ª–∞
            strength = signal_data.get("strength", 0.5)
            strength_multiplier = min(strength * 1.3, 1.1)  # –ú–∞–∫—Å–∏–º—É–º 10% —É–≤–µ–ª–∏—á–µ–Ω–∏–µ

            # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            position_size = base_size * confidence_multiplier * strength_multiplier

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
            max_position = balance * 0.1  # –ù–µ –±–æ–ª–µ–µ 10% –æ—Ç –±–∞–ª–∞–Ω—Å–∞
            position_size = min(position_size, max_position)

            logger.info(
                f"üí∞ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {self.symbol}: {position_size:.2f} USDT "
                f"(base: {base_size:.2f}, conf: {confidence:.1%}, strength: {strength:.2f})"
            )

            return position_size

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return balance * self.position_size_percent

    async def _get_latest_ml_signal(self) -> Signal | None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ML —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        try:
            if not self.signal_scheduler:
                return None

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            status = await self.signal_scheduler.get_status()

            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –Ω–∞—à–µ–≥–æ —Å–∏–º–≤–æ–ª–∞
            symbol_status = status.get("symbols", {}).get(self.symbol, {})
            last_signal_data = symbol_status.get("last_signal", {})

            if last_signal_data and last_signal_data.get("success"):
                signal = last_signal_data.get("signal")
                if signal:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
                    self.current_ml_signal = signal
                    self.last_signal_time = last_signal_data.get("timestamp")
                    return signal

            return None

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ML —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return None

    def _validate_signal_quality(self, signal: Signal) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ ML —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            if signal.confidence < self.min_confidence:
                logger.debug(
                    f"–ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.1%} < {self.min_confidence:.1%}"
                )
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞
            if signal.strength < self.min_signal_strength:
                logger.debug(
                    f"–°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª: {signal.strength:.2f} < {self.min_signal_strength:.2f}"
                )
                return False

            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return False

    def _check_signal_timing(self, signal: Signal) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            if not signal.created_at:
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏–≥–Ω–∞–ª –Ω–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–π
            signal_age = datetime.utcnow() - signal.created_at
            max_age = timedelta(minutes=self.signal_timeout_minutes)

            if signal_age > max_age:
                logger.debug(
                    f"–£—Å—Ç–∞—Ä–µ–≤—à–∏–π —Å–∏–≥–Ω–∞–ª: –≤–æ–∑—Ä–∞—Å—Ç {signal_age.total_seconds():.0f}—Å > "
                    f"{max_age.total_seconds():.0f}—Å"
                )
                return False

            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return False

    async def get_strategy_info(self) -> dict[str, Any]:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        info = await super().get_strategy_info()

        info.update(
            {
                "type": "ML_Signal_Strategy",
                "ml_parameters": {
                    "min_confidence": self.min_confidence,
                    "min_signal_strength": self.min_signal_strength,
                    "signal_timeout_minutes": self.signal_timeout_minutes,
                    "position_size_percent": self.position_size_percent,
                },
                "ml_status": {
                    "signal_scheduler_connected": self.signal_scheduler is not None,
                    "last_signal_time": (
                        self.last_signal_time.isoformat() if self.last_signal_time else None
                    ),
                    "current_signal_type": (
                        self.current_ml_signal.signal_type.value if self.current_ml_signal else None
                    ),
                },
            }
        )

        return info

    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            self.signal_scheduler = None
            self.current_ml_signal = None
            self.signal_history.clear()

            await super().cleanup()
            logger.info(f"‚úÖ MLSignalStrategy –æ—á–∏—â–µ–Ω–∞ –¥–ª—è {self.symbol}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ MLSignalStrategy: {e}")


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤ —Ä–µ–µ—Å—Ç—Ä–µ
from strategies.registry import register_strategy


@register_strategy(
    "MLSignalStrategy",
    description="ML —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç UnifiedPatchTST –º–æ–¥–µ–ª–∏",
    version="1.0.0",
    author="BOT_Trading_v3",
    tags=["ml", "neural_network", "patchtst", "real_time"],
)
class RegisteredMLSignalStrategy(MLSignalStrategy):
    """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è MLSignalStrategy"""

    pass
