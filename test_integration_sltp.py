#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π SL/TP

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import logging
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–∞–ª–æ–≥ –≤ PATH
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


async def test_ml_signal_processor_sltp():
    """–¢–µ—Å—Ç ML Signal Processor —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ SL/TP"""
    try:
        from core.config.config_manager import ConfigManager
        from ml.ml_signal_processor import MLSignalProcessor

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        config = ConfigManager()
        processor = MLSignalProcessor(config=config)

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è SHORT —Å–∏–≥–Ω–∞–ª–∞
        symbol = "BTCUSDT"
        current_price = 45000.0

        # –ò–º–∏—Ç–∏—Ä—É–µ–º ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è SHORT –ø–æ–∑–∏—Ü–∏–∏
        mock_prediction = {
            "signal_type": "SHORT",
            "confidence": 0.75,
            "signal_strength": 0.8,
            "stop_loss_pct": 0.03,  # 3% - —Ä–∏—Å–∫ —Ä–æ—Å—Ç–∞ —Ü–µ–Ω—ã
            "take_profit_pct": 0.05,  # 5% - –ø—Ä–∏–±—ã–ª—å –æ—Ç –ø–∞–¥–µ–Ω–∏—è
            "risk_level": "MEDIUM",
        }

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç SL/TP —Ü–µ–Ω
        logger.info("=" * 50)
        logger.info("–ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ ML SIGNAL PROCESSOR")
        logger.info("=" * 50)

        signal_type = mock_prediction["signal_type"]
        sl_pct = mock_prediction["stop_loss_pct"]
        tp_pct = mock_prediction["take_profit_pct"]

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç ml_signal_processor
        if signal_type == "LONG":
            stop_loss = current_price * (1 - sl_pct)
            take_profit = current_price * (1 + tp_pct)
        else:  # SHORT
            stop_loss = current_price * (1 + sl_pct)  # SL –≤—ã—à–µ —Ü–µ–Ω—ã –¥–ª—è SHORT
            take_profit = current_price * (1 - tp_pct)  # TP –Ω–∏–∂–µ —Ü–µ–Ω—ã –¥–ª—è SHORT

        logger.info(f"–°–∏–º–≤–æ–ª: {symbol}")
        logger.info(f"–¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞: {signal_type}")
        logger.info(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price}")
        logger.info(f"SL –ø—Ä–æ—Ü–µ–Ω—Ç: {sl_pct * 100}%")
        logger.info(f"TP –ø—Ä–æ—Ü–µ–Ω—Ç: {tp_pct * 100}%")
        logger.info(f"Stop Loss —Ü–µ–Ω–∞: {stop_loss} (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > {current_price})")
        logger.info(f"Take Profit —Ü–µ–Ω–∞: {take_profit} (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å < {current_price})")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
        if signal_type == "SHORT":
            if stop_loss <= current_price:
                logger.error(
                    f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: SL –¥–ª—è SHORT ({stop_loss}) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –í–´–®–ï —Ü–µ–Ω—ã ({current_price})"
                )
                return False
            if take_profit >= current_price:
                logger.error(
                    f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: TP –¥–ª—è SHORT ({take_profit}) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ù–ò–ñ–ï —Ü–µ–Ω—ã ({current_price})"
                )
                return False

        logger.info("‚úÖ ML Signal Processor: SL/TP —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ ML Signal Processor —Ç–µ—Å—Ç–µ: {e}")
        import traceback

        traceback.print_exc()
        return False


async def test_order_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤ –≤ TradingEngine"""
    try:
        logger.info("=" * 50)
        logger.info("–¢–ï–°–¢ –í–ê–õ–ò–î–ê–¶–ò–ò –û–†–î–ï–†–û–í")
        logger.info("=" * 50)

        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        class MockSignal:
            def __init__(self, signal_type, price, sl, tp):
                self.signal_type = signal_type
                self.suggested_price = price
                self.suggested_stop_loss = sl
                self.suggested_take_profit = tp

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º SHORT —Å–∏–≥–Ω–∞–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ SL/TP
        current_price = 45000.0
        sl_price = current_price * 1.03  # SL –≤—ã—à–µ —Ü–µ–Ω—ã –¥–ª—è SHORT
        tp_price = current_price * 0.97  # TP –Ω–∏–∂–µ —Ü–µ–Ω—ã –¥–ª—è SHORT

        from database.models.base_models import SignalType

        signal = MockSignal(
            signal_type=SignalType.SHORT, price=current_price, sl=sl_price, tp=tp_price
        )

        logger.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º SHORT —Å–∏–≥–Ω–∞–ª:")
        logger.info(f"–¶–µ–Ω–∞: {signal.suggested_price}")
        logger.info(f"Stop Loss: {signal.suggested_stop_loss}")
        logger.info(f"Take Profit: {signal.suggested_take_profit}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–∏–∑ trading/engine.py)
        valid = True

        if signal.signal_type == SignalType.SHORT:
            # –î–ª—è SHORT: SL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ —Ü–µ–Ω—ã, TP –Ω–∏–∂–µ —Ü–µ–Ω—ã
            if signal.suggested_stop_loss <= signal.suggested_price:
                logger.error(
                    f"SHORT: Stop loss ({signal.suggested_stop_loss}) <= —Ü–µ–Ω—ã ({signal.suggested_price})"
                )
                valid = False

            if signal.suggested_take_profit >= signal.suggested_price:
                logger.error(
                    f"SHORT: Take profit ({signal.suggested_take_profit}) >= —Ü–µ–Ω—ã ({signal.suggested_price})"
                )
                valid = False

        if valid:
            logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ä–¥–µ—Ä–æ–≤: SHORT —Å–∏–≥–Ω–∞–ª –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É!")
        else:
            logger.error("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ä–¥–µ—Ä–æ–≤: SHORT —Å–∏–≥–Ω–∞–ª –ù–ï –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É!")

        return valid

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return False


async def test_duplicate_order_manager():
    """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ OrderManager"""
    try:
        logger.info("=" * 50)
        logger.info("–¢–ï–°–¢ –ó–ê–©–ò–¢–´ –û–¢ –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –í ORDER MANAGER")
        logger.info("=" * 50)

        from trading.orders.order_manager import OrderManager

        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ exchange registry
        class MockExchangeRegistry:
            pass

        order_manager = OrderManager(MockExchangeRegistry())

        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–∏–≥–Ω–∞–ª
        class MockSignal:
            def __init__(self, symbol):
                self.symbol = symbol
                self.signal_type = "SHORT"

        signal = MockSignal("BTCUSDT")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        is_first_duplicate = await order_manager._is_duplicate_order(signal)
        logger.info(f"–ü–µ—Ä–≤—ã–π –æ—Ä–¥–µ—Ä –¥—É–±–ª–∏—Ä—É—é—â–∏–π: {is_first_duplicate}")

        # –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –æ—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω
        import time

        order_manager._recent_orders[signal.symbol] = time.time()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä–æ–π –æ—Ä–¥–µ—Ä
        is_second_duplicate = await order_manager._is_duplicate_order(signal)
        logger.info(f"–í—Ç–æ—Ä–æ–π –æ—Ä–¥–µ—Ä –¥—É–±–ª–∏—Ä—É—é—â–∏–π: {is_second_duplicate}")

        if not is_first_duplicate and is_second_duplicate:
            logger.info("‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ OrderManager —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return True
        else:
            logger.error("‚ùå –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ OrderManager –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return False

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ OrderManager: {e}")
        import traceback

        traceback.print_exc()
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô SL/TP")

    success_count = 0
    total_tests = 3

    # –¢–µ—Å—Ç 1: ML Signal Processor
    if await test_ml_signal_processor_sltp():
        success_count += 1

    # –¢–µ—Å—Ç 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ä–¥–µ—Ä–æ–≤
    if await test_order_validation():
        success_count += 1

    # –¢–µ—Å—Ç 3: –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    if await test_duplicate_order_manager():
        success_count += 1

    logger.info("=" * 50)
    if success_count == total_tests:
        logger.info(f"üéâ –í–°–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! ({success_count}/{total_tests})")
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ SL/TP –¥–ª—è SHORT –ø–æ–∑–∏—Ü–∏–π")
    else:
        logger.error(f"‚ùå –ù–ï –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! ({success_count}/{total_tests})")
    logger.info("=" * 50)

    return success_count == total_tests


if __name__ == "__main__":
    result = asyncio.run(main())
    exit(0 if result else 1)
