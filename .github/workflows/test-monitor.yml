name: Test Coverage Monitor

on:
  push:
    branches: [main, develop]
  pull_request:
  schedule:
    - cron: '0 */6 * * *'  # –ö–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
  workflow_dispatch:

jobs:
  monitor-coverage:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install click pytest pytest-cov
          pip install -r requirements.txt
      
      - name: Generate test dashboard
        run: |
          python scripts/smart_test_manager.py dashboard
      
      - name: Check for missing tests
        id: check_missing
        run: |
          python scripts/smart_test_manager.py generate --update
          
          # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
          NEW_TESTS=$(git status --porcelain | grep "test_.*\.py" | wc -l)
          echo "new_tests=$NEW_TESTS" >> $GITHUB_OUTPUT
      
      - name: Upload dashboard
        uses: actions/upload-artifact@v4
        with:
          name: test-dashboard
          path: tests/test_dashboard.html
      
      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const dashboard = fs.readFileSync('tests/test_dashboard.html', 'utf8');
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ HTML
            const coverageMatch = dashboard.match(/–ü–æ–∫—Ä—ã—Ç–∏–µ —Ñ—É–Ω–∫—Ü–∏–π.*?(\d+\.\d+)%/);
            const coverage = coverageMatch ? coverageMatch[1] : 'N/A';
            
            const missingMatch = dashboard.match(/–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ—Å—Ç–æ–≤.*?(\d+)/);
            const missing = missingMatch ? missingMatch[1] : 'N/A';
            
            const comment = `## üìä Test Coverage Report
            
            - **–ü–æ–∫—Ä—ã—Ç–∏–µ —Ñ—É–Ω–∫—Ü–∏–π:** ${coverage}%
            - **–§—É–Ω–∫—Ü–∏–π –±–µ–∑ —Ç–µ—Å—Ç–æ–≤:** ${missing}
            - **–ù–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ:** ${{ steps.check_missing.outputs.new_tests }}
            
            [–°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ### üí° –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞:
            \`\`\`bash
            # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–µ—Å—Ç—ã
            python scripts/smart_test_manager.py generate
            
            # –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞—à–±–æ—Ä–¥
            python scripts/smart_test_manager.py dashboard
            \`\`\`
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
      
      - name: Fail if coverage too low
        run: |
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ
          python -c "
          import json
          import sys
          
          try:
              with open('coverage.json', 'r') as f:
                  data = json.load(f)
                  coverage = data.get('totals', {}).get('percent_covered', 0)
                  
                  if coverage < 60:
                      print(f'‚ùå –ü–æ–∫—Ä—ã—Ç–∏–µ {coverage:.1f}% –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ (60%)')
                      sys.exit(1)
                  else:
                      print(f'‚úÖ –ü–æ–∫—Ä—ã—Ç–∏–µ {coverage:.1f}% –≤ –Ω–æ—Ä–º–µ')
          except:
              print('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ')
          "
  
  auto-fix-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: monitor-coverage
    
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install click pytest
          pip install -r requirements.txt
      
      - name: Auto-generate missing tests
        run: |
          python scripts/smart_test_manager.py generate
          
          # –ö–æ–º–º–∏—Ç–∏–º –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
          if [ -n "$(git status --porcelain)" ]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add tests/
            git commit -m "test: Auto-generate missing tests [skip ci]"
            git push
          fi