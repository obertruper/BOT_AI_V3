name: AI-Powered Code Review and Development

on:
  pull_request:
    types: [opened, synchronize, reopened]
  issue_comment:
    types: [created]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: read

jobs:
  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PR
  ai-code-review:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install ruff black pytest pytest-cov

    - name: Install Claude Code CLI
      run: |
        npm install -g @anthropics/claude-code

    - name: Code Review with AI
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python -c "
        import asyncio
        import sys
        import os
        sys.path.append('.')

        from ai_agents import review_code, security_audit, get_mcp_manager

        async def main():
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            import subprocess
            result = subprocess.run(['git', 'diff', '--name-only', 'origin/main...HEAD'],
                                  capture_output=True, text=True)
            changed_files = [f for f in result.stdout.strip().split('\n') if f.endswith('.py')]

            print(f'Reviewing {len(changed_files)} Python files...')

            reviews = []
            for file_path in changed_files[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                try:
                    review = await review_code(file_path)
                    reviews.append(f'## {file_path}\n{review}\n')

                    # Security audit –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                    if 'security' in file_path or 'auth' in file_path:
                        audit = await security_audit(file_path)
                        reviews.append(f'### Security Audit for {file_path}\n{audit}\n')

                except Exception as e:
                    reviews.append(f'## {file_path}\n‚ùå Error reviewing: {str(e)}\n')

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            with open('ai_review_result.md', 'w') as f:
                f.write('# AI Code Review Results\n\n')
                f.write('\n'.join(reviews))

        asyncio.run(main())
        "

    - name: Comment PR with Review Results
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          let reviewContent = '# ü§ñ AI Code Review\n\n';

          if (fs.existsSync('ai_review_result.md')) {
            reviewContent += fs.readFileSync('ai_review_result.md', 'utf8');
          } else {
            reviewContent += '‚ùå AI review failed to complete.\n';
          }

          reviewContent += '\n---\n*Generated by Claude AI Agent*';

          // –ù–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const botComment = comments.find(comment =>
            comment.user.type === 'Bot' && comment.body.includes('ü§ñ AI Code Review')
          );

          if (botComment) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: reviewContent
            });
          } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: reviewContent
            });
          }

  # –†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
  ai-commands:
    if: github.event_name == 'issue_comment' && github.event.issue.pull_request && contains(github.event.comment.body, '@claude')
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        npm install -g @anthropics/claude-code

    - name: Parse and Execute AI Command
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python -c "
        import asyncio
        import sys
        import os
        import re
        sys.path.append('.')

        from ai_agents import (
            review_code, generate_tests, optimize_performance,
            security_audit, autonomous_development, get_token_manager
        )

        async def main():
            comment = '''${{ github.event.comment.body }}'''
            print(f'Processing comment: {comment}')

            result = ''

            # –ö–æ–º–∞–Ω–¥—ã AI
            if '@claude review' in comment:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–π–ª –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                file_match = re.search(r'review\s+(\S+\.py)', comment)
                if file_match:
                    file_path = file_match.group(1)
                    result = await review_code(file_path)
                else:
                    result = 'Please specify a Python file to review: @claude review file.py'

            elif '@claude test' in comment:
                file_match = re.search(r'test\s+(\S+\.py)', comment)
                if file_match:
                    file_path = file_match.group(1)
                    result = await generate_tests(file_path)
                else:
                    result = 'Please specify a Python file to test: @claude test file.py'

            elif '@claude optimize' in comment:
                file_match = re.search(r'optimize\s+(\S+\.py)', comment)
                if file_match:
                    file_path = file_match.group(1)
                    result = await optimize_performance(file_path)
                else:
                    result = 'Please specify a Python file to optimize: @claude optimize file.py'

            elif '@claude security' in comment:
                file_match = re.search(r'security\s+(\S+)', comment)
                if file_match:
                    target_path = file_match.group(1)
                    result = await security_audit(target_path)
                else:
                    result = 'Please specify a path to audit: @claude security path/'

            elif '@claude implement' in comment:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
                description_match = re.search(r'implement\s+(.+)', comment)
                if description_match:
                    description = description_match.group(1)
                    result = await autonomous_development(description)
                else:
                    result = 'Please provide a feature description: @claude implement <description>'

            elif '@claude usage' in comment:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–∫–µ–Ω–æ–≤
                manager = get_token_manager()
                usage_report = manager.get_usage_report('daily')
                result = '# Token Usage Report\\n\\n'
                result += 'Daily Usage: {} tokens\\n'.format('{:,}'.format(usage_report["total_tokens"]))
                result += 'Cost: ${:.2f}\\n'.format(usage_report["total_cost_usd"])
                result += 'Requests: {}\\n'.format(usage_report["total_requests"])
                result += 'Cache Hit Rate: {:.1f}%\\n\\n'.format(usage_report["cache_hit_rate"])
                result += 'Top Agents:'
                top_agents = list(usage_report["by_agent"].items())[:5]
                for agent, data in top_agents:
                    result += '\\n- {}: {} tokens'.format(agent, '{:,}'.format(data["tokens"]))

            else:
                result = 'Available commands:\\n'
                result += '- `@claude review file.py` - Review a file\\n'
                result += '- `@claude test file.py` - Generate tests\\n'
                result += '- `@claude optimize file.py` - Optimize performance\\n'
                result += '- `@claude security path/` - Security audit\\n'
                result += '- `@claude implement <description>` - Autonomous development\\n'
                result += '- `@claude usage` - Show token usage stats'

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            with open('ai_command_result.md', 'w') as f:
                f.write(result)

        asyncio.run(main())
        "

    - name: Reply to Comment
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          let response = 'ü§ñ **Claude AI Response**\n\n';

          if (fs.existsSync('ai_command_result.md')) {
            response += fs.readFileSync('ai_command_result.md', 'utf8');
          } else {
            response += '‚ùå Command execution failed.';
          }

          response += '\n\n---\n*Executed by Claude AI Agent*';

          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: response
          });

  # –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
  autonomous-development:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        npm install -g @anthropics/claude-code

    - name: Run Architecture Analysis
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        python -c "
        import asyncio
        import sys
        sys.path.append('.')

        from ai_agents import analyze_project_architecture, generate_architecture_report

        async def main():
            print('Running architecture analysis...')
            await generate_architecture_report('architecture_report.md')
            print('Architecture report generated')

        asyncio.run(main())
        "

    - name: Create Architecture Issue
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          if (fs.existsSync('architecture_report.md')) {
            const report = fs.readFileSync('architecture_report.md', 'utf8');

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üìä Architecture Analysis Report - ${new Date().toISOString().split('T')[0]}`,
              body: report,
              labels: ['architecture', 'ai-generated']
            });
          }

  # –õ–∏–Ω—Ç–∏–Ω–≥ –∏ —Ç–µ—Å—Ç—ã
  quality-checks:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install ruff black pytest pytest-cov

    - name: Run Ruff
      run: |
        ruff check . --output-format=github

    - name: Run Black
      run: |
        black --check --diff .

    - name: Run Tests
      run: |
        pytest tests/ -v --cov=. --cov-report=xml

    - name: Upload Coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
