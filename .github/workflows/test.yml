name: Test Pull Request

on:
  pull_request:
    branches: [ main, production ]
  push:
    branches: [ develop, feature/* ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass  # pragma: allowlist secret
          POSTGRES_DB: bot_trading_test
        ports:
          - 5555:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          venv
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m venv venv
        source venv/bin/activate
        pip install -r requirements.txt
        pip install pytest-cov

    - name: Lint with ruff and black
      run: |
        source venv/bin/activate
        black . --check
        ruff check .

    - name: Type check with mypy
      run: |
        source venv/bin/activate
        mypy . --ignore-missing-imports || true

    - name: Test with pytest
      env:
        PGPORT: 5555
        PGUSER: test_user
        PGPASSWORD: test_pass  # pragma: allowlist secret
        PGDATABASE: bot_trading_test
        REDIS_URL: redis://localhost:6379
        ENVIRONMENT: test
      run: |
        source venv/bin/activate
        pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Security check
      run: |
        source venv/bin/activate
        pip install bandit
        bandit -r . -ll -x './venv/*,./tests/*' || true

    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
