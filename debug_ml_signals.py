#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ ML —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import asyncio
import os
from datetime import datetime

from dotenv import load_dotenv

load_dotenv()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ["PGPORT"] = "5555"
os.environ["PGUSER"] = "obertruper"
os.environ["PGDATABASE"] = "bot_trading_v3"


async def debug_ml():
    """–û—Ç–ª–∞–¥–∫–∞ ML —Å–∏–≥–Ω–∞–ª–æ–≤"""
    from core.config.config_manager import get_global_config_manager
    from database.connections.postgres import AsyncPGPool
    from ml.ml_manager import MLManager

    print(f"\nüîç –û–¢–õ–ê–î–ö–ê ML –°–ò–ì–ù–ê–õ–û–í - {datetime.now().strftime('%H:%M:%S')}")
    print("=" * 60)

    try:
        pool = await AsyncPGPool.get_pool()
        config_manager = get_global_config_manager()

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
        print("\nüìä –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–•:")

        data_count = await pool.fetchrow(
            """
            SELECT
                COUNT(*) as total,
                MIN(datetime) as first,
                MAX(datetime) as last
            FROM raw_market_data
            WHERE symbol = 'BTCUSDT' AND interval_minutes = 15
        """
        )

        if data_count:
            print(f"   BTCUSDT: {data_count['total']} —Å–≤–µ—á–µ–π")
            print(f"   –ü–µ—Ä–≤–∞—è: {data_count['first']}")
            print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è: {data_count['last']}")

        # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ML Manager
        print("\nü§ñ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ML:")

        config = config_manager.get_config()
        ml_manager = MLManager(config)
        await ml_manager.initialize()
        print("   ‚úÖ ML Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –≤—Ä—É—á–Ω—É—é
        print("\nüìà –ì–ï–ù–ï–†–ê–¶–ò–Ø ML –°–ò–ì–ù–ê–õ–ê:")

        symbols = ["BTCUSDT"]

        for symbol in symbols:
            try:
                signal = await ml_manager.generate_signal(symbol)

                if signal:
                    print(f"\n   ‚úÖ –°–∏–≥–Ω–∞–ª –¥–ª—è {symbol}:")
                    print(f"      –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {signal.signal_type}")
                    print(f"      –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.2%}")
                    print(f"      –°–∏–ª–∞: {signal.strength:.4f}")
                    print(f"      –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ü–µ–Ω–∞: ${signal.suggested_price}")

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ –ë–î
                    await pool.execute(
                        """
                        INSERT INTO signals
                        (symbol, signal_type, strength, confidence, suggested_price,
                         strategy_name, created_at, extra_data)
                        VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
                    """,
                        signal.symbol,
                        signal.signal_type,
                        signal.strength,
                        signal.confidence,
                        signal.suggested_price,
                        "ML_Debug",
                        datetime.now(),
                        "{}",
                    )
                    print("      ‚úÖ –°–∏–≥–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
                else:
                    print(f"   ‚ùå –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}")

            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}: {e}")
                import traceback

                traceback.print_exc()

        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        print("\nüìä –ü–û–°–õ–ï–î–ù–ò–ï –°–ò–ì–ù–ê–õ–´ –í –ë–î:")

        signals = await pool.fetch(
            """
            SELECT
                symbol,
                signal_type,
                strength,
                confidence,
                created_at
            FROM signals
            WHERE created_at > NOW() - INTERVAL '1 hour'
            ORDER BY created_at DESC
            LIMIT 5
        """
        )

        if signals:
            for sig in signals:
                print(
                    f"   {sig['symbol']} - {sig['signal_type']} "
                    f"(—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {sig['confidence']:.0%}) "
                    f"–≤ {sig['created_at'].strftime('%H:%M:%S')}"
                )
        else:
            print("   –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å")

        print("\n" + "=" * 60)

    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()
    finally:
        await AsyncPGPool.close_pool()


if __name__ == "__main__":
    asyncio.run(debug_ml())
