#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Metabase –¥–ª—è BOT_AI_V3
"""

import sys
import time

import requests

METABASE_URL = "http://localhost:3000"
DB_PASSWORD = "ilpnqw1234"  # –ü–∞—Ä–æ–ª—å —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º


def wait_for_metabase():
    """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ Metabase"""
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ Metabase...")
    for i in range(60):
        try:
            r = requests.get(f"{METABASE_URL}/api/health")
            if r.status_code == 200:
                print("‚úÖ Metabase –∑–∞–ø—É—â–µ–Ω")
                return True
        except:
            pass
        time.sleep(2)
    return False


def setup_initial_user():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    print("\nüì§ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
    try:
        r = requests.get(f"{METABASE_URL}/api/session/properties")
        props = r.json()

        if props.get("has-user-setup"):
            print("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return True

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    setup_data = {
        "user": {
            "first_name": "Admin",
            "last_name": "BOT_AI_V3",
            "email": "admin@botai.local",
            "password": "Admin123!@#",
        },
        "prefs": {"site_name": "BOT_AI_V3 Analytics", "site_locale": "ru"},
    }

    try:
        r = requests.post(f"{METABASE_URL}/api/setup", json=setup_data)
        if r.status_code == 200:
            print("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
            print("   Email: admin@botai.local")
            print("   Password: Admin123!@#")
            return r.json().get("id")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None


def add_database_connection(session_token=None):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    print("\nüîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...")

    db_config = {
        "engine": "postgres",
        "name": "BOT_AI_V3 Trading Database",
        "details": {
            "host": "host.docker.internal",
            "port": 5555,
            "dbname": "bot_trading_v3",
            "user": "obertruper",
            "password": DB_PASSWORD,
            "ssl": False,
            "tunnel-enabled": False,
        },
        "auto_run_queries": True,
        "is_full_sync": True,
        "schedules": {
            "cache_field_values": {"schedule_type": "daily", "schedule_hour": 3},
            "metadata_sync": {"schedule_type": "hourly"},
        },
    }

    headers = {}
    if session_token:
        headers["X-Metabase-Session"] = session_token

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ë–î
        r = requests.post(f"{METABASE_URL}/api/database", json=db_config, headers=headers)

        if r.status_code in [200, 201]:
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
            return r.json().get("id")
        else:
            print(f"‚ö†Ô∏è –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {r.status_code}")
            print(f"   {r.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ë–î: {e}")

    return None


def create_dashboard_examples():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–∞—à–±–æ—Ä–¥–æ–≤"""
    print("\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞—à–±–æ—Ä–¥–∞—Ö...")

    dashboards = [
        {
            "name": "ML Predictions Monitor",
            "description": "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏",
        },
        {"name": "Trading Performance", "description": "–ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"},
        {"name": "Signal Quality", "description": "–ö–∞—á–µ—Å—Ç–≤–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"},
        {"name": "Risk Analysis", "description": "–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –∏ SL/TP —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"},
    ]

    print("\nüìã –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–∞—à–±–æ—Ä–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:")
    for dash in dashboards:
        print(f"   ‚Ä¢ {dash['name']}: {dash['description']}")

    print("\nüí° –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–æ–≤:")
    print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000")
    print("   2. –í–æ–π–¥–∏—Ç–µ —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤—ã—à–µ")
    print("   3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ SQL Editor")
    print("   4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å—ã –∏–∑ metabase_dashboards.sql")


def main():
    print("=" * 50)
    print("   –ù–ê–°–¢–†–û–ô–ö–ê METABASE –î–õ–Ø BOT_AI_V3")
    print("=" * 50)

    if not wait_for_metabase():
        print("‚ùå Metabase –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
        sys.exit(1)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    session_token = setup_initial_user()

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ë–î
    db_id = add_database_connection(session_token)

    print("\n" + "=" * 50)
    print("   –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 50)

    print("\nüéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: http://localhost:3000")
    print("2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –≤ Admin ‚Üí Databases")
    print("4. –°–æ–∑–¥–∞–π—Ç–µ –¥–∞—à–±–æ—Ä–¥—ã –∏—Å–ø–æ–ª—å–∑—É—è SQL –∏–∑ metabase_dashboards.sql")

    print("\nüìä –ü–æ–ª–µ–∑–Ω—ã–µ SQL –∑–∞–ø—Ä–æ—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:")
    print("   ‚Ä¢ metabase_dashboards.sql - –≥–æ—Ç–æ–≤—ã–µ views")
    print("   ‚Ä¢ docs/METABASE_SETUP.md - –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")


if __name__ == "__main__":
    main()
