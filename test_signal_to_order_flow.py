# \!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –æ—Ç ML —Å–∏–≥–Ω–∞–ª–∞ –¥–æ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ Bybit

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –∏ –ø—Ä–æ–≥–æ–Ω—è–µ—Ç –µ–≥–æ —á–µ—Ä–µ–∑ –≤–µ—Å—å –ø–∞–π–ø–ª–∞–π–Ω:
ML Signal ‚Üí Trading Engine ‚Üí Signal Processor ‚Üí Order Manager ‚Üí Execution Engine ‚Üí Bybit
"""

import asyncio
import os
import sys
from datetime import datetime

from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

load_dotenv()

from core.config.config_manager import ConfigManager
from core.system.orchestrator import SystemOrchestrator

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
from strategies.base.strategy_abc import SignalType as StrategySignalType
from strategies.base.strategy_abc import TradingSignal


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    print("=" * 80)
    print("üß™ –¢–ï–°–¢ –ü–û–õ–ù–û–ì–û –ü–û–¢–û–ö–ê: ML –°–ò–ì–ù–ê–õ ‚Üí –û–†–î–ï–† –ù–ê BYBIT")
    print(f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 80)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_manager = ConfigManager()

    # –°–æ–∑–¥–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
    orchestrator = SystemOrchestrator(config_manager)

    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
        print("\n1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...")
        await orchestrator.initialize()
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        # 2. –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
        print("\n2Ô∏è‚É£ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞...")
        await orchestrator.start()
        await asyncio.sleep(3)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
        print("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –∑–∞–ø—É—â–µ–Ω")

        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ trading engine
        trading_engine = orchestrator.trading_engine
        if not trading_engine:
            print("‚ùå Trading Engine –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ orchestrator!")
            print("–ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å Trading Engine –Ω–∞–ø—Ä—è–º—É—é...")

            # –°–æ–∑–¥–∞–µ–º Trading Engine –Ω–∞–ø—Ä—è–º—É—é
            from trading.engine import TradingEngine

            trading_engine = TradingEngine(
                orchestrator=orchestrator, config=config_manager.get_config()
            )
            await trading_engine.initialize()
            await trading_engine.start()
            print("‚úÖ Trading Engine —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é")

        # 3. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        print("\n3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ ML —Å–∏–≥–Ω–∞–ª–∞...")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É BTC
        from exchanges.factory import ExchangeFactory

        factory = ExchangeFactory()
        exchange = await factory.create_and_connect(
            exchange_type="bybit",
            api_key=os.getenv("BYBIT_API_KEY"),
            api_secret=os.getenv("BYBIT_API_SECRET"),
            sandbox=False,
        )
        await exchange.initialize()

        ticker = await exchange.get_ticker("BTC/USDT")
        current_price = ticker["last"]
        print(f"üìä –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC/USDT: ${current_price:.2f}")

        # –°–æ–∑–¥–∞–µ–º TradingSignal (–∫–∞–∫ –æ—Ç AI Signal Generator)
        test_signal = TradingSignal(
            timestamp=datetime.now(),
            symbol="BTC/USDT",
            signal_type=StrategySignalType.BUY,
            confidence=75.0,  # 75% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            entry_price=current_price,
            stop_loss=current_price * 0.98,  # SL -2%
            take_profit=current_price * 1.03,  # TP +3%
            position_size=10.0,  # $10 –ø–æ–∑–∏—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
            strategy_name="ML_TEST_SIGNAL",
            timeframe="15m",
            indicators_used=["ML_Model", "Test"],
        )

        print(f"üìã –°–æ–∑–¥–∞–Ω —Å–∏–≥–Ω–∞–ª: BUY BTC/USDT @ ${current_price:.2f}")
        print(
            f"   SL: ${test_signal.stop_loss:.2f} | TP: ${test_signal.take_profit:.2f}"
        )
        print(f"   –†–∞–∑–º–µ—Ä: ${test_signal.position_size}")

        # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ Trading Engine
        print("\n4Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ Trading Engine...")
        await trading_engine.receive_trading_signal(test_signal)
        print("‚úÖ –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

        # 5. –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        print("\n5Ô∏è‚É£ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞...")
        await asyncio.sleep(5)

        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        print("\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞:")
        status = trading_engine.get_status()
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {status['metrics']['signals_processed']}")
        print(f"   –ò—Å–ø–æ–ª–Ω–µ–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤: {status['metrics']['orders_executed']}")
        print(f"   –û—à–∏–±–æ–∫: {status['metrics']['errors_count']}")

        # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–¥–µ—Ä–∞ –≤ –ë–î
        print("\n7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤ –≤ –ë–î...")
        from sqlalchemy import text

        from database.connections import get_async_db

        async with get_async_db() as db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
            result = await db.execute(
                text(
                    """
                    SELECT order_id, symbol, side, quantity, price, status, created_at
                    FROM orders
                    ORDER BY created_at DESC
                    LIMIT 5
                """
                )
            )

            orders = result.fetchall()
            if orders:
                print(f"   –ù–∞–π–¥–µ–Ω–æ {len(orders)} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤:")
                for order in orders:
                    print(
                        f"   {order.created_at} | {order.symbol} | {order.side} {order.quantity} @ {order.price} | {order.status}"
                    )
            else:
                print("   ‚ùå –û—Ä–¥–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        # 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ Bybit
        print("\n8Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ Bybit...")
        open_orders = await exchange.fetch_open_orders()

        if open_orders:
            print(f"   –ù–∞–π–¥–µ–Ω–æ {len(open_orders)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –±–∏—Ä–∂–µ:")
            for order in open_orders[:5]:
                print(
                    f"   {order['datetime']} | {order['symbol']} | {order['side']} {order['amount']} @ {order['price']}"
                )
        else:
            print("   –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –±–∏—Ä–∂–µ")

    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback

        traceback.print_exc()

    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
        await orchestrator.shutdown()
        if "exchange" in locals():
            await exchange.close()
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    print("\n" + "=" * 80)
    print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")


if __name__ == "__main__":
    asyncio.run(main())
