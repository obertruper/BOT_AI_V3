#!/usr/bin/env python3
"""
–ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—à–∏–±–∫–∏ sqrt
"""

import asyncio
import traceback

import numpy as np
import pandas as pd

from core.logger import setup_logger

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
from ml.realtime_indicator_calculator import RealTimeIndicatorCalculator

logger = setup_logger(__name__)


async def test_sqrt_isolation():
    """–ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ sqrt"""

    print("üîç –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –æ—à–∏–±–∫–∏ sqrt...")

    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
        dates = pd.date_range(start="2024-01-01", periods=500, freq="15min")

        np.random.seed(42)
        close_prices = 50000 + np.cumsum(np.random.randn(500) * 100)

        ohlcv_df = pd.DataFrame(
            {
                "open": close_prices * (1 + np.random.randn(500) * 0.001),
                "high": close_prices * (1 + np.abs(np.random.randn(500)) * 0.002),
                "low": close_prices * (1 - np.abs(np.random.randn(500)) * 0.002),
                "close": close_prices,
                "volume": np.random.rand(500) * 1000000,
                "turnover": np.random.rand(500) * 50000000,
                "symbol": "BTCUSDT",
            },
            index=dates,
        )

        print(f"‚úÖ –°–æ–∑–¥–∞–Ω OHLCV DataFrame: {ohlcv_df.shape}")

        # –°–æ–∑–¥–∞–µ–º RealTimeIndicatorCalculator –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
        config = {"ml": {"cache_ttl": 60}}

        indicator_calculator = RealTimeIndicatorCalculator(
            cache_ttl=60, config=config, use_inference_mode=True
        )

        print("‚úÖ RealTimeIndicatorCalculator —Å–æ–∑–¥–∞–Ω")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º calculate_indicators
        print("üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º calculate_indicators...")

        indicators = await indicator_calculator.calculate_indicators(
            symbol="BTCUSDT",
            ohlcv_df=ohlcv_df,
            save_to_db=False,  # –û—Ç–∫–ª—é—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞
        )

        print(f"‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã: {type(indicators)}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º prepare_ml_input
        print("üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º prepare_ml_input...")

        features_array, metadata = await indicator_calculator.prepare_ml_input(
            symbol="BTCUSDT", ohlcv_df=ohlcv_df, lookback=96
        )

        print(f"‚úÖ ML input –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω: {features_array.shape}")
        print(f"üìä Metadata: {metadata}")

        print("üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –ë–ï–ó –æ—à–∏–±–æ–∫!")

    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –í –ò–ó–û–õ–ò–†–û–í–ê–ù–ù–û–ú –¢–ï–°–¢–ï: {e}")
        print("üìú –ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:")
        traceback.print_exc()

        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏
        if "sqrt" in str(e).lower():
            print("\nüéØ –≠—Ç–æ –æ—à–∏–±–∫–∞ sqrt! –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:")
            error_str = str(e)
            print(f"   - –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
            print(f"   - –°–æ–æ–±—â–µ–Ω–∏–µ: {error_str}")

        return False

    return True


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –æ—à–∏–±–∫–∏ sqrt...")
    result = asyncio.run(test_sqrt_isolation())

    if result:
        print("‚úÖ –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –ü–†–û–®–ï–õ - –æ—à–∏–±–∫–∞ sqrt –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    else:
        print("‚ùå –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –ü–†–û–í–ê–õ–ï–ù - –æ—à–∏–±–∫–∞ sqrt –≤—Å–µ –µ—â–µ –µ—Å—Ç—å!")
