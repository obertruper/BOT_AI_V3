#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π ML —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import sys

sys.path.append("/mnt/SSD/PYCHARMPRODJECT/BOT_AI_V3")

from core.config.config_manager import ConfigManager
from core.logger import setup_logger
from data.data_loader import DataLoader
from ml.ml_manager import MLManager

logger = setup_logger("test_final_ml_fix")


async def test_ml_uniqueness():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""

    logger.info("üß™ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô ML –°–ò–°–¢–ï–ú–´")
    logger.info("=" * 50)

    data_loader = DataLoader()
    config_manager = ConfigManager()
    ml_manager = MLManager(config_manager.get_ml_config())

    try:
        await data_loader.initialize()
        await ml_manager.initialize()

        test_symbols = ["BTCUSDT", "ETHUSDT", "ADAUSDT"]
        predictions = []

        logger.info("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤...")

        for symbol in test_symbols:
            logger.info(f"\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {symbol}:")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            data = await data_loader.get_data_for_ml(symbol, limit=100)

            if data is None or len(data) < 96:
                logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                continue

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            prediction = await ml_manager.predict(data)
            predictions.append((symbol, prediction))

            # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            logger.info(f"  –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞: {prediction.get('signal_type')}")
            logger.info(f"  –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {prediction.get('signal_strength', 0):.6f}")
            logger.info(
                f"  –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ score: {prediction.get('predictions', {}).get('direction_score', 0):.6f}"
            )
            logger.info("  Future returns:")
            returns = prediction.get("predictions", {})
            logger.info(f"    15m: {returns.get('returns_15m', 0):.6f}")
            logger.info(f"    1h:  {returns.get('returns_1h', 0):.6f}")
            logger.info(f"    4h:  {returns.get('returns_4h', 0):.6f}")
            logger.info(f"    12h: {returns.get('returns_12h', 0):.6f}")

        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        logger.info("\nüìà –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")

        if len(predictions) < 2:
            logger.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–∏—è
        signal_types = [p[1].get("signal_type") for p in predictions]
        signal_strengths = [p[1].get("signal_strength", 0) for p in predictions]
        direction_scores = [
            p[1].get("predictions", {}).get("direction_score", 0) for p in predictions
        ]

        unique_types = len(set(signal_types))
        strength_std = max(signal_strengths) - min(signal_strengths)
        direction_std = max(direction_scores) - min(direction_scores)

        logger.info(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤: {unique_types}/{len(predictions)}")
        logger.info(f"–†–∞–∑–±—Ä–æ—Å —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–æ–≤: {strength_std:.6f}")
        logger.info(f"–†–∞–∑–±—Ä–æ—Å direction scores: {direction_std:.6f}")

        # –í—ã–≤–æ–¥—ã
        success = True
        if unique_types == 1:
            logger.warning("‚ö†Ô∏è –í—Å–µ —Å–∏–º–≤–æ–ª—ã –ø–æ–ª—É—á–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞")
        else:
            logger.info("‚úÖ –¢–∏–ø—ã —Å–∏–≥–Ω–∞–ª–æ–≤ —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏")

        if strength_std < 0.001:
            logger.warning("‚ö†Ô∏è –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω–∞")
        else:
            logger.info("‚úÖ –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ —Ä–∞–∑–ª–∏—á–∞–µ—Ç—Å—è –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏")

        if direction_std < 0.001:
            logger.warning("‚ö†Ô∏è Direction scores –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã")
            success = False
        else:
            logger.info("‚úÖ Direction scores —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏")

        return success

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback

        traceback.print_exc()
        return False

    finally:
        await data_loader.cleanup()


if __name__ == "__main__":
    success = asyncio.run(test_ml_uniqueness())
    if success:
        print("\nüéâ –£–°–ü–ï–•! ML —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
    else:
        print("\n‚ö†Ô∏è –û—Å—Ç–∞—é—Ç—Å—è –ø—Ä–æ–±–ª–µ–º—ã —Å —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
