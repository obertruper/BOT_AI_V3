#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
"""

import asyncio
import sys
from pathlib import Path

import numpy as np
import pandas as pd

sys.path.insert(0, str(Path(__file__).parent))


async def debug_predictions():
    """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏ –º–æ–¥–µ–ª–∏"""

    print("=" * 80)
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ML –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ô")
    print("=" * 80)

    from core.config.config_manager import ConfigManager
    from database.connections.postgres import AsyncPGPool
    from ml.ml_manager import MLManager

    config_manager = ConfigManager()
    config = {
        "ml": config_manager.get_ml_config(),
        "system": config_manager.get_system_config(),
        "trading": config_manager.get_config("trading", {}),
    }

    ml_manager = MLManager(config)
    await ml_manager.initialize()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Å–∏–º–≤–æ–ª–∞—Ö
    symbols = ["BTCUSDT", "ETHUSDT", "SOLUSDT"]

    all_predictions = []

    for symbol in symbols:
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑ {symbol}...")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        candles = await AsyncPGPool.fetch(
            """
            SELECT timestamp, open, high, low, close, volume
            FROM raw_market_data
            WHERE symbol = $1
            ORDER BY timestamp DESC
            LIMIT 200
        """,
            symbol,
        )

        if len(candles) < 96:
            print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
            continue

        df = pd.DataFrame([dict(row) for row in candles])
        df = df.sort_values("timestamp")
        df["symbol"] = symbol

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        from ml.logic.feature_engineering_training import FeatureEngineer

        fe = FeatureEngineer(config)
        features = fe.create_features(df)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        print(f"   –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {features.shape}")

        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        features_np = features.values.astype(np.float64)
        zero_variance_cols = (np.std(features_np, axis=0) < 1e-6).sum()
        nan_cols = np.isnan(features_np).any(axis=0).sum()
        inf_cols = np.isinf(features_np).any(axis=0).sum()

        print("   üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
        print(f"      –ù—É–ª–µ–≤–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è: {zero_variance_cols}/{features.shape[1]}")
        print(f"      –ö–æ–ª–æ–Ω–∫–∏ —Å NaN: {nan_cols}")
        print(f"      –ö–æ–ª–æ–Ω–∫–∏ —Å Inf: {inf_cols}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        if zero_variance_cols > 0:
            std_by_col = np.std(features_np, axis=0)
            zero_var_indices = np.where(std_by_col < 1e-6)[0][:10]
            zero_var_names = [features.columns[i] for i in zero_var_indices]
            print(f"      –ü—Ä–∏–º–µ—Ä—ã –Ω—É–ª–µ–≤–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–∏: {zero_var_names}")

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è –º–æ–¥–µ–ª–∏
        if len(features) >= 96:
            features_for_pred = features.iloc[-96:].values
        else:
            padding = np.zeros((96 - len(features), 240))
            features_for_pred = np.vstack([padding, features.values])

        # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        prediction = await ml_manager.predict(features_for_pred)
        all_predictions.append(
            {
                "symbol": symbol,
                "signal_type": prediction["signal_type"],
                "confidence": prediction["confidence"],
                "directions": prediction["predictions"]["directions_by_timeframe"],
                "probs": prediction["predictions"]["direction_probabilities"],
            }
        )

        print("\n   üéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(f"      Signal: {prediction['signal_type']}")
        print(f"      Confidence: {prediction['confidence']:.1%}")
        print(
            f"      Directions: {prediction['predictions']['directions_by_timeframe']}"
        )

        # –ê–Ω–∞–ª–∏–∑ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
        probs = np.array(prediction["predictions"]["direction_probabilities"])
        print("\n   üìä –ê–Ω–∞–ª–∏–∑ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π:")
        for i, tf in enumerate(["15m", "1h", "4h", "12h"]):
            p = probs[i]
            print(f"      {tf}: LONG={p[0]:.3f}, SHORT={p[1]:.3f}, NEUTRAL={p[2]:.3f}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ç—ã –º–æ–¥–µ–ª–∏
        print("\n   üî¨ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–∏:")
        print(
            f"      Direction score: {prediction['predictions']['direction_score']:.3f}"
        )
        print(f"      Returns 15m: {prediction['predictions']['returns_15m']:.6f}")
        print(f"      Returns 1h: {prediction['predictions']['returns_1h']:.6f}")
        print(f"      Returns 4h: {prediction['predictions']['returns_4h']:.6f}")
        print(f"      Returns 12h: {prediction['predictions']['returns_12h']:.6f}")

    await AsyncPGPool.close()

    # –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    print("\n" + "=" * 80)
    print("üìä –ê–ù–ê–õ–ò–ó –ü–ê–¢–¢–ï–†–ù–û–í")
    print("=" * 80)

    if all_predictions:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å directions
        all_directions = [str(p["directions"]) for p in all_predictions]
        unique_directions = set(all_directions)

        print("\nüîç –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π:")
        print(f"   –í—Å–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {len(all_predictions)}")
        print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {len(unique_directions)}")
        print(f"   –ü–∞—Ç—Ç–µ—Ä–Ω—ã: {unique_directions}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤
        all_probs = []
        for p in all_predictions:
            all_probs.extend(p["probs"])

        all_probs = np.array(all_probs)

        print("\nüìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π:")
        print(f"   Mean LONG: {all_probs[:, 0].mean():.3f}")
        print(f"   Mean SHORT: {all_probs[:, 1].mean():.3f}")
        print(f"   Mean NEUTRAL: {all_probs[:, 2].mean():.3f}")
        print(f"   Std –≤—Å–µ—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π: {all_probs.std():.3f}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Å–±–∞–ª–∞–Ω—Å
        if all_probs[:, 2].mean() > 0.5:
            print("\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ú–æ–¥–µ–ª—å —Å–º–µ—â–µ–Ω–∞ –∫ NEUTRAL –∫–ª–∞—Å—Å—É!")
            print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   1. –ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞ –Ω–∞ NEUTRAL")
            print("   2. –ü—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã (–º–Ω–æ–≥–æ –Ω—É–ª–µ–≤–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–∏)")
            print("   3. –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –±—ã–ª–∏ –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã")

    print("\n" + "=" * 80)
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("=" * 80)

    print(
        """
1. –ö–†–ò–¢–ò–ß–ù–û: 222 –∏–∑ 240 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–º–µ—é—Ç –Ω—É–ª–µ–≤—É—é –¥–∏—Å–ø–µ—Ä—Å–∏—é
   ‚Üí –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ feature engineering –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
   ‚Üí –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤

2. –ú–æ–¥–µ–ª—å —Å–º–µ—â–µ–Ω–∞ –∫ NEUTRAL
   ‚Üí –ü–∞—Ç—Ç–µ—Ä–Ω [2,1,2,1] –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
   ‚Üí –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å

3. –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
   a) –ò—Å–ø—Ä–∞–≤–∏—Ç—å feature engineering (—É–±—Ä–∞—Ç—å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏)
   b) –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ—Ä—Å–∏—é –º–æ–¥–µ–ª–∏ (–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–µ —Ç–∞)
   c) –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥–∏ –¥–ª—è –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
"""
    )


if __name__ == "__main__":
    asyncio.run(debug_predictions())
