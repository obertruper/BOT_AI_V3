#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—á–µ–º—É –º–æ–¥–µ–ª—å –≤—ã–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ NEUTRAL —Å–∏–≥–Ω–∞–ª—ã
"""

import asyncio
import sys
from pathlib import Path

import numpy as np
import torch

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from core.config.config_manager import ConfigManager
from core.logger import setup_logger
from data.data_loader import DataLoader
from ml.ml_manager import MLManager

logger = setup_logger(__name__)


async def diagnose_ml_predictions():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
    try:
        logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π...")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        config_manager = ConfigManager()
        ml_manager = MLManager(config_manager._config)
        data_loader = DataLoader(config_manager)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ML Manager
        await ml_manager.initialize()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–µ–ª–∏
        logger.info(f"–ú–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {ml_manager.model is not None}")
        logger.info(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {ml_manager.device}")

        if ml_manager.model is not None:
            logger.info(f"–ú–æ–¥–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ eval: {not ml_manager.model.training}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        symbol = "BTCUSDT"
        logger.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}...")

        ohlcv_data = await data_loader.get_data_for_ml(symbol, limit=500)

        if ohlcv_data is None or len(ohlcv_data) < 240:
            logger.error(
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {len(ohlcv_data) if ohlcv_data is not None else 0}"
            )
            return

        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(ohlcv_data)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
        logger.info(f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {ohlcv_data['close'].iloc[-1]}")
        logger.info(
            f"–í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {ohlcv_data.index[0]} - {ohlcv_data.index[-1]}"
        )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        logger.info("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ...")
        prediction = await ml_manager.predict(ohlcv_data)

        if not prediction:
            logger.error("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–µ –±—ã–ª–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
            return

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        logger.info("=" * 60)
        logger.info("üìä –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø")
        logger.info("=" * 60)

        for key, value in prediction.items():
            logger.info(f"{key}: {value}")

        # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –≤—ã—Ö–æ–¥—ã –º–æ–¥–µ–ª–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        logger.info("\nüî¨ –ê–ù–ê–õ–ò–ó –°–´–†–´–• –î–ê–ù–ù–´–• –ú–û–î–ï–õ–ò:")

        # –î–µ–ª–∞–µ–º —Å—ã—Ä–æ–π inference –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        from ml.realtime_indicator_calculator import RealTimeIndicatorCalculator

        indicator_calc = RealTimeIndicatorCalculator(config=config_manager._config)
        features_array, metadata = await indicator_calc.prepare_ml_input(
            symbol, ohlcv_data
        )

        logger.info(f"–†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {features_array.shape}")

        if ml_manager.model is not None:
            ml_manager.model.eval()
            with torch.no_grad():
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ç–µ–Ω–∑–æ—Ä
                input_tensor = torch.FloatTensor(features_array).to(ml_manager.device)

                # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –≤—ã—Ö–æ–¥—ã
                raw_outputs = ml_manager.model(input_tensor)
                raw_outputs_np = raw_outputs.cpu().numpy().flatten()

                logger.info(f"–°—ã—Ä—ã–µ –≤—ã—Ö–æ–¥—ã –º–æ–¥–µ–ª–∏ (–ø–µ—Ä–≤—ã–µ 10): {raw_outputs_np[:10]}")
                logger.info(f"–°—ã—Ä—ã–µ –≤—ã—Ö–æ–¥—ã –º–æ–¥–µ–ª–∏ (–≤—Å–µ 20): {raw_outputs_np}")

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                future_returns = raw_outputs_np[0:4]
                future_directions = raw_outputs_np[4:8]
                level_targets = raw_outputs_np[8:16]
                risk_metrics = raw_outputs_np[16:20]

                logger.info(f"Future returns: {future_returns}")
                logger.info(f"Future directions: {future_directions}")
                logger.info(f"Level targets: {level_targets}")
                logger.info(f"Risk metrics: {risk_metrics}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ–ª–∏
                logger.info("–°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º:")
                logger.info(f"  Returns mean: {np.mean(future_returns):.6f}")
                logger.info(f"  Directions mean: {np.mean(future_directions):.6f}")
                logger.info(f"  Levels mean: {np.mean(level_targets):.6f}")
                logger.info(f"  Risk mean: {np.mean(risk_metrics):.6f}")

        logger.info("=" * 60)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}", exc_info=True)


if __name__ == "__main__":
    asyncio.run(diagnose_ml_predictions())
