#!/usr/bin/env python3
"""
–¢–µ—Å—Ç FeatureEngineer –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import logging

import numpy as np
import pandas as pd

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)

logger = logging.getLogger(__name__)


async def test_feature_engineer_with_db_data():
    """–¢–µ—Å—Ç FeatureEngineer –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î"""

    print("=" * 60)
    print("–¢–ï–°–¢ FEATURE ENGINEER –ù–ê –î–ê–ù–ù–´–• –ò–ó –ë–î")
    print("=" * 60)

    try:
        # –ò–º–ø–æ—Ä—Ç FeatureEngineer
        from ml.logic.feature_engineering import FeatureEngineer

        print("‚úÖ FeatureEngineer –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        from sqlalchemy import desc, select

        from database.connections import get_async_db
        from database.models.market_data import RawMarketData

        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        async with get_async_db() as session:
            stmt = (
                select(RawMarketData)
                .where(RawMarketData.symbol == "BTCUSDT")
                .order_by(desc(RawMarketData.timestamp))
                .limit(300)
            )

            result = await session.execute(stmt)
            raw_data = result.scalars().all()

        if not raw_data:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î –¥–ª—è BTCUSDT")
            return

        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(raw_data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î")

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
        data_list = []
        for row in raw_data:
            data_list.append(
                {
                    "timestamp": row.timestamp,
                    "datetime": row.datetime,
                    "open": float(row.open),
                    "high": float(row.high),
                    "low": float(row.low),
                    "close": float(row.close),
                    "volume": float(row.volume),
                    "symbol": row.symbol,
                }
            )

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
        data_list.reverse()
        df = pd.DataFrame(data_list)

        print(f"‚úÖ DataFrame —Å–æ–∑–¥–∞–Ω: {df.shape}")
        print(
            f"   –í—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥: {df['datetime'].iloc[0]} - {df['datetime'].iloc[-1]}"
        )
        print("   –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:")
        print(df[["datetime", "open", "high", "low", "close", "volume"]].head(3))

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
        if "turnover" not in df.columns:
            df["turnover"] = df["close"] * df["volume"]

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º FeatureEngineer
        fe = FeatureEngineer({})
        print("‚úÖ FeatureEngineer —Å–æ–∑–¥–∞–Ω")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        print("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
        features = await fe.create_features(df)

        print(f"‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã: {features.shape}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {features.shape[1]}")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(fe.get_feature_names())}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        nan_count = np.isnan(features).sum()
        inf_count = np.isinf(features).sum()

        print(f"   NaN –∑–Ω–∞—á–µ–Ω–∏–π: {nan_count}")
        print(f"   Inf –∑–Ω–∞—á–µ–Ω–∏–π: {inf_count}")
        print(f"   –î–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π: [{np.min(features):.3f}, {np.max(features):.3f}]")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        feature_names = fe.get_feature_names()
        print("\nüìä –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω—è—è —Ç–æ—á–∫–∞):")
        last_features = features[-1]
        for i, name in enumerate(feature_names[:10]):  # –ü–µ—Ä–≤—ã–µ 10
            print(f"   {name}: {last_features[i]:.4f}")

        if len(feature_names) > 10:
            print(f"   ... –∏ –µ—â–µ {len(feature_names) - 10} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

        # –¢–µ—Å—Ç –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö –¥–∞–Ω–Ω—ã—Ö
        print("\nüîç –¢–µ—Å—Ç –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö –¥–∞–Ω–Ω—ã—Ö:")
        for test_size in [50, 100, 200, 300]:
            if len(df) >= test_size:
                test_df = df.tail(test_size).copy()
                test_features = await fe.create_features(test_df)
                print(f"   {test_size} —Å–≤–µ—á–µ–π ‚Üí {test_features.shape[1]} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
            else:
                print(f"   {test_size} —Å–≤–µ—á–µ–π ‚Üí –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")

        print("\n‚úÖ –¢–µ—Å—Ç FeatureEngineer —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(test_feature_engineer_with_db_data())
