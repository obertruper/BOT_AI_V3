#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import asyncio
import sys
from pathlib import Path

import numpy as np

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

from core.logger import setup_logger
from ml.ml_manager import MLManager

logger = setup_logger("test_ml_simple")


async def test_predictions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –≤—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""

    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π...")

    # –°–æ–∑–¥–∞–µ–º ML Manager —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    config = {
        "ml": {
            "model": {"device": "cpu"},  # –ò—Å–ø–æ–ª—å–∑—É–µ–º CPU –¥–ª—è —Ç–µ—Å—Ç–∞
            "model_directory": "models/saved",
        }
    }

    ml_manager = MLManager(config)
    await ml_manager.initialize()

    signal_counts = {"LONG": 0, "SHORT": 0, "NEUTRAL": 0}

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞–±–æ—Ä–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
    for i in range(10):
        logger.info(f"\nüìä –¢–µ—Å—Ç #{i + 1}")

        # –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
        np.random.seed(i * 42)

        # 96 –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫, 240 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        features = np.random.randn(96, 240)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –¥–∞–Ω–Ω—ã–µ
        if i % 3 == 0:
            # –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
            features[:, 0:10] += np.linspace(0, 1, 96).reshape(-1, 1)
        elif i % 3 == 1:
            # –ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
            features[:, 0:10] -= np.linspace(0, 1, 96).reshape(-1, 1)
        else:
            # –ë–æ–∫–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
            features[:, 0:10] += (
                np.sin(np.linspace(0, 4 * np.pi, 96)).reshape(-1, 1) * 0.5
            )

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            prediction = await ml_manager.predict(features)

            signal_type = prediction.get("signal_type", "UNKNOWN")
            confidence = prediction.get("confidence", 0)
            strength = prediction.get("signal_strength", 0)

            logger.info(
                f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {signal_type} "
                f"(confidence: {confidence:.2f}, strength: {strength:.2f})"
            )

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º
            if signal_type in signal_counts:
                signal_counts[signal_type] += 1

        except Exception as e:
            logger.error(f"   –û—à–∏–±–∫–∞: {e}")

    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    logger.info("\n" + "=" * 60)
    logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê")
    logger.info("=" * 60)

    total = sum(signal_counts.values())
    if total > 0:
        for signal_type, count in signal_counts.items():
            pct = (count / total) * 100
            logger.info(f"{signal_type:8}: {count:2d} ({pct:5.1f}%)")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        long_pct = (signal_counts["LONG"] / total) * 100
        short_pct = (signal_counts["SHORT"] / total) * 100

        logger.info("-" * 30)
        if signal_counts["LONG"] == 0:
            logger.error("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç LONG —Å–∏–≥–Ω–∞–ª–æ–≤!")
        elif signal_counts["SHORT"] == 0:
            logger.error("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç SHORT —Å–∏–≥–Ω–∞–ª–æ–≤!")
        elif long_pct > 80:
            logger.warning("‚ö†Ô∏è –î–∏—Å–±–∞–ª–∞–Ω—Å: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ LONG")
        elif short_pct > 80:
            logger.warning("‚ö†Ô∏è –î–∏—Å–±–∞–ª–∞–Ω—Å: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ SHORT")
        else:
            logger.info("‚úÖ –°–∏–≥–Ω–∞–ª—ã –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã!")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            if 20 <= long_pct <= 80 and 20 <= short_pct <= 80:
                logger.info("üéØ –£–°–ü–ï–•: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
                logger.info(f"   –ë–∞–ª–∞–Ω—Å LONG/SHORT: {long_pct:.0f}%/{short_pct:.0f}%")

    logger.info("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")


if __name__ == "__main__":
    asyncio.run(test_predictions())
