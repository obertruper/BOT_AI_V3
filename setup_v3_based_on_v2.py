#!/usr/bin/env python3
"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ BOT_AI_V3 –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫ –∏–∑ trading_bot3 (V2)
"""

from pathlib import Path


def setup_v3_from_v2():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç V3 –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã V2"""

    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ BOT_AI_V3 –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã trading_bot3...")

    # 1. –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    print("\n1. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤...")
    create_repositories()

    # 2. –°–æ–∑–¥–∞–µ–º RiskManager
    print("\n2. –°–æ–∑–¥–∞–Ω–∏–µ RiskManager...")
    create_risk_manager()

    # 3. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    print("\n3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
    fix_process_management()

    # 4. –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print("\n4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    update_config()

    print("\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüìã –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:")
    print("1. –°–æ–∑–¥–∞–Ω—ã –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ (SignalRepository, TradeRepository)")
    print("2. –°–æ–∑–¥–∞–Ω RiskManager –Ω–∞ –æ—Å–Ω–æ–≤–µ V2")
    print("3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ—Ä—Ç–∞–º–∏ –∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏")
    print("4. –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å V2")

    print("\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É:")
    print("python3 unified_launcher.py --mode=ml")


def create_repositories():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"""

    # SignalRepository
    signal_repo_content = '''"""
–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ –≤ –ë–î
"""

import asyncio
import json
from datetime import datetime
from typing import List, Optional, Dict, Any
from sqlalchemy import select, update, and_
from sqlalchemy.ext.asyncio import AsyncSession

from database.models.signal import Signal
from core.exceptions import DatabaseError


class SignalRepository:
    """–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏"""

    def __init__(self, db_session: AsyncSession):
        self.session = db_session

    async def get_active_signals(self, exchange: Optional[str] = None) -> List[Signal]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã"""
        try:
            query = select(Signal).where(Signal.status == 'active')
            if exchange:
                query = query.where(Signal.exchange == exchange)

            result = await self.session.execute(query)
            return result.scalars().all()
        except Exception as e:
            raise DatabaseError(f"Failed to get active signals: {e}")

    async def create_signal(self, signal_data: Dict[str, Any]) -> Signal:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º indicators –∏ extra_data –≤ JSON —Å—Ç—Ä–æ–∫–∏
            if 'indicators' in signal_data and isinstance(signal_data['indicators'], dict):
                signal_data['indicators'] = json.dumps(signal_data['indicators'])
            if 'extra_data' in signal_data and isinstance(signal_data['extra_data'], dict):
                signal_data['extra_data'] = json.dumps(signal_data['extra_data'])

            signal = Signal(**signal_data)
            self.session.add(signal)
            await self.session.commit()
            await self.session.refresh(signal)
            return signal
        except Exception as e:
            await self.session.rollback()
            raise DatabaseError(f"Failed to create signal: {e}")

    async def mark_signal_processed(self, signal_id: int) -> None:
        """–û—Ç–º–µ—á–∞–µ—Ç —Å–∏–≥–Ω–∞–ª –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π"""
        try:
            stmt = update(Signal).where(Signal.id == signal_id).values(
                status='processed',
                processed_at=datetime.utcnow()
            )
            await self.session.execute(stmt)
            await self.session.commit()
        except Exception as e:
            await self.session.rollback()
            raise DatabaseError(f"Failed to mark signal as processed: {e}")

    async def save_signal(self, signal: Dict[str, Any]) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∏–≥–Ω–∞–ª –≤ –ë–î (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å V2)"""
        await self.create_signal(signal)
'''

    # TradeRepository
    trade_repo_content = '''"""
–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
"""

from datetime import datetime
from typing import List, Dict, Any, Optional
from decimal import Decimal
from sqlalchemy import select, func, and_
from sqlalchemy.ext.asyncio import AsyncSession

from database.models.trade import Trade
from core.exceptions import DatabaseError


class TradeRepository:
    """–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏"""

    def __init__(self, db_session: AsyncSession):
        self.session = db_session

    async def create_trade(self, trade_data: Dict[str, Any]) -> Trade:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Ç–æ—Ä–≥–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"""
        try:
            trade = Trade(**trade_data)
            self.session.add(trade)
            await self.session.commit()
            await self.session.refresh(trade)
            return trade
        except Exception as e:
            await self.session.rollback()
            raise DatabaseError(f"Failed to create trade: {e}")

    async def get_trading_stats(self,
                               start_date: Optional[datetime] = None,
                               end_date: Optional[datetime] = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            query = select(
                func.count(Trade.id).label('total_trades'),
                func.sum(Trade.profit).label('total_profit'),
                func.sum(Trade.volume).label('total_volume'),
                func.avg(Trade.profit).label('avg_profit')
            )

            if start_date:
                query = query.where(Trade.created_at >= start_date)
            if end_date:
                query = query.where(Trade.created_at <= end_date)

            result = await self.session.execute(query)
            row = result.first()

            if not row:
                return {
                    'total_trades': 0,
                    'total_profit': Decimal('0'),
                    'total_volume': Decimal('0'),
                    'avg_profit': Decimal('0'),
                    'win_rate': 0.0
                }

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º win rate
            win_query = select(func.count(Trade.id)).where(Trade.profit > 0)
            if start_date:
                win_query = win_query.where(Trade.created_at >= start_date)
            if end_date:
                win_query = win_query.where(Trade.created_at <= end_date)

            win_result = await self.session.execute(win_query)
            win_count = win_result.scalar() or 0

            total_trades = row.total_trades or 0
            win_rate = (win_count / total_trades * 100) if total_trades > 0 else 0.0

            return {
                'total_trades': total_trades,
                'total_profit': row.total_profit or Decimal('0'),
                'total_volume': row.total_volume or Decimal('0'),
                'avg_profit': row.avg_profit or Decimal('0'),
                'win_rate': win_rate
            }

        except Exception as e:
            raise DatabaseError(f"Failed to get trading stats: {e}")
'''

    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã
    repo_dir = Path("/mnt/SSD/PYCHARMPRODJECT/BOT_AI_V3/database/repositories")
    repo_dir.mkdir(parents=True, exist_ok=True)

    # __init__.py
    init_content = '''"""Database repositories"""

from .signal_repository import SignalRepository
from .trade_repository import TradeRepository

__all__ = ['SignalRepository', 'TradeRepository']
'''

    with open(repo_dir / "__init__.py", "w") as f:
        f.write(init_content)

    with open(repo_dir / "signal_repository.py", "w") as f:
        f.write(signal_repo_content)

    with open(repo_dir / "trade_repository.py", "w") as f:
        f.write(trade_repo_content)

    print("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")


def create_risk_manager():
    """–°–æ–∑–¥–∞–µ—Ç RiskManager –Ω–∞ –æ—Å–Ω–æ–≤–µ V2"""

    risk_manager_content = '''"""
Risk Manager –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
"""

from typing import Dict, Any, Optional
from decimal import Decimal
import logging

from core.config.config_manager import ConfigManager


class RiskStatus:
    """–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∏—Å–∫–æ–≤"""
    def __init__(self, requires_action: bool = False,
                 action: Optional[str] = None,
                 message: Optional[str] = None):
        self.requires_action = requires_action
        self.action = action
        self.message = message


class RiskManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏"""

    def __init__(self, config: Dict[str, Any], position_manager=None, exchange_registry=None):
        self.config = config
        self.position_manager = position_manager
        self.exchange_registry = exchange_registry
        self.logger = logging.getLogger(__name__)

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.max_risk_per_trade = Decimal(str(config.get('max_risk_per_trade', 0.02)))
        self.max_total_risk = Decimal(str(config.get('max_total_risk', 0.1)))
        self.max_positions = config.get('max_positions', 10)
        self.max_leverage = config.get('max_leverage', 10)

    async def check_signal_risk(self, signal: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∏—Å–∫–∏ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            if not signal:
                return False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            position_size = signal.get('position_size', 0)
            if position_size <= 0:
                self.logger.warning("Invalid position size in signal")
                return False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ leverage
            leverage = signal.get('leverage', 1)
            if leverage > self.max_leverage:
                self.logger.warning(f"Leverage {leverage} exceeds max {self.max_leverage}")
                return False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            if self.position_manager:
                positions = await self.position_manager.get_all_positions()
                active_positions = [p for p in positions if p.size != 0]
                if len(active_positions) >= self.max_positions:
                    self.logger.warning(f"Max positions limit reached: {len(active_positions)}/{self.max_positions}")
                    return False

            return True

        except Exception as e:
            self.logger.error(f"Error checking signal risk: {e}")
            return False

    async def check_global_risks(self) -> RiskStatus:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ —Ä–∏—Å–∫–∞
            if self.position_manager:
                total_risk = await self._calculate_total_risk()
                if total_risk > self.max_total_risk:
                    return RiskStatus(
                        requires_action=True,
                        action="reduce_positions",
                        message=f"Total risk {total_risk:.2%} exceeds limit {self.max_total_risk:.2%}"
                    )

            return RiskStatus(requires_action=False)

        except Exception as e:
            self.logger.error(f"Error checking global risks: {e}")
            return RiskStatus(
                requires_action=True,
                action="pause",
                message=f"Risk check error: {e}"
            )

    async def _calculate_total_risk(self) -> Decimal:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â–∏–π —Ä–∏—Å–∫ –ø–æ –≤—Å–µ–º –ø–æ–∑–∏—Ü–∏—è–º"""
        if not self.position_manager:
            return Decimal('0')

        try:
            positions = await self.position_manager.get_all_positions()
            total_risk = Decimal('0')

            for position in positions:
                if position.size != 0:
                    # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞ –∫–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
                    position_risk = abs(position.size) * self.max_risk_per_trade
                    total_risk += position_risk

            return total_risk

        except Exception as e:
            self.logger.error(f"Error calculating total risk: {e}")
            return Decimal('0')

    async def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        return True

    def is_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        return True
'''

    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
    risk_dir = Path("/mnt/SSD/PYCHARMPRODJECT/BOT_AI_V3/risk_management")
    risk_dir.mkdir(parents=True, exist_ok=True)

    with open(risk_dir / "manager.py", "w") as f:
        f.write(risk_manager_content)

    # –û–±–Ω–æ–≤–ª—è–µ–º __init__.py
    init_content = '''"""Risk management module"""

from .manager import RiskManager, RiskStatus

__all__ = ['RiskManager', 'RiskStatus']
'''

    with open(risk_dir / "__init__.py", "w") as f:
        f.write(init_content)

    print("‚úÖ RiskManager —Å–æ–∑–¥–∞–Ω")


def fix_process_management():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏"""

    fix_content = '''"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
"""

import os

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è unified launcher
os.environ['UNIFIED_MODE'] = 'true'

print("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è UNIFIED_MODE=true")
'''

    with open("/mnt/SSD/PYCHARMPRODJECT/BOT_AI_V3/fix_process_env.py", "w") as f:
        f.write(fix_content)

    print("‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")


def update_config():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ V2"""

    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é trading.yaml
    import yaml

    config_path = Path("/mnt/SSD/PYCHARMPRODJECT/BOT_AI_V3/config/trading.yaml")

    if config_path.exists():
        with open(config_path, "r") as f:
            config = yaml.safe_load(f)
    else:
        config = {}

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ V2
    v2_settings = {
        "risk_management": {
            "enabled": True,
            "max_risk_per_trade": 0.02,
            "max_total_risk": 0.1,
            "max_positions": 10,
            "max_leverage": 10,
        },
        "position_management": {"sync_interval": 60, "max_positions_per_symbol": 2},
        "signal_processing": {"confidence_threshold": 0.6, "min_volume": 100000},
    }

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config.update(v2_settings)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    with open(config_path, "w") as f:
        yaml.dump(config, f, default_flow_style=False, sort_keys=False)

    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")


if __name__ == "__main__":
    setup_v3_from_v2()
