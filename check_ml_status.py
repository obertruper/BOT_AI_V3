#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""

import asyncio
import os
import sys
from datetime import datetime

from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

load_dotenv()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ["PGPORT"] = "5555"
os.environ["PGUSER"] = "obertruper"
os.environ["PGDATABASE"] = "bot_trading_v3"


async def check_ml_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã ML —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ ML —Å–∏—Å—Ç–µ–º—ã —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...\n")

    from core.config.config_manager import get_global_config_manager
    from database.connections.postgres import AsyncPGPool
    from ml.ml_manager import MLManager

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        config_manager = get_global_config_manager()
        ml_manager = MLManager(config_manager.get_ml_config())

        print("1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML Manager...")
        await ml_manager.initialize()
        print("   ‚úÖ ML Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...")

        pool = await AsyncPGPool.get_pool()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        symbols = ["BTCUSDT", "ETHUSDT", "SOLUSDT"]

        for symbol in symbols:
            result = await pool.fetchrow(
                """
                SELECT
                    COUNT(*) as count,
                    MAX(datetime) as latest,
                    MIN(datetime) as earliest
                FROM raw_market_data
                WHERE symbol = $1
                AND interval_minutes = 15
                AND datetime > NOW() - INTERVAL '24 hours'
            """,
                symbol,
            )

            if result:
                print(f"\n   üìä {symbol}:")
                print(f"      - –°–≤–µ—á–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24—á: {result['count']}")
                print(f"      - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ: {result['latest']}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
                if result["latest"]:
                    time_diff = (
                        datetime.now(result["latest"].tzinfo) - result["latest"]
                    ).total_seconds() / 60
                    print(
                        f"      - –û—Ç—Å—Ç–∞–≤–∞–Ω–∏–µ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {time_diff:.0f} –º–∏–Ω—É—Ç"
                    )

                    if time_diff < 60:
                        print("      - ‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã!")
                    else:
                        print("      - ‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        print("\n3Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π...")

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è BTCUSDT
        symbol = "BTCUSDT"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
        candle_count = await pool.fetchval(
            """
            SELECT COUNT(*) FROM raw_market_data
            WHERE symbol = $1 AND interval_minutes = 15
        """,
            symbol,
        )

        print(f"\n   –í—Å–µ–≥–æ —Å–≤–µ—á–µ–π –¥–ª—è {symbol}: {candle_count}")

        if candle_count >= 96:
            print("   ‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 96 —Å–≤–µ—á–µ–π
            candles = await pool.fetch(
                """
                SELECT datetime, open, high, low, close, volume
                FROM raw_market_data
                WHERE symbol = $1 AND interval_minutes = 15
                ORDER BY datetime DESC
                LIMIT 96
            """,
                symbol,
            )

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DataFrame
            import pandas as pd

            df = pd.DataFrame(
                [
                    {
                        "datetime": c["datetime"],
                        "open": float(c["open"]),
                        "high": float(c["high"]),
                        "low": float(c["low"]),
                        "close": float(c["close"]),
                        "volume": float(c["volume"]),
                    }
                    for c in candles
                ]
            )

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
            df = df.sort_values("datetime").reset_index(drop=True)

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            prediction = await ml_manager.predict(df)

            if prediction:
                print(f"\n   üéØ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è {symbol}:")

                # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                if "signal" in prediction:
                    signal = prediction["signal"]
                    print(f"      - –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {signal}")

                if "confidence" in prediction:
                    print(f"      - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction['confidence']:.2%}")

                if "predicted_returns" in prediction:
                    returns = prediction["predicted_returns"]
                    print("\n   üìà –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏:")
                    print(f"      - 15–º: {returns.get('15m', 0):.4f}")
                    print(f"      - 1—á: {returns.get('1h', 0):.4f}")
                    print(f"      - 4—á: {returns.get('4h', 0):.4f}")

                if "predicted_directions" in prediction:
                    directions = prediction["predicted_directions"]
                    print("\n   üéØ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
                    print(
                        f"      - 15–º: {'‚ñ≤ LONG' if directions.get('15m', 0) > 0 else '‚ñº SHORT'}"
                    )
                    print(
                        f"      - 1—á: {'‚ñ≤ LONG' if directions.get('1h', 0) > 0 else '‚ñº SHORT'}"
                    )
                    print(
                        f"      - 4—á: {'‚ñ≤ LONG' if directions.get('4h', 0) > 0 else '‚ñº SHORT'}"
                    )

                if "volatility" in prediction:
                    print(f"\n   üìä –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {prediction['volatility']:.4f}")

                if "risk_metrics" in prediction:
                    risk = prediction["risk_metrics"]
                    print("\n   ‚ö†Ô∏è –†–∏—Å–∫-–º–µ—Ç—Ä–∏–∫–∏:")
                    for key, value in risk.items():
                        if isinstance(value, float):
                            print(f"      - {key}: {value:.4f}")
            else:
                print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")
        else:
            print(f"   ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {candle_count} < 96")

        print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()

    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        await AsyncPGPool.close_pool()


if __name__ == "__main__":
    asyncio.run(check_ml_status())
