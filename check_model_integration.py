#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±—É—á–µ–Ω–∏—è
"""

import sys
from pathlib import Path

import torch

sys.path.insert(0, str(Path(__file__).parent))


def check_model():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –µ—ë –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""

    print("=" * 60)
    print("üîç –ü–†–û–í–ï–†–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ú–û–î–ï–õ–ò")
    print("=" * 60)

    # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º checkpoint
    model_path = Path("models/saved/best_model_20250728_215703.pth")
    if not model_path.exists():
        print(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
        return

    print(f"\nüì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å: {model_path}")
    checkpoint = torch.load(model_path, map_location="cpu")

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ checkpoint
    print("\nüìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ checkpoint:")
    for key in checkpoint.keys():
        if key == "model_state_dict":
            print(f"  - {key}: {len(checkpoint[key])} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        else:
            print(
                f"  - {key}: {checkpoint[key] if not isinstance(checkpoint[key], dict) else f'{len(checkpoint[key])} —ç–ª–µ–º–µ–Ω—Ç–æ–≤'}"
            )

    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –º–æ–¥–µ–ª–∏
    if "config" in checkpoint:
        config = checkpoint["config"]
        print("\nüèóÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –∏–∑ checkpoint:")
        if "model" in config:
            model_config = config["model"]
            print(f"  - input_size: {model_config.get('input_size', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
            print(f"  - output_size: {model_config.get('output_size', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
            print(
                f"  - context_window: {model_config.get('context_window', '–Ω–µ —É–∫–∞–∑–∞–Ω')}"
            )
            print(f"  - d_model: {model_config.get('d_model', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
            print(f"  - n_heads: {model_config.get('n_heads', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
            print(f"  - e_layers: {model_config.get('e_layers', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")

    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è
    if "best_metrics" in checkpoint:
        metrics = checkpoint["best_metrics"]
        print("\nüìä –ú–µ—Ç—Ä–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è:")
        if "direction_accuracy" in metrics:
            dir_acc = metrics["direction_accuracy"]
            print("  - Direction accuracy –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º:")
            if isinstance(dir_acc, dict):
                for tf, acc in dir_acc.items():
                    print(f"    ‚Ä¢ {tf}: {acc:.1%}")
            else:
                print(f"    ‚Ä¢ –û–±—â–∞—è: {dir_acc:.1%}")

    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    print("\nüîç –ê–Ω–∞–ª–∏–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö —Å–ª–æ–µ–≤:")
    state_dict = checkpoint["model_state_dict"]

    # –ò—â–µ–º —Å–ª–æ–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å direction
    direction_layers = [k for k in state_dict.keys() if "direction" in k.lower()]
    if direction_layers:
        print("  Direction —Å–ª–æ–∏ –Ω–∞–π–¥–µ–Ω—ã:")
        for layer_name in direction_layers[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            layer_shape = state_dict[layer_name].shape
            print(f"    ‚Ä¢ {layer_name}: shape={layer_shape}")

    # –ò—â–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ª–æ–π
    final_layers = [
        k
        for k in state_dict.keys()
        if "final" in k.lower() or "head" in k.lower() or "output" in k.lower()
    ]
    if final_layers:
        print("\n  –§–∏–Ω–∞–ª—å–Ω—ã–µ —Å–ª–æ–∏:")
        for layer_name in final_layers[:5]:
            layer_shape = state_dict[layer_name].shape
            print(f"    ‚Ä¢ {layer_name}: shape={layer_shape}")

    # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫ –º–æ–¥–µ–ª—å –±—ã–ª–∞ –æ–±—É—á–µ–Ω–∞
    print("\nüìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—É—á–µ–Ω–∏–∏:")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –æ–±—É—á–µ–Ω–∏—è
    training_project = Path("/mnt/SSD/PYCHARMPRODJECT/LLM TRANSFORM/crypto_ai_trading")
    print(f"  –ü—Ä–æ–µ–∫—Ç –æ–±—É—á–µ–Ω–∏—è: {training_project}")
    print(f"  –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {'‚úÖ' if training_project.exists() else '‚ùå'}")

    # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –æ–±—É—á–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
    training_config = training_project / "config.yaml"
    if training_config.exists():
        print(f"  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–∞: {training_config}")

    print("\n" + "=" * 60)
    print("üìù –í–´–í–û–î–´:")
    print("=" * 60)

    print(
        """
1. –ö–û–î–ò–†–û–í–ö–ê –ö–õ–ê–°–°–û–í –í –û–ë–£–ß–ï–ù–ò–ò:
   - LONG = 0
   - SHORT = 1
   - NEUTRAL/FLAT = 2

2. –¢–ï–ö–£–©–ê–Ø –ò–ù–¢–ï–†–ü–†–ï–¢–ê–¶–ò–Ø –í BOT_AI_V3:
   - weighted_direction < 0.8 ‚Üí LONG
   - 0.8 <= weighted_direction < 1.2 ‚Üí SHORT
   - weighted_direction >= 1.2 ‚Üí NEUTRAL

3. –ü–†–û–ë–õ–ï–ú–ê:
   –ú–æ–¥–µ–ª—å –≤—ã–¥–∞–µ—Ç –ø–æ—á—Ç–∏ —Ä–∞–≤–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ (~33% –∫–∞–∂–¥—ã–π),
   —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∫—Ä–∞–π–Ω–µ –Ω–∏–∑–∫—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è—Ö.

4. –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:
   - –ú–æ–¥–µ–ª—å –Ω–µ–¥–æ–æ–±—É—á–µ–Ω–∞ –∏–ª–∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞
   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   - –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –º–µ–∂–¥—É –æ–±—É—á–µ–Ω–∏–µ–º –∏ inference
   - –ú–æ–¥–µ–ª—å —Ç—Ä–µ–±—É–µ—Ç –¥–æ–æ–±—É—á–µ–Ω–∏—è –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    )


if __name__ == "__main__":
    check_model()
