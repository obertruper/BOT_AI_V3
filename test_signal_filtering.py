#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import numpy as np
import sys
from pathlib import Path

sys.path.append(str(Path(__file__).parent))

from ml.logic.signal_quality_analyzer import SignalQualityAnalyzer, FilterStrategy
import yaml


def test_filtering_strategies():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é
    with open('config/ml/ml_config.yaml', 'r') as f:
        config = yaml.safe_load(f)
    
    print("="*70)
    print("üö¶ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –§–ò–õ–¨–¢–†–ê–¶–ò–ò –°–ò–ì–ù–ê–õ–û–í")
    print("="*70)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    test_cases = [
        {
            "name": "–°–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª (–≤—Å–µ LONG, –≤—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)",
            "directions": np.array([0, 0, 0, 0]),  # –í—Å–µ LONG
            "probs": [
                np.array([0.8, 0.1, 0.1]),  # 15m - —Å–∏–ª—å–Ω—ã–π LONG
                np.array([0.7, 0.2, 0.1]),  # 1h - —Å–∏–ª—å–Ω—ã–π LONG
                np.array([0.75, 0.15, 0.1]), # 4h - —Å–∏–ª—å–Ω—ã–π LONG
                np.array([0.7, 0.2, 0.1]),  # 12h - —Å–∏–ª—å–Ω—ã–π LONG
            ],
            "returns": np.array([0.003, 0.004, 0.005, 0.006]),
            "risks": np.array([0.01, 0.01, 0.02, 0.02])
        },
        {
            "name": "–°—Ä–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª (–±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ LONG, —Å—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)",
            "directions": np.array([0, 0, 2, 0]),  # 3 LONG, 1 NEUTRAL
            "probs": [
                np.array([0.5, 0.3, 0.2]),  # 15m - —Å—Ä–µ–¥–Ω–∏–π LONG
                np.array([0.45, 0.35, 0.2]), # 1h - —Å—Ä–µ–¥–Ω–∏–π LONG
                np.array([0.3, 0.3, 0.4]),  # 4h - NEUTRAL
                np.array([0.5, 0.3, 0.2]),  # 12h - —Å—Ä–µ–¥–Ω–∏–π LONG
            ],
            "returns": np.array([0.001, 0.002, 0.002, 0.003]),
            "risks": np.array([0.02, 0.02, 0.03, 0.03])
        },
        {
            "name": "–°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª (—Ä–∞–∑–Ω–æ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π, –Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)",
            "directions": np.array([0, 1, 2, 0]),  # –†–∞–∑–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            "probs": [
                np.array([0.35, 0.33, 0.32]), # 15m - —Å–ª–∞–±—ã–π LONG
                np.array([0.32, 0.35, 0.33]), # 1h - —Å–ª–∞–±—ã–π SHORT
                np.array([0.31, 0.32, 0.37]), # 4h - —Å–ª–∞–±—ã–π NEUTRAL
                np.array([0.36, 0.32, 0.32]), # 12h - —Å–ª–∞–±—ã–π LONG
            ],
            "returns": np.array([0.0005, 0.0008, 0.001, 0.0012]),
            "risks": np.array([0.03, 0.03, 0.04, 0.04])
        },
        {
            "name": "–ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–π —Å–∏–≥–Ω–∞–ª (LONG vs SHORT)",
            "directions": np.array([0, 1, 0, 1]),  # –ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ LONG/SHORT
            "probs": [
                np.array([0.6, 0.3, 0.1]),  # 15m - LONG
                np.array([0.2, 0.7, 0.1]),  # 1h - SHORT
                np.array([0.6, 0.3, 0.1]),  # 4h - LONG
                np.array([0.2, 0.7, 0.1]),  # 12h - SHORT
            ],
            "returns": np.array([-0.001, 0.002, -0.002, 0.003]),
            "risks": np.array([0.05, 0.05, 0.06, 0.06])
        }
    ]
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    for strategy_name in ["conservative", "moderate", "aggressive"]:
        print(f"\n{'='*70}")
        print(f"üìã –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_name.upper()}")
        print(f"{'='*70}")
        
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
        analyzer = SignalQualityAnalyzer(config)
        analyzer.active_strategy = FilterStrategy(strategy_name)
        
        for test_case in test_cases:
            result = analyzer.analyze_signal_quality(
                test_case["directions"],
                test_case["probs"],
                test_case["returns"],
                test_case["risks"],
                weighted_direction=0.0  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
            )
            
            status = "‚úÖ –ü–†–û–®–ï–õ" if result.passed else "‚ùå –û–¢–ö–õ–û–ù–ï–ù"
            print(f"\n{test_case['name']}:")
            print(f"  –°—Ç–∞—Ç—É—Å: {status}")
            print(f"  –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞: {result.signal_type}")
            print(f"  –ö–∞—á–µ—Å—Ç–≤–æ: {result.quality_metrics.quality_score:.3f}")
            print(f"  –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å: {result.quality_metrics.agreement_score:.3f}")
            print(f"  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.quality_metrics.confidence_score:.3f}")
            
            if not result.passed and result.rejection_reasons:
                print(f"  –ü—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:")
                for reason in result.rejection_reasons:
                    print(f"    - {reason}")
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\n" + "="*70)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("="*70)
    
    print("\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("  ‚Ä¢ Conservative: –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–µ–Ω–µ–≥, –º–∏–Ω–∏–º—É–º –ª–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
    print("  ‚Ä¢ Moderate: –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —á–∞—Å—Ç–æ—Ç–æ–π –∏ –∫–∞—á–µ—Å—Ç–≤–æ–º")
    print("  ‚Ä¢ Aggressive: –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –º–∞–∫—Å–∏–º—É–º —Å–∏–≥–Ω–∞–ª–æ–≤")


if __name__ == "__main__":
    test_filtering_strategies()