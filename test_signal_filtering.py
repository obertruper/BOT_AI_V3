#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import numpy as np
import asyncio
from pathlib import Path
import yaml

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
import sys
sys.path.append(str(Path(__file__).parent))

from ml.logic.signal_quality_analyzer import SignalQualityAnalyzer, FilterStrategy
from core.logger import setup_logger

logger = setup_logger("test_signal_filtering")


def load_test_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    config_path = Path("config/ml/ml_config.yaml")
    
    if config_path.exists():
        with open(config_path, 'r', encoding='utf-8') as f:
            return yaml.safe_load(f)
    else:
        # –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
        return {
            "signal_filtering": {
                "strategy": "moderate",
                "timeframe_weights": [0.25, 0.25, 0.35, 0.15],
                "main_timeframe_index": 2,
                "conservative": {
                    "min_timeframe_agreement": 3,
                    "required_confidence_per_timeframe": 0.65,
                    "main_timeframe_required_confidence": 0.70,
                    "min_expected_return_pct": 0.008,
                    "min_signal_strength": 0.7,
                    "max_risk_level": "MEDIUM",
                    "min_quality_score": 0.75,
                },
                "moderate": {
                    "min_timeframe_agreement": 2,
                    "required_confidence_per_timeframe": 0.55,
                    "main_timeframe_required_confidence": 0.65,
                    "alternative_main_plus_one": True,
                    "alternative_confidence_threshold": 0.75,
                    "min_expected_return_pct": 0.005,
                    "min_signal_strength": 0.5,
                    "max_risk_level": "HIGH",
                    "min_quality_score": 0.60,
                },
                "aggressive": {
                    "min_timeframe_agreement": 1,
                    "required_confidence_per_timeframe": 0.45,
                    "main_timeframe_required_confidence": 0.55,
                    "min_expected_return_pct": 0.003,
                    "min_signal_strength": 0.4,
                    "max_risk_level": "HIGH",
                    "min_quality_score": 0.45,
                },
                "quality_weights": {
                    "agreement": 0.35,
                    "confidence": 0.30,
                    "return_expectation": 0.20,
                    "risk_adjustment": 0.15,
                }
            }
        }


def create_test_scenarios():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    scenarios = []
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –°–∏–ª—å–Ω—ã–π LONG —Å–∏–≥–Ω–∞–ª (–≤—Å–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã —Å–æ–≥–ª–∞—Å–Ω—ã)
    scenarios.append({
        "name": "Strong LONG - All timeframes agree",
        "directions": np.array([0, 0, 0, 0]),  # –í—Å–µ LONG
        "direction_probs": [
            np.array([0.8, 0.1, 0.1]),  # 15m: —Å–∏–ª—å–Ω—ã–π LONG
            np.array([0.75, 0.15, 0.1]), # 1h: —Å–∏–ª—å–Ω—ã–π LONG
            np.array([0.9, 0.05, 0.05]), # 4h: –æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π LONG
            np.array([0.7, 0.2, 0.1])    # 12h: —Å–∏–ª—å–Ω—ã–π LONG
        ],
        "future_returns": np.array([0.012, 0.015, 0.020, 0.018]),  # –•–æ—Ä–æ—à–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        "risk_metrics": np.array([0.2, 0.15, 0.1, 0.25]),  # –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫
    })
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ö–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ —Å–∏–≥–Ω–∞–ª—ã
    scenarios.append({
        "name": "Conflicting signals - Mixed directions",
        "directions": np.array([2, 1, 0, 0]),  # NEUTRAL, SHORT, LONG, LONG
        "direction_probs": [
            np.array([0.3, 0.3, 0.4]),   # 15m: —Å–ª–∞–±—ã–π NEUTRAL
            np.array([0.2, 0.6, 0.2]),   # 1h: —Å—Ä–µ–¥–Ω–∏–π SHORT
            np.array([0.7, 0.2, 0.1]),   # 4h: —Å–∏–ª—å–Ω—ã–π LONG
            np.array([0.65, 0.25, 0.1])  # 12h: —Å–∏–ª—å–Ω—ã–π LONG
        ],
        "future_returns": np.array([0.006, 0.008, 0.008, 0.006]),
        "risk_metrics": np.array([0.4, 0.5, 0.3, 0.35]),
    })
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 3: –°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª (–Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)
    scenarios.append({
        "name": "Weak signal - Low confidence",
        "directions": np.array([0, 0, 1, 2]),  # LONG, LONG, SHORT, NEUTRAL
        "direction_probs": [
            np.array([0.4, 0.35, 0.25]),  # 15m: —Å–ª–∞–±—ã–π LONG
            np.array([0.45, 0.3, 0.25]),  # 1h: —Å–ª–∞–±—ã–π LONG
            np.array([0.3, 0.5, 0.2]),    # 4h: —Å—Ä–µ–¥–Ω–∏–π SHORT
            np.array([0.3, 0.3, 0.4])     # 12h: —Å–ª–∞–±—ã–π NEUTRAL
        ],
        "future_returns": np.array([0.003, 0.002, 0.004, 0.001]),
        "risk_metrics": np.array([0.6, 0.7, 0.8, 0.65]),  # –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
    })
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 4: –£–º–µ—Ä–µ–Ω–Ω—ã–π LONG (–æ—Å–Ω–æ–≤–Ω–æ–π –¢–§ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç)
    scenarios.append({
        "name": "Moderate LONG - Main timeframe supports",
        "directions": np.array([1, 0, 0, 2]),  # SHORT, LONG, LONG, NEUTRAL
        "direction_probs": [
            np.array([0.2, 0.6, 0.2]),   # 15m: —Å—Ä–µ–¥–Ω–∏–π SHORT
            np.array([0.7, 0.2, 0.1]),   # 1h: —Å–∏–ª—å–Ω—ã–π LONG
            np.array([0.8, 0.15, 0.05]), # 4h: –æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π LONG (–æ—Å–Ω–æ–≤–Ω–æ–π!)
            np.array([0.3, 0.3, 0.4])    # 12h: —Å–ª–∞–±—ã–π NEUTRAL
        ],
        "future_returns": np.array([0.002, 0.008, 0.012, 0.005]),
        "risk_metrics": np.array([0.3, 0.25, 0.2, 0.35]),
    })
    
    return scenarios


def test_strategy_filtering(analyzer: SignalQualityAnalyzer, scenario: dict, strategy: str):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    logger.info(f"\n{'='*80}")
    logger.info(f"üß™ –¢–ï–°–¢: {scenario['name']} | –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy.upper()}")
    logger.info(f"{'='*80}")
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    analyzer.switch_strategy(strategy)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º weighted_direction
    weights = np.array([0.4, 0.3, 0.2, 0.1])
    weighted_direction = np.sum(scenario['directions'] * weights)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
    result = analyzer.analyze_signal_quality(
        directions=scenario['directions'],
        direction_probs=scenario['direction_probs'],
        future_returns=scenario['future_returns'],
        risk_metrics=scenario['risk_metrics'],
        weighted_direction=weighted_direction
    )
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    status = "‚úÖ –ü–†–ò–ù–Ø–¢" if result.passed else "‚ùå –û–¢–ö–õ–û–ù–ï–ù"
    logger.info(f"{status} - {result.signal_type}")
    
    if result.passed:
        metrics = result.quality_metrics
        logger.info(f"üìä –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞:")
        logger.info(f"   Agreement: {metrics.agreement_score:.3f}")
        logger.info(f"   Confidence: {metrics.confidence_score:.3f}")
        logger.info(f"   Return: {metrics.return_score:.3f}")
        logger.info(f"   Risk: {metrics.risk_score:.3f}")
        logger.info(f"   Quality: {metrics.quality_score:.3f}")
    else:
        logger.info(f"üö´ –ü—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:")
        for reason in result.rejection_reasons:
            logger.info(f"   - {reason}")
    
    return result


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_test_config()
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = SignalQualityAnalyzer(config)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    scenarios = create_test_scenarios()
    strategies = ["conservative", "moderate", "aggressive"]
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
    results = {}
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
    for scenario in scenarios:
        scenario_name = scenario['name']
        results[scenario_name] = {}
        
        for strategy in strategies:
            result = test_strategy_filtering(analyzer, scenario, strategy)
            results[scenario_name][strategy] = {
                "passed": result.passed,
                "signal_type": result.signal_type,
                "quality_score": result.quality_metrics.quality_score if result.passed else 0.0,
                "rejection_reasons": result.rejection_reasons
            }
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    logger.info(f"\n{'='*100}")
    logger.info("üìã –°–í–û–î–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    logger.info(f"{'='*100}")
    
    header = f"{'–°—Ü–µ–Ω–∞—Ä–∏–π':<40} {'Conservative':<15} {'Moderate':<15} {'Aggressive':<15}"
    logger.info(header)
    logger.info("-" * 100)
    
    for scenario_name, scenario_results in results.items():
        row = f"{scenario_name:<40}"
        
        for strategy in strategies:
            result = scenario_results[strategy]
            if result['passed']:
                status = f"‚úÖ {result['signal_type']}"
                quality = f"({result['quality_score']:.2f})"
                cell = f"{status} {quality}"
            else:
                cell = "‚ùå –û–¢–ö–õ–û–ù–ï–ù"
            
            row += f" {cell:<15}"
        
        logger.info(row)
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    logger.info(f"\n{'='*60}")
    logger.info("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê")
    logger.info(f"{'='*60}")
    
    stats = analyzer.get_strategy_statistics()
    for key, value in stats.items():
        logger.info(f"{key}: {value}")
    
    logger.info("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    main()