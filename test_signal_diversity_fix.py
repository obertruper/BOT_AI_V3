#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ BOT_AI_V3
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –Ω–æ–≤—ã–µ –ø–æ—Ä–æ–≥–∏ –∏ –ª–æ–≥–∏–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞—é—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ path
sys.path.insert(0, str(Path(__file__).parent))

from core.config.config_manager import ConfigManager
from core.logger import setup_logger
from data.data_loader import DataLoader
from ml.ml_manager import MLManager
from ml.ml_signal_processor import MLSignalProcessor

logger = setup_logger("signal_diversity_test")


async def test_signal_diversity_fixes():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤"""

    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤...")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_manager = ConfigManager()
    config = config_manager.get_config()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    ml_manager = MLManager(config)
    await ml_manager.initialize()

    signal_processor = MLSignalProcessor(ml_manager, config)
    data_loader = DataLoader(config)

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
    test_symbols = ["BTCUSDT", "ETHUSDT", "ADAUSDT", "DOTUSDT", "SOLUSDT"]

    signal_types = []
    direction_scores = []
    predictions_details = []

    logger.info(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(test_symbols)} —Å–∏–º–≤–æ–ª–æ–≤...")

    for symbol in test_symbols:
        try:
            logger.info(f"   –¢–µ—Å—Ç–∏—Ä—É–µ–º {symbol}...")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            candles = await data_loader.load_ohlcv(symbol=symbol, interval="15m", limit=150)

            if candles is None or len(candles) < 96:
                logger.warning(f"   ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                continue

            # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —á–µ—Ä–µ–∑ ML Manager
            prediction = await ml_manager.predict(candles)

            if prediction:
                signal_type = prediction.get("signal_type")
                direction_score = prediction.get("predictions", {}).get("direction_score", 0)
                confidence = prediction.get("confidence", 0)
                directions = prediction.get("predictions", {}).get("directions_by_timeframe", [])

                signal_types.append(signal_type)
                direction_scores.append(direction_score)
                predictions_details.append(
                    {
                        "symbol": symbol,
                        "signal_type": signal_type,
                        "direction_score": direction_score,
                        "confidence": confidence,
                        "directions": directions,
                    }
                )

                logger.info(
                    f"   ‚úÖ {symbol}: {signal_type} (score={direction_score:.3f}, conf={confidence:.1%})"
                )

                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º
                try:
                    processed_signal = await signal_processor.process_ml_prediction(
                        prediction, symbol
                    )
                    if processed_signal:
                        logger.info(
                            f"   ‚úÖ –°–∏–≥–Ω–∞–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {processed_signal.signal_type}"
                        )
                    else:
                        logger.info(
                            "   ‚ÑπÔ∏è –°–∏–≥–Ω–∞–ª –Ω–µ –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é (–≤–æ–∑–º–æ–∂–Ω–æ NEUTRAL —Å –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é)"
                        )
                except Exception as e:
                    logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")

        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {symbol}: {e}")

    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    logger.warning(
        f"""
üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìä –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:
   –í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(predictions_details)}
   –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {sum(p["confidence"] for p in predictions_details) / len(predictions_details) * 100:.1f}%

üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤:
   LONG:    {signal_types.count("LONG"):2d} ({signal_types.count("LONG") / len(signal_types) * 100:.1f}%)
   SHORT:   {signal_types.count("SHORT"):2d} ({signal_types.count("SHORT") / len(signal_types) * 100:.1f}%)
   NEUTRAL: {signal_types.count("NEUTRAL"):2d} ({signal_types.count("NEUTRAL") / len(signal_types) * 100:.1f}%)

üéØ –î–∏–∞–ø–∞–∑–æ–Ω Direction Scores:
   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π: {min(direction_scores):.3f}
   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π: {max(direction_scores):.3f}
   –°—Ä–µ–¥–Ω–∏–π: {sum(direction_scores) / len(direction_scores):.3f}

üí° –ö–∞—á–µ—Å—Ç–≤–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:
   {"‚úÖ –û–¢–õ–ò–ß–ù–û" if len(set(signal_types)) >= 2 else "‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò"} - –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(set(signal_types))} –∏–∑ 3 —Ç–∏–ø–æ–≤
   {"‚úÖ –•–û–†–û–®–û" if max(direction_scores) - min(direction_scores) > 0.3 else "‚ö†Ô∏è –°–õ–ê–ë–û"} - –î–∏–∞–ø–∞–∑–æ–Ω scores: {max(direction_scores) - min(direction_scores):.3f}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
"""
    )

    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∏–º–≤–æ–ª—É
    logger.info("üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å–∏–º–≤–æ–ª–∞–º:")
    for details in predictions_details:
        logger.info(
            f"   {details['symbol']:8s}: {details['signal_type']:7s} | "
            f"Score: {details['direction_score']:6.3f} | "
            f"Conf: {details['confidence']:5.1%} | "
            f"Directions: {details['directions']}"
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ SHORT-only —Ä–µ—à–µ–Ω–∞
    long_pct = signal_types.count("LONG") / len(signal_types) * 100
    short_pct = signal_types.count("SHORT") / len(signal_types) * 100
    neutral_pct = signal_types.count("NEUTRAL") / len(signal_types) * 100

    success_criteria = [
        (len(set(signal_types)) >= 2, "–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"),
        (long_pct < 90, "LONG –Ω–µ –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç (< 90%)"),
        (short_pct > 0 or neutral_pct > 0, "–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ-LONG —Å–∏–≥–Ω–∞–ª—ã"),
        (max(direction_scores) - min(direction_scores) > 0.2, "–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ scores"),
    ]

    passed_criteria = sum(1 for criterion, _ in success_criteria if criterion)

    logger.warning(
        f"""
üèÜ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
–ü—Ä–æ–π–¥–µ–Ω–æ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤: {passed_criteria}/{len(success_criteria)}

"""
    )

    for criterion, description in success_criteria:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if criterion else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
        logger.warning(f"   {status}: {description}")

    if passed_criteria >= 3:
        logger.warning(
            """
üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –£–°–ü–ï–®–ù–´!
   –ü—Ä–æ–±–ª–µ–º–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ —Ä–µ—à–µ–Ω–∞.
   –°–∏—Å—Ç–µ–º–∞ —Ç–µ–ø–µ—Ä—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã.
"""
        )
    else:
        logger.warning(
            """
‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê
   –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã.
   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø–æ—Ä–æ–≥–æ–≤.
"""
        )

    return passed_criteria >= 3


if __name__ == "__main__":
    success = asyncio.run(test_signal_diversity_fixes())
    sys.exit(0 if success else 1)
