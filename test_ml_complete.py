#!/usr/bin/env python3

import asyncio
import time
from datetime import datetime

import numpy as np
import pandas as pd

from core.logger import setup_logger
from ml.ml_manager import MLManager

logger = setup_logger("test_ml_complete")


async def test_ml_manager():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç ML Manager"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        logger.info("–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        dates = pd.date_range(end=datetime.now(), periods=200, freq="15min")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
        base_price = 45000
        trend = np.linspace(0, 500, 200)

        data = pd.DataFrame(
            {
                "datetime": dates,
                "open": base_price + trend + np.random.normal(0, 20, 200),
                "high": base_price + trend + np.random.uniform(20, 50, 200),
                "low": base_price + trend - np.random.uniform(20, 50, 200),
                "close": base_price + trend + np.random.normal(0, 30, 200),
                "volume": np.random.uniform(100, 1000, 200),
                "symbol": "BTCUSDT",
            }
        )

        logger.info(f"–î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã: {data.shape}")
        logger.info(f"–ü–µ—Ä–∏–æ–¥: {data['datetime'].min()} - {data['datetime'].max()}")

        # –°–æ–∑–¥–∞–µ–º ML Manager
        config = {"ml": {"model": {"device": "cpu"}}}  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ CPU
        ml_manager = MLManager(config)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ML Manager...")
        start_time = time.time()
        await ml_manager.initialize()
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ {time.time() - start_time:.2f} —Å–µ–∫")

        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        logger.info("–î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ...")
        start_time = time.time()
        prediction = await ml_manager.predict(data)
        logger.info(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∑–∞–Ω—è–ª–æ {time.time() - start_time:.2f} —Å–µ–∫")

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logger.info("=" * 60)
        logger.info("–†–ï–ó–£–õ–¨–¢–ê–¢–´ ML –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø:")
        logger.info("=" * 60)
        logger.info(f"üìä –°–∏–≥–Ω–∞–ª: {prediction['signal_type']}")
        logger.info(f"üí™ –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {prediction['signal_strength']:.3f}")
        logger.info(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction['confidence']:.3f}")
        logger.info(f"üìà –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞: {prediction['success_probability']:.1%}")
        logger.info(f"‚ö†Ô∏è  –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {prediction['risk_level']}")

        if prediction["signal_type"] != "NEUTRAL":
            if prediction["stop_loss"]:
                logger.info(f"üõë Stop Loss: {prediction['stop_loss']:.2f}")
            if prediction["take_profit"]:
                logger.info(f"‚úÖ Take Profit: {prediction['take_profit']:.2f}")

        # –î–µ—Ç–∞–ª–∏
        logger.info("\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:")
        pred_details = prediction["predictions"]
        logger.info(f"   15–º–∏–Ω –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {pred_details['returns_15m']:.3f}")
        logger.info(f"   1—á–∞—Å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {pred_details['returns_1h']:.3f}")
        logger.info(f"   4—á–∞—Å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {pred_details['returns_4h']:.3f}")
        logger.info(f"   12—á–∞—Å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {pred_details['returns_12h']:.3f}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        raw_dirs = pred_details.get("raw_directions", [])
        if raw_dirs:
            unique_vals = len(set([round(d, 1) for d in raw_dirs]))
            logger.info("\nüîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π:")
            logger.info(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {unique_vals} –∏–∑ {len(raw_dirs)}")
            logger.info(f"   Raw directions: {[f'{v:.2f}' for v in raw_dirs]}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–Ω–æ—Ç–æ–Ω–Ω–æ—Å—Ç—å
            if unique_vals == 1:
                logger.warning("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í—Å–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ!")
            else:
                logger.info("‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ")

        logger.info("=" * 60)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)


if __name__ == "__main__":
    asyncio.run(test_ml_manager())
