#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
"""

import asyncio
from datetime import datetime

from sqlalchemy import text

from database.connections import get_async_db


async def analyze():
    print("=" * 80)
    print("üìä –ê–ù–ê–õ–ò–ó –†–ê–ë–û–¢–´ –ë–û–¢–ê BOT_AI_V3")
    print("=" * 80)

    async with get_async_db() as db:
        # 1. –ì–õ–ê–í–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê - –ù–ï–¢ SHORT –°–ò–ì–ù–ê–õ–û–í!
        print("\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê:")
        result = await db.execute(
            text(
                """
            SELECT signal_type, COUNT(*) as count
            FROM signals
            WHERE created_at >= NOW() - INTERVAL '18 hours'
            GROUP BY signal_type
        """
            )
        )
        signals = result.fetchall()

        has_short = False
        for s in signals:
            print(f"  {s.signal_type.upper()}: {s.count} —Å–∏–≥–Ω–∞–ª–æ–≤")
            if s.signal_type.lower() == "short":
                has_short = True

        if not has_short:
            print("  ‚ö†Ô∏è –ù–ï–¢ SHORT –°–ò–ì–ù–ê–õ–û–í! –ë–û–¢ –¢–û–†–ì–£–ï–¢ –¢–û–õ–¨–ö–û –í LONG!")
            print("  üìå –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ –Ω–∞ –ø–∞–¥–∞—é—â–µ–º —Ä—ã–Ω–∫–µ!")

        # 2. –¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ Bybit (—Ä–µ–∞–ª—å–Ω—ã–µ)
        print("\nüìä –¢–ï–ö–£–©–ò–ï –ü–û–ó–ò–¶–ò–ò –ù–ê BYBIT:")
        result = await db.execute(
            text(
                """
            SELECT
                symbol,
                side,
                size,
                entry_price,
                unrealized_pnl,
                created_at
            FROM positions
            WHERE status = 'open'
            ORDER BY created_at DESC
        """
            )
        )
        positions = result.fetchall()

        if positions:
            total_pnl = 0
            long_count = 0
            short_count = 0

            for p in positions:
                pnl = p.unrealized_pnl or 0
                total_pnl += pnl
                age_hours = (datetime.utcnow() - p.created_at).total_seconds() / 3600

                if p.side.upper() == "LONG":
                    long_count += 1
                else:
                    short_count += 1

                pnl_str = f"+${pnl:.2f}" if pnl > 0 else f"${pnl:.2f}"
                print(
                    f"  {p.symbol} {p.side}: size={p.size}, PnL={pnl_str}, –≤–æ–∑—Ä–∞—Å—Ç={age_hours:.1f}—á"
                )

            print("\n  üìà –ò–¢–û–ì–û:")
            print(f"     LONG –ø–æ–∑–∏—Ü–∏–π: {long_count}")
            print(f"     SHORT –ø–æ–∑–∏—Ü–∏–π: {short_count}")
            print(f"     –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL: ${total_pnl:.2f}")
        else:
            print("  –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")

        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        print("\nüìù –û–†–î–ï–†–ê –ó–ê 18 –ß–ê–°–û–í:")
        result = await db.execute(
            text(
                """
            SELECT
                status,
                COUNT(*) as count,
                MIN(created_at) as first_order,
                MAX(created_at) as last_order
            FROM orders
            WHERE created_at >= NOW() - INTERVAL '18 hours'
            GROUP BY status
        """
            )
        )
        orders = result.fetchall()

        for o in orders:
            print(f"  {o.status}: {o.count} –æ—Ä–¥–µ—Ä–æ–≤")
            if o.last_order:
                minutes_ago = (datetime.utcnow() - o.last_order).total_seconds() / 60
                print(f"     –ü–æ—Å–ª–µ–¥–Ω–∏–π: {minutes_ago:.0f} –º–∏–Ω –Ω–∞–∑–∞–¥")

        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –æ—Ä–¥–µ—Ä–æ–≤ (—Ç–µ—Å—Ç–æ–≤—ã–µ vs —Ä–µ–∞–ª—å–Ω—ã–µ)
        result = await db.execute(
            text(
                """
            SELECT
                CASE
                    WHEN order_id LIKE 'test_%' THEN 'TEST'
                    WHEN order_id LIKE 'demo_%' THEN 'DEMO'
                    WHEN order_id LIKE 'paper_%' THEN 'PAPER'
                    ELSE 'REAL'
                END as type,
                COUNT(*) as cnt
            FROM orders
            WHERE created_at >= NOW() - INTERVAL '18 hours'
            GROUP BY
                CASE
                    WHEN order_id LIKE 'test_%' THEN 'TEST'
                    WHEN order_id LIKE 'demo_%' THEN 'DEMO'
                    WHEN order_id LIKE 'paper_%' THEN 'PAPER'
                    ELSE 'REAL'
                END
        """
            )
        )
        order_types = result.fetchall()

        print("\n  –¢–∏–ø—ã –æ—Ä–¥–µ—Ä–æ–≤:")
        for ot in order_types:
            print(f"     {ot.type}: {ot.cnt}")

        # 5. –ê–Ω–∞–ª–∏–∑ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫
        print("\nüí∞ –ó–ê–ö–†–´–¢–´–ï –°–î–ï–õ–ö–ò:")
        result = await db.execute(
            text(
                """
            SELECT
                COUNT(*) as total_trades,
                SUM(CASE WHEN profit > 0 THEN 1 ELSE 0 END) as profitable,
                SUM(CASE WHEN profit < 0 THEN 1 ELSE 0 END) as losing,
                ROUND(SUM(profit)::numeric, 2) as total_profit
            FROM trades
            WHERE created_at >= NOW() - INTERVAL '18 hours'
        """
            )
        )
        trades = result.fetchone()

        if trades and trades.total_trades > 0:
            win_rate = (
                (trades.profitable / trades.total_trades * 100) if trades.total_trades > 0 else 0
            )
            print(f"  –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {trades.total_trades}")
            print(f"  –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {trades.profitable or 0}")
            print(f"  –£–±—ã—Ç–æ—á–Ω—ã—Ö: {trades.losing or 0}")
            print(f"  Win Rate: {win_rate:.1f}%")
            print(f"  –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${trades.total_profit or 0:.2f}")
        else:
            print("  –ù–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥")

        # 6. –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        print("\n‚è∞ –ü–û–°–õ–ï–î–ù–Ø–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨:")

        # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª
        result = await db.execute(
            text(
                """
            SELECT MAX(created_at) as last_time
            FROM signals
        """
            )
        )
        last_signal = result.fetchone()
        if last_signal and last_signal.last_time:
            minutes_ago = (datetime.utcnow() - last_signal.last_time).total_seconds() / 60
            print(f"  –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª: {minutes_ago:.1f} –º–∏–Ω –Ω–∞–∑–∞–¥")

        # –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ä–¥–µ—Ä
        result = await db.execute(
            text(
                """
            SELECT MAX(created_at) as last_time
            FROM orders
        """
            )
        )
        last_order = result.fetchone()
        if last_order and last_order.last_time:
            minutes_ago = (datetime.utcnow() - last_order.last_time).total_seconds() / 60
            print(f"  –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ä–¥–µ—Ä: {minutes_ago:.1f} –º–∏–Ω –Ω–∞–∑–∞–¥")

        print("\n" + "=" * 80)
        print("–í–´–í–û–î–´:")
        print("=" * 80)

        if not has_short:
            print("‚ùå ML –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¢–û–õ–¨–ö–û LONG —Å–∏–≥–Ω–∞–ª—ã!")
            print("   –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ –ø—Ä–∏ –ø–∞–¥–∞—é—â–µ–º —Ä—ã–Ω–∫–µ!")
            print("   –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å ML –ª–æ–≥–∏–∫—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")

        if long_count > 0 and short_count == 0:
            print("‚ùå –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–ª—å–∫–æ LONG - –Ω–µ—Ç —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è")

        if total_pnl < 0:
            print(f"‚ö†Ô∏è –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL: ${total_pnl:.2f}")

        print("\nüìå –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å ML –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SHORT —Å–∏–≥–Ω–∞–ª–æ–≤")
        print("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤")
        print("3. –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å TP/SL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")


if __name__ == "__main__":
    asyncio.run(analyze())
