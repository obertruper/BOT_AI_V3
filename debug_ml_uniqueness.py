#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ—Ç–µ—Ä–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –≤ ML pipeline BOT_AI_V3
–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–∞ –ø–æ—Ç–µ—Ä–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
"""

import asyncio
import hashlib
import sys
from pathlib import Path

import numpy as np
import pandas as pd

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from core.config.config_manager import ConfigManager
from core.logger import setup_logger
from data.data_loader import DataLoader
from ml.logic.feature_engineering import FeatureEngineer
from ml.ml_manager import MLManager
from ml.ml_signal_processor import MLSignalProcessor
from ml.realtime_indicator_calculator import RealTimeIndicatorCalculator

logger = setup_logger(__name__)


class MLUniquenessDiagnostic:
    """
    –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –≤ ML pipeline
    """

    def __init__(self):
        self.config_manager = ConfigManager()
        self.config = self.config_manager.get_config()
        self.ml_manager = None
        self.signal_processor = None
        self.feature_engineer = None
        self.indicator_calculator = None
        self.data_loader = None

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ML Manager
        self.ml_manager = MLManager(self.config)
        await self.ml_manager.initialize()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Signal Processor
        self.signal_processor = MLSignalProcessor(
            ml_manager=self.ml_manager,
            config=self.config,
            config_manager=self.config_manager,
        )
        await self.signal_processor.initialize()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Feature Engineer
        self.feature_engineer = FeatureEngineer(self.config)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Indicator Calculator
        self.indicator_calculator = RealTimeIndicatorCalculator(
            cache_ttl=300, config=self.config
        )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Data Loader
        self.data_loader = DataLoader(self.config_manager)

        logger.info("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

    def calculate_data_hash(self, data, description=""):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ö—ç—à –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏"""
        if isinstance(data, pd.DataFrame):
            # –î–ª—è DataFrame –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ö—ç—à –∑–Ω–∞—á–µ–Ω–∏–π
            if not data.empty:
                # –í–∫–ª—é—á–∞–µ–º symbol –≤ —Ö—ç—à –µ—Å–ª–∏ –µ—Å—Ç—å
                if "symbol" in data.columns:
                    symbol_info = f"_{data['symbol'].iloc[0]}" if len(data) > 0 else ""
                else:
                    symbol_info = "_no_symbol"

                hash_data = str(data.values.tobytes()) + symbol_info
            else:
                hash_data = "empty_dataframe"
        elif isinstance(data, np.ndarray):
            hash_data = str(data.tobytes())
        else:
            hash_data = str(data)

        data_hash = hashlib.md5(hash_data.encode()).hexdigest()[:8]
        logger.info(
            f"üîç [{description}] Hash: {data_hash}, Shape: {getattr(data, 'shape', 'N/A')}"
        )

        if isinstance(data, pd.DataFrame) and not data.empty:
            if "symbol" in data.columns:
                logger.info(
                    f"   Symbol: {data['symbol'].iloc[0] if len(data) > 0 else 'unknown'}"
                )
            else:
                logger.warning("   ‚ùå Symbol –∫–æ–ª–æ–Ω–∫–∏ –ù–ï–¢ –≤ –¥–∞–Ω–Ω—ã—Ö!")

        return data_hash

    async def test_symbol_propagation(self, symbols=["BTCUSDT", "ETHUSDT"]):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É —Å–∏–º–≤–æ–ª–æ–≤ —á–µ—Ä–µ–∑ –≤–µ—Å—å pipeline"""
        logger.info(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏ —Å–∏–º–≤–æ–ª–æ–≤: {symbols}")

        results = {}

        for symbol in symbols:
            logger.info(f"\nüìä === –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ {symbol} ===")

            # 1. –ü–æ–ª—É—á–∞–µ–º OHLCV –¥–∞–Ω–Ω—ã–µ
            logger.info("1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ OHLCV –¥–∞–Ω–Ω—ã—Ö...")
            ohlcv_df = await self.signal_processor._fetch_latest_ohlcv(
                symbol=symbol, exchange="bybit", lookback_minutes=7200
            )

            if ohlcv_df is None or len(ohlcv_df) < 96:
                logger.error(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ symbol –≤ OHLCV
            ohlcv_hash = self.calculate_data_hash(ohlcv_df, f"OHLCV for {symbol}")

            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–¥–∞—á—É –≤ indicator_calculator
            logger.info("2Ô∏è‚É£ –í—ã–∑–æ–≤ prepare_ml_input...")
            features_array, metadata = await self.indicator_calculator.prepare_ml_input(
                symbol=symbol,
                ohlcv_df=ohlcv_df,
                lookback=96,
            )

            features_hash = self.calculate_data_hash(
                features_array, f"Features for {symbol}"
            )

            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–¥–∞—á—É –≤ ml_manager
            logger.info("3Ô∏è‚É£ –í—ã–∑–æ–≤ ml_manager.predict...")
            prediction = await self.ml_manager.predict(features_array)

            prediction_hash = self.calculate_data_hash(
                str(prediction), f"Prediction for {symbol}"
            )

            # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            results[symbol] = {
                "ohlcv_hash": ohlcv_hash,
                "features_hash": features_hash,
                "prediction_hash": prediction_hash,
                "prediction": prediction,
                "metadata": metadata,
            }

            logger.info(f"‚úÖ {symbol} –æ–±—Ä–∞–±–æ—Ç–∞–Ω")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logger.info("\nüìã === –ê–ù–ê–õ–ò–ó –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò ===")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ö—ç—à–µ–π
        ohlcv_hashes = [r["ohlcv_hash"] for r in results.values()]
        features_hashes = [r["features_hash"] for r in results.values()]
        prediction_hashes = [r["prediction_hash"] for r in results.values()]

        logger.info(f"OHLCV —Ö—ç—à–∏: {ohlcv_hashes}")
        logger.info(f"Features —Ö—ç—à–∏: {features_hashes}")
        logger.info(f"Prediction —Ö—ç—à–∏: {prediction_hashes}")

        # –í—ã–≤–æ–¥—ã
        if len(set(ohlcv_hashes)) == len(symbols):
            logger.info("‚úÖ OHLCV –¥–∞–Ω–Ω—ã–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞")
        else:
            logger.error("‚ùå OHLCV –¥–∞–Ω–Ω—ã–µ –û–î–ò–ù–ê–ö–û–í–´–ï –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤!")

        if len(set(features_hashes)) == len(symbols):
            logger.info("‚úÖ Feature –¥–∞–Ω–Ω—ã–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞")
        else:
            logger.error("‚ùå Feature –¥–∞–Ω–Ω—ã–µ –û–î–ò–ù–ê–ö–û–í–´–ï –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤!")

        if len(set(prediction_hashes)) == len(symbols):
            logger.info("‚úÖ Predictions —É–Ω–∏–∫–∞–ª—å–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞")
        else:
            logger.error("‚ùå Predictions –û–î–ò–ù–ê–ö–û–í–´–ï –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤!")

        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ predictions
        logger.info("\nüìã === –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó PREDICTIONS ===")
        for symbol, result in results.items():
            pred = result["prediction"]
            logger.info(f"{symbol}:")
            logger.info(f"  –¢–∏–ø: {type(pred)}")
            if isinstance(pred, dict):
                for key, value in pred.items():
                    logger.info(f"    {key}: {value}")
            else:
                logger.info(f"  –ó–Ω–∞—á–µ–Ω–∏–µ: {pred}")

        return results

    async def test_direct_feature_generation(self, symbols=["BTCUSDT", "ETHUSDT"]):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ FeatureEngineer"""
        logger.info(f"üî¨ –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FeatureEngineer –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤: {symbols}")

        results = {}

        for symbol in symbols:
            logger.info(f"\nüìä === –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç {symbol} ===")

            # –ü–æ–ª—É—á–∞–µ–º OHLCV –¥–∞–Ω–Ω—ã–µ
            ohlcv_df = await self.signal_processor._fetch_latest_ohlcv(
                symbol=symbol, exchange="bybit", lookback_minutes=7200
            )

            if ohlcv_df is None or len(ohlcv_df) < 96:
                logger.error(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ symbol –≤ DataFrame
            if "symbol" not in ohlcv_df.columns:
                logger.warning(f"‚ö†Ô∏è –î–æ–±–∞–≤–ª—è–µ–º symbol={symbol} –≤ DataFrame")
                ohlcv_df["symbol"] = symbol

            ohlcv_hash = self.calculate_data_hash(
                ohlcv_df, f"Direct OHLCV for {symbol}"
            )

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
            logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è {symbol}...")
            features = self.feature_engineer.create_features(ohlcv_df)

            features_hash = self.calculate_data_hash(
                features, f"Direct Features for {symbol}"
            )

            results[symbol] = {
                "ohlcv_hash": ohlcv_hash,
                "features_hash": features_hash,
                "features_shape": features.shape,
            }

        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä—è–º–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        logger.info("\nüìã === –ê–ù–ê–õ–ò–ó –ü–†–Ø–ú–û–ô –ì–ï–ù–ï–†–ê–¶–ò–ò ===")

        features_hashes = [r["features_hash"] for r in results.values()]
        logger.info(f"–ü—Ä—è–º—ã–µ Features —Ö—ç—à–∏: {features_hashes}")

        if len(set(features_hashes)) == len(symbols):
            logger.info("‚úÖ –ü—Ä—è–º–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —É–Ω–∏–∫–∞–ª—å–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞")
        else:
            logger.error(
                "‚ùå –ü—Ä—è–º–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –û–î–ò–ù–ê–ö–û–í–ê–Ø –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤!"
            )

        return results

    async def test_cache_behavior(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫—ç—à–∞ –≤ ml_signal_processor"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∫—ç—à–∞...")

        # –û—á–∏—â–∞–µ–º –∫—ç—à
        self.signal_processor.prediction_cache.clear()

        symbol = "BTCUSDT"

        # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤
        logger.info("1Ô∏è‚É£ –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ process_realtime_signal...")
        signal1 = await self.signal_processor.process_realtime_signal(symbol)
        cache_size1 = len(self.signal_processor.prediction_cache)
        logger.info(f"–†–∞–∑–º–µ—Ä –∫—ç—à–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞: {cache_size1}")

        # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à)
        logger.info("2Ô∏è‚É£ –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ process_realtime_signal...")
        signal2 = await self.signal_processor.process_realtime_signal(symbol)
        cache_size2 = len(self.signal_processor.prediction_cache)
        logger.info(f"–†–∞–∑–º–µ—Ä –∫—ç—à–∞ –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ –≤—ã–∑–æ–≤–∞: {cache_size2}")

        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        logger.info("üìã –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        if signal1 and signal2:
            logger.info(
                f"Signal1: {signal1.signal_type}, confidence: {signal1.confidence}"
            )
            logger.info(
                f"Signal2: {signal2.signal_type}, confidence: {signal2.confidence}"
            )

            if (
                signal1.signal_type == signal2.signal_type
                and abs(signal1.confidence - signal2.confidence) < 0.001
            ):
                logger.info("‚úÖ –ö—ç—à —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ")
            else:
                logger.error("‚ùå –ö—ç—à —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–∑–Ω—ã–µ!")
        else:
            logger.warning("‚ö†Ô∏è –û–¥–∏–Ω –∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤ None")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫—ç—à–∞
        logger.info("\nüìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫—ç—à–∞:")
        for key in self.signal_processor.prediction_cache.keys():
            logger.info(f"  Cache key: {key}")

    async def run_full_diagnostic(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ ML pipeline...")

        try:
            await self.initialize()

            # –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–¥–∞—á–∞ —Å–∏–º–≤–æ–ª–æ–≤
            await self.test_symbol_propagation()

            # –¢–µ—Å—Ç 2: –ü—Ä—è–º–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            await self.test_direct_feature_generation()

            # –¢–µ—Å—Ç 3: –ü–æ–≤–µ–¥–µ–Ω–∏–µ –∫—ç—à–∞
            await self.test_cache_behavior()

            logger.info("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
            raise


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    diagnostic = MLUniquenessDiagnostic()
    await diagnostic.run_full_diagnostic()


if __name__ == "__main__":
    asyncio.run(main())
