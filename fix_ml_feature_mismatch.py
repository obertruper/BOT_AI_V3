#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ ML —Å–∏—Å—Ç–µ–º–µ.

–ü–†–û–ë–õ–ï–ú–ê:
- –°–∏—Å—Ç–µ–º–∞ –æ–∂–∏–¥–∞–µ—Ç 240 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (features_240.py)
- –ú–æ–¥–µ–ª—å –±—ã–ª–∞ –æ–±—É—á–µ–Ω–∞ –Ω–∞ 231 –ø—Ä–∏–∑–Ω–∞–∫–µ (–Ω–∞–π–¥–µ–Ω–æ –≤ –æ–±—É—á–∞—é—â–µ–º —Ñ–∞–π–ª–µ)
- –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —Ä–µ–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é

–†–ï–®–ï–ù–ò–ï:
1. –û–±–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å 231 –ø—Ä–∏–∑–Ω–∞–∫–æ–º
2. –ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é feature engineering –Ω–∞ —Ç–æ—á–Ω—É—é –∫–æ–ø–∏—é –∏–∑ –æ–±—É—á–µ–Ω–∏—è
3. –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é ML —Å–∏—Å—Ç–µ–º—ã
"""

import os
import shutil
import sys
from pathlib import Path

from core.logger import setup_logger
from production_features_config import PRODUCTION_FEATURES


class MLFeatureMismatchFixer:
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ ML —Å–∏—Å—Ç–µ–º–µ"""

    def __init__(self):
        self.logger = setup_logger(__name__)
        self.project_root = Path("/mnt/SSD/PYCHARMPRODJECT/BOT_AI_V3")
        self.backup_suffix = "_backup_240_features"

    def create_backup(self, file_path: Path) -> Path:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞"""
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç backup —Ñ–∞–π–ª–∞
        backup_path = file_path.parent / f"{file_path.stem}{self.backup_suffix}{file_path.suffix}"
        if not backup_path.exists():
            shutil.copy2(file_path, backup_path)
            self.logger.info(f"üìÑ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
        return backup_path

    def update_features_config(self) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å 240 –Ω–∞ 231"""

        config_file = self.project_root / "ml" / "config" / "features_240.py"

        if not config_file.exists():
            self.logger.error(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_file}")
            return False

        # –°–æ–∑–¥–∞–µ–º backup
        self.create_backup(config_file)

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        new_config_content = f'''#!/usr/bin/env python3
"""
–¢–æ—á–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 231 –ø—Ä–∏–∑–Ω–∞–∫–∞ –¥–ª—è UnifiedPatchTST –º–æ–¥–µ–ª–∏.
–û–ë–ù–û–í–õ–ï–ù–û: –ü—Ä–∏–≤–µ–¥–µ–Ω–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —Ä–µ–∞–ª—å–Ω–æ–π –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é.

–ö–†–ò–¢–ò–ß–ù–û: –≠—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –¢–û–ß–ù–û–ú –∞–Ω–∞–ª–∏–∑–µ –æ–±—É—á–∞—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ BOT_AI_V2/–∞–∞–∞.py
"""

# –ò–º–ø–æ—Ä—Ç —Ç–æ—á–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—É—á–∞—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
from production_features_config import PRODUCTION_FEATURES, CRITICAL_FORMULAS

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å 240 –Ω–∞ 231)
REQUIRED_FEATURES_231 = PRODUCTION_FEATURES

# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
REQUIRED_FEATURES_240 = REQUIRED_FEATURES_231  # –ê–ª–∏–∞—Å –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞


def get_required_features_list() -> list[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ 231 –ø—Ä–∏–∑–Ω–∞–∫–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
    –û–ë–ù–û–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—á–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑ –æ–±—É—á–∞—é—â–µ–≥–æ —Ñ–∞–π–ª–∞.
    """
    return REQUIRED_FEATURES_231.copy()


def get_feature_count() -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
    return len(REQUIRED_FEATURES_231)


def validate_features(features: list[str]) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–º.
    
    Args:
        features: –°–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        True –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–µ–Ω, False –∏–Ω–∞—á–µ
    """
    required = get_required_features_list()
    
    if len(features) != len(required):
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {{len(features)}} –≤–º–µ—Å—Ç–æ {{len(required)}}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
    for i, (feat, req) in enumerate(zip(features, required, strict=False)):
        if feat != req:
            print(f"‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {{i}}: '{{feat}}' –≤–º–µ—Å—Ç–æ '{{req}}'")
            return False
    
    return True


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è inference (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)
FEATURE_CONFIG = {{
    "expected_features": {len(PRODUCTION_FEATURES)},  # –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å 240 –Ω–∞ 231
    "context_window": 96,  # –ò–∑ model config
    "min_history": 240,  # –ú–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
    "use_cache": True,
    "cache_ttl": 300,  # 5 –º–∏–Ω—É—Ç
    "inference_mode": True,  # –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ - –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    "feature_order_critical": True,  # –ù–û–í–û–ï: –ø–æ—Ä—è–¥–æ–∫ –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–µ–Ω
    "use_training_exact": True,  # –ù–û–í–û–ï: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—á–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã –∏–∑ –æ–±—É—á–µ–Ω–∏—è
}}

# –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã –∏–∑ –æ–±—É—á–∞—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
TRAINING_FORMULAS = CRITICAL_FORMULAS

if __name__ == "__main__":
    # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    features = get_required_features_list()
    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {{len(features)}} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    print(f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: 240 ‚Üí {{len(features)}} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    
    print("\\nüîß –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã:")
    for formula_name, formula in TRAINING_FORMULAS.items():
        print(f"  - {{formula_name}}: {{formula}}")
    
    print("\\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
'''

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open(config_file, "w", encoding="utf-8") as f:
            f.write(new_config_content)

        self.logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {config_file}")
        return True

    def update_feature_engineering(self) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª feature engineering"""

        fe_file = self.project_root / "ml" / "logic" / "feature_engineering_v2.py"

        if not fe_file.exists():
            self.logger.error(f"‚ùå –§–∞–π–ª feature engineering –Ω–µ –Ω–∞–π–¥–µ–Ω: {fe_file}")
            return False

        # –°–æ–∑–¥–∞–µ–º backup
        self.create_backup(fe_file)

        # –ü–∞—Ç—á–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
        patch_content = '''
# === –ü–ê–¢–ß –î–õ–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –¢–û–ß–ù–´–• –ü–†–ò–ó–ù–ê–ö–û–í –ò–ó –û–ë–£–ß–ï–ù–ò–Ø ===
# –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è 240 vs 231 –ø—Ä–∏–∑–Ω–∞–∫

try:
    from ml.logic.training_exact_features import TrainingExactFeatures
    _TRAINING_EXACT_AVAILABLE = True
except ImportError:
    _TRAINING_EXACT_AVAILABLE = False

def create_features_exact_training(df, config, symbol=None):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—è –¢–û–ß–ù–´–ï —Ñ–æ—Ä–º—É–ª—ã –∏–∑ –æ–±—É—á–∞—é—â–µ–≥–æ —Ñ–∞–π–ª–∞"""
    if not _TRAINING_EXACT_AVAILABLE:
        raise ImportError("TrainingExactFeatures –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    engineer = TrainingExactFeatures(config)
    return engineer.create_features(df, symbol)

# === –ö–û–ù–ï–¶ –ü–ê–¢–ß–ê ===
'''

        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
        with open(fe_file, encoding="utf-8") as f:
            content = f.read()

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ç—á –≤ –Ω–∞—á–∞–ª–æ (–ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤)
        import_end = content.find("\n\nclass")
        if import_end == -1:
            import_end = content.find("\nclass")

        if import_end != -1:
            new_content = content[:import_end] + patch_content + content[import_end:]
        else:
            new_content = content + patch_content

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(fe_file, "w", encoding="utf-8") as f:
            f.write(new_content)

        self.logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ç—á –≤ feature engineering: {fe_file}")
        return True

    def update_ml_manager(self) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç ML Manager –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è 231 –ø—Ä–∏–∑–Ω–∞–∫–∞"""

        ml_manager_file = self.project_root / "ml" / "ml_manager.py"

        if not ml_manager_file.exists():
            self.logger.warning(f"‚ö†Ô∏è ML Manager –Ω–µ –Ω–∞–π–¥–µ–Ω: {ml_manager_file}")
            return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ

        # –°–æ–∑–¥–∞–µ–º backup
        self.create_backup(ml_manager_file)

        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        with open(ml_manager_file, encoding="utf-8") as f:
            content = f.read()

        # –û–±–Ω–æ–≤–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è 240 –Ω–∞ 231
        updated_content = content.replace("240", "231")
        updated_content = updated_content.replace("features_240", "features_231")

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è
        if "from ml.logic.training_exact_features" not in updated_content:
            import_section = updated_content.find("from ml.logic.feature_engineering_v2")
            if import_section != -1:
                insert_point = updated_content.find("\n", import_section) + 1
                new_import = "from ml.logic.training_exact_features import create_production_feature_engineering\n"
                updated_content = (
                    updated_content[:insert_point] + new_import + updated_content[insert_point:]
                )

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(ml_manager_file, "w", encoding="utf-8") as f:
            f.write(updated_content)

        self.logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω ML Manager: {ml_manager_file}")
        return True

    def create_verification_script(self) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""

        verification_script = self.project_root / "verify_ml_fix.py"

        script_content = '''#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ ML —Å–∏—Å—Ç–µ–º–µ.
"""

import sys
import traceback
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent))

def test_feature_config():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
    try:
        from ml.config.features_240 import get_required_features_list, get_feature_count
        
        features = get_required_features_list()
        count = get_feature_count()
        
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {count} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        print(f"   –ü–µ—Ä–≤—ã–µ 5: {features[:5]}")
        print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5: {features[-5:]}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
        traceback.print_exc()
        return False

def test_training_exact_features():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–ª–∞—Å—Å —Ç–æ—á–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
    try:
        from ml.logic.training_exact_features import TrainingExactFeatures
        
        config = {"features": {}}
        engineer = TrainingExactFeatures(config)
        
        print(f"‚úÖ TrainingExactFeatures –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"   –û–∂–∏–¥–∞–µ—Ç—Å—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {engineer.expected_feature_count}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ TrainingExactFeatures: {e}")
        traceback.print_exc()
        return False

def test_production_config():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    try:
        from production_features_config import PRODUCTION_FEATURES, CRITICAL_FORMULAS
        
        print(f"‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {len(PRODUCTION_FEATURES)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        print(f"   –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º—É–ª: {len(CRITICAL_FORMULAS)}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        traceback.print_exc()
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ML –°–ò–°–¢–ï–ú–´")
    print("=" * 40)
    
    tests = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤", test_feature_config),
        ("–¢–æ—á–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –æ–±—É—á–µ–Ω–∏—è", test_training_exact_features), 
        ("–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_production_config),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\\nüß™ –¢–µ—Å—Ç: {test_name}")
        if test_func():
            passed += 1
        else:
            print(f"‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {test_name}")
    
    print(f"\\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! ML —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.")
        return True
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
'''

        with open(verification_script, "w", encoding="utf-8") as f:
            f.write(script_content)

        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
        os.chmod(verification_script, 0o755)

        self.logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {verification_script}")
        return True

    def run_fix(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""

        self.logger.info("üîß –ó–ê–ü–£–°–ö –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ML –°–ò–°–¢–ï–ú–´")
        self.logger.info("=" * 50)

        steps = [
            ("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤", self.update_features_config),
            ("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ feature engineering", self.update_feature_engineering),
            ("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ML Manager", self.update_ml_manager),
            ("–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏", self.create_verification_script),
        ]

        success_count = 0

        for step_name, step_func in steps:
            self.logger.info(f"\\nüîÑ {step_name}...")
            try:
                if step_func():
                    self.logger.info(f"‚úÖ {step_name} - —É—Å–ø–µ—à–Ω–æ")
                    success_count += 1
                else:
                    self.logger.error(f"‚ùå {step_name} - –æ—à–∏–±–∫–∞")
            except Exception as e:
                self.logger.error(f"‚ùå {step_name} - –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
                import traceback

                traceback.print_exc()

        self.logger.info(f"\\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢: {success_count}/{len(steps)} —à–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")

        if success_count == len(steps):
            self.logger.info("\\n‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            self.logger.info("üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            self.logger.info("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python verify_ml_fix.py")
            self.logger.info("   2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ ML —Å–∏—Å—Ç–µ–º—É")
            self.logger.info("   3. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–∫–∞—Ç–∏—Ç—å - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ backup —Ñ–∞–π–ª—ã")
            return True
        else:
            self.logger.error("\\n‚ùå –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ò–õ–û–°–¨ –° –û–®–ò–ë–ö–ê–ú–ò!")
            return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    fixer = MLFeatureMismatchFixer()
    return fixer.run_fix()


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
