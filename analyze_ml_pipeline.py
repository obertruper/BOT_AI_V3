#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ML Pipeline - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
"""

import asyncio

import numpy as np
import pandas as pd

from core.logger import setup_logger
from database.connections.postgres import AsyncPGPool
from ml.logic.feature_engineering_v2 import FeatureEngineer
from ml.ml_manager import MLManager

logger = setup_logger("ml_pipeline_analyzer")


async def check_model_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏"""

    logger.info("\n" + "=" * 60)
    logger.info("üîç –ü–†–û–í–ï–†–ö–ê –í–ï–†–°–ò–ò –ú–û–î–ï–õ–ò")
    logger.info("=" * 60)

    try:
        # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é ML
        import yaml

        with open("config/ml/ml_config.yaml") as f:
            ml_config = yaml.safe_load(f)

        logger.info("üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ML:")
        logger.info(f"  ‚Ä¢ –ú–æ–¥–µ–ª—å: {ml_config['model']['name']}")
        logger.info(f"  ‚Ä¢ –í–µ—Ä—Å–∏—è: {ml_config['model'].get('version', 'unknown')}")
        logger.info(f"  ‚Ä¢ Lookback: {ml_config['model']['lookback']} —à–∞–≥–æ–≤")
        logger.info(f"  ‚Ä¢ –ü—Ä–∏–∑–Ω–∞–∫–æ–≤: {ml_config['model']['n_features']}")
        logger.info(f"  ‚Ä¢ –ü–∞—Ç—á–µ–π: {ml_config['model']['patch_len']}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
        model_path = ml_config["model"]["path"]
        import os

        if os.path.exists(model_path):
            logger.info(f"  ‚úÖ –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–∞–π–¥–µ–Ω: {model_path}")
            file_size = os.path.getsize(model_path) / 1024 / 1024
            logger.info(f"  ‚Ä¢ –†–∞–∑–º–µ—Ä: {file_size:.2f} MB")
        else:
            logger.error(f"  ‚ùå –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {model_path}")

        return ml_config

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return None


async def analyze_input_data(symbol: str = "BTCUSDT"):
    """–ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–µ–ª–∏"""

    logger.info("\n" + "=" * 60)
    logger.info(f"üìä –ê–ù–ê–õ–ò–ó –í–•–û–î–ù–´–• –î–ê–ù–ù–´–• –î–õ–Ø {symbol}")
    logger.info("=" * 60)

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    query = """
        SELECT *
        FROM raw_market_data
        WHERE symbol = $1
        ORDER BY timestamp DESC
        LIMIT 100
    """

    rows = await AsyncPGPool.fetch(query, symbol)

    if not rows:
        logger.error(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
        return None

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DataFrame
    df = pd.DataFrame([dict(row) for row in rows])
    df = df.sort_values("timestamp")

    logger.info(f"üìà –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π")

    # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    logger.info("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–µ–Ω:")
    logger.info(f"  ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${df['close'].iloc[-1]:.2f}")
    logger.info(f"  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è: ${df['close'].mean():.2f}")
    logger.info(f"  ‚Ä¢ –ú–∏–Ω/–ú–∞–∫—Å: ${df['close'].min():.2f} / ${df['close'].max():.2f}")
    logger.info(f"  ‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {df['close'].std():.2f}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
    issues = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ NaN
    nan_count = df.isna().sum().sum()
    if nan_count > 0:
        issues.append(f"NaN –∑–Ω–∞—á–µ–Ω–∏–π: {nan_count}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω—É–ª–∏
    zero_volume = (df["volume"] == 0).sum()
    if zero_volume > 0:
        issues.append(f"–ù—É–ª–µ–≤–æ–π –æ–±—ä–µ–º: {zero_volume} —Å–≤–µ—á–µ–π")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    time_diffs = df["timestamp"].diff().dropna()
    expected_interval = 15 * 60 * 1000  # 15 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    gaps = (time_diffs > expected_interval * 2).sum()
    if gaps > 0:
        issues.append(f"–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–∑—Ä—ã–≤—ã: {gaps}")

    if issues:
        logger.warning("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
        for issue in issues:
            logger.warning(f"  ‚Ä¢ {issue}")
    else:
        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")

    return df


async def test_feature_engineering(symbol: str = "BTCUSDT"):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ feature engineering"""

    logger.info("\n" + "=" * 60)
    logger.info("üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï FEATURE ENGINEERING")
    logger.info("=" * 60)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df = await analyze_input_data(symbol)
    if df is None:
        return None

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º feature engineer
    fe = FeatureEngineer()

    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        features = fe.prepare_features(df, symbol)

        logger.info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç feature engineering:")
        logger.info(f"  ‚Ä¢ –§–æ—Ä–º–∞ –¥–∞–Ω–Ω—ã—Ö: {features.shape}")
        logger.info(f"  ‚Ä¢ –ü—Ä–∏–∑–Ω–∞–∫–æ–≤: {features.shape[1] if len(features.shape) > 1 else 1}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        if len(features.shape) > 1:
            feature_names = features.columns[:10] if hasattr(features, "columns") else range(10)
            logger.info("\nüìà –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
            for i, name in enumerate(feature_names):
                if hasattr(features, "iloc"):
                    value = features.iloc[-1, i]
                else:
                    value = features[-1, i] if len(features.shape) > 1 else features[-1]
                logger.info(f"  ‚Ä¢ {name}: {value:.6f}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ NaN –≤ –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö
        if hasattr(features, "isna"):
            nan_features = features.isna().sum()
            nan_cols = nan_features[nan_features > 0]
            if len(nan_cols) > 0:
                logger.warning(f"‚ö†Ô∏è NaN –≤ {len(nan_cols)} –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö")
                for col in nan_cols.index[:5]:
                    logger.warning(f"  ‚Ä¢ {col}: {nan_cols[col]} NaN")

        return features

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ feature engineering: {e}")
        import traceback

        logger.error(traceback.format_exc())
        return None


async def test_prediction_process(symbol: str = "BTCUSDT"):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""

    logger.info("\n" + "=" * 60)
    logger.info("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–¶–ï–°–°–ê –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø")
    logger.info("=" * 60)

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ML Manager
        ml_manager = MLManager()

        # –î–µ–ª–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        logger.info(f"üìä –ó–∞–ø—É—Å–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è {symbol}...")

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö (96 —à–∞–≥–æ–≤, 240 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤)
        test_data = np.random.randn(1, 96, 240).astype(np.float32)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        test_data[0, :, 0] = np.linspace(100000, 101000, 96)  # –¶–µ–Ω—ã
        test_data[0, :, 1] = np.random.uniform(1000, 5000, 96)  # –û–±—ä–µ–º—ã

        logger.info(f"  ‚Ä¢ –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {test_data.shape}")

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        prediction = ml_manager.predict(test_data, symbol)

        if prediction:
            logger.info("\n‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:")
            logger.info(f"  ‚Ä¢ –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞: {prediction.get('signal_type', 'UNKNOWN')}")
            logger.info(f"  ‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction.get('confidence', 0):.2%}")
            logger.info(f"  ‚Ä¢ –°–∏–ª–∞: {prediction.get('signal_strength', 0):.2f}")

            # –ê–Ω–∞–ª–∏–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
            if "predictions" in prediction:
                preds = prediction["predictions"]
                logger.info("\nüìà –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º:")
                logger.info(f"  ‚Ä¢ 15m: {preds.get('returns_15m', 0):.4f}")
                logger.info(f"  ‚Ä¢ 1h: {preds.get('returns_1h', 0):.4f}")
                logger.info(f"  ‚Ä¢ 4h: {preds.get('returns_4h', 0):.4f}")
                logger.info(f"  ‚Ä¢ 12h: {preds.get('returns_12h', 0):.4f}")

                # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                logger.info("\nüéØ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
                logger.info(f"  ‚Ä¢ 15m: {prediction.get('direction_15m', 'UNKNOWN')}")
                logger.info(f"  ‚Ä¢ 1h: {prediction.get('direction_1h', 'UNKNOWN')}")
                logger.info(f"  ‚Ä¢ 4h: {prediction.get('direction_4h', 'UNKNOWN')}")
                logger.info(f"  ‚Ä¢ 12h: {prediction.get('direction_12h', 'UNKNOWN')}")
        else:
            logger.error("‚ùå –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ")

        return prediction

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
        import traceback

        logger.error(traceback.format_exc())
        return None


async def analyze_decision_logic():
    """–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–∏–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π"""

    logger.info("\n" + "=" * 60)
    logger.info("üß† –ê–ù–ê–õ–ò–ó –õ–û–ì–ò–ö–ò –ü–†–ò–ù–Ø–¢–ò–Ø –†–ï–®–ï–ù–ò–ô")
    logger.info("=" * 60)

    logger.info("\nüìã –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π:")

    logger.info("\n1Ô∏è‚É£ STRONG LONG (confidence > 0.9):")
    logger.info("  ‚Ä¢ 3+ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ —É–∫–∞–∑—ã–≤–∞—é—Ç LONG")
    logger.info("  ‚Ä¢ returns_15m > 0.001")
    logger.info("  ‚Ä¢ –í—Å–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ > 0.6")

    logger.info("\n2Ô∏è‚É£ LONG (confidence > 0.7):")
    logger.info("  ‚Ä¢ 2+ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ —É–∫–∞–∑—ã–≤–∞—é—Ç LONG")
    logger.info("  ‚Ä¢ returns_15m > 0")
    logger.info("  ‚Ä¢ –û—Å–Ω–æ–≤–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å > 0.55")

    logger.info("\n3Ô∏è‚É£ SHORT (confidence > 0.7):")
    logger.info("  ‚Ä¢ 2+ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ —É–∫–∞–∑—ã–≤–∞—é—Ç SHORT")
    logger.info("  ‚Ä¢ returns_15m < 0")
    logger.info("  ‚Ä¢ –û—Å–Ω–æ–≤–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å > 0.55")

    logger.info("\n4Ô∏è‚É£ NEUTRAL (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏):")
    logger.info("  ‚Ä¢ –°–º–µ—à–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
    logger.info("  ‚Ä¢ –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (< 0.7)")
    logger.info("  ‚Ä¢ –ù–µ—Ç —è–≤–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

    logger.info("\nüìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫–∞:")
    logger.info("  ‚Ä¢ Stop Loss: 1.2% - 1.5%")
    logger.info("  ‚Ä¢ Take Profit: 2.4% - 3.0%")
    logger.info("  ‚Ä¢ Risk/Reward: 1:2")


async def check_recent_predictions():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∏–∑ –ë–î"""

    logger.info("\n" + "=" * 60)
    logger.info("üìä –ü–û–°–õ–ï–î–ù–ò–ï –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø –í –ë–î")
    logger.info("=" * 60)

    query = """
        SELECT
            symbol,
            signal_type,
            strength,
            confidence,
            strategy_name,
            created_at,
            suggested_stop_loss,
            suggested_take_profit
        FROM signals
        WHERE created_at > NOW() - INTERVAL '1 hour'
        ORDER BY created_at DESC
        LIMIT 20
    """

    rows = await AsyncPGPool.fetch(query)

    if not rows:
        logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å")
        return

    # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º
    signal_stats = {"BUY": 0, "SELL": 0, "NEUTRAL": 0, "LONG": 0, "SHORT": 0}

    logger.info(f"üìà –ù–∞–π–¥–µ–Ω–æ {len(rows)} —Å–∏–≥–Ω–∞–ª–æ–≤\n")

    for row in rows[:10]:
        signal_type = row["signal_type"]
        if signal_type in signal_stats:
            signal_stats[signal_type] += 1

        logger.info(f"‚Ä¢ {row['symbol']}: {signal_type}")
        logger.info(f"  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {row['confidence']:.2%}, –°–∏–ª–∞: {row['strength']:.2f}")

        if row["suggested_stop_loss"]:
            logger.info(
                f"  SL: {row['suggested_stop_loss']:.2f}, TP: {row['suggested_take_profit']:.2f}"
            )

        logger.info(f"  –í—Ä–µ–º—è: {row['created_at'].strftime('%H:%M:%S')}")
        logger.info("")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    logger.info("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤:")
    for signal_type, count in signal_stats.items():
        if count > 0:
            pct = count / len(rows) * 100
            logger.info(f"  ‚Ä¢ {signal_type}: {count} ({pct:.1f}%)")


async def validate_ml_consistency():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""

    logger.info("\n" + "=" * 60)
    logger.info("üîÑ –ü–†–û–í–ï–†–ö–ê –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò ML")
    logger.info("=" * 60)

    # –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –¥–ª—è –æ–¥–Ω–∏—Ö –∏ —Ç–µ—Ö –∂–µ –¥–∞–Ω–Ω—ã—Ö
    test_data = np.random.randn(1, 96, 240).astype(np.float32)
    test_data[0, :, 0] = np.linspace(100000, 101000, 96)

    ml_manager = MLManager()
    predictions = []

    logger.info("–î–µ–ª–∞–µ–º 5 –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

    for i in range(5):
        pred = ml_manager.predict(test_data, f"TEST_{i}")
        if pred:
            predictions.append(pred)
            logger.info(
                f"  {i + 1}. {pred.get('signal_type', 'UNKNOWN')}: {pred.get('confidence', 0):.4f}"
            )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
    if len(predictions) > 1:
        signal_types = [p.get("signal_type") for p in predictions]
        confidences = [p.get("confidence", 0) for p in predictions]

        if len(set(signal_types)) == 1:
            logger.info("‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ç–∏–ø)")
        else:
            logger.warning(f"‚ö†Ô∏è –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–∏–≥–Ω–∞–ª–æ–≤: {set(signal_types)}")

        conf_std = np.std(confidences)
        if conf_std < 0.01:
            logger.info(f"‚úÖ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–∞ (std={conf_std:.4f})")
        else:
            logger.warning(f"‚ö†Ô∏è –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤–∞—Ä—å–∏—Ä—É–µ—Ç—Å—è (std={conf_std:.4f})")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""

    logger.info("\n" + "=" * 80)
    logger.info("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó ML PIPELINE")
    logger.info("=" * 80)

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ –º–æ–¥–µ–ª–∏
    ml_config = await check_model_version()

    # 2. –ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await analyze_input_data("BTCUSDT")

    # 3. –¢–µ—Å—Ç feature engineering
    await test_feature_engineering("BTCUSDT")

    # 4. –¢–µ—Å—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    await test_prediction_process("BTCUSDT")

    # 5. –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–∏–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
    await analyze_decision_logic()

    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    await check_recent_predictions()

    # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    await validate_ml_consistency()

    logger.info("\n" + "=" * 80)
    logger.info("‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
    logger.info("=" * 80)


if __name__ == "__main__":
    asyncio.run(main())
