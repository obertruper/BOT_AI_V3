#!/usr/bin/env python3
"""
üéØ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Enhanced Position Tracker

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
Position Tracker –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è orchestrator_main.py

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python3 test_position_tracker.py                # –í—Å–µ —Ç–µ—Å—Ç—ã
    python3 test_position_tracker.py --unit         # –¢–æ–ª—å–∫–æ unit —Ç–µ—Å—Ç—ã
    python3 test_position_tracker.py --integration  # –¢–æ–ª—å–∫–æ integration —Ç–µ—Å—Ç—ã
    python3 test_position_tracker.py --performance  # –¢–æ–ª—å–∫–æ performance —Ç–µ—Å—Ç—ã
    python3 test_position_tracker.py --quick        # –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã (unit —Ç–æ–ª—å–∫–æ)
    python3 test_position_tracker.py --html         # –° HTML –æ—Ç—á–µ—Ç–æ–º
"""

import asyncio
import argparse
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from tests.position_tracker_test_suite import PositionTrackerTestSuite


class Colors:
    """ANSI —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"""
    HEADER = "\033[95m"
    BLUE = "\033[94m" 
    CYAN = "\033[96m"
    GREEN = "\033[92m"
    WARNING = "\033[93m"
    FAIL = "\033[91m"
    ENDC = "\033[0m"
    BOLD = "\033[1m"


def print_banner():
    """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    print(f"\n{Colors.HEADER}{'='*70}{Colors.ENDC}")
    print(f"{Colors.HEADER}{Colors.BOLD}üéØ ENHANCED POSITION TRACKER TEST RUNNER{Colors.ENDC}")
    print(f"{Colors.HEADER}{'='*70}{Colors.ENDC}")
    print(f"{Colors.CYAN}üöÄ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π{Colors.ENDC}")
    print(f"{Colors.BLUE}üìä Unit ‚Ä¢ Integration ‚Ä¢ Performance —Ç–µ—Å—Ç—ã{Colors.ENDC}\n")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="Enhanced Position Tracker Test Runner",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  python3 test_position_tracker.py                # –í—Å–µ —Ç–µ—Å—Ç—ã
  python3 test_position_tracker.py --unit         # –¢–æ–ª—å–∫–æ unit —Ç–µ—Å—Ç—ã
  python3 test_position_tracker.py --integration  # –¢–æ–ª—å–∫–æ integration —Ç–µ—Å—Ç—ã
  python3 test_position_tracker.py --performance  # –¢–æ–ª—å–∫–æ performance —Ç–µ—Å—Ç—ã
  python3 test_position_tracker.py --quick        # –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã
  python3 test_position_tracker.py --html -v      # –° HTML –æ—Ç—á–µ—Ç–æ–º –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
        """
    )
    
    # –ì—Ä—É–ø–ø–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç–µ—Å—Ç–æ–≤
    test_group = parser.add_mutually_exclusive_group()
    test_group.add_argument("--unit", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ unit —Ç–µ—Å—Ç—ã")
    test_group.add_argument("--integration", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ integration —Ç–µ—Å—Ç—ã")
    test_group.add_argument("--performance", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ performance —Ç–µ—Å—Ç—ã")
    test_group.add_argument("--quick", action="store_true", help="–ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã (—Ç–æ–ª—å–∫–æ unit)")
    
    # –û–ø—Ü–∏–∏
    parser.add_argument("--verbose", "-v", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
    parser.add_argument("--html", action="store_true", help="–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å HTML –æ—Ç—á–µ—Ç")
    parser.add_argument("--quiet", "-q", action="store_true", help="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥")
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
    if args.verbose and args.quiet:
        print(f"{Colors.WARNING}‚ö†Ô∏è –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å --verbose –∏ --quiet –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ{Colors.ENDC}")
        return 1
    
    # –í—ã–≤–æ–¥–∏–º –±–∞–Ω–Ω–µ—Ä –µ—Å–ª–∏ –Ω–µ quiet —Ä–µ–∂–∏–º
    if not args.quiet:
        print_banner()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä
    suite = PositionTrackerTestSuite()
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —Ç–µ—Å—Ç—ã –∑–∞–ø—É—Å–∫–∞—Ç—å
        if args.unit or args.quick:
            print(f"{Colors.BLUE}üîß –ó–∞–ø—É—Å–∫ Unit —Ç–µ—Å—Ç–æ–≤ Position Tracker{Colors.ENDC}")
            result = await suite.run_unit_tests(verbose=args.verbose)
            suite.test_results = {"unit": result}
            
        elif args.integration:
            print(f"{Colors.BLUE}üîó –ó–∞–ø—É—Å–∫ Integration —Ç–µ—Å—Ç–æ–≤ Position Tracker{Colors.ENDC}")
            result = await suite.run_integration_tests(verbose=args.verbose)
            suite.test_results = {"integration": result}
            
        elif args.performance:
            print(f"{Colors.BLUE}‚ö° –ó–∞–ø—É—Å–∫ Performance —Ç–µ—Å—Ç–æ–≤ Position Tracker{Colors.ENDC}")
            result = await suite.run_performance_tests(verbose=args.verbose)
            suite.test_results = {"performance": result}
            
        else:
            # –í—Å–µ —Ç–µ—Å—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            print(f"{Colors.BLUE}üéØ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ Position Tracker{Colors.ENDC}")
            await suite.run_all_tests(verbose=args.verbose)
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
        if not args.quiet:
            suite.print_summary()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –æ—Ç—á–µ—Ç –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
        if args.html:
            await suite.generate_html_report()
            print(f"{Colors.GREEN}üìÑ HTML –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: test_results/position_tracker_report.html{Colors.ENDC}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        summary = suite.test_results.get("summary")
        if summary:
            overall_success = summary.get("overall_success", False)
        else:
            # –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–∏–ø —Ç–µ—Å—Ç–æ–≤
            overall_success = any(
                result.get("success", False) 
                for result in suite.test_results.values()
            )
        
        if not args.quiet:
            if overall_success:
                print(f"\n{Colors.GREEN}üéâ –í—Å–µ —Ç–µ—Å—Ç—ã Position Tracker –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —É—Å–ø–µ—à–Ω–æ!{Colors.ENDC}")
            else:
                print(f"\n{Colors.FAIL}‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏{Colors.ENDC}")
        
        return 0 if overall_success else 1
        
    except KeyboardInterrupt:
        print(f"\n{Colors.WARNING}üõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Colors.ENDC}")
        return 130
        
    except Exception as e:
        print(f"{Colors.FAIL}‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}{Colors.ENDC}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        return 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)