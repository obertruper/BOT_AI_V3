#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ BOT_AI_V3
"""

import asyncio
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def test_worker_coordinator():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WorkerCoordinator...")

    try:
        from core.system.worker_coordinator import worker_coordinator

        # –ó–∞–ø—É—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
        await worker_coordinator.start()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
        worker_id = await worker_coordinator.register_worker(
            worker_type="test_worker", metadata={"test": True, "version": "1.0"}
        )

        if worker_id:
            logger.info(f"‚úÖ –í–æ—Ä–∫–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {worker_id}")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ heartbeat
            success = await worker_coordinator.heartbeat(worker_id, status="running")
            logger.info(f"‚úÖ Heartbeat –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {success}")

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats = worker_coordinator.get_worker_stats()
            logger.info(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤: {len(stats.get('workers', []))}")

            # –°–Ω—è—Ç–∏–µ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            await worker_coordinator.unregister_worker(worker_id)
            logger.info("‚úÖ –í–æ—Ä–∫–µ—Ä —Å–Ω—è—Ç —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

        await worker_coordinator.stop()
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WorkerCoordinator: {e}")
        return False


async def test_signal_deduplicator():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ç–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SignalDeduplicator...")

    try:
        from core.system.signal_deduplicator import signal_deduplicator

        # –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        signal_data = {
            "symbol": "BTCUSDT",
            "direction": "BUY",
            "strategy": "test_strategy",
            "timestamp": datetime.now(),
            "signal_strength": 0.8,
            "price_level": 50000.0,
        }

        # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π
        is_unique1 = await signal_deduplicator.check_and_register_signal(signal_data)
        logger.info(f"‚úÖ –ü–µ—Ä–≤—ã–π —Å–∏–≥–Ω–∞–ª —É–Ω–∏–∫–∞–ª–µ–Ω: {is_unique1}")

        # –í—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≥–æ –∂–µ —Å–∏–≥–Ω–∞–ª–∞ - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–º
        is_unique2 = await signal_deduplicator.check_and_register_signal(signal_data)
        logger.info(f"‚úÖ –í—Ç–æ—Ä–æ–π —Å–∏–≥–Ω–∞–ª –¥—É–±–ª–∏–∫–∞—Ç: {not is_unique2}")

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SignalDeduplicator: {e}")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")

    tests = [
        ("WorkerCoordinator", test_worker_coordinator),
        ("SignalDeduplicator", test_signal_deduplicator),
    ]

    results = {}

    for test_name, test_func in tests:
        try:
            logger.info(f"\n{'=' * 30}")
            logger.info(f"–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
            logger.info(f"{'=' * 30}")

            result = await test_func()
            results[test_name] = result

            status = "‚úÖ –£–°–ü–ï–•" if result else "‚ùå –û–®–ò–ë–ö–ê"
            logger.info(f"{status}: {test_name}")

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results[test_name] = False

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info(f"\n{'=' * 30}")
    logger.info("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    logger.info(f"{'=' * 30}")

    passed = sum(results.values())
    total = len(results)

    for test_name, result in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        logger.info(f"{test_name}: {status}")

    logger.info(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")

    if passed == total:
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return True
    else:
        logger.warning(f"‚ö†Ô∏è  {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
        return False


if __name__ == "__main__":
    asyncio.run(main())
