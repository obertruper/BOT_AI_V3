#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ real-time calculator
"""

import asyncio
from datetime import datetime, timedelta

import numpy as np
import pandas as pd

from core.logger import setup_logger
from ml.realtime_indicator_calculator import RealTimeIndicatorCalculator

logger = setup_logger(__name__)


def generate_realistic_ohlcv(n_samples=350):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ OHLCV –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω–µ–¥–∞–≤–Ω–µ–π –¥–∞—Ç—ã
    start_time = datetime.now() - timedelta(days=2)
    dates = pd.date_range(start=start_time, periods=n_samples, freq="5T")

    # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–µ–Ω –¥–ª—è BTCUSDT
    np.random.seed(42)
    base_price = 42000  # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —Ü–µ–Ω–∞ BTC

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é –∫–∞–∫ —É BTC
    returns = np.random.normal(0, 0.008, n_samples)  # ~0.8% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞ 5 –º–∏–Ω—É—Ç

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥ –∏ —Ü–∏–∫–ª—ã
    trend = np.linspace(0, 0.02, n_samples)  # 2% —Ä–æ—Å—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥
    cycle = 0.01 * np.sin(np.linspace(0, 4 * np.pi, n_samples))  # –¶–∏–∫–ª–∏—á–Ω–æ—Å—Ç—å

    returns = returns + trend + cycle

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–µ–Ω—ã
    prices = [base_price]
    for ret in returns[1:]:
        new_price = prices[-1] * (1 + ret)
        prices.append(new_price)

    prices = np.array(prices)

    # –°–æ–∑–¥–∞–µ–º OHLCV —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ spread-–∞–º–∏
    spread_pct = 0.001  # 0.1% —Å–ø—Ä–µ–¥

    df = pd.DataFrame(index=dates)
    df["open"] = prices
    df["high"] = prices * (1 + np.random.uniform(0, spread_pct * 2, n_samples))
    df["low"] = prices * (1 - np.random.uniform(0, spread_pct * 2, n_samples))
    df["close"] = prices
    df["volume"] = np.random.lognormal(
        mean=8, sigma=1, size=n_samples
    )  # –õ–æ–≥–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–º–∞

    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º high/low —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ –ª–æ–≥–∏—á–Ω—ã–º–∏
    df["high"] = np.maximum(df["high"], np.maximum(df["open"], df["close"]))
    df["low"] = np.minimum(df["low"], np.minimum(df["open"], df["close"]))

    return df


async def test_realtime_calculator():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç RealTimeIndicatorCalculator —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç RealTimeIndicatorCalculator...")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    ohlcv_data = generate_realistic_ohlcv(350)
    logger.info(f"üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã OHLCV –¥–∞–Ω–Ω—ã–µ: {len(ohlcv_data)} —Å–≤–µ—á–µ–π")
    logger.info(f"   –ü–µ—Ä–∏–æ–¥: {ohlcv_data.index[0]} - {ohlcv_data.index[-1]}")
    logger.info(
        f"   –¶–µ–Ω–∞: ${ohlcv_data['close'].iloc[0]:.0f} -> ${ohlcv_data['close'].iloc[-1]:.0f}"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
    config = {}
    calculator = RealTimeIndicatorCalculator(cache_ttl=300, config=config, use_inference_mode=True)

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    logger.info("üîß –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã...")
    result = await calculator.calculate_indicators(
        symbol="BTCUSDT",
        ohlcv_df=ohlcv_data,
        save_to_db=False,  # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –ø—Ä–∏ —Ç–µ—Å—Ç–µ
    )

    if not result:
        logger.error("‚ùå –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –Ω–µ —É–¥–∞–ª—Å—è!")
        return False

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    metadata = result.get("metadata", {})
    ml_features = result.get("ml_features", {})
    technical_indicators = result.get("technical_indicators", {})
    microstructure_features = result.get("microstructure_features", {})

    logger.info("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:")
    logger.info(f"   ML –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(ml_features)}")
    logger.info(f"   –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {len(technical_indicators)}")
    logger.info(f"   –ú–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(microstructure_features)}")
    logger.info(f"   –í—Ä–µ–º—è —Ä–∞—Å—á–µ—Ç–∞: {metadata.get('calculation_time')}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    key_features = ["rsi_14", "sma_20", "ema_20", "macd_12_26", "atr_14", "bb_position_20"]
    missing_key = []
    present_key = []

    for feature in key_features:
        if feature in ml_features:
            value = ml_features[feature]
            present_key.append((feature, value))
        else:
            missing_key.append(feature)

    logger.info("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:")
    for feature, value in present_key:
        logger.info(f"   ‚úÖ {feature}: {value:.6f}")

    if missing_key:
        logger.warning(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ: {missing_key}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
    nan_count = sum(1 for v in ml_features.values() if pd.isna(v))
    inf_count = sum(1 for v in ml_features.values() if np.isinf(v))
    zero_count = sum(1 for v in ml_features.values() if v == 0)

    logger.info("üß™ –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö:")
    logger.info(f"   NaN –∑–Ω–∞—á–µ–Ω–∏–π: {nan_count}/{len(ml_features)}")
    logger.info(f"   Inf –∑–Ω–∞—á–µ–Ω–∏–π: {inf_count}/{len(ml_features)}")
    logger.info(f"   –ù—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {zero_count}/{len(ml_features)}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º get_features_for_ml
    logger.info("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º get_features_for_ml...")
    features_array = await calculator.get_features_for_ml("BTCUSDT", ohlcv_data)

    if len(features_array) == 240:
        logger.info(f"‚úÖ get_features_for_ml: {len(features_array)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Å–ø–µ—Ä—Å–∏—é
        non_zero_variance = np.sum(np.var(features_array.reshape(1, -1), axis=0) > 1e-10)
        logger.info(f"   –ü—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å –Ω–µ–Ω—É–ª–µ–≤–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–µ–π: {non_zero_variance}/240")
    else:
        logger.error(f"‚ùå get_features_for_ml: –ø–æ–ª—É—á–µ–Ω–æ {len(features_array)} –≤–º–µ—Å—Ç–æ 240")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º prepare_ml_input
    logger.info("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º prepare_ml_input...")
    try:
        ml_input, ml_metadata = await calculator.prepare_ml_input(
            "BTCUSDT", ohlcv_data, lookback=96
        )
        logger.info(f"‚úÖ prepare_ml_input: {ml_input.shape}")
        logger.info(f"   Lookback: {ml_metadata['lookback']}")
        logger.info(f"   Features: {ml_metadata['features_count']}")
        logger.info(f"   Non-zero variance: {ml_metadata['non_zero_variance_features']}")
    except Exception as e:
        logger.error(f"‚ùå prepare_ml_input –æ—à–∏–±–∫–∞: {e}")

    return {
        "success": True,
        "ml_features_count": len(ml_features),
        "tech_indicators_count": len(technical_indicators),
        "nan_count": nan_count,
        "inf_count": inf_count,
        "key_features_present": len(present_key),
        "key_features_missing": len(missing_key),
    }


if __name__ == "__main__":
    result = asyncio.run(test_realtime_calculator())

    if result["success"]:
        print("\n" + "=" * 60)
        print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê REALTIME CALCULATOR")
        print("=" * 60)
        print(f"‚úÖ ML –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {result['ml_features_count']}")
        print(f"‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {result['tech_indicators_count']}")
        print(f"üß™ NaN –∑–Ω–∞—á–µ–Ω–∏–π: {result['nan_count']}")
        print(f"üß™ Inf –∑–Ω–∞—á–µ–Ω–∏–π: {result['inf_count']}")
        print(f"üéØ –ö–ª—é—á–µ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {result['key_features_present']}")
        print(f"‚ùå –ö–ª—é—á–µ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {result['key_features_missing']}")

        if (
            result["nan_count"] == 0
            and result["inf_count"] == 0
            and result["key_features_missing"] == 0
        ):
            print("\nüéâ –†–ï–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
        else:
            print("\n‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê")
    else:
        print("\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù")
