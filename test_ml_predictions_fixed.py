#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π ML –º–æ–¥–µ–ª–∏
–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ ml_signal_processor.py —Ä–∞–±–æ—Ç–∞—é—Ç
"""

import asyncio

from core.config.config_manager import ConfigManager
from ml.ml_manager import MLManager
from ml.ml_signal_processor import MLSignalProcessor


async def test_fixed_unique_predictions():
    """–¢–µ—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    print("=" * 80)
    print("–¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò ML –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ô")
    print("=" * 80)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    config_manager = ConfigManager()
    config = config_manager.get_config()

    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML Manager –∏ Signal Processor
    print("\n1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    ml_manager = MLManager(config)
    await ml_manager.initialize()

    signal_processor = MLSignalProcessor(
        ml_manager=ml_manager,
        config=config,
        config_manager=config_manager,
    )
    await signal_processor.initialize()
    print("‚úì –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º process_realtime_signal –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ process_realtime_signal...")
    symbols = ["BTCUSDT", "ETHUSDT", "SOLUSDT"]
    signals = {}

    for symbol in symbols:
        print(f"\nüîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}...")
        signal = await signal_processor.process_realtime_signal(
            symbol=symbol, exchange="bybit"
        )

        if signal:
            signals[symbol] = signal
            print(
                f"‚úÖ {symbol}: {signal.signal_type.value}, conf={signal.confidence:.3f}"
            )

            # –ò–∑–≤–ª–µ–∫–∞–µ–º prediction data –∏–∑ extra_data
            raw_prediction = signal.extra_data.get("raw_prediction", {})
            predictions_data = raw_prediction.get("predictions", {})

            print(f"   Returns 15m: {predictions_data.get('returns_15m', 0):.6f}")
            print(f"   Returns 1h:  {predictions_data.get('returns_1h', 0):.6f}")
            print(
                f"   Direction score: {predictions_data.get('direction_score', 0):.3f}"
            )
        else:
            print(f"‚ùå {symbol}: –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞")

    # 3. –ê–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    print("\n3. –ê–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π...")

    if len(signals) >= 2:
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        signal_items = list(signals.items())

        for i in range(len(signal_items)):
            for j in range(i + 1, len(signal_items)):
                symbol1, signal1 = signal_items[i]
                symbol2, signal2 = signal_items[j]

                # –ò–∑–≤–ª–µ–∫–∞–µ–º predictions
                pred1 = signal1.extra_data.get("raw_prediction", {}).get(
                    "predictions", {}
                )
                pred2 = signal2.extra_data.get("raw_prediction", {}).get(
                    "predictions", {}
                )

                ret1_15m = pred1.get("returns_15m", 0)
                ret2_15m = pred2.get("returns_15m", 0)

                ret1_1h = pred1.get("returns_1h", 0)
                ret2_1h = pred2.get("returns_1h", 0)

                dir1 = pred1.get("direction_score", 0)
                dir2 = pred2.get("direction_score", 0)

                print(f"\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ {symbol1} vs {symbol2}:")
                print(f"   Returns 15m: {ret1_15m:.8f} vs {ret2_15m:.8f}")
                print(f"   Returns 1h:  {ret1_1h:.8f} vs {ret2_1h:.8f}")
                print(f"   Direction:   {dir1:.6f} vs {dir2:.6f}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–∏—è
                diff_15m = abs(ret1_15m - ret2_15m)
                diff_1h = abs(ret1_1h - ret2_1h)
                diff_dir = abs(dir1 - dir2)

                if diff_15m < 1e-6 and diff_1h < 1e-6 and diff_dir < 1e-6:
                    print("   ‚ùå –û–î–ò–ù–ê–ö–û–í–´–ï –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è!")
                else:
                    print("   ‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –†–ê–ó–õ–ò–ß–ê–Æ–¢–°–Ø")
                    print(
                        f"      –†–∞–∑–Ω–æ—Å—Ç–∏: 15m={diff_15m:.8f}, 1h={diff_1h:.8f}, dir={diff_dir:.6f}"
                    )

    # 4. –¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è - –¥–µ–ª–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    print("\n4. –¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è - –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å...")
    if "BTCUSDT" in signals:
        print("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è BTCUSDT (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à)...")
        signal_cached = await signal_processor.process_realtime_signal(
            symbol="BTCUSDT", exchange="bybit"
        )

        if signal_cached:
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º
            orig_pred = (
                signals["BTCUSDT"]
                .extra_data.get("raw_prediction", {})
                .get("predictions", {})
            )
            cached_pred = signal_cached.extra_data.get("raw_prediction", {}).get(
                "predictions", {}
            )

            orig_ret = orig_pred.get("returns_15m", 0)
            cached_ret = cached_pred.get("returns_15m", 0)

            if abs(orig_ret - cached_ret) < 1e-8:
                print("‚úÖ –ö—ç—à —Ä–∞–±–æ—Ç–∞–µ—Ç - –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞")
            else:
                print(
                    f"‚ùå –ö—ç—à –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç - —Ä–∞–∑–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {orig_ret:.8f} vs {cached_ret:.8f}"
                )

    # 5. –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π —Ç–µ—Å—Ç
    print("\n5. –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π —Ç–µ—Å—Ç...")
    signal_processor.prediction_cache.clear()
    print("üßπ –ö—ç—à –æ—á–∏—â–µ–Ω")

    print("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤...")
    new_signals = {}
    for symbol in symbols:
        signal = await signal_processor.process_realtime_signal(
            symbol=symbol, exchange="bybit"
        )
        if signal:
            new_signals[symbol] = signal
            raw_pred = signal.extra_data.get("raw_prediction", {}).get(
                "predictions", {}
            )
            print(f"{symbol}: returns_15m={raw_pred.get('returns_15m', 0):.6f}")

    # Cleanup
    if hasattr(signal_processor, "data_loader") and signal_processor.data_loader:
        await signal_processor.data_loader.cleanup()

    print("\n" + "=" * 80)
    print("–¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
    print("=" * 80)


if __name__ == "__main__":
    asyncio.run(test_fixed_unique_predictions())
