#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
"""

import asyncio
import sys

sys.path.append("/mnt/SSD/PYCHARMPRODJECT/BOT_AI_V3")

from sqlalchemy import desc, select

from database.connections import get_async_db
from database.models.signal import Signal


async def analyze_signals():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã –∏ –∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã."""

    async with get_async_db() as db:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–∏–≥–Ω–∞–ª–æ–≤
        result = await db.execute(select(Signal).order_by(desc(Signal.id)).limit(10))
        signals = result.scalars().all()

        print("üìä –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–ù–ò–• 10 –°–ò–ì–ù–ê–õ–û–í\n")

        for i, signal in enumerate(signals):
            print(f"\n{'=' * 80}")
            print(
                f"–°–∏–≥–Ω–∞–ª #{i + 1}: {signal.symbol} - {signal.signal_type.value.upper()}"
            )
            print(f"–í—Ä–µ–º—è: {signal.created_at}")
            print(f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${signal.suggested_price:.4f}")
            print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.1%}")
            print(f"–°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {signal.strength:.1%}")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            if signal.indicators:
                indicators = signal.indicators

                # ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                if "ml_predictions" in indicators:
                    ml = indicators["ml_predictions"]
                    print("\nüìà ML –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:")
                    print(f"  ‚Ä¢ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å 15–º: {ml.get('returns_15m', 0):.6f}")
                    print(f"  ‚Ä¢ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å 1—á: {ml.get('returns_1h', 0):.6f}")
                    print(f"  ‚Ä¢ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å 4—á: {ml.get('returns_4h', 0):.6f}")
                    print(f"  ‚Ä¢ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å 12—á: {ml.get('returns_12h', 0):.6f}")
                    print(f"  ‚Ä¢ Direction Score: {ml.get('direction_score', 0):.3f}")
                    print(f"  ‚Ä¢ Raw Directions: {ml.get('raw_directions', [])}")

                print(f"\nüéØ –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞: {indicators.get('risk_level', 'N/A')}")
                print(
                    f"üé≤ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞: {indicators.get('success_probability', 0):.1%}"
                )

                # –ü—Ä–æ–±–ª–µ–º—ã
                print("\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–´:")
                print(
                    f"  ‚Ä¢ Stop Loss: ${signal.suggested_stop_loss:.2f} (–û–®–ò–ë–ö–ê - –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!)"
                )
                print(
                    f"  ‚Ä¢ Take Profit: ${signal.suggested_take_profit:.2f} (–û–®–ò–ë–ö–ê - –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!)"
                )

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\n{'=' * 80}")
        print("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")

        signal_types = {}
        total_confidence = 0
        total_strength = 0

        for signal in signals:
            signal_types[signal.signal_type.value] = (
                signal_types.get(signal.signal_type.value, 0) + 1
            )
            total_confidence += signal.confidence
            total_strength += signal.strength

        print("\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤:")
        for stype, count in signal_types.items():
            print(f"  ‚Ä¢ {stype.upper()}: {count} ({count / len(signals) * 100:.0f}%)")

        print("\n–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:")
        print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {total_confidence / len(signals):.1%}")
        print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {total_strength / len(signals):.1%}")

        print("\nüîç –í–´–í–û–î–´:")
        print("1. –í–°–ï —Å–∏–≥–Ω–∞–ª—ã LONG - –º–æ–¥–µ–ª—å –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç SHORT —Å–∏–≥–Ω–∞–ª—ã")
        print("2. –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (99.96%) - –≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ")
        print(
            "3. Stop Loss –∏ Take Profit –∏–º–µ—é—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞!"
        )
        print(
            "4. Raw directions –≤—Å–µ–≥–¥–∞ [2.0, 2.0, 2.0, 2.0] - –º–æ–¥–µ–ª—å –≤—Å–µ–≥–¥–∞ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç FLAT"
        )
        print("5. Direction Score –≤—Å–µ–≥–¥–∞ 1.0 - –Ω–µ—Ç –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏")

        print("\nüìå –ù–ê–°–¢–†–û–ô–ö–ò –ü–û–†–û–ì–û–í:")
        print("‚Ä¢ min_confidence: 0.45 (—Å–Ω–∏–∂–µ–Ω–æ —Å 0.65)")
        print("‚Ä¢ min_signal_strength: 0.2 (—Å–Ω–∏–∂–µ–Ω–æ —Å 0.3)")
        print("‚Ä¢ dynamic_threshold: base=0.05 * diversity_factor")
        print("‚Ä¢ direction_confidence_threshold: 0.25")

        print("\nüéØ –ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢ –õ–û–ì–ò–ö–ê –†–ï–®–ï–ù–ò–ô:")
        print("1. –ú–æ–¥–µ–ª—å –≤—ã–¥–∞–µ—Ç raw_directions [2,2,2,2] (FLAT)")
        print("2. –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ tanh –¥–∞–µ—Ç [0.964, 0.964, 0.964, 0.964]")
        print("3. –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: >0.2 = LONG, <-0.2 = SHORT, –∏–Ω–∞—á–µ FLAT")
        print("4. –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è >0.2, –ø–æ—ç—Ç–æ–º—É –≤—Å–µ–≥–¥–∞ LONG")
        print("5. Weighted direction = 1.0 (–≤—Å–µ LONG —Å –≤–µ—Å–∞–º–∏)")
        print("6. Dynamic threshold ~0.05-0.1")
        print("7. 1.0 > 0.1 => —Å–∏–≥–Ω–∞–ª LONG")

        print("\n‚ùå –ì–õ–ê–í–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê:")
        print("–ú–æ–¥–µ–ª—å –≤—Å–µ–≥–¥–∞ –≤—ã–¥–∞–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è [2,2,2,2]")
        print("–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ ML –º–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")


if __name__ == "__main__":
    asyncio.run(analyze_signals())
