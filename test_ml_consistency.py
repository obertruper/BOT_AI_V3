#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ ML pipeline
"""

import numpy as np


def test_ml_manager_interpretation(outputs):
    """–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–∞–∫ –≤ ml_manager.py"""
    print("\nüìä ML Manager –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    future_returns = outputs[0:4]
    direction_logits = outputs[4:16]  # 12 –ª–æ–≥–∏—Ç–æ–≤
    risk_metrics = outputs[16:20]
    
    # Reshape –ª–æ–≥–∏—Ç–æ–≤
    direction_logits_reshaped = direction_logits.reshape(4, 3)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º softmax
    directions = []
    probs_list = []
    
    for i, logits in enumerate(direction_logits_reshaped):
        exp_logits = np.exp(logits - np.max(logits))
        probs = exp_logits / exp_logits.sum()
        probs_list.append(probs)
        direction = np.argmax(probs)
        directions.append(direction)
        
        print(f"  –¢–∞–π–º—Ñ—Ä–µ–π–º {i}: –ª–æ–≥–∏—Ç—ã={logits.round(2)}, "
              f"–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏={probs.round(3)}, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ={direction}")
    
    return directions, probs_list


def test_old_strategy_interpretation(outputs):
    """–°—Ç–∞—Ä–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –≤ strategy (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è)"""
    print("\n‚ùå –°—Ç–∞—Ä–∞—è Strategy –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è):")
    
    # –°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± - –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô
    directions = outputs[4:8]  # –ë–µ—Ä–µ—Ç —Ç–æ–ª—å–∫–æ 4 –∑–Ω–∞—á–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ 12!
    long_probs = 1 / (1 + np.exp(-outputs[8:12]))  # –ü—Ä–∏–º–µ–Ω—è–µ—Ç sigmoid –∫ –ª–æ–≥–∏—Ç–∞–º
    short_probs = 1 / (1 + np.exp(-outputs[12:16]))  # –ü—Ä–∏–º–µ–Ω—è–µ—Ç sigmoid –∫ –ª–æ–≥–∏—Ç–∞–º
    
    print(f"  Directions (raw): {directions}")
    print(f"  Long probs (sigmoid): {long_probs.round(3)}")
    print(f"  Short probs (sigmoid): {short_probs.round(3)}")
    
    return directions, long_probs, short_probs


def test_new_strategy_interpretation(outputs):
    """–ù–æ–≤–∞—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –≤ strategy"""
    print("\n‚úÖ –ù–æ–≤–∞—è Strategy –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è):")
    
    # –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± - –ü–†–ê–í–ò–õ–¨–ù–´–ô
    future_returns = outputs[0:4]
    direction_logits = outputs[4:16]  # 12 –ª–æ–≥–∏—Ç–æ–≤
    risk_metrics = outputs[16:20]
    
    # Reshape –∏ softmax –∫–∞–∫ –≤ ml_manager
    direction_logits_reshaped = direction_logits.reshape(4, 3)
    
    directions = []
    probs_list = []
    
    for i, logits in enumerate(direction_logits_reshaped):
        exp_logits = np.exp(logits - np.max(logits))
        probs = exp_logits / exp_logits.sum()
        probs_list.append(probs)
        direction = np.argmax(probs)
        directions.append(direction)
        
        print(f"  –¢–∞–π–º—Ñ—Ä–µ–π–º {i}: –ª–æ–≥–∏—Ç—ã={logits.round(2)}, "
              f"–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏={probs.round(3)}, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ={direction}")
    
    return directions, probs_list


def main():
    print("="*70)
    print("üî¨ –¢–ï–°–¢ –°–û–ì–õ–ê–°–û–í–ê–ù–ù–û–°–¢–ò ML PIPELINE")
    print("="*70)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤—ã—Ö–æ–¥—ã –º–æ–¥–µ–ª–∏
    outputs = np.zeros(20)
    
    # Future returns
    outputs[0:4] = [0.002, 0.003, 0.004, 0.005]
    
    # Direction logits - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–≤–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ LONG
    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ (4 —à—Ç—É–∫–∏) –ø–æ 3 –ª–æ–≥–∏—Ç–∞ [LONG, SHORT, NEUTRAL]
    for i in range(4):
        base_idx = 4 + i * 3
        outputs[base_idx] = 2.0      # LONG logit (–≤—ã—Å–æ–∫–∏–π)
        outputs[base_idx + 1] = 0.5  # SHORT logit (–Ω–∏–∑–∫–∏–π)
        outputs[base_idx + 2] = 0.1  # NEUTRAL logit (–Ω–∏–∑–∫–∏–π)
    
    # Risk metrics
    outputs[16:20] = [0.01, 0.01, 0.02, 0.02]
    
    print(f"\nüì• –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (20 –≤—ã—Ö–æ–¥–æ–≤ –º–æ–¥–µ–ª–∏):")
    print(f"  [0-3] Returns: {outputs[0:4]}")
    print(f"  [4-15] Logits: {outputs[4:16]}")
    print(f"  [16-19] Risks: {outputs[16:20]}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
    ml_dirs, ml_probs = test_ml_manager_interpretation(outputs)
    old_dirs, old_long, old_short = test_old_strategy_interpretation(outputs)
    new_dirs, new_probs = test_new_strategy_interpretation(outputs)
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n" + "="*70)
    print("üìä –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    print("="*70)
    
    print(f"\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
    print(f"  ML Manager:     {ml_dirs}")
    print(f"  Strategy (old): {old_dirs[:4] if len(old_dirs) >= 4 else '–û–®–ò–ë–ö–ê - —Ç–æ–ª—å–∫–æ 4 –∑–Ω–∞—á–µ–Ω–∏—è!'}")
    print(f"  Strategy (new): {new_dirs}")
    
    if ml_dirs == new_dirs:
        print("\n‚úÖ ML Manager –∏ –Ω–æ–≤–∞—è Strategy –°–û–í–ü–ê–î–ê–Æ–¢!")
    else:
        print("\n‚ùå ML Manager –∏ –Ω–æ–≤–∞—è Strategy –ù–ï –°–û–í–ü–ê–î–ê–Æ–¢!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å–æ —Å—Ç–∞—Ä–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π
    print("\n‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê —Å–æ —Å—Ç–∞—Ä–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π:")
    print(f"  - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ outputs[4:8] = {outputs[4:8]}")
    print(f"  - –≠—Ç–æ –ø–µ—Ä–≤—ã–µ 4 –ª–æ–≥–∏—Ç–∞ –∏–∑ 12, –∞ –Ω–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è!")
    print(f"  - –ü—Ä–∏–º–µ–Ω—è–µ—Ç sigmoid –≤–º–µ—Å—Ç–æ softmax")
    print(f"  - –†–µ–∑—É–ª—å—Ç–∞—Ç: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏")


if __name__ == "__main__":
    main()