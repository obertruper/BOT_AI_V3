#!/usr/bin/env python3
"""
–¢–æ—á–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 231 –ø—Ä–∏–∑–Ω–∞–∫–∞ –¥–ª—è UnifiedPatchTST –º–æ–¥–µ–ª–∏.
–û–ë–ù–û–í–õ–ï–ù–û: –ü—Ä–∏–≤–µ–¥–µ–Ω–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —Ä–µ–∞–ª—å–Ω–æ–π –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é.

–ö–†–ò–¢–ò–ß–ù–û: –≠—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –¢–û–ß–ù–û–ú –∞–Ω–∞–ª–∏–∑–µ –æ–±—É—á–∞—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ BOT_AI_V2/–∞–∞–∞.py
"""

# –ò–º–ø–æ—Ä—Ç —Ç–æ—á–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—É—á–∞—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
from production_features_config import CRITICAL_FORMULAS, PRODUCTION_FEATURES

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å 240 –Ω–∞ 231)
REQUIRED_FEATURES_231 = PRODUCTION_FEATURES

# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
REQUIRED_FEATURES_240 = REQUIRED_FEATURES_231  # –ê–ª–∏–∞—Å –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞


def get_required_features_list() -> list[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ 231 –ø—Ä–∏–∑–Ω–∞–∫–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
    –û–ë–ù–û–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—á–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑ –æ–±—É—á–∞—é—â–µ–≥–æ —Ñ–∞–π–ª–∞.
    """
    return REQUIRED_FEATURES_231.copy()


def get_feature_count() -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
    return len(REQUIRED_FEATURES_231)


def validate_features(features: list[str]) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–º.

    Args:
        features: –°–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

    Returns:
        True –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–µ–Ω, False –∏–Ω–∞—á–µ
    """
    required = get_required_features_list()

    if len(features) != len(required):
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(features)} –≤–º–µ—Å—Ç–æ {len(required)}")
        return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
    for i, (feat, req) in enumerate(zip(features, required, strict=False)):
        if feat != req:
            print(f"‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {i}: '{feat}' –≤–º–µ—Å—Ç–æ '{req}'")
            return False

    return True


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è inference (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)
FEATURE_CONFIG = {
    "expected_features": 231,  # –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å 240 –Ω–∞ 231
    "context_window": 96,  # –ò–∑ model config
    "min_history": 240,  # –ú–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
    "use_cache": True,
    "cache_ttl": 300,  # 5 –º–∏–Ω—É—Ç
    "inference_mode": True,  # –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ - –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    "feature_order_critical": True,  # –ù–û–í–û–ï: –ø–æ—Ä—è–¥–æ–∫ –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–µ–Ω
    "use_training_exact": True,  # –ù–û–í–û–ï: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—á–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã –∏–∑ –æ–±—É—á–µ–Ω–∏—è
}

# –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã –∏–∑ –æ–±—É—á–∞—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
TRAINING_FORMULAS = CRITICAL_FORMULAS

if __name__ == "__main__":
    # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    features = get_required_features_list()
    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {len(features)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    print(f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: 240 ‚Üí {len(features)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

    print("\nüîß –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã:")
    for formula_name, formula in TRAINING_FORMULAS.items():
        print(f"  - {formula_name}: {formula}")

    print("\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
