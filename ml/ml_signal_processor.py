#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ML Signal Processor –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏
"""

import asyncio
import heapq
from datetime import datetime, timedelta, timezone
from typing import Any, Dict, List, Optional, Union

import numpy as np
import pandas as pd
from sqlalchemy import and_, select

from core.config.config_manager import ConfigManager
from core.logger import setup_logger
from data.data_loader import DataLoader
from database.connections import get_async_db
from database.models.base_models import SignalType
from database.models.market_data import RawMarketData
from database.models.signal import Signal
from ml.ml_manager import MLManager
from ml.realtime_indicator_calculator import RealTimeIndicatorCalculator

logger = setup_logger("ml_signal_processor")


class MLSignalProcessor:
    """
    –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –≤ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã.
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç ML –º–æ–¥–µ–ª—å —Å —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π.
    """

    def __init__(
        self,
        ml_manager: MLManager,
        config: Dict[str, Any],
        config_manager: Optional[ConfigManager] = None,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML Signal Processor.

        Args:
            ml_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä ML –º–æ–¥–µ–ª–µ–π
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
            config_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        self.ml_manager = ml_manager
        self.config = config
        self.config_manager = config_manager

        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π (–µ—â–µ –±–æ–ª—å—à–µ —Å–Ω–∏–∂–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        ml_config = config.get("ml", {})
        self.min_confidence = ml_config.get(
            "min_confidence", 0.1
        )  # –±—ã–ª–æ 0.45 - —Å–Ω–∏–∂–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        self.min_signal_strength = ml_config.get(
            "min_signal_strength", 0.01
        )  # –±—ã–ª–æ 0.2 - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥
        self.risk_tolerance = ml_config.get(
            "risk_tolerance", "HIGH"
        )  # –î–æ–ø—É—Å–∫–∞–µ–º –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫

        # –ö—ç—à –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π (—É–º–µ–Ω—å—à–∞–µ–º TTL –¥–ª—è –±–æ–ª–µ–µ —á–∞—Å—Ç—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)
        self.prediction_cache = {}
        self.cache_ttl = (
            60  # 1 –º–∏–Ω—É—Ç–∞ - –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª/–º–∏–Ω—É—Ç—É
        )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º TTL
        self.indicator_calculator = RealTimeIndicatorCalculator(
            cache_ttl=self.cache_ttl, config=config
        )

        # Data loader –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è OHLCV
        self.data_loader = None

        # –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        self._pending_tasks = set()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
        self.signal_stats = {
            "total_signals": 0,
            "long_signals": 0,
            "short_signals": 0,
            "last_warning_time": None,
        }

        logger.info("MLSignalProcessor initialized")

    async def process_market_data(
        self,
        symbol: str,
        exchange: str,
        ohlcv_data: pd.DataFrame,
        additional_data: Optional[Dict[str, Any]] = None,
    ) -> Optional[Signal]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª.

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            exchange: –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏
            ohlcv_data: OHLCV –¥–∞–Ω–Ω—ã–µ
            additional_data: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏ —Ç.–¥.)

        Returns:
            Signal –æ–±—ä–µ–∫—Ç –∏–ª–∏ None
        """
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –∫—ç—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            # –°–æ–∑–¥–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫—ç—à-–∫–ª—é—á –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º data_hash —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª –ø–æ–ª—É—á–∞–ª —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            from datetime import datetime

            current_minute = datetime.utcnow().strftime("%Y%m%d%H%M")  # –î–æ –º–∏–Ω—É—Ç

            # –ü—Ä–æ—Å—Ç–æ–π –∫–ª—é—á: –±–∏—Ä–∂–∞:—Å–∏–º–≤–æ–ª:–≤—Ä–µ–º—è - –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            cache_key = f"{exchange}:{symbol}:{current_minute}"

            logger.debug(f"Cache key –¥–ª—è {symbol}: {cache_key}")

            cached = self._get_cached_prediction(cache_key)
            if cached:
                logger.debug(f"Using cached prediction for {cache_key}")
                return self._create_signal_from_prediction(
                    cached, symbol, exchange, additional_data
                )

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç ML –º–æ–¥–µ–ª–∏
            logger.info(f"üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ù–û–í–û–ï –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è {symbol} (–Ω–µ—Ç –≤ –∫—ç—à–µ)")
            prediction = await self.ml_manager.predict(ohlcv_data)

            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self._cache_prediction(cache_key, prediction)

            # –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            signal = self._create_signal_from_prediction(
                prediction, symbol, exchange, additional_data
            )

            return signal

        except Exception as e:
            logger.error(f"Error processing market data for {symbol}: {e}")
            return None

    def _create_signal_from_prediction(
        self,
        prediction: Dict[str, Any],
        symbol: str,
        exchange: str,
        additional_data: Optional[Dict[str, Any]] = None,
    ) -> Optional[Signal]:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.

        Args:
            prediction: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç ML –º–æ–¥–µ–ª–∏
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            exchange: –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏
            additional_data: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

        Returns:
            Signal –æ–±—ä–µ–∫—Ç –∏–ª–∏ None
        """
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"üîç –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è {symbol}:")
        logger.info(f"   –°—ã—Ä–æ–µ: {prediction}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
        confidence = prediction.get("confidence", 0)
        if confidence < self.min_confidence:
            logger.debug(
                f"Low confidence {confidence:.2f} < {self.min_confidence}, skipping signal"
            )
            return None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞
        signal_strength_value = prediction.get("signal_strength", 0)
        if signal_strength_value < self.min_signal_strength:
            logger.debug(
                f"Weak signal {signal_strength_value:.2f} < {self.min_signal_strength}, skipping"
            )
            return None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
        risk_level = prediction.get("risk_level", "HIGH")
        if not self._check_risk_tolerance(risk_level):
            logger.debug(
                f"Risk level {risk_level} exceeds tolerance {self.risk_tolerance}, skipping"
            )
            return None

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞
        ml_signal_type = prediction.get("signal_type", "NEUTRAL")

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–µ –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º NEUTRAL —Å–∏–≥–Ω–∞–ª—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é
        # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ø—Ä–∏–º–µ–Ω—è–µ–º –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if ml_signal_type == "NEUTRAL":
            # –î–ª—è NEUTRAL —Å–∏–≥–Ω–∞–ª–æ–≤ —Ç—Ä–µ–±—É–µ–º –≤—ã—Å–æ–∫—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (>70%)
            if confidence < 0.70:
                logger.info(
                    f"üéØ NEUTRAL —Å–∏–≥–Ω–∞–ª —Å –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é {confidence:.1%}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
                )
                return None
            logger.info(
                f"üéØ NEUTRAL —Å–∏–≥–Ω–∞–ª —Å –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é {confidence:.1%}, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º"
            )

        # –ú–∞–ø–∏–º ML —Å–∏–≥–Ω–∞–ª –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã–π SignalType
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ú–æ–¥–µ–ª—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç "LONG"/"SHORT"/"NEUTRAL"
        if ml_signal_type == "LONG":
            signal_type = SignalType.LONG
        elif ml_signal_type == "SHORT":
            signal_type = SignalType.SHORT
        elif ml_signal_type == "NEUTRAL":
            signal_type = SignalType.NEUTRAL
        else:
            logger.warning(f"Unknown signal type: {ml_signal_type}")
            return None

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 0.0-1.0)
        strength = signal_strength_value

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        current_price = None
        if additional_data and "current_price" in additional_data:
            current_price = additional_data["current_price"]

        # –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª
        signal = Signal(
            symbol=symbol,
            exchange=exchange,
            signal_type=signal_type,
            strength=strength,  # –¢–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–µ–∑ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
            confidence=confidence,  # –¢–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–µ–∑ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
            strategy_name="PatchTST_ML",
            suggested_price=current_price,
            suggested_stop_loss=prediction.get("stop_loss"),
            suggested_take_profit=prediction.get("take_profit"),
            indicators={
                "ml_predictions": prediction.get("predictions", {}),
                "risk_level": risk_level,
                "signal_strength": signal_strength_value,
                "success_probability": prediction.get(
                    "success_probability", 0.5
                ),  # –î–æ–±–∞–≤–ª–µ–Ω–æ!
            },
            extra_data={
                "ml_model": "UnifiedPatchTST",
                "prediction_timestamp": prediction.get("timestamp"),
                "additional_data": additional_data,
                "raw_prediction": prediction,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            },
        )

        logger.info(
            f"Generated {signal_type.value} signal for {symbol} "
            f"with confidence {confidence:.2f} and strength {strength}"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        self._update_signal_diversity_stats(signal_type)

        return signal

    def _update_signal_diversity_stats(self, signal_type):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ—Ç –æ –¥–∏—Å–±–∞–ª–∞–Ω—Å–µ.

        Args:
            signal_type: –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞ (SignalType.LONG –∏–ª–∏ SignalType.SHORT)
        """
        from database.models.base_models import SignalType

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        self.signal_stats["total_signals"] += 1
        if signal_type == SignalType.LONG:
            self.signal_stats["long_signals"] += 1
        elif signal_type == SignalType.SHORT:
            self.signal_stats["short_signals"] += 1
        elif signal_type == SignalType.NEUTRAL:
            self.signal_stats["neutral_signals"] = (
                self.signal_stats.get("neutral_signals", 0) + 1
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–∏–≥–Ω–∞–ª–æ–≤
        if self.signal_stats["total_signals"] % 10 == 0:
            total = self.signal_stats["total_signals"]
            long_pct = (self.signal_stats["long_signals"] / total) * 100
            short_pct = (self.signal_stats["short_signals"] / total) * 100
            neutral_pct = (self.signal_stats.get("neutral_signals", 0) / total) * 100

            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –±–æ–ª–µ–µ 70% —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ (—É–º–µ–Ω—å—à–∏–ª–∏ —Å 80%)
            if long_pct > 70 or short_pct > 70:
                logger.warning(
                    f"‚ö†Ô∏è –î–ò–°–ë–ê–õ–ê–ù–° –°–ò–ì–ù–ê–õ–û–í: {long_pct:.1f}% LONG, {short_pct:.1f}% SHORT, {neutral_pct:.1f}% NEUTRAL! "
                    f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Ä–æ–≥–∏ weighted_direction –∏–ª–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫—É –º–æ–¥–µ–ª–∏."
                )
            else:
                logger.info(
                    f"üìä –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤: {long_pct:.1f}% LONG, {short_pct:.1f}% SHORT, {neutral_pct:.1f}% NEUTRAL"
                )

            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ 100% –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
            if long_pct == 100 or short_pct == 100:
                logger.critical(
                    f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –î–ò–°–ë–ê–õ–ê–ù–°: –í–°–ï {total} —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏! "
                    f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–¥–µ–ª—å."
                )
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                self.signal_stats["long_signals"] = 0
                self.signal_stats["short_signals"] = 0
                self.signal_stats["total_signals"] = 0

            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
            logger.info(
                f"üìä –ë–∞–ª–∞–Ω—Å —Å–∏–≥–Ω–∞–ª–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {total}): "
                f"LONG: {long_pct:.1f}%, SHORT: {short_pct:.1f}%"
            )

    def _check_risk_tolerance(self, risk_level: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.

        Args:
            risk_level: –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –∏–∑ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è

        Returns:
            True –µ—Å–ª–∏ —Ä–∏—Å–∫ –ø—Ä–∏–µ–º–ª–µ–º—ã–π
        """
        risk_hierarchy = {"LOW": 1, "MEDIUM": 2, "HIGH": 3}

        prediction_risk = risk_hierarchy.get(risk_level, 3)
        tolerance_risk = risk_hierarchy.get(self.risk_tolerance, 2)

        return prediction_risk <= tolerance_risk

    def _get_cached_prediction(self, cache_key: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"""
        if cache_key not in self.prediction_cache:
            return None

        cached_data = self.prediction_cache[cache_key]
        cached_time = datetime.fromisoformat(cached_data["timestamp"])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
        if datetime.now(timezone.utc) - cached_time > timedelta(seconds=self.cache_ttl):
            del self.prediction_cache[cache_key]
            return None

        return cached_data

    def _cache_prediction(self, cache_key: str, prediction: Dict[str, Any]):
        """–ö—ç—à–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"""
        self.prediction_cache[cache_key] = prediction

        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        self._cleanup_cache()

    def _cleanup_cache(self):
        """–û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞"""
        current_time = datetime.now(timezone.utc)
        keys_to_remove = []

        for key, data in self.prediction_cache.items():
            cached_time = datetime.fromisoformat(data["timestamp"])
            if current_time - cached_time > timedelta(seconds=self.cache_ttl):
                keys_to_remove.append(key)

        for key in keys_to_remove:
            del self.prediction_cache[key]

    async def validate_signal(self, signal: Signal) -> bool:
        """
        –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞.

        Args:
            signal: –°–∏–≥–Ω–∞–ª –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏

        Returns:
            True –µ—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –≤–∞–ª–∏–¥–µ–Ω
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        if signal.confidence < self.min_confidence:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞
        if signal.strength < self.min_signal_strength:
            return False

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å –¥—Ä—É–≥–∏–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏,
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –∏ —Ç.–¥.

        return True

    def update_config(self, config: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
        ml_config = config.get("ml", {})
        self.min_confidence = ml_config.get("min_confidence", self.min_confidence)
        self.min_signal_strength = ml_config.get(
            "min_signal_strength", self.min_signal_strength
        )
        self.risk_tolerance = ml_config.get("risk_tolerance", self.risk_tolerance)

        logger.info(
            f"Config updated: confidence={self.min_confidence}, "
            f"strength={self.min_signal_strength}, risk={self.risk_tolerance}"
        )

    async def initialize(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        try:
            logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML Signal Processor...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ML Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if not self.ml_manager:
                raise ValueError("ML Manager –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º data loader –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if not self.data_loader:
                self.data_loader = DataLoader(self.config_manager)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._stats = {
                "total_signals_processed": 0,
                "valid_signals_generated": 0,
                "signals_saved": 0,
                "processing_errors": 0,
            }

            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
            self._initialized = True

            logger.info("‚úÖ ML Signal Processor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ML Signal Processor: {e}")
            raise

    async def process_signal(
        self, symbol: str, features: np.ndarray, current_price: float
    ) -> Optional[Signal]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Å–∏–≥–Ω–∞–ª.

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            features: –ú–∞—Å—Å–∏–≤ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞

        Returns:
            Signal –∏–ª–∏ None
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç –º–æ–¥–µ–ª–∏
            predictions = await self.ml_manager.predict(features)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–∏–≥–Ω–∞–ª
            signal = await self._convert_predictions_to_signal(
                symbol=symbol, predictions=predictions, current_price=current_price
            )

            if signal and await self.validate_signal(signal):
                self._stats["valid_signals_generated"] += 1
                return signal

            return None

        except Exception as e:
            logger.error(f"Error processing signal for {symbol}: {e}")
            self._stats["processing_errors"] += 1
            return None
        finally:
            self._stats["total_signals_processed"] += 1

    async def process_batch(self, batch_data: List[Dict[str, Any]]) -> List[Signal]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–∫–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤.

        Args:
            batch_data: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏

        Returns:
            –°–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        """
        signals = []

        for data in batch_data:
            signal = await self.process_signal(
                symbol=data["symbol"],
                features=data["features"],
                current_price=data["current_price"],
            )
            if signal:
                signals.append(signal)

        return signals

    async def _convert_predictions_to_signal(
        self,
        symbol: str,
        predictions: Union[np.ndarray, Dict[str, Any]],
        current_price: float,
    ) -> Optional[Signal]:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –≤ —Å–∏–≥–Ω–∞–ª.

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            predictions: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞

        Returns:
            Signal –∏–ª–∏ None
        """
        # –ï—Å–ª–∏ predictions —ç—Ç–æ numpy array, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ dict (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
        if isinstance(predictions, np.ndarray):
            pred_dict = {
                "future_returns": predictions[0:4].tolist(),
                "directions": predictions[4:8].tolist(),
                "profit_probabilities": {
                    "long": predictions[8:12].tolist(),
                    "short": predictions[12:16].tolist(),
                },
                "risk_metrics": predictions[16:20].tolist(),
            }
        else:
            pred_dict = predictions

        # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç ml_manager
        if "signal_type" in pred_dict:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç ml_manager
            ml_signal_type = pred_dict.get("signal_type", "NEUTRAL")

            logger.info(f"üéØ ML signal_type: {ml_signal_type}")

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ML —Å–∏–≥–Ω–∞–ª –≤ —Ç–æ—Ä–≥–æ–≤—ã–π SignalType
            if ml_signal_type == "LONG":
                signal_type = SignalType.LONG
            elif ml_signal_type == "SHORT":
                signal_type = SignalType.SHORT
            else:  # NEUTRAL
                logger.info("üéØ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)")
                signal_type = SignalType.NEUTRAL

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç ml_manager
            confidence = pred_dict.get("confidence", 0.5)
            strength = pred_dict.get("signal_strength", 0.5)

            # –í–ê–ñ–ù–û: –¢–µ–ø–µ—Ä—å ml_manager –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç—ã, –Ω–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ —Ü–µ–Ω—ã!
            stop_loss_pct = pred_dict.get("stop_loss_pct")
            take_profit_pct = pred_dict.get("take_profit_pct")

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
            if stop_loss_pct is not None and take_profit_pct is not None:
                if signal_type == SignalType.LONG:
                    stop_loss = current_price * (1 - stop_loss_pct)
                    take_profit = current_price * (1 + take_profit_pct)
                else:  # SHORT
                    stop_loss = current_price * (1 + stop_loss_pct)
                    take_profit = current_price * (1 - take_profit_pct)
            else:
                # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                stop_loss_pct = 0.02  # 2%
                take_profit_pct = 0.05  # 5%

                if signal_type == SignalType.LONG:
                    stop_loss = current_price * (1 - stop_loss_pct)
                    take_profit = current_price * (1 + take_profit_pct)
                else:
                    stop_loss = current_price * (1 + stop_loss_pct)
                    take_profit = current_price * (1 - take_profit_pct)

            risk_level = pred_dict.get("risk_level", "MEDIUM")

        else:
            # –°–¢–ê–†–ê–Ø –õ–û–ì–ò–ö–ê –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            directions = np.array(pred_dict.get("directions", [2, 2, 2, 2]))
            logger.info(f"üéØ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç): {directions}")
            signal_type = await self._determine_signal_type(directions)
            logger.info(f"üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞: {signal_type}")

            if signal_type is None:
                logger.info("üéØ –°–∏–≥–Ω–∞–ª –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω (—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ FLAT)")
                return None

            # –í—ã—á–∏—Å–ª—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏ —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞
            long_probs = pred_dict.get("profit_probabilities", {}).get(
                "long", [0.5] * 4
            )
            short_probs = pred_dict.get("profit_probabilities", {}).get(
                "short", [0.5] * 4
            )

            if signal_type == SignalType.LONG:
                confidence = np.mean(long_probs)
            else:
                confidence = np.mean(short_probs)

            # –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
            direction_agreement = np.sum(
                directions == (0 if signal_type == SignalType.LONG else 1)
            ) / len(directions)

            # –†–∏—Å–∫
            risk_metrics = np.array(pred_dict.get("risk_metrics", [0.02] * 4))
            risk_level_num = np.mean(risk_metrics)

            # –í—ã—á–∏—Å–ª—è–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞
            strength = await self._calculate_signal_strength(
                confidence=confidence,
                direction_agreement=direction_agreement,
                profit_probability=confidence,
                risk_level=risk_level_num,
            )

            # –í—ã—á–∏—Å–ª—è–µ–º —É—Ä–æ–≤–Ω–∏ —Ä–∏—Å–∫–∞
            stop_loss, take_profit = await self._calculate_risk_levels(
                signal_type=signal_type,
                current_price=current_price,
                risk_metrics=risk_metrics,
                profit_probabilities=long_probs
                if signal_type == SignalType.LONG
                else short_probs,
            )

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤–æ–π —Ä–∏—Å–∫ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π
            if risk_level_num < 0.3:
                risk_level = "LOW"
            elif risk_level_num < 0.7:
                risk_level = "MEDIUM"
            else:
                risk_level = "HIGH"

        # –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª
        signal = Signal(
            symbol=symbol,
            exchange="bybit",  # –ë—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            signal_type=signal_type,
            confidence=confidence,
            strength=strength,
            suggested_stop_loss=stop_loss,
            suggested_take_profit=take_profit,
            suggested_price=current_price,
            strategy_name="PatchTST_ML",
            indicators={
                "ml_predictions": pred_dict.get("predictions", pred_dict),
                "risk_level": risk_level,
                "success_probability": pred_dict.get("success_probability", 0.5),
            },
        )

        logger.info(
            f"‚úÖ –°–æ–∑–¥–∞–Ω {signal_type.value} —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol}: "
            f"confidence={confidence:.2f}, strength={strength:.2f}"
        )

        return signal

    async def _calculate_signal_strength(
        self,
        confidence: float,
        direction_agreement: float,
        profit_probability: float,
        risk_level: float,
    ) -> float:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞.

        Args:
            confidence: –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
            direction_agreement: –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
            profit_probability: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–±—ã–ª–∏
            risk_level: –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞

        Returns:
            –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞ (0.0-1.0)
        """
        # –ë–∞–∑–æ–≤–∞—è —Ñ–æ—Ä–º—É–ª–∞ —Å –≤–µ—Å–∞–º–∏
        weights = {"confidence": 0.3, "direction": 0.3, "profit": 0.3, "risk": 0.1}

        # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–∏—Å–∫ (–Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫ = –≤—ã—Å–æ–∫–∏–π –≤–∫–ª–∞–¥)
        risk_contribution = 1.0 - min(risk_level * 10, 1.0)

        strength = (
            weights["confidence"] * confidence
            + weights["direction"] * direction_agreement
            + weights["profit"] * profit_probability
            + weights["risk"] * risk_contribution
        )

        return min(max(strength, 0.0), 1.0)

    async def _determine_signal_type(
        self, directions: np.ndarray
    ) -> Optional[SignalType]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.

        Args:
            directions: –ú–∞—Å—Å–∏–≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (0=LONG, 1=SHORT, 2=FLAT)

        Returns:
            SignalType –∏–ª–∏ None
        """
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞
        long_count = np.sum(directions == 0)
        short_count = np.sum(directions == 1)
        flat_count = np.sum(directions == 2)

        # –ï—Å–ª–∏ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ FLAT - –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞
        if flat_count >= len(directions) / 2:
            return None

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        if long_count > short_count:
            return SignalType.LONG
        elif short_count > long_count:
            return SignalType.SHORT
        else:
            return None

    async def _calculate_risk_levels(
        self,
        signal_type: SignalType,
        current_price: float,
        risk_metrics: np.ndarray,
        profit_probabilities: Union[List[float], np.ndarray],
    ) -> tuple:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç —É—Ä–æ–≤–Ω–∏ stop loss –∏ take profit.

        Args:
            signal_type: –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            risk_metrics: –ú–µ—Ç—Ä–∏–∫–∏ —Ä–∏—Å–∫–∞
            profit_probabilities: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∏–±—ã–ª–∏

        Returns:
            (stop_loss, take_profit)
        """
        # –ë–∞–∑–æ–≤—ã–π —Ä–∏—Å–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        base_risk = self.config.get("trading", {}).get("default_stop_loss_pct", 0.02)
        base_profit = self.config.get("trading", {}).get(
            "default_take_profit_pct", 0.04
        )
        risk_reward_ratio = self.config.get("trading", {}).get("risk_reward_ratio", 2.0)

        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∏—Å–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        avg_risk = np.mean(risk_metrics)
        risk_multiplier = 1.0 + avg_risk

        # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
        avg_profit_prob = np.mean(profit_probabilities)
        profit_multiplier = avg_profit_prob * 1.5

        # –í—ã—á–∏—Å–ª—è–µ–º —É—Ä–æ–≤–Ω–∏
        stop_loss_pct = base_risk * risk_multiplier
        take_profit_pct = max(
            stop_loss_pct * risk_reward_ratio, base_profit * profit_multiplier
        )

        if signal_type == SignalType.LONG:
            stop_loss = current_price * (1 - stop_loss_pct)
            take_profit = current_price * (1 + take_profit_pct)
        else:  # SHORT
            stop_loss = current_price * (1 + stop_loss_pct)
            take_profit = current_price * (1 - take_profit_pct)

        return stop_loss, take_profit

    async def _calculate_expiry(self, signal: Signal) -> datetime:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞.

        Args:
            signal: –°–∏–≥–Ω–∞–ª

        Returns:
            –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
        """
        expiry_minutes = self.config.get("ml", {}).get("signal_expiry_minutes", 15)
        return signal.created_at + timedelta(minutes=expiry_minutes)

    async def save_signal(self, signal: Signal) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∏–≥–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

        Args:
            signal: –°–∏–≥–Ω–∞–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            async with get_async_db() as db:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Å–∏–≥–Ω–∞–ª
                existing = await db.execute(
                    select(Signal).where(
                        and_(
                            Signal.symbol == signal.symbol,
                            Signal.signal_type == signal.signal_type,
                            Signal.strength == signal.strength,
                            Signal.confidence == signal.confidence,
                        )
                    )
                )
                if existing.scalar_one_or_none():
                    logger.debug(f"Signal already exists for {signal.symbol}, skipping")
                    return False

                db.add(signal)
                await db.commit()
                self._stats["signals_saved"] += 1
                logger.info(f"‚úÖ Signal saved for {signal.symbol}")
                return True
        except Exception as e:
            logger.error(f"Error saving signal: {e}")
            return False

    async def filter_signals(self, signals: List[Signal]) -> List[Signal]:
        """
        –§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–ª–∞–±—ã–µ —Å–∏–≥–Ω–∞–ª—ã.

        Args:
            signals: –°–ø–∏—Å–æ–∫ —Å–∏–≥–Ω–∞–ª–æ–≤

        Returns:
            –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        """
        filtered = []
        for signal in signals:
            if await self.validate_signal(signal):
                filtered.append(signal)
        return filtered

    async def aggregate_signals(
        self, signals: List[Dict[str, Any]]
    ) -> Optional[Dict[str, Any]]:
        """
        –ê–≥—Ä–µ–≥–∏—Ä—É–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã.

        Args:
            signals: –°–ø–∏—Å–æ–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏

        Returns:
            –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –∏–ª–∏ None
        """
        if not signals:
            return None

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–∏–º–≤–æ–ª—É
        symbol = signals[0]["symbol"]

        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
        confidences = [s.get("confidence", 0) for s in signals]
        strengths = [s.get("strength", 0) for s in signals]

        aggregated = {
            "symbol": symbol,
            "aggregated_confidence": np.mean(confidences),
            "aggregated_strength": np.mean(strengths),
            "signal_count": len(signals),
            "signals": signals,
        }

        return aggregated

    async def get_metrics(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        """
        total = self._stats["total_signals_processed"]
        if total == 0:
            return {
                "total_processed": 0,
                "success_rate": 0.0,
                "save_rate": 0.0,
                "error_rate": 0.0,
            }

        return {
            "total_processed": total,
            "success_rate": self._stats["valid_signals_generated"] / total,
            "save_rate": self._stats["signals_saved"] / total,
            "error_rate": self._stats["processing_errors"] / total,
        }

    async def queue_signal(self, signal_data: Dict[str, Any]):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ—á–µ—Ä–µ–¥—å.

        Args:
            signal_data: –î–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞
        """
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: high=0, medium=1, low=2
        priority_map = {"high": 0, "medium": 1, "low": 2}
        priority = priority_map.get(signal_data.get("priority", "medium"), 1)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è max heap
        confidence = -signal_data.get("confidence", 0)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—É—á—É (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, –¥–∞–Ω–Ω—ã–µ)
        heapq.heappush(self._signal_queue, (priority, confidence, signal_data))

    async def process_queue(self) -> List[Dict[str, Any]]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —Å–∏–≥–Ω–∞–ª–æ–≤.

        Returns:
            –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        """
        processed = []

        while self._signal_queue:
            _, _, signal_data = heapq.heappop(self._signal_queue)
            processed.append(signal_data)

        return processed

    async def get_or_generate_signal(
        self, symbol: str, data: Dict[str, Any]
    ) -> Optional[Signal]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–∏–≥–Ω–∞–ª –∏–∑ –∫–µ—à–∞ –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π.

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

        Returns:
            Signal –∏–ª–∏ None
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        cache_key = f"signal:{symbol}"

        if self._enable_cache and cache_key in self.prediction_cache:
            cached = self.prediction_cache[cache_key]
            if isinstance(cached, Signal):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
                if (
                    datetime.utcnow() - cached.created_at
                ).total_seconds() < self._cache_ttl:
                    return cached

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        signal = await self._generate_signal(symbol, data)

        # –ö–µ—à–∏—Ä—É–µ–º
        if self._enable_cache and signal:
            self.prediction_cache[cache_key] = signal

        return signal

    async def _generate_signal(
        self, symbol: str, data: Dict[str, Any]
    ) -> Optional[Signal]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª.

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

        Returns:
            Signal –∏–ª–∏ None
        """
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        return Signal(symbol=symbol, confidence=0.8)

    async def process_realtime_signal(
        self,
        symbol: str,
        exchange: str = "bybit",
        lookback_minutes: int = 7200,  # 480 —Å–≤–µ—á–µ–π * 15 –º–∏–Ω—É—Ç (5 –¥–Ω–µ–π)
    ) -> Optional[Signal]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å —Ä–∞—Å—á–µ—Ç–æ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ on-demand

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            exchange: –ë–∏—Ä–∂–∞
            lookback_minutes: –°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å

        Returns:
            Signal –∏–ª–∏ None
        """
        try:
            logger.info(f"üîÑ Real-time –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}")

            # 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ OHLCV –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            ohlcv_df = await self._fetch_latest_ohlcv(
                symbol, exchange, lookback_minutes
            )

            if ohlcv_df is None or len(ohlcv_df) < 96:
                logger.warning(
                    f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: "
                    f"{len(ohlcv_df) if ohlcv_df is not None else 0} < 96"
                )
                return None

            # 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            features_array, metadata = await self.indicator_calculator.prepare_ml_input(
                symbol=symbol,
                ohlcv_df=ohlcv_df,
                lookback=96,  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π lookback –¥–ª—è –º–æ–¥–µ–ª–∏
            )

            logger.info(
                f"üìä –†–∞—Å—Å—á–∏—Ç–∞–Ω–æ {metadata['features_count']} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è {symbol}"
            )

            # 3. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç –º–æ–¥–µ–ª–∏
            logger.info(
                f"üìä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤ —Ñ–æ—Ä–º—ã: {features_array.shape}"
            )
            prediction = await self.ml_manager.predict(features_array)
            logger.info(f"üìä –ü–æ–ª—É—á–∏–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {type(prediction)}")

            # 4. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤ —Å–∏–≥–Ω–∞–ª
            signal = await self._convert_predictions_to_signal(
                symbol=symbol,
                predictions=prediction,
                current_price=metadata["last_price"],
            )

            logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ —Å–∏–≥–Ω–∞–ª: {signal is not None}")

            if signal:
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                signal.exchange = exchange
                signal.strategy_name = "PatchTST_RealTime"

                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
                if await self.validate_signal(signal):
                    self._stats["valid_signals_generated"] += 1

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if self.config.get("ml", {}).get("save_signals", True):
                        await self.save_signal(signal)

                    logger.info(
                        f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω {signal.signal_type.value} —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol} "
                        f"—Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é {signal.confidence:.2f}"
                    )

                    return signal
                else:
                    logger.debug(f"–°–∏–≥–Ω–∞–ª –¥–ª—è {symbol} –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é")

            return None

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ real-time –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è {symbol}: {e}")
            self._stats["processing_errors"] += 1
            return None
        finally:
            self._stats["total_signals_processed"] += 1

    async def _fetch_latest_ohlcv(
        self, symbol: str, exchange: str, lookback_minutes: int
    ) -> Optional[pd.DataFrame]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ OHLCV –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î

        Args:
            symbol: –°–∏–º–≤–æ–ª
            exchange: –ë–∏—Ä–∂–∞
            lookback_minutes: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –∏—Å—Ç–æ—Ä–∏–∏

        Returns:
            DataFrame —Å OHLCV –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ None
        """
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ë–î
            end_date = datetime.utcnow()
            start_date = end_date - timedelta(minutes=lookback_minutes)

            async with get_async_db() as session:
                stmt = (
                    select(RawMarketData)
                    .where(
                        and_(
                            RawMarketData.symbol == symbol,
                            RawMarketData.exchange == exchange,
                            RawMarketData.datetime >= start_date,
                            RawMarketData.interval_minutes == 15,  # 15-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏
                        )
                    )
                    .order_by(RawMarketData.timestamp)
                )

                result = await session.execute(stmt)
                data = result.scalars().all()

                if not data or len(data) < 240:
                    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ - –æ–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ data loader
                    logger.info(
                        f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: –≤ –ë–î —Ç–æ–ª—å–∫–æ {len(data)} –∑–∞–ø–∏—Å–µ–π"
                    )

                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                    await self.data_loader.update_latest_data(
                        symbols=[symbol], interval_minutes=15, exchange=exchange
                    )

                    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º
                    result = await session.execute(stmt)
                    data = result.scalars().all()

                if data:
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É symbol –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                    df = pd.DataFrame(
                        [
                            {
                                "timestamp": d.timestamp,
                                "datetime": d.datetime,
                                "open": float(d.open),
                                "high": float(d.high),
                                "low": float(d.low),
                                "close": float(d.close),
                                "volume": float(d.volume),
                                "turnover": float(d.turnover) if d.turnover else 0,
                                "symbol": symbol,  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º symbol –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                            }
                            for d in data
                        ]
                    )

                    df.set_index("datetime", inplace=True)
                    df = df.sort_index()

                    logger.info(
                        f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol} —Å –∫–æ–ª–æ–Ω–∫–æ–π symbol"
                    )
                    return df

                return None

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è OHLCV –¥–ª—è {symbol}: {e}")
            return None

    async def generate_signals_for_symbols(
        self, symbols: List[str], exchange: str = "bybit"
    ) -> List[Signal]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤

        Args:
            symbols: –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤
            exchange: –ë–∏—Ä–∂–∞

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        """
        signals = []

        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
        tasks = []
        for symbol in symbols:
            task = self.process_realtime_signal(symbol, exchange)
            tasks.append(task)

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        results = await asyncio.gather(*tasks, return_exceptions=True)

        for i, result in enumerate(results):
            if isinstance(result, Exception):
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è {symbols[i]}: {result}")
            elif result is not None:
                signals.append(result)

        logger.info(
            f"üìà –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤"
        )

        return signals

    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
        self._initialized = False

        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        for task in self._pending_tasks:
            if not task.done():
                task.cancel()

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if self._pending_tasks:
            await asyncio.gather(*self._pending_tasks, return_exceptions=True)

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º data loader
        if self.data_loader:
            await self.data_loader.cleanup()

        logger.info("MLSignalProcessor shutdown complete")
