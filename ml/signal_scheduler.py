#!/usr/bin/env python3
"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ML —Å–∏–≥–Ω–∞–ª–æ–≤ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è real-time —Ç–æ—Ä–≥–æ–≤–ª–∏
"""

import asyncio
import signal
import sys
from datetime import UTC, datetime
from typing import Any

from core.config.config_manager import ConfigManager
from core.exceptions import SignalGenerationError
from core.logger import setup_logger
from ml.ml_manager import MLManager
from ml.ml_signal_processor import MLSignalProcessor

logger = setup_logger(__name__)


class SignalScheduler:
    """
    –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ML –º–æ–¥–µ–ª–∏
    """

    def __init__(self, config_manager: ConfigManager | None = None):
        """
        Args:
            config_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        self.config_manager = config_manager or ConfigManager()
        self.config = self.config_manager.get_config()

        # ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.ml_manager = None
        self.signal_processor = None
        self.trading_engine = None  # –°—Å—ã–ª–∫–∞ –Ω–∞ Trading Engine

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        ml_config = self.config.get("ml", {})
        self.symbols = ml_config.get("symbols", ["BTCUSDT"])
        # –ß–∏—Ç–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 180 —Å–µ–∫—É–Ω–¥ = 3 –º–∏–Ω—É—Ç—ã)
        self.interval_seconds = ml_config.get("signal_generation", {}).get("interval_seconds", 180)
        self.exchange = ml_config.get("default_exchange", "bybit")
        self.enabled = ml_config.get("enabled", True)

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self._running = False
        self._tasks: dict[str, asyncio.Task] = {}
        self._last_signals: dict[str, Any] = {}
        self._error_counts: dict[str, int] = {}
        self._max_errors = 5  # –ú–∞–∫—Å–∏–º—É–º –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥ –ø–µ—Ä–µ–¥ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º —Å–∏–º–≤–æ–ª–∞

        logger.info(
            f"SignalScheduler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: "
            f"{len(self.symbols)} —Å–∏–º–≤–æ–ª–æ–≤, –∏–Ω—Ç–µ—Ä–≤–∞–ª {self.interval_seconds}—Å"
        )

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Signal Scheduler...")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ML Manager
            self.ml_manager = MLManager(self.config)
            await self.ml_manager.initialize()

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Signal Processor
            self.signal_processor = MLSignalProcessor(
                ml_manager=self.ml_manager,
                config=self.config,
                config_manager=self.config_manager,
            )
            await self.signal_processor.initialize()

            logger.info("‚úÖ Signal Scheduler –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Signal Scheduler: {e}")
            raise

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if not self.enabled:
            logger.warning("ML —Å–∏–≥–Ω–∞–ª—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return

        if self._running:
            logger.warning("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        self._running = True
        logger.info("üì° –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ML —Å–∏–≥–Ω–∞–ª–æ–≤...")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        for symbol in self.symbols:
            task = asyncio.create_task(self._signal_loop(symbol))
            self._tasks[symbol] = task
            self._error_counts[symbol] = 0

        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        monitor_task = asyncio.create_task(self._monitoring_loop())
        self._tasks["monitor"] = monitor_task

        logger.info(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ {len(self.symbols)} –∑–∞–¥–∞—á –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self._running = False
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Signal Scheduler...")

        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        for task in self._tasks.values():
            if not task.done():
                task.cancel()

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if self._tasks:
            await asyncio.gather(*self._tasks.values(), return_exceptions=True)

        self._tasks.clear()

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        if self.signal_processor:
            await self.signal_processor.shutdown()

        logger.info("‚úÖ Signal Scheduler –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _signal_loop(self, symbol: str):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Å–∏–º–≤–æ–ª–∞

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
        """
        logger.info(f"–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è {symbol}")

        while self._running:
            try:
                start_time = datetime.now(UTC)

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
                signal = await self._generate_signal(symbol)

                if signal:
                    self._last_signals[symbol] = {
                        "signal": signal,
                        "timestamp": start_time,
                        "success": True,
                    }
                    self._error_counts[symbol] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫

                    logger.info(
                        f"‚úÖ {symbol}: {signal.signal_type.value} —Å–∏–≥–Ω–∞–ª, "
                        f"—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {signal.confidence:.1f}%"
                    )

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ Trading Engine
                    await self._emit_signal_to_trading_engine(signal)
                else:
                    logger.debug(f"–ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}")

                # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
                elapsed = (datetime.now(UTC) - start_time).total_seconds()
                sleep_time = max(0, self.interval_seconds - elapsed)

                if sleep_time > 0:
                    await asyncio.sleep(sleep_time)

            except asyncio.CancelledError:
                logger.info(f"–¶–∏–∫–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è {symbol} –æ—Ç–º–µ–Ω–µ–Ω")
                break

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}: {e}")
                self._error_counts[symbol] += 1

                # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                if self._error_counts[symbol] >= self._max_errors:
                    logger.error(
                        f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –¥–ª—è {symbol} "
                        f"({self._error_counts[symbol]}), –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
                    )
                    break

                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                await asyncio.sleep(self.interval_seconds)

    async def _generate_signal(self, symbol: str) -> Any | None:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª

        Returns:
            Signal –æ–±—ä–µ–∫—Ç –∏–ª–∏ None
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ signal_processor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if not self.signal_processor:
                raise ValueError("Signal Processor –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º real-time –º–µ—Ç–æ–¥
            signal = await self.signal_processor.process_realtime_signal(
                symbol=symbol, exchange=self.exchange
            )

            return signal

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}: {e}")
            raise SignalGenerationError(
                strategy_name="PatchTST_ML",
                symbol=symbol,
                reason=f"Failed to generate signal: {e}",
            )

    async def _monitoring_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        log_interval = 300  # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

        while self._running:
            try:
                await asyncio.sleep(log_interval)

                # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                active_symbols = len(
                    [s for s in self.symbols if s in self._tasks and not self._tasks[s].done()]
                )

                total_signals = len(self._last_signals)
                recent_signals = len(
                    [
                        s
                        for s in self._last_signals.values()
                        if (datetime.now(UTC) - s["timestamp"]).total_seconds() < 300
                    ]
                )

                error_symbols = [s for s, count in self._error_counts.items() if count > 0]

                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
                processor_stats = {}
                if self.signal_processor and hasattr(self.signal_processor, "get_metrics"):
                    processor_stats = await self.signal_processor.get_metrics()

                logger.info(
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Signal Scheduler:\n"
                    f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {active_symbols}/{len(self.symbols)}\n"
                    f"   –°–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω: {recent_signals}\n"
                    f"   –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processor_stats.get('total_processed', 0)}\n"
                    f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {processor_stats.get('success_rate', 0):.1%}\n"
                    f"   –°–∏–º–≤–æ–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏: {error_symbols if error_symbols else '–Ω–µ—Ç'}"
                )

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")

    async def get_status(self) -> dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        status = {
            "running": self._running,
            "enabled": self.enabled,
            "interval_seconds": self.interval_seconds,
            "symbols": {
                symbol: {
                    "active": symbol in self._tasks and not self._tasks[symbol].done(),
                    "errors": self._error_counts.get(symbol, 0),
                    "last_signal": self._last_signals.get(symbol, {}),
                }
                for symbol in self.symbols
            },
            "processor_stats": (
                await self.signal_processor.get_metrics()
                if self.signal_processor and hasattr(self.signal_processor, "get_metrics")
                else {}
            ),
        }

        return status

    async def add_symbol(self, symbol: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        if symbol in self.symbols:
            logger.warning(f"–°–∏–º–≤–æ–ª {symbol} —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è")
            return

        self.symbols.append(symbol)
        self._error_counts[symbol] = 0

        if self._running:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            task = asyncio.create_task(self._signal_loop(symbol))
            self._tasks[symbol] = task

        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Å–∏–º–≤–æ–ª {symbol} –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")

    def set_trading_engine(self, trading_engine):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ Trading Engine"""
        self.trading_engine = trading_engine
        logger.info("üîó Trading Engine –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Signal Scheduler")

    async def remove_symbol(self, symbol: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        if symbol not in self.symbols:
            logger.warning(f"–°–∏–º–≤–æ–ª {symbol} –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è")
            return

        self.symbols.remove(symbol)

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É
        if symbol in self._tasks:
            self._tasks[symbol].cancel()
            await asyncio.gather(self._tasks[symbol], return_exceptions=True)
            del self._tasks[symbol]

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self._error_counts.pop(symbol, None)
        self._last_signals.pop(symbol, None)

        logger.info(f"–£–¥–∞–ª–µ–Ω —Å–∏–º–≤–æ–ª {symbol} –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")

    async def _emit_signal_to_trading_engine(self, signal):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ Trading Engine"""
        if self.trading_engine:
            try:
                logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ Trading Engine:")
                logger.info(f"   –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞: {type(signal)}")
                logger.info(
                    f"   Symbol: {signal.symbol if hasattr(signal, 'symbol') else '–Ω–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞'}"
                )
                logger.info(
                    f"   Signal type: {signal.signal_type if hasattr(signal, 'signal_type') else '–Ω–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞'}"
                )
                logger.info(
                    f"   Confidence: {signal.confidence if hasattr(signal, 'confidence') else '–Ω–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞'}"
                )

                await self.trading_engine.receive_trading_signal(signal)
                logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª {signal.symbol} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Trading Engine")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –≤ Trading Engine: {e}")
                import traceback

                logger.error(traceback.format_exc())
        else:
            logger.warning(
                "‚ö†Ô∏è Trading Engine –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Signal Scheduler - —Å–∏–≥–Ω–∞–ª—ã –Ω–µ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!"
            )


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    scheduler = SignalScheduler()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
    def signal_handler(sig, frame):
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        asyncio.create_task(scheduler.stop())
        sys.exit(0)

    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        await scheduler.initialize()

        # –ó–∞–ø—É—Å–∫
        await scheduler.start()

        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
        while True:
            await asyncio.sleep(180)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã

    except KeyboardInterrupt:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await scheduler.stop()


if __name__ == "__main__":
    asyncio.run(main())
