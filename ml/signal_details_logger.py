#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
"""

import logging
from typing import Any

import pandas as pd

logger = logging.getLogger(__name__)


class SignalDetailsLogger:
    """–ö–ª–∞—Å—Å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""

    @staticmethod
    def log_signal_details(
        symbol: str, signal_data: dict[str, Any], market_data: pd.DataFrame = None
    ):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–≥–Ω–∞–ª–µ

        Args:
            symbol: –°–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
            signal_data: –î–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç ML –º–æ–¥–µ–ª–∏
            market_data: DataFrame —Å —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        """

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        signal_type = signal_data.get("signal_type", "NEUTRAL")
        signal_strength = signal_data.get("signal_strength", 0)
        confidence = signal_data.get("confidence", 0)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
        returns_15m = signal_data.get("returns_15m", 0)
        returns_1h = signal_data.get("returns_1h", 0)
        returns_4h = signal_data.get("returns_4h", 0)
        returns_12h = signal_data.get("returns_12h", 0)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        dir_15m = signal_data.get("direction_15m", "NEUTRAL")
        dir_1h = signal_data.get("direction_1h", "NEUTRAL")
        dir_4h = signal_data.get("direction_4h", "NEUTRAL")
        dir_12h = signal_data.get("direction_12h", "NEUTRAL")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        conf_15m = signal_data.get("confidence_15m", 0)
        conf_1h = signal_data.get("confidence_1h", 0)
        conf_4h = signal_data.get("confidence_4h", 0)
        conf_12h = signal_data.get("confidence_12h", 0)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏ market_data
        tech_indicators = {}
        if market_data is not None and not market_data.empty:
            last_row = market_data.iloc[-1]

            # –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            tech_indicators = {
                "RSI": last_row.get("rsi_14", 0),
                "MACD": last_row.get("macd", 0),
                "MACD_Signal": last_row.get("macd_signal", 0),
                "BB_Upper": last_row.get("bb_upper", 0),
                "BB_Lower": last_row.get("bb_lower", 0),
                "BB_Position": last_row.get("bb_position", 0),
                "SMA_20": last_row.get("sma_20", 0),
                "SMA_50": last_row.get("sma_50", 0),
                "EMA_12": last_row.get("ema_12", 0),
                "EMA_26": last_row.get("ema_26", 0),
                "ATR": last_row.get("atr_14", 0),
                "Volume": last_row.get("volume", 0),
                "Volume_SMA": last_row.get("volume_sma_20", 0),
                "Price": last_row.get("close", 0),
            }

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥
        signal_emoji = "üü¢" if signal_type == "LONG" else "üî¥" if signal_type == "SHORT" else "‚ö™"

        log_message = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                       üìä –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–ò–ì–ù–ê–õ–ê {symbol:<10s}             ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë {signal_emoji} –°–ò–ì–ù–ê–õ: {signal_type:<8s} | –°–∏–ª–∞: {signal_strength:.2f} | –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2%}      ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë üìà –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø –ü–û –¢–ê–ô–ú–§–†–ï–ô–ú–ê–ú:                                              ‚ïë
‚ïë   15m: {dir_15m:<8s} | –î–æ—Ö–æ–¥: {returns_15m:+.4f} | –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {conf_15m:.2%}         ‚ïë
‚ïë   1h:  {dir_1h:<8s} | –î–æ—Ö–æ–¥: {returns_1h:+.4f} | –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {conf_1h:.2%}          ‚ïë
‚ïë   4h:  {dir_4h:<8s} | –î–æ—Ö–æ–¥: {returns_4h:+.4f} | –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {conf_4h:.2%}          ‚ïë
‚ïë   12h: {dir_12h:<8s} | –î–æ—Ö–æ–¥: {returns_12h:+.4f} | –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {conf_12h:.2%}         ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£"""

        if tech_indicators:
            log_message += f"""
‚ïë üìä –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ò–ù–î–ò–ö–ê–¢–û–†–´:                                                   ‚ïë
‚ïë   ‚Ä¢ RSI(14):        {tech_indicators.get('RSI', 0):>6.2f}  {'üî¥ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω' if tech_indicators.get('RSI', 50) < 30 else 'üü¢ –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω' if tech_indicators.get('RSI', 50) > 70 else '‚ö™ –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ'}        ‚ïë
‚ïë   ‚Ä¢ MACD:           {tech_indicators.get('MACD', 0):>6.4f}  {'üü¢ –ë—ã—á–∏–π' if tech_indicators.get('MACD', 0) > tech_indicators.get('MACD_Signal', 0) else 'üî¥ –ú–µ–¥–≤–µ–∂–∏–π'}              ‚ïë
‚ïë   ‚Ä¢ BB Position:    {tech_indicators.get('BB_Position', 0):>6.2f}  {'üî¥ –£ –Ω–∏–∂–Ω–µ–π' if tech_indicators.get('BB_Position', 0) < -2 else 'üü¢ –£ –≤–µ—Ä—Ö–Ω–µ–π' if tech_indicators.get('BB_Position', 0) > 2 else '‚ö™ –í –∫–∞–Ω–∞–ª–µ'}         ‚ïë
‚ïë   ‚Ä¢ ATR(14):        {tech_indicators.get('ATR', 0):>6.4f}  {'‚ö° –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å' if tech_indicators.get('ATR', 0) > tech_indicators.get('Price', 1) * 0.02 else 'üò¥ –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å'}   ‚ïë
‚ïë   ‚Ä¢ Volume Ratio:   {(tech_indicators.get('Volume', 0) / max(tech_indicators.get('Volume_SMA', 1), 1)):>6.2f}x  {'üìà –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π' if tech_indicators.get('Volume', 0) > tech_indicators.get('Volume_SMA', 0) * 1.5 else 'üìâ –ü–æ–Ω–∏–∂–µ–Ω–Ω—ã–π'}          ‚ïë"""

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        sl_pct = signal_data.get("stop_loss_pct", 0)
        tp_pct = signal_data.get("take_profit_pct", 0)
        risk_level = signal_data.get("risk_level", "UNKNOWN")
        quality_score = signal_data.get("quality_score", 0)

        log_message += f"""
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:                                                             ‚ïë
‚ïë   ‚Ä¢ Stop Loss:      {sl_pct*100 if sl_pct else 0:>5.2f}%                                                     ‚ïë
‚ïë   ‚Ä¢ Take Profit:    {tp_pct*100 if tp_pct else 0:>5.2f}%                                                     ‚ïë
‚ïë   ‚Ä¢ –†–∏—Å–∫:           {risk_level:<10s}                                            ‚ïë
‚ïë   ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ:       {quality_score:.2%}                                              ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë ‚öôÔ∏è –§–ò–õ–¨–¢–†–´ –ö–ê–ß–ï–°–¢–í–ê:                                                         ‚ïë
‚ïë   ‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è:      {signal_data.get('filter_strategy', 'moderate'):<12s}                                      ‚ïë
‚ïë   ‚Ä¢ –ü—Ä–æ–π–¥–µ–Ω–æ:       {'‚úÖ –î–ê' if signal_data.get('passed_quality_filters', False) else '‚ùå –ù–ï–¢'}                                                 ‚ïë"""

        if not signal_data.get("passed_quality_filters", False):
            reasons = signal_data.get("rejection_reasons", [])
            if reasons:
                log_message += f"""
‚ïë   ‚Ä¢ –ü—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞: {'; '.join(reasons[:2]):<50s}  ‚ïë"""

        log_message += """
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"""

        logger.info(log_message)

        # –ö—Ä–∞—Ç–∫–∏–π –ª–æ–≥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        brief_log = f"üìä {symbol} | {signal_emoji} {signal_type} | –°–∏–ª–∞: {signal_strength:.2f} | –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2%}"
        if tech_indicators:
            brief_log += f" | RSI: {tech_indicators.get('RSI', 0):.1f} | MACD: {'üü¢' if tech_indicators.get('MACD', 0) > tech_indicators.get('MACD_Signal', 0) else 'üî¥'}"

        logger.info(brief_log)

        return log_message


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
signal_logger = SignalDetailsLogger()
