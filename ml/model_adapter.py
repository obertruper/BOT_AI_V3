#!/usr/bin/env python3
"""
–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—ã—Ö–æ–¥–æ–≤ UnifiedPatchTST –º–æ–¥–µ–ª–∏ –≤ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ LLM TRANSFORM –¥–ª—è BOT_AI_V3
"""

from datetime import datetime

import numpy as np
import torch

from core.logger import setup_logger

logger = setup_logger(__name__)


class ModelOutputAdapter:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç 20 –≤—ã—Ö–æ–¥–æ–≤ UnifiedPatchTST –≤ —Ñ–æ—Ä–º–∞—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤

    20 –≤—ã—Ö–æ–¥–æ–≤ –º–æ–¥–µ–ª–∏:
    - [0-3]: future_return_15m, 1h, 4h, 12h
    - [4-7]: direction_15m, 1h, 4h, 12h
    - [8-11]: volatility_15m, 1h, 4h, 12h
    - [12-15]: volume_change_15m, 1h, 4h, 12h
    - [16-19]: price_range_15m, 1h, 4h, 12h
    """

    def __init__(self):
        self.output_mapping = {
            "future_return": slice(0, 4),  # –∏–Ω–¥–µ–∫—Å—ã 0-3
            "direction": slice(4, 8),  # –∏–Ω–¥–µ–∫—Å—ã 4-7
            "volatility": slice(8, 12),  # –∏–Ω–¥–µ–∫—Å—ã 8-11
            "volume_change": slice(12, 16),  # –∏–Ω–¥–µ–∫—Å—ã 12-15
            "price_range": slice(16, 20),  # –∏–Ω–¥–µ–∫—Å—ã 16-19
        }

        self.timeframes = ["15m", "1h", "4h", "12h"]

    def adapt_model_outputs(
        self,
        raw_outputs: torch.Tensor | np.ndarray,
        symbols: list[str] | None = None,
    ) -> dict[str, dict]:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—ã—Ä—ã–µ –≤—ã—Ö–æ–¥—ã –º–æ–¥–µ–ª–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

        Args:
            raw_outputs: –¢–µ–Ω–∑–æ—Ä –∏–ª–∏ numpy array —Ñ–æ—Ä–º—ã [batch_size, 20] —Å –≤—ã—Ö–æ–¥–∞–º–∏ –º–æ–¥–µ–ª–∏
            symbols: –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –±–∞—Ç—á–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            Dict —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏ –ø–æ —Å–∏–º–≤–æ–ª–∞–º –∏–ª–∏ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
        """
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ numpy –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        if isinstance(raw_outputs, torch.Tensor):
            outputs = raw_outputs.detach().cpu().numpy()
        else:
            outputs = raw_outputs

        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —ç—Ç–æ 2D –º–∞—Å—Å–∏–≤
        if len(outputs.shape) == 1:
            outputs = outputs.reshape(1, -1)
        elif len(outputs.shape) == 3:
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ 3D –º–∞—Å—Å–∏–≤ [batch, seq, features], –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É
            outputs = outputs[:, -1, :]

        batch_size = outputs.shape[0]

        # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å—ã
        if symbols is None:
            symbols = [f"batch_{i}" for i in range(batch_size)]

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        predictions_by_symbol = {}

        for i, symbol in enumerate(symbols):
            symbol_outputs = outputs[i] if batch_size > 1 else outputs[0]
            predictions_by_symbol[symbol] = self._create_signal_format(symbol_outputs)

        return predictions_by_symbol

    def _create_signal_format(self, outputs: np.ndarray) -> dict:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        future_returns = outputs[self.output_mapping["future_return"]]
        directions = outputs[self.output_mapping["direction"]]
        volatilities = outputs[self.output_mapping["volatility"]]
        volume_changes = outputs[self.output_mapping["volume_change"]]
        price_ranges = outputs[self.output_mapping["price_range"]]

        # üõ°Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è direction –∫–ª–∞—Å—Å–æ–≤ –∏–∑ –æ–±—É—á–µ–Ω–∏—è
        # –í –ø—Ä–æ–µ–∫—Ç–µ –æ–±—É—á–µ–Ω–∏—è: classes = ['LONG', 'SHORT', 'FLAT']
        # –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç: 0=LONG, 1=SHORT, 2=FLAT (–ù–ï 0=DOWN, 1=FLAT, 2=UP!)
        direction_probs = self._softmax_directions(directions)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        primary_direction = self._determine_primary_direction(directions)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è LONG –∏ SHORT
        long_profit_probs = []
        short_profit_probs = []

        for i, tf in enumerate(self.timeframes):
            # üõ°Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–≥–ª–∞—Å–Ω–æ –æ–±—É—á–∞—é—â–µ–º—É –ø—Ä–æ–µ–∫—Ç—É
            long_prob = direction_probs[i][0]   # 0=LONG –≤ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
            short_prob = direction_probs[i][1]  # 1=SHORT –≤ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏

            long_profit_probs.append(long_prob)
            short_profit_probs.append(short_prob)

        # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        avg_long_prob = np.mean(long_profit_probs)
        avg_short_prob = np.mean(short_profit_probs)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞
        if avg_long_prob > 0.6 and avg_long_prob > avg_short_prob:
            signal_type = "LONG"
            confidence = avg_long_prob
        elif avg_short_prob > 0.6 and avg_short_prob > avg_long_prob:
            signal_type = "SHORT"
            confidence = avg_short_prob
        else:
            signal_type = "NEUTRAL"
            confidence = max(avg_long_prob, avg_short_prob)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞
        signal_strength = self._calculate_signal_strength(directions, future_returns, volatilities)

        # –†–∏—Å–∫ –º–µ—Ç—Ä–∏–∫–∏
        risk_metrics = self._calculate_risk_metrics(future_returns, volatilities, price_ranges)

        return {
            "signal_type": signal_type,
            "confidence": float(confidence),
            "signal_strength": float(signal_strength),
            "risk_level": risk_metrics["risk_level"],
            # –î–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            "predictions": {
                "future_returns": {
                    tf: float(ret) for tf, ret in zip(self.timeframes, future_returns, strict=False)
                },
                "directions": {
                    tf: int(dir) for tf, dir in zip(self.timeframes, directions, strict=False)
                },
                "direction_probabilities": {
                    tf: {
                        "long": float(probs[0]),   # üõ°Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–û: 0=LONG
                        "short": float(probs[1]),  # üõ°Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–û: 1=SHORT  
                        "flat": float(probs[2]),   # üõ°Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–û: 2=FLAT
                    }
                    for tf, probs in zip(self.timeframes, direction_probs, strict=False)
                },
                "volatilities": {
                    tf: float(vol) for tf, vol in zip(self.timeframes, volatilities, strict=False)
                },
                "volume_changes": {
                    tf: float(vc) for tf, vc in zip(self.timeframes, volume_changes, strict=False)
                },
                "price_ranges": {
                    tf: float(pr) for tf, pr in zip(self.timeframes, price_ranges, strict=False)
                },
            },
            # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∏–±—ã–ª–∏
            "profit_probabilities": {
                "long": {
                    tf: float(prob)
                    for tf, prob in zip(self.timeframes, long_profit_probs, strict=False)
                },
                "short": {
                    tf: float(prob)
                    for tf, prob in zip(self.timeframes, short_profit_probs, strict=False)
                },
            },
            # –†–∏—Å–∫ –º–µ—Ç—Ä–∏–∫–∏
            "risk_metrics": risk_metrics,
            # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
            "timestamp": datetime.utcnow().isoformat(),
        }

    def _softmax_directions(self, directions: np.ndarray) -> np.ndarray:
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç softmax –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        üõ°Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–ª–∞—Å—Å–æ–≤ –∏–∑ –æ–±—É—á–µ–Ω–∏—è
        –ö–ª–∞—Å—Å—ã: 0=LONG, 1=SHORT, 2=FLAT
        """
        # –ï—Å–ª–∏ directions —É–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã (0-2), —Å–æ–∑–¥–∞–µ–º one-hot
        probs = []
        for dir_value in directions:
            # üõ°Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º –ø—Å–µ–≤–¥–æ-–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –∫–ª–∞—Å—Å–∞–º –æ–±—É—á–µ–Ω–∏—è
            prob = np.zeros(3)  # [LONG, SHORT, FLAT]
            if 0 <= dir_value <= 2:
                prob[int(dir_value)] = 0.8  # –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
                # –û—Å—Ç–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ–∂–¥—É –¥—Ä—É–≥–∏–º–∏ –∫–ª–∞—Å—Å–∞–º–∏
                other_indices = [i for i in range(3) if i != int(dir_value)]
                prob[other_indices[0]] = 0.15
                prob[other_indices[1]] = 0.05
            else:
                # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞, —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                prob[:] = 1 / 3
            probs.append(prob)

        return np.array(probs)

    def _determine_primary_direction(self, directions: np.ndarray) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≥–æ—Ä–∏–∑–æ–Ω—Ç–æ–≤
        üõ°Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã 0=LONG, 1=SHORT, 2=FLAT
        """
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞
        votes = np.bincount(directions.astype(int).clip(0, 2), minlength=3)

        # üõ°Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–û: 0=LONG, 1=SHORT, 2=FLAT (—Å–æ–≥–ª–∞—Å–Ω–æ –æ–±—É—á–∞—é—â–µ–º—É –ø—Ä–æ–µ–∫—Ç—É)
        if votes[0] > votes[1] and votes[0] >= votes[2]:
            return "LONG"
        elif votes[1] > votes[0] and votes[1] >= votes[2]:
            return "SHORT"
        else:
            return "FLAT"

    def _calculate_signal_strength(
        self, directions: np.ndarray, returns: np.ndarray, volatilities: np.ndarray
    ) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        """
        # –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        direction_agreement = 1.0 - (np.std(directions) / 2.0)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ [0, 1]

        # –°–∏–ª–∞ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
        avg_return = np.mean(np.abs(returns))
        return_strength = min(avg_return * 10, 1.0)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º returns –≤ –¥–æ–ª—è—Ö

        # –£—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (–Ω–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å = –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–∏–≥–Ω–∞–ª)
        avg_volatility = np.mean(volatilities)
        volatility_factor = 1.0 - min(avg_volatility, 1.0)

        # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ñ–∞–∫—Ç–æ—Ä—ã
        strength = 0.4 * direction_agreement + 0.4 * return_strength + 0.2 * volatility_factor

        return np.clip(strength, 0.0, 1.0)

    def _calculate_risk_metrics(
        self, returns: np.ndarray, volatilities: np.ndarray, price_ranges: np.ndarray
    ) -> dict[str, float]:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —Ä–∏—Å–∫–∞
        """
        # –°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        avg_volatility = np.mean(volatilities)

        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π drawdown
        max_negative_return = np.min(returns)

        # –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–∞—Ö —Ü–µ–Ω
        avg_price_range = np.mean(price_ranges)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
        if avg_volatility > 0.03 or max_negative_return < -0.02:
            risk_level = "HIGH"
            risk_score = 0.8
        elif avg_volatility > 0.02 or max_negative_return < -0.01:
            risk_level = "MEDIUM"
            risk_score = 0.5
        else:
            risk_level = "LOW"
            risk_score = 0.2

        return {
            "risk_level": risk_level,
            "risk_score": float(risk_score),
            "avg_volatility": float(avg_volatility),
            "max_drawdown": float(abs(max_negative_return)),
            "avg_price_range": float(avg_price_range),
        }

    def calculate_trading_levels(
        self,
        current_price: float,
        predictions: dict[str, Any],
        risk_tolerance: float = 0.02,
    ) -> dict[str, float]:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É—Ä–æ–≤–Ω–∏ stop loss –∏ take profit

        Args:
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            predictions: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
            risk_tolerance: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2%)

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —É—Ä–æ–≤–Ω—è–º–∏ SL –∏ TP
        """
        risk_metrics = predictions.get("risk_metrics", {})
        future_returns = predictions.get("predictions", {}).get("future_returns", {})
        signal_type = predictions.get("signal_type", "NEUTRAL")

        # –ë–∞–∑–æ–≤—ã–π —Ä–∏—Å–∫
        base_risk = min(risk_tolerance, risk_metrics.get("avg_volatility", 0.02))

        # Take profit –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö returns
        expected_return = np.mean([future_returns.get("1h", 0), future_returns.get("4h", 0)])

        # Risk/reward ratio
        risk_reward_ratio = 2.0 if risk_metrics.get("risk_level") == "LOW" else 1.5

        if signal_type == "LONG":
            stop_loss = current_price * (1 - base_risk)
            take_profit = current_price * (1 + base_risk * risk_reward_ratio)
        elif signal_type == "SHORT":
            stop_loss = current_price * (1 + base_risk)
            take_profit = current_price * (1 - base_risk * risk_reward_ratio)
        else:
            # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            stop_loss = current_price * 0.98
            take_profit = current_price * 1.02

        return {
            "stop_loss": stop_loss,
            "take_profit": take_profit,
            "risk_percentage": base_risk * 100,
            "expected_profit_percentage": base_risk * risk_reward_ratio * 100,
        }
