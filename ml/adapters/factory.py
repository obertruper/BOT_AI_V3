#!/usr/bin/env python3
"""
–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ ML –º–æ–¥–µ–ª–µ–π.
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–∞–º–∏.
"""

from typing import Any, Optional

from core.logger import setup_logger
from ml.adapters.base import BaseModelAdapter
from ml.adapters.patchtst import PatchTSTAdapter

logger = setup_logger(__name__)


class ModelAdapterFactory:
    """
    –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ –º–æ–¥–µ–ª–µ–π.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –º–æ–¥–µ–ª–µ–π –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω—É—é —Ç–æ—á–∫—É —Å–æ–∑–¥–∞–Ω–∏—è.
    """
    
    # –†–µ–µ—Å—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥–∞–ø—Ç–µ—Ä–æ–≤
    _adapters = {
        "PatchTST": PatchTSTAdapter,
        "UnifiedPatchTST": PatchTSTAdapter,  # –ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        "patchtst": PatchTSTAdapter,  # –ê–ª–∏–∞—Å –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
    }
    
    @classmethod
    def create_adapter(
        cls,
        model_type: str,
        config: dict[str, Any]
    ) -> BaseModelAdapter:
        """
        –°–æ–∑–¥–∞–µ—Ç –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏.
        
        Args:
            model_type: –¢–∏–ø –º–æ–¥–µ–ª–∏ (PatchTST, LSTM, etc.)
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
            
        Returns:
            –≠–∫–∑–µ–º–ø–ª—è—Ä –∞–¥–∞–ø—Ç–µ—Ä–∞
            
        Raises:
            ValueError: –ï—Å–ª–∏ —Ç–∏–ø –º–æ–¥–µ–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–∞
        if model_type not in cls._adapters:
            available = ", ".join(cls._adapters.keys())
            raise ValueError(
                f"Unknown model type: {model_type}. "
                f"Available types: {available}"
            )
        
        # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä
        adapter_class = cls._adapters[model_type]
        adapter = adapter_class(config)
        
        logger.info(f"Created {model_type} adapter: {adapter}")
        
        return adapter
    
    @classmethod
    def register_adapter(
        cls,
        model_type: str,
        adapter_class: type[BaseModelAdapter]
    ) -> None:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —Ç–∏–ø –∞–¥–∞–ø—Ç–µ—Ä–∞.
        
        Args:
            model_type: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏
            adapter_class: –ö–ª–∞—Å—Å –∞–¥–∞–ø—Ç–µ—Ä–∞
        """
        if not issubclass(adapter_class, BaseModelAdapter):
            raise ValueError(
                f"Adapter class must inherit from BaseModelAdapter, "
                f"got {adapter_class.__name__}"
            )
        
        cls._adapters[model_type] = adapter_class
        logger.info(f"Registered adapter: {model_type} -> {adapter_class.__name__}")
    
    @classmethod
    def get_available_types(cls) -> list[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–æ–¥–µ–ª–µ–π.
        
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–∏–ø–æ–≤
        """
        return list(cls._adapters.keys())
    
    @classmethod
    def create_from_config(
        cls,
        config: dict[str, Any]
    ) -> Optional[BaseModelAdapter]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∞–¥–∞–ø—Ç–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –º–æ–¥–µ–ª–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
        
        Args:
            config: –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å —Å–µ–∫—Ü–∏–µ–π ml
            
        Returns:
            –ê–¥–∞–ø—Ç–µ—Ä –∏–ª–∏ None –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω–∞
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ ML –ø–æ–¥—Å–∏—Å—Ç–µ–º–∞
        if hasattr(config, 'ml'):
            # Pydantic –º–æ–¥–µ–ª—å
            ml_config = config.ml
            logger.debug(f"üîç Pydantic ML config detected: {type(ml_config)}")
            if hasattr(ml_config, 'model_dump'):
                ml_config = ml_config.model_dump()
            elif hasattr(ml_config, 'dict'):
                ml_config = ml_config.dict()
            else:
                # –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –∞—Ç—Ä–∏–±—É—Ç–∞–º
                ml_config = {
                    "enabled": getattr(ml_config, 'enabled', True),
                    "use_adapters": getattr(ml_config, 'use_adapters', True),
                    "active_model": getattr(ml_config, 'active_model', 'patchtst'),
                    "models": getattr(ml_config, 'models', {})
                }
        else:
            # –û–±—ã—á–Ω—ã–π dict
            ml_config = config.get("ml", {})
            logger.debug(f"üîç Dict ML config: enabled={ml_config.get('enabled', False)}")
            
        if not ml_config.get("enabled", False):
            logger.warning(f"ML is disabled in configuration: enabled={ml_config.get('enabled', 'NOT_FOUND')}")
            return None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å
        models_config = ml_config.get("models", {})
        active_model_name = ml_config.get("active_model", "patchtst")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ–ª–∏
        if active_model_name not in models_config:
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            logger.info("Using legacy configuration format")
            model_config = ml_config.get("model", {})
            model_type = model_config.get("name", "UnifiedPatchTST")
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            full_config = {**config, **model_config}
            return cls.create_adapter(model_type, full_config)
        
        # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        model_config = models_config[active_model_name]
        logger.debug(f"üîç Model {active_model_name} config: enabled={model_config.get('enabled', True)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å
        if not model_config.get("enabled", True):
            logger.warning(f"Model {active_model_name} is disabled: enabled={model_config.get('enabled', 'NOT_FOUND')}")
            return None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–¥–∞–ø—Ç–µ—Ä–∞
        model_type = model_config.get("type", active_model_name)
        adapter_class_name = model_config.get("adapter_class", model_type)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if hasattr(config, 'ml'):
            # Pydantic –º–æ–¥–µ–ª—å - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ dict
            if hasattr(config, 'model_dump'):
                config_dict = config.model_dump()
            elif hasattr(config, 'dict'):
                config_dict = config.dict()
            else:
                # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 
                config_dict = {"ml": {"enabled": True}}
            full_config = {**config_dict, **model_config}
        else:
            full_config = {**config, **model_config}
        
        # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä
        return cls.create_adapter(adapter_class_name, full_config)
    
    @classmethod
    def validate_config(
        cls,
        config: dict[str, Any],
        model_type: str
    ) -> tuple[bool, list[str]]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏.
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            model_type: –¢–∏–ø –º–æ–¥–µ–ª–∏
            
        Returns:
            (valid, errors) - —Ñ–ª–∞–≥ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∏ —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫
        """
        errors = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∏–ø–∞
        if model_type not in cls._adapters:
            errors.append(f"Unknown model type: {model_type}")
            return False, errors
        
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        required_fields = ["model_file", "device"]
        for field in required_fields:
            if field not in config:
                logger.debug(f"Optional field {field} not in config, will use defaults")
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è PatchTST
        if model_type in ["PatchTST", "UnifiedPatchTST", "patchtst"]:
            if "scaler_file" not in config:
                logger.debug("Scaler file not specified, will use default path")
        
        return len(errors) == 0, errors


# –ü—Ä–∏–º–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±—É–¥—É—â–∏—Ö –∞–¥–∞–ø—Ç–µ—Ä–æ–≤
def register_future_adapters():
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –±—É–¥—É—â–∏–µ –∞–¥–∞–ø—Ç–µ—Ä—ã.
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è –ø–æ –º–µ—Ä–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π.
    """
    # –ü—Ä–∏–º–µ—Ä: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è LSTM –∞–¥–∞–ø—Ç–µ—Ä–∞ (–∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω)
    # from ml.adapters.lstm import LSTMAdapter
    # ModelAdapterFactory.register_adapter("LSTM", LSTMAdapter)
    
    # –ü—Ä–∏–º–µ—Ä: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Transformer –∞–¥–∞–ø—Ç–µ—Ä–∞
    # from ml.adapters.transformer import TransformerAdapter
    # ModelAdapterFactory.register_adapter("Transformer", TransformerAdapter)
    
    pass