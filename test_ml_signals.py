#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç ML —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import asyncio
import os
from datetime import datetime

from dotenv import load_dotenv

load_dotenv()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ["PGPORT"] = "5555"
os.environ["PGUSER"] = "obertruper"
os.environ["PGDATABASE"] = "bot_trading_v3"


async def test_signals():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    from core.config.config_manager import get_global_config_manager
    from database.connections.postgres import AsyncPGPool
    from trading.signals.ai_signal_generator import AISignalGenerator

    print(f"\nüß™ –¢–ï–°–¢ ML –°–ò–ì–ù–ê–õ–û–í - {datetime.now().strftime('%H:%M:%S')}")
    print("=" * 60)

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        config_manager = get_global_config_manager()
        config = config_manager.get_config()
        pool = await AsyncPGPool.get_pool()

        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤
        print("\n1Ô∏è‚É£ –°–û–ó–î–ê–ù–ò–ï AI SIGNAL GENERATOR:")

        signal_generator = AISignalGenerator(config_manager)
        await signal_generator.initialize()
        print("   ‚úÖ AI Signal Generator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ML Manager
        if signal_generator.ml_manager:
            print("   ‚úÖ ML Manager –∞–∫—Ç–∏–≤–µ–Ω")
        else:
            print("   ‚ùå ML Manager –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω!")
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
        print("\n2Ô∏è‚É£ –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–ò–ì–ù–ê–õ–û–í:")

        symbols = ["BTCUSDT", "ETHUSDT", "SOLUSDT"]

        for symbol in symbols:
            print(f"\n   üìä {symbol}:")

            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
                signal = await signal_generator.generate_signal(symbol)

                if signal:
                    print("      ‚úÖ –°–∏–≥–Ω–∞–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:")
                    print(f"         –¢–∏–ø: {signal.signal_type}")
                    print(f"         –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.2%}")
                    print(f"         –°–∏–ª–∞: {signal.strength:.4f}")
                    print(f"         –¶–µ–Ω–∞: ${signal.suggested_price}")

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                    await pool.execute(
                        """
                        INSERT INTO signals
                        (symbol, signal_type, strength, confidence, suggested_price,
                         strategy_name, created_at, extra_data)
                        VALUES ($1, $2, $3, $4, $5, $6, NOW(), $7)
                    """,
                        signal.symbol,
                        signal.signal_type,
                        signal.strength,
                        signal.confidence,
                        signal.suggested_price,
                        "AI_Signal_Test",
                        "{}",
                    )
                    print("      ‚úÖ –°–∏–≥–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
                else:
                    print("      ‚ùå –°–∏–≥–Ω–∞–ª –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (–≤–æ–∑–º–æ–∂–Ω–æ NEUTRAL)")

            except Exception as e:
                print(f"      ‚ùå –û—à–∏–±–∫–∞: {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        print("\n3Ô∏è‚É£ –ó–ê–ü–£–°–ö –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–û–ô –ì–ï–ù–ï–†–ê–¶–ò–ò:")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
        print("   ‚è±Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥...")

        generate_task = asyncio.create_task(signal_generator._generate_signals_loop())

        # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(30)

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        signal_generator._running = False
        generate_task.cancel()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n4Ô∏è‚É£ –†–ï–ó–£–õ–¨–¢–ê–¢–´:")

        signals = await pool.fetch(
            """
            SELECT
                symbol,
                signal_type,
                confidence,
                created_at
            FROM signals
            WHERE created_at > NOW() - INTERVAL '5 minutes'
                AND strategy_name LIKE '%AI%'
            ORDER BY created_at DESC
            LIMIT 10
        """
        )

        if signals:
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç:")
            for sig in signals:
                print(
                    f"      {sig['symbol']} - {sig['signal_type']} "
                    f"({sig['confidence']:.0%}) –≤ {sig['created_at'].strftime('%H:%M:%S')}"
                )
        else:
            print("   ‚ùå –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç")

        print("\n" + "=" * 60)

    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()
    finally:
        await AsyncPGPool.close_pool()


if __name__ == "__main__":
    asyncio.run(test_signals())
