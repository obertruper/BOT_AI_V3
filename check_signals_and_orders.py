#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –æ—Ä–¥–µ—Ä–æ–≤
"""

import asyncio
import os
from datetime import datetime

from dotenv import load_dotenv

load_dotenv()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ["PGPORT"] = "5555"
os.environ["PGUSER"] = "obertruper"
os.environ["PGDATABASE"] = "bot_trading_v3"


async def check_signals_and_orders():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –æ—Ä–¥–µ—Ä–æ–≤"""
    print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –°–ò–ì–ù–ê–õ–û–í –ò –û–†–î–ï–†–û–í - {datetime.now().strftime('%H:%M:%S')}")
    print("=" * 60)

    from database.connections.postgres import AsyncPGPool

    try:
        pool = await AsyncPGPool.get_pool()

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ ML —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        print("\nüìä ML –°–ò–ì–ù–ê–õ–´ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å):")

        signals = await pool.fetch(
            """
            SELECT
                symbol,
                direction,
                confidence,
                strength,
                created_at,
                metadata
            FROM signals
            WHERE created_at > NOW() - INTERVAL '1 hour'
            ORDER BY created_at DESC
            LIMIT 20
        """
        )

        if signals:
            positive_count = 0
            negative_count = 0
            neutral_count = 0

            for signal in signals:
                direction = signal["direction"]
                if direction == "LONG":
                    positive_count += 1
                    emoji = "üü¢"
                elif direction == "SHORT":
                    negative_count += 1
                    emoji = "üî¥"
                else:
                    neutral_count += 1
                    emoji = "‚ö™"

                print(f"\n   {emoji} {signal['symbol']} - {direction}")
                print(f"      –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal['confidence']:.2%}")
                print(f"      –°–∏–ª–∞: {signal['strength']:.4f}")
                print(f"      –í—Ä–µ–º—è: {signal['created_at'].strftime('%H:%M:%S')}")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º metadata –µ—Å–ª–∏ –µ—Å—Ç—å
                if signal["metadata"]:
                    import json

                    meta = (
                        json.loads(signal["metadata"])
                        if isinstance(signal["metadata"], str)
                        else signal["metadata"]
                    )
                    if "predicted_return" in meta:
                        print(f"      –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: {meta['predicted_return']:.4f}")

            print("\n   üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"      - –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
            print(f"      - LONG (–ø–æ–∫—É–ø–∫–∞): {positive_count} üü¢")
            print(f"      - SHORT (–ø—Ä–æ–¥–∞–∂–∞): {negative_count} üî¥")
            print(f"      - NEUTRAL: {neutral_count} ‚ö™")
        else:
            print("   ‚ùå –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å")

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤
        print("\n\nüí± –û–†–î–ï–†–ê (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞):")

        orders = await pool.fetch(
            """
            SELECT
                symbol,
                side,
                order_type,
                price,
                quantity,
                status,
                created_at,
                filled_at,
                exchange_order_id
            FROM orders
            WHERE created_at > NOW() - INTERVAL '24 hours'
            ORDER BY created_at DESC
            LIMIT 10
        """
        )

        if orders:
            for order in orders:
                status_emoji = {
                    "new": "‚è≥",
                    "open": "‚è≥",
                    "filled": "‚úÖ",
                    "cancelled": "‚ùå",
                    "rejected": "‚ùå",
                }.get(order["status"].lower(), "‚ùì")

                print(
                    f"\n   {status_emoji} {order['symbol']} - {order['side']} {order['order_type']}"
                )
                print(f"      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order['quantity']}")
                if order["order_type"] == "LIMIT":
                    print(f"      –¶–µ–Ω–∞: ${order['price']}")
                print(f"      –°—Ç–∞—Ç—É—Å: {order['status']}")
                print(
                    f"      –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {order['created_at'].strftime('%H:%M:%S')}"
                )
                if order["filled_at"]:
                    print(
                        f"      –í—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {order['filled_at'].strftime('%H:%M:%S')}"
                    )
        else:
            print("   ‚ùå –ù–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞")

        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω
        print("\n\nüí≤ –¢–ï–ö–£–©–ò–ï –¶–ï–ù–´ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ):")

        prices = await pool.fetch(
            """
            SELECT DISTINCT ON (symbol)
                symbol,
                close as price,
                datetime,
                volume
            FROM raw_market_data
            WHERE interval_minutes = 15
            AND symbol IN ('BTCUSDT', 'ETHUSDT', 'SOLUSDT')
            ORDER BY symbol, datetime DESC
        """
        )

        for price_data in prices:
            print(
                f"   {price_data['symbol']}: ${price_data['price']:.2f} (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {price_data['datetime'].strftime('%H:%M')})"
            )

        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–π
        print("\n\nüìà –ü–û–ó–ò–¶–ò–ò:")

        positions = await pool.fetch(
            """
            SELECT
                symbol,
                side,
                quantity,
                entry_price,
                current_price,
                unrealized_pnl,
                created_at
            FROM positions
            WHERE status = 'open'
            ORDER BY created_at DESC
        """
        )

        if positions:
            for pos in positions:
                pnl_emoji = "üü¢" if pos["unrealized_pnl"] > 0 else "üî¥"
                print(f"\n   {pos['symbol']} - {pos['side']}")
                print(f"      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {pos['quantity']}")
                print(f"      –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${pos['entry_price']}")
                print(f"      –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${pos['current_price']}")
                print(f"      PnL: {pnl_emoji} ${pos['unrealized_pnl']:.2f}")
        else:
            print("   ‚ùå –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")

        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤
        print("\n\n‚öôÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –¢–û–†–ì–û–í–õ–ò:")

        from core.config.config_manager import get_global_config_manager

        config = get_global_config_manager().get_config()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤
        trading_config = config.get("trading", {})
        order_config = trading_config.get("order_execution", {})

        print(
            f"   –¢–∏–ø –æ—Ä–¥–µ—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {order_config.get('default_order_type', 'MARKET')}"
        )
        print(
            f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏–º–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞: {order_config.get('use_limit_orders', False)}"
        )
        print(
            f"   –û—Ç—Å—Ç—É–ø –¥–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {order_config.get('limit_order_offset', 0.0001):.4f}"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        ml_strategy_config = None
        for trader in config.get("traders", []):
            if trader.get("strategy") == "ml_signal":
                ml_strategy_config = trader.get("strategy_config", {})
                break

        if ml_strategy_config:
            print("\n   üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ML —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:")
            print(
                f"      –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–≥–Ω–∞–ª–æ–≤: {ml_strategy_config.get('signal_interval', 60)} —Å–µ–∫"
            )
            print(
                f"      –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {ml_strategy_config.get('min_confidence', 0.6):.0%}"
            )

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()
    finally:
        await AsyncPGPool.close_pool()

    print("\n" + "=" * 60)


if __name__ == "__main__":
    asyncio.run(check_signals_and_orders())
