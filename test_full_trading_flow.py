#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ BOT_AI_V3
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–µ—Å—å —Ü–∏–∫–ª –æ—Ç ML —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ Bybit
"""

import asyncio
import logging
import os
import sys
from datetime import datetime
from decimal import Decimal
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
TEST_CONFIG = {
    "max_position_size_usdt": 10,  # –ú–∞–∫—Å–∏–º—É–º $10 –Ω–∞ –ø–æ–∑–∏—Ü–∏—é
    "max_positions": 2,  # –ú–∞–∫—Å–∏–º—É–º 2 –ø–æ–∑–∏—Ü–∏–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    "stop_loss_percent": 2,  # 2% —Å—Ç–æ–ø-–ª–æ—Å—Å
    "take_profit_percent": 3,  # 3% —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
    "test_symbols": ["BTCUSDT", "ETHUSDT"],  # –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä—ã
    "dry_run": True,  # –ù–∞—á–∏–Ω–∞–µ–º —Å dry-run —Ä–µ–∂–∏–º–∞
}


class FullTradingFlowTest:
    def __init__(self):
        self.orchestrator = None
        self.exchange_client = None
        self.ml_signal_count = 0
        self.order_count = 0
        self.trade_count = 0
        self.pnl = Decimal("0")

    async def check_prerequisites(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
        logger.info("=" * 80)
        logger.info("üîç –ü–†–û–í–ï–†–ö–ê –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–• –£–°–õ–û–í–ò–ô")
        logger.info("=" * 80)

        checks_passed = True

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        logger.info("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π...")
        api_key = os.getenv("BYBIT_API_KEY")
        api_secret = os.getenv("BYBIT_API_SECRET")

        if not api_key or not api_secret:
            logger.error("‚ùå API –∫–ª—é—á–∏ Bybit –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env")
            return False

        logger.info("‚úÖ API –∫–ª—é—á–∏ –Ω–∞–π–¥–µ–Ω—ã")

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
        logger.info("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL...")
        try:
            import subprocess

            result = subprocess.run(
                [
                    "psql",
                    "-p",
                    "5555",
                    "-U",
                    "obertruper",
                    "-d",
                    "bot_trading_v3",
                    "-c",
                    "SELECT 1;",
                ],
                capture_output=True,
                text=True,
                env={**os.environ, "PGPASSWORD": os.getenv("PGPASSWORD", "")},
            )

            if result.returncode == 0:
                logger.info("‚úÖ PostgreSQL –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5555")
            else:
                logger.error("‚ùå PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ PostgreSQL: {e}")
            return False

        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –º–æ–¥—É–ª–µ–π
        logger.info("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        try:
            import ccxt
            import numpy
            import pandas
            import torch

            logger.info("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except ImportError as e:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–æ–¥—É–ª–∏: {e}")
            return False

        return checks_passed

    async def test_bybit_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit"""
        logger.info("\n" + "=" * 80)
        logger.info("üîó –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö BYBIT")
        logger.info("=" * 80)

        try:
            from exchanges.factory import ExchangeFactory

            factory = ExchangeFactory()
            self.exchange_client = factory.create_client(
                "bybit", os.getenv("BYBIT_API_KEY"), os.getenv("BYBIT_API_SECRET")
            )

            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            connected = await self.exchange_client.connect()
            if not connected:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Bybit")
                return False

            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit —É—Å–ø–µ—à–Ω–æ")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
            logger.info("\nüí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞...")
            balances = await self.exchange_client.get_balances()

            usdt_balance = balances.get("USDT", 0)
            logger.info(f"   USDT –±–∞–ª–∞–Ω—Å: ${usdt_balance}")

            if float(usdt_balance) < TEST_CONFIG["max_position_size_usdt"]:
                logger.warning(
                    f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT –¥–ª—è —Ç–µ—Å—Ç–∞ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º ${TEST_CONFIG['max_position_size_usdt']})"
                )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            logger.info("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            for symbol in TEST_CONFIG["test_symbols"]:
                ticker = await self.exchange_client.get_ticker(symbol)
                logger.info(f"   {symbol}: ${ticker.last_price}")

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Bybit: {e}")
            return False

    async def initialize_trading_system(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("\n" + "=" * 80)
        logger.info("üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –¢–û–†–ì–û–í–û–ô –°–ò–°–¢–ï–ú–´")
        logger.info("=" * 80)

        try:
            from core.config.config_manager import ConfigManager
            from core.system.orchestrator import SystemOrchestrator

            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞
            config_manager = ConfigManager()
            config = config_manager.get_config()

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            config["risk_management"]["position"]["max_position_size"] = (
                TEST_CONFIG["max_position_size_usdt"] / 100000
            )  # –í –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞
            config["risk_management"]["position"]["default_stop_loss"] = (
                TEST_CONFIG["stop_loss_percent"] / 100
            )
            config["risk_management"]["position"]["default_take_profit"] = (
                TEST_CONFIG["take_profit_percent"] / 100
            )
            config["risk_management"]["global"]["max_open_positions"] = TEST_CONFIG[
                "max_positions"
            ]

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∞
            config["ml"]["symbols"] = TEST_CONFIG["test_symbols"]

            # –°–æ–∑–¥–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
            self.orchestrator = SystemOrchestrator()

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
            await self.orchestrator.initialize()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            status = await self.orchestrator.get_system_status()
            logger.info("\nüìä –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
            for component, is_ready in status.items():
                status_icon = "‚úÖ" if is_ready else "‚ùå"
                logger.info(f"   {status_icon} {component}")

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
            import traceback

            traceback.print_exc()
            return False

    async def start_ml_signal_generation(self):
        """–ó–∞–ø—É—Å–∫ ML –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        logger.info("\n" + "=" * 80)
        logger.info("ü§ñ –ó–ê–ü–£–°–ö ML –ì–ï–ù–ï–†–ê–¶–ò–ò –°–ò–ì–ù–ê–õ–û–í")
        logger.info("=" * 80)

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
            await self.orchestrator.start()
            logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")

            # –ñ–¥–µ–º –ø–µ—Ä–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            logger.info("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ML —Å–∏–≥–Ω–∞–ª–æ–≤...")
            logger.info("   (ML –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)")

            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Å–∏–≥–Ω–∞–ª—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –º–∏–Ω—É—Ç
            start_time = datetime.now()
            monitoring_duration = 180  # 3 –º–∏–Ω—É—Ç—ã

            while (datetime.now() - start_time).total_seconds() < monitoring_duration:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if hasattr(self.orchestrator, "trading_engine"):
                    metrics = self.orchestrator.trading_engine.get_metrics()

                    if metrics.signals_processed > self.ml_signal_count:
                        new_signals = metrics.signals_processed - self.ml_signal_count
                        self.ml_signal_count = metrics.signals_processed
                        logger.info(f"\nüéØ –ù–æ–≤—ã—Ö ML —Å–∏–≥–Ω–∞–ª–æ–≤: {new_signals}")
                        logger.info(f"   –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.ml_signal_count}")

                    if metrics.orders_executed > self.order_count:
                        new_orders = metrics.orders_executed - self.order_count
                        self.order_count = metrics.orders_executed
                        logger.info(f"\nüìù –ù–æ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {new_orders}")
                        logger.info(f"   –í—Å–µ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–æ: {self.order_count}")

                await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return False

    async def monitor_trades(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
        logger.info("\n" + "=" * 80)
        logger.info("üìà –ú–û–ù–ò–¢–û–†–ò–ù–ì –¢–û–†–ì–û–í–õ–ò")
        logger.info("=" * 80)

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            if self.exchange_client:
                positions = await self.exchange_client.get_positions()

                active_positions = [
                    p for p in positions if float(p.get("size", 0)) != 0
                ]

                if active_positions:
                    logger.info(f"\nüíº –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ ({len(active_positions)}):")
                    for pos in active_positions:
                        symbol = pos.get("symbol")
                        size = pos.get("size")
                        entry_price = pos.get("entry_price")
                        unrealized_pnl = pos.get("unrealized_pnl", 0)

                        logger.info(f"   {symbol}: {size} @ ${entry_price}")
                        logger.info(f"   –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL: ${unrealized_pnl}")
                else:
                    logger.info("\nüí§ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π")

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –∏–∑ –ë–î
            from sqlalchemy import desc, select

            from database.connections import get_async_db
            from database.models.base_models import Order

            async with get_async_db() as db:
                result = await db.execute(
                    select(Order).order_by(desc(Order.created_at)).limit(5)
                )
                recent_orders = result.scalars().all()

                if recent_orders:
                    logger.info(f"\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ ({len(recent_orders)}):")
                    for order in recent_orders:
                        logger.info(
                            f"   {order.symbol} {order.side.value} "
                            f"{order.quantity} @ {order.price or 'MARKET'} "
                            f"- {order.status.value}"
                        )

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            return False

    async def run_full_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        logger.info("\n" + "=" * 80)
        logger.info("üéØ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ê –¢–û–†–ì–û–í–õ–ò")
        logger.info(f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        logger.info("=" * 80)

        logger.info("\n‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∞:")
        logger.info(f"   –†–µ–∂–∏–º: {'DRY RUN' if TEST_CONFIG['dry_run'] else 'LIVE'}")
        logger.info(
            f"   –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${TEST_CONFIG['max_position_size_usdt']}"
        )
        logger.info(f"   –ú–∞–∫—Å. –ø–æ–∑–∏—Ü–∏–π: {TEST_CONFIG['max_positions']}")
        logger.info(f"   Stop Loss: {TEST_CONFIG['stop_loss_percent']}%")
        logger.info(f"   Take Profit: {TEST_CONFIG['take_profit_percent']}%")
        logger.info(f"   –°–∏–º–≤–æ–ª—ã: {', '.join(TEST_CONFIG['test_symbols'])}")

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        if not await self.check_prerequisites():
            logger.error("\n‚ùå –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã!")
            return

        # 2. –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit
        if not await self.test_bybit_connection():
            logger.error("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Bybit!")
            return

        # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        if not await self.initialize_trading_system():
            logger.error("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É!")
            return

        # 4. –ó–∞–ø—É—Å–∫ ML –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        if not await self.start_ml_signal_generation():
            logger.error("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤!")
            return

        # 5. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤–ª–∏
        logger.info("\nüîÑ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        logger.info("   (–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")

        try:
            while True:
                await self.monitor_trades()
                await asyncio.sleep(30)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

        except KeyboardInterrupt:
            logger.info("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")

        # 6. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        if self.orchestrator:
            await self.orchestrator.stop()
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

        # 7. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        logger.info("\n" + "=" * 80)
        logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        logger.info("=" * 80)
        logger.info(f"üéØ ML —Å–∏–≥–Ω–∞–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.ml_signal_count}")
        logger.info(f"üìù –û—Ä–¥–µ—Ä–æ–≤ –∏—Å–ø–æ–ª–Ω–µ–Ω–æ: {self.order_count}")
        logger.info(f"üí∞ –ò—Ç–æ–≥–æ–≤—ã–π PnL: ${self.pnl}")
        logger.info("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    test = FullTradingFlowTest()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    import sys

    if len(sys.argv) > 1 and sys.argv[1] == "--auto":
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        TEST_CONFIG["dry_run"] = True
        logger.info("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ DRY RUN")
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        print("\n" + "=" * 60)
        print("üéØ BOT_AI_V3 - –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏")
        print("=" * 60)
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞:")
        print("1. DRY RUN (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤)")
        print("2. LIVE (—Ä–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏)")
        print("3. –í—ã—Ö–æ–¥")

        try:
            choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()
        except EOFError:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º DRY RUN
            logger.info("üìã –ù–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º DRY RUN —Ä–µ–∂–∏–º")
            choice = "1"

        if choice == "1":
            TEST_CONFIG["dry_run"] = True
            logger.info("‚úÖ –í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º DRY RUN")
        elif choice == "2":
            TEST_CONFIG["dry_run"] = False
            logger.warning("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –†–ï–ê–õ–¨–ù–´–ï –æ—Ä–¥–µ—Ä–∞!")
            try:
                confirm = input("–í—ã —É–≤–µ—Ä–µ–Ω—ã? (yes/no): ").strip().lower()
                if confirm != "yes":
                    logger.info("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    return
            except EOFError:
                logger.info("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ")
                return
        else:
            logger.info("üëã –í—ã—Ö–æ–¥")
            return

    await test.run_full_test()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
    except Exception as e:
        logger.error(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()
