#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –∂–∏–≤—ã—Ö ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∏–∑ –ª–æ–≥–æ–≤
"""

# –î–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–≥–æ–≤
signals = [
    {
        "symbol": "XRPUSDT",
        "type": "SHORT",
        "confidence": 0.6404619688168168,
        "sl": 3.177258,
        "tp": 3.082884,
        "price": 3.1458,
    },
    {
        "symbol": "DOTUSDT",
        "type": "SHORT",
        "confidence": 0.657463799614925,
        "sl": 3.9398,
        "tp": 3.822784,
        "price": 3.9008,
    },
    {
        "symbol": "ADAUSDT",
        "type": "SHORT",
        "confidence": 0.6453357726335526,
        "sl": 0.786992,
        "tp": 0.763616,
        "price": 0.7792,
    },
    {
        "symbol": "BNBUSDT",
        "type": "SHORT",
        "confidence": 0.65,
        "sl": 815.777,
        "tp": 791.546,
        "price": 803.0,
    },  # –ò–∑ –ª–æ–≥–æ–≤
]

print("üìä –ê–ù–ê–õ–ò–ó ML –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ô –ò–ó –ñ–ò–í–û–ô –¢–û–†–ì–û–í–õ–ò:")
print("=" * 60)

total_confidence = 0
risk_rewards = []
all_short = True

for sig in signals:
    print(f"\n{sig['symbol']}:")
    print(f"  –°–∏–≥–Ω–∞–ª: {sig['type']}")
    print(f"  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {sig['confidence']:.2%}")
    print(f"  –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${sig['price']:.4f}")

    # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –¥–ª—è SL/TP
    if sig["type"] == "SHORT":
        sl_pct = (sig["sl"] / sig["price"] - 1) * 100
        tp_pct = (sig["tp"] / sig["price"] - 1) * 100
        print(f"  Stop Loss: ${sig['sl']:.4f} ({sl_pct:+.1f}%)")
        print(f"  Take Profit: ${sig['tp']:.4f} ({tp_pct:+.1f}%)")

        # Risk/Reward –¥–ª—è —à–æ—Ä—Ç–∞
        risk = abs(sig["sl"] - sig["price"])
        reward = abs(sig["price"] - sig["tp"])
    else:
        sl_pct = (sig["sl"] / sig["price"] - 1) * 100
        tp_pct = (sig["tp"] / sig["price"] - 1) * 100
        print(f"  Stop Loss: ${sig['sl']:.4f} ({sl_pct:+.1f}%)")
        print(f"  Take Profit: ${sig['tp']:.4f} ({tp_pct:+.1f}%)")

        # Risk/Reward –¥–ª—è –ª–æ–Ω–≥–∞
        risk = abs(sig["price"] - sig["sl"])
        reward = abs(sig["tp"] - sig["price"])
        all_short = False

    rr = reward / risk if risk > 0 else 0
    print(f"  Risk/Reward: {rr:.2f}:1")

    risk_rewards.append(rr)
    total_confidence += sig["confidence"]

avg_confidence = total_confidence / len(signals)
avg_rr = sum(risk_rewards) / len(risk_rewards)

print("\n" + "=" * 60)
print("üìà –ê–ù–ê–õ–ò–ó –†–ê–ë–û–¢–´ –ú–û–î–ï–õ–ò:")
print("=" * 60)

print("\n‚úÖ –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–ï –ú–û–ú–ï–ù–¢–´:")
print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.1%} (–ø—Ä–∏–µ–º–ª–µ–º–æ)")
print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ Risk/Reward: {avg_rr:.2f}:1 (—Ö–æ—Ä–æ—à–æ)")
print("  ‚Ä¢ –ú–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–∞—Ä")
print("  ‚Ä¢ SL/TP —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

print("\n‚ö†Ô∏è –í–´–Ø–í–õ–ï–ù–ù–´–ï –û–°–û–ë–ï–ù–ù–û–°–¢–ò:")
if all_short:
    print("  ‚Ä¢ –í—Å–µ —Å–∏–≥–Ω–∞–ª—ã SHORT - –º–æ–¥–µ–ª—å –≤–∏–¥–∏—Ç –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥")
    print("  ‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ, –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞ –Ω–∞ –ø–∞–¥–∞—é—â–∏–π —Ä—ã–Ω–æ–∫")
else:
    print("  ‚Ä¢ –ï—Å—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")

print("  ‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ–∫–æ–ª–æ 65% - –º–æ–∂–Ω–æ –ø–æ–≤—ã—Å–∏—Ç—å –ø–æ—Ä–æ–≥ –¥–æ 70%")
print("  ‚Ä¢ SL –æ–±—ã—á–Ω–æ 1-2% - –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥")

print("\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ù–ê–°–¢–†–û–ô–ö–ï:")
print("  1. –£–≤–µ–ª–∏—á–∏—Ç—å min_confidence_threshold –¥–æ 0.7 –≤ config/ml/ml_config.yaml")
print("  2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤ –≤ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
print("  3. –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö SL/TP")
print("  4. –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ Risk/Reward –¥–æ 2.5:1 –º–∏–Ω–∏–º—É–º")

print("\nüìä –í–´–í–û–î:")
print("–ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –≤—ã–¥–∞–µ—Ç –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.")
print("–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (LONG/SHORT) –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
print("SL/TP —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∏–∑ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ –æ—Ä–¥–µ—Ä–∞.")
print("–û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ - –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã SHORT, –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –æ–±—É—á–µ–Ω–∏—è.")
