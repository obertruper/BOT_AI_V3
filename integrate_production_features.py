#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è production feature engineering –∏–∑ –æ–±—É—á–∞—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ –∞–∞–∞.py
–≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç 100% —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –º–µ–∂–¥—É –æ–±—É—á–µ–Ω–∏–µ–º –∏ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–æ–º
"""

import os
import shutil
from datetime import datetime


def integrate_production_features():
    """–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç production feature engineering –≤ ML pipeline"""

    print("=" * 80)
    print("üöÄ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø PRODUCTION FEATURE ENGINEERING")
    print("=" * 80)

    # 1. –°–æ–∑–¥–∞–µ–º backup —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
    backup_time = datetime.now().strftime("%Y%m%d_%H%M%S")
    current_file = "ml/logic/archive_old_versions/feature_engineering_v2.py"
    backup_file = f"ml/logic/feature_engineering_v2_backup_{backup_time}.py"

    if os.path.exists(current_file):
        shutil.copy(current_file, backup_file)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω backup: {backup_file}")

    # 2. –û–±–Ω–æ–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤ ML manager
    ml_manager_file = "ml/ml_manager.py"

    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open(ml_manager_file) as f:
        content = f.read()

    # –ó–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç
    old_import = "from ml.logic.feature_engineering_v2 import FeatureEngineer"
    new_import = "from ml.logic.feature_engineering_production import ProductionFeatureEngineer as FeatureEngineer"

    if old_import in content:
        content = content.replace(old_import, new_import)
        with open(ml_manager_file, "w") as f:
            f.write(content)
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –≤ {ml_manager_file}")

    # 3. –û–±–Ω–æ–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤ ML signal processor
    signal_processor_file = "ml/ml_signal_processor.py"

    if os.path.exists(signal_processor_file):
        with open(signal_processor_file) as f:
            content = f.read()

        if old_import in content:
            content = content.replace(old_import, new_import)
            with open(signal_processor_file, "w") as f:
                f.write(content)
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –≤ {signal_processor_file}")

    # 4. –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è 270 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    config_content = """# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è 270 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –æ–±—É—á–µ–Ω–∏—è
EXPECTED_FEATURES = 270

# –°–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ (–Ω–µ –ø–æ–¥–∞–≤–∞—Ç—å –≤ –º–æ–¥–µ–ª—å)
SERVICE_COLUMNS = [
    'datetime', 'symbol', 'open', 'high', 'low', 'close', 'volume',
    'timestamp', 'id', 'exchange'
]

# –¶–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–Ω–µ –ø–æ–¥–∞–≤–∞—Ç—å –≤ –º–æ–¥–µ–ª—å)
TARGET_VARIABLES = [
    'future_return_15m', 'future_return_1h', 'future_return_4h', 'future_return_12h',
    'direction_15m', 'direction_1h', 'direction_4h', 'direction_12h',
    'will_reach_2pct_4h', 'will_reach_5pct_12h', 'will_reach_10pct_24h',
    'max_drawdown_4h', 'max_rally_4h', 'max_drawdown_12h', 'max_rally_12h',
    'volatility_1h', 'volatility_4h', 'volatility_12h',
    'best_action'
]

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
SEQUENCE_LENGTH = 168  # 42 —á–∞—Å–∞ –ø—Ä–∏ 15-–º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–∞—Ö
BATCH_SIZE = 32

def validate_features(df):
    \"\"\"–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤\"\"\"
    feature_cols = [col for col in df.columns 
                   if col not in SERVICE_COLUMNS 
                   and col not in TARGET_VARIABLES]
    
    actual_count = len(feature_cols)
    if actual_count != EXPECTED_FEATURES:
        raise ValueError(f"–û–∂–∏–¥–∞–µ—Ç—Å—è {EXPECTED_FEATURES} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ {actual_count}")
    
    return feature_cols
"""

    with open("ml/config/production_features_config.py", "w") as f:
        f.write(config_content)
    print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è production_features_config.py")

    # 5. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç
    test_content = """#!/usr/bin/env python3
\"\"\"
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ production feature engineering
\"\"\"

import pandas as pd
import numpy as np
from ml.logic.feature_engineering_production import ProductionFeatureEngineer
from ml.config.production_features_config import validate_features, EXPECTED_FEATURES

def test_production_features():
    \"\"\"–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–∏–∑–Ω–∞–∫–æ–≤\"\"\"
    
    print("=" * 80)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PRODUCTION FEATURE ENGINEERING")
    print("=" * 80)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    dates = pd.date_range(start='2024-01-01', periods=200, freq='15min')
    test_data = pd.DataFrame({
        'datetime': dates,
        'symbol': 'BTCUSDT',
        'open': np.random.uniform(40000, 45000, 200),
        'high': np.random.uniform(40500, 45500, 200),
        'low': np.random.uniform(39500, 44500, 200),
        'close': np.random.uniform(40000, 45000, 200),
        'volume': np.random.uniform(100, 1000, 200)
    })
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
    feature_engineer = ProductionFeatureEngineer()
    df_with_features = feature_engineer.create_features(test_data)
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    try:
        feature_cols = validate_features(df_with_features)
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(feature_cols)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        print(f"‚úÖ –û–∂–∏–¥–∞–ª–æ—Å—å {EXPECTED_FEATURES} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        
        if len(feature_cols) == EXPECTED_FEATURES:
            print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É")
        else:
            print(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –†–∞–∑–Ω–∏—Ü–∞ –≤ {abs(len(feature_cols) - EXPECTED_FEATURES)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
            
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        
    return df_with_features

if __name__ == "__main__":
    test_production_features()
"""

    with open("test_production_features.py", "w") as f:
        f.write(test_content)
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç test_production_features.py")

    print("\n" + "=" * 80)
    print("üìä –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 80)
    print("\n–î–∞–ª—å–Ω–µ–π—à–∏–µ —à–∞–≥–∏:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç: python test_production_features.py")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫")
    print(
        "3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ –º–µ—Ç–æ–¥ create_features() –≤ feature_engineering_production.py"
    )
    print("\n‚úÖ Production feature engineering –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")


if __name__ == "__main__":
    integrate_production_features()
